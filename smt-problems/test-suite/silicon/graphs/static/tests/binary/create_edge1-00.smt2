(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:13:00
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<$Snap> 0)
(declare-sort TrClo 0)
(declare-sort __FieldEnum__ 0)
(declare-sort Edge 0)
(declare-sort $FVF<l> 0)
(declare-sort $FVF<r> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
(declare-fun $SortWrappers.__FieldEnum__To$Snap (__FieldEnum__) $Snap)
(declare-fun $SortWrappers.$SnapTo__FieldEnum__ ($Snap) __FieldEnum__)
(assert (forall ((x __FieldEnum__)) (!
    (= x ($SortWrappers.$SnapTo__FieldEnum__($SortWrappers.__FieldEnum__To$Snap x)))
    :pattern (($SortWrappers.__FieldEnum__To$Snap x))
    :qid |$Snap.$SnapTo__FieldEnum__To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.__FieldEnum__To$Snap($SortWrappers.$SnapTo__FieldEnum__ x)))
    :pattern (($SortWrappers.$SnapTo__FieldEnum__ x))
    :qid |$Snap.__FieldEnum__To$SnapTo__FieldEnum__|
    )))
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<l>To$Snap ($FVF<l>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<l> ($Snap) $FVF<l>)
(assert (forall ((x $FVF<l>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<l>($SortWrappers.$FVF<l>To$Snap x)))
    :pattern (($SortWrappers.$FVF<l>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<l>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<l>To$Snap($SortWrappers.$SnapTo$FVF<l> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<l> x))
    :qid |$Snap.$FVF<l>To$SnapTo$FVF<l>|
    )))
(declare-fun $SortWrappers.$FVF<r>To$Snap ($FVF<r>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<r> ($Snap) $FVF<r>)
(assert (forall ((x $FVF<r>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<r>($SortWrappers.$FVF<r>To$Snap x)))
    :pattern (($SortWrappers.$FVF<r>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<r>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<r>To$Snap($SortWrappers.$SnapTo$FVF<r> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<r> x))
    :qid |$Snap.$FVF<r>To$SnapTo$FVF<r>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_skolem_diff (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-const __left__<__FieldEnum__> __FieldEnum__)
(declare-const __right__<__FieldEnum__> __FieldEnum__)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_spath<Bool> (Set<Edge> Set<$Ref> $Ref) Bool)
(declare-fun apply_noExit<Bool> (Set<Edge> Set<$Ref> Set<$Ref>) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
; /field_value_functions_declarations.smt2 [l: Ref]
(declare-fun $FVF.domain_l ($FVF<l>) Set<$Ref>)
(declare-fun $FVF.lookup_l ($FVF<l> $Ref) $Ref)
(declare-fun $FVF.after_l ($FVF<l> $FVF<l>) Bool)
(declare-fun $FVF.loc_l ($Ref $Ref) Bool)
(declare-fun $FVF.perm_l ($FPM $Ref) $Perm)
(declare-const $fvfTOP_l $FVF<l>)
; /field_value_functions_declarations.smt2 [r: Ref]
(declare-fun $FVF.domain_r ($FVF<r>) Set<$Ref>)
(declare-fun $FVF.lookup_r ($FVF<r> $Ref) $Ref)
(declare-fun $FVF.after_r ($FVF<r> $FVF<r>) Bool)
(declare-fun $FVF.loc_r ($Ref $Ref) Bool)
(declare-fun $FVF.perm_r ($FPM $Ref) $Perm)
(declare-const $fvfTOP_r $FVF<r>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
(declare-fun apply_TCFraming ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
(assert (distinct __left__<__FieldEnum__> __right__<__FieldEnum__>))
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Bool)) (!
  (not (Set_in o (as Set_empty  Set<Bool>)))
  :pattern ((Set_in o (as Set_empty  Set<Bool>)))
  )))
(assert (forall ((s Set<Bool>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Bool))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Bool)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Bool) (o Bool)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Bool)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (o Bool)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (Set_subset a b)
    (forall ((o Bool)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (U Set<$Ref>) (M Set<$Ref>)) (!
  (=>
    (and
      (apply_noExit<Bool> EG U M)
      (forall ((u $Ref) (v $Ref)) (!
        (=>
          (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
          (not (edge<Bool> EG u v)))
        :pattern ((edge<Bool> EG u v))
        :pattern ((Set_in u M) (Set_in v M))
        )))
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
        (not (exists_path<Bool> EG u v)))
      :pattern ((exists_path<Bool> EG u v))
      :pattern ((Set_in u M) (Set_in v M))
      )))
  :pattern ((apply_noExit<Bool> EG U M))
  :qid |prog.ax_NoExit|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
; /field_value_functions_axioms.smt2 [l: Ref]
(assert (forall ((vs $FVF<l>) (ws $FVF<l>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_l vs) ($FVF.domain_l ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_l vs))
            (= ($FVF.lookup_l vs x) ($FVF.lookup_l ws x)))
          :pattern (($FVF.lookup_l vs x) ($FVF.lookup_l ws x))
          :qid |qp.$FVF<l>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<l>To$Snap vs)
              ($SortWrappers.$FVF<l>To$Snap ws)
              )
    :qid |qp.$FVF<l>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_l pm r))
    :pattern (($FVF.perm_l pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_l f r) true)
    :pattern (($FVF.loc_l f r)))))
; /field_value_functions_axioms.smt2 [r: Ref]
(assert (forall ((vs $FVF<r>) (ws $FVF<r>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_r vs) ($FVF.domain_r ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_r vs))
            (= ($FVF.lookup_r vs x) ($FVF.lookup_r ws x)))
          :pattern (($FVF.lookup_r vs x) ($FVF.lookup_r ws x))
          :qid |qp.$FVF<r>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<r>To$Snap vs)
              ($SortWrappers.$FVF<r>To$Snap ws)
              )
    :qid |qp.$FVF<r>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_r pm r))
    :pattern (($FVF.perm_r pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_r f r) true)
    :pattern (($FVF.loc_r f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@7@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@8@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@12@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@13@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@6@00 ($Snap Set<$Ref>) $FVF<l>)
(declare-fun sm@11@00 ($Snap Set<$Ref>) $FVF<r>)
(declare-fun sm@9@00 ($Snap Set<$Ref>) $FVF<l>)
(declare-fun sm@14@00 ($Snap Set<$Ref>) $FVF<r>)
(declare-fun inv@24@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@25@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@29@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@30@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@33@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@34@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@37@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@38@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@46@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@47@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@50@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@51@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@55@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@56@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@60@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@61@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@67@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@68@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@72@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@73@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@77@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@78@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@82@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@83@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@89@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@90@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@94@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@95@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@99@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@100@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@104@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@105@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@111@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@112@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@116@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@117@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@121@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@122@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@126@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@127@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@23@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@28@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@26@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@31@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@48@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@53@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@58@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@63@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@70@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@75@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@80@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@85@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@92@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@97@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@102@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@107@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@114@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@119@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@124@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@129@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@5@00 $Ref)) (!
      (=>
        (Set_in n@5@00 refs@0@00)
        (and
          (= (inv@7@00 s@$ refs@0@00 n@5@00) n@5@00)
          (img@8@00 s@$ refs@0@00 n@5@00)))
      :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) n@5@00) n@5@00))
      :qid |quant-u-5|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@8@00 s@$ refs@0@00 r)
          (Set_in (inv@7@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@7@00 s@$ refs@0@00 r) r))
      :pattern ((inv@7@00 s@$ refs@0@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@10@00 $Ref)) (!
      (=>
        (Set_in n@10@00 refs@0@00)
        (and
          (= (inv@12@00 s@$ refs@0@00 n@10@00) n@10@00)
          (img@13@00 s@$ refs@0@00 n@10@00)))
      :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) n@10@00) n@10@00))
      :qid |quant-u-8|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@13@00 s@$ refs@0@00 r)
          (Set_in (inv@12@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@12@00 s@$ refs@0@00 r) r))
      :pattern ((inv@12@00 s@$ refs@0@00 r))
      :qid |r-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_l (sm@6@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_r (sm@11@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@8@00 s@$ refs@0@00 r)
          (Set_in (inv@7@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_l (sm@9@00 s@$ refs@0@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@9@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_l (sm@9@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@13@00 s@$ refs@0@00 r)
          (Set_in (inv@12@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_r (sm@14@00 s@$ refs@0@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) r)))
      :pattern (($FVF.lookup_r (sm@14@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) r) r)
      :pattern (($FVF.lookup_r (sm@14@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef5|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (and
        (forall ((p $Ref) (s $Ref)) (!
          (=
            (and
              (Set_in p refs@0@00)
              (and
                (Set_in s refs@0@00)
                (or
                  (= ($FVF.lookup_l (sm@9@00 s@$ refs@0@00) p) s)
                  (= ($FVF.lookup_r (sm@14@00 s@$ refs@0@00) p) s))))
            (Set_in (create_edge<Edge> p s) result@1@00))
          :pattern ((create_edge<Edge> p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in p refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in s refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in p refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (=
    (apply_TCFraming%limited s@$ g0@2@00 g1@3@00)
    (apply_TCFraming s@$ g0@2@00 g1@3@00))
  :pattern ((apply_TCFraming s@$ g0@2@00 g1@3@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (apply_TCFraming%stateless g0@2@00 g1@3@00)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (and
    (forall ((n@22@00 $Ref)) (!
      (=>
        (Set_in n@22@00 g0@2@00)
        (and
          (= (inv@24@00 s@$ g0@2@00 g1@3@00 n@22@00) n@22@00)
          (img@25@00 s@$ g0@2@00 g1@3@00 n@22@00)))
      :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) n@22@00) n@22@00))
      :qid |quant-u-15|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@25@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@24@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@24@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@27@00 $Ref)) (!
      (=>
        (Set_in n@27@00 g0@2@00)
        (and
          (= (inv@29@00 s@$ g0@2@00 g1@3@00 n@27@00) n@27@00)
          (img@30@00 s@$ g0@2@00 g1@3@00 n@27@00)))
      :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) n@27@00) n@27@00))
      :qid |quant-u-18|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@30@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@29@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@29@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@32@00 $Ref)) (!
      (=>
        (Set_in n@32@00 g1@3@00)
        (and
          (= (inv@33@00 s@$ g0@2@00 g1@3@00 n@32@00) n@32@00)
          (img@34@00 s@$ g0@2@00 g1@3@00 n@32@00)))
      :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) n@32@00) n@32@00))
      :qid |quant-u-21|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@34@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@33@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@33@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@36@00 $Ref)) (!
      (=>
        (Set_in n@36@00 g1@3@00)
        (and
          (= (inv@37@00 s@$ g0@2@00 g1@3@00 n@36@00) n@36@00)
          (img@38@00 s@$ g0@2@00 g1@3@00 n@36@00)))
      :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) n@36@00) n@36@00))
      :qid |quant-u-25|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@38@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@37@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@37@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@45@00 $Ref)) (!
      (=>
        (Set_in n@45@00 g0@2@00)
        (and
          (= (inv@46@00 s@$ g0@2@00 g1@3@00 n@45@00) n@45@00)
          (img@47@00 s@$ g0@2@00 g1@3@00 n@45@00)))
      :pattern ((Set_in n@45@00 g0@2@00))
      :pattern ((inv@46@00 s@$ g0@2@00 g1@3@00 n@45@00))
      :pattern ((img@47@00 s@$ g0@2@00 g1@3@00 n@45@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@47@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@46@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@46@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@49@00 $Ref)) (!
      (=>
        (Set_in n@49@00 g0@2@00)
        (and
          (= (inv@50@00 s@$ g0@2@00 g1@3@00 n@49@00) n@49@00)
          (img@51@00 s@$ g0@2@00 g1@3@00 n@49@00)))
      :pattern ((Set_in n@49@00 g0@2@00))
      :pattern ((inv@50@00 s@$ g0@2@00 g1@3@00 n@49@00))
      :pattern ((img@51@00 s@$ g0@2@00 g1@3@00 n@49@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@51@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@50@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@50@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@54@00 $Ref)) (!
      (=>
        (Set_in n@54@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@55@00 s@$ g0@2@00 g1@3@00 n@54@00) n@54@00)
          (img@56@00 s@$ g0@2@00 g1@3@00 n@54@00)))
      :pattern ((Set_in n@54@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@55@00 s@$ g0@2@00 g1@3@00 n@54@00))
      :pattern ((img@56@00 s@$ g0@2@00 g1@3@00 n@54@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@56@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@55@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@55@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@59@00 $Ref)) (!
      (=>
        (Set_in n@59@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@60@00 s@$ g0@2@00 g1@3@00 n@59@00) n@59@00)
          (img@61@00 s@$ g0@2@00 g1@3@00 n@59@00)))
      :pattern ((Set_in n@59@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@60@00 s@$ g0@2@00 g1@3@00 n@59@00))
      :pattern ((img@61@00 s@$ g0@2@00 g1@3@00 n@59@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@61@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@60@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@60@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@66@00 $Ref)) (!
      (=>
        (Set_in n@66@00 g1@3@00)
        (and
          (= (inv@67@00 s@$ g0@2@00 g1@3@00 n@66@00) n@66@00)
          (img@68@00 s@$ g0@2@00 g1@3@00 n@66@00)))
      :pattern ((Set_in n@66@00 g1@3@00))
      :pattern ((inv@67@00 s@$ g0@2@00 g1@3@00 n@66@00))
      :pattern ((img@68@00 s@$ g0@2@00 g1@3@00 n@66@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@68@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@67@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@67@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@71@00 $Ref)) (!
      (=>
        (Set_in n@71@00 g1@3@00)
        (and
          (= (inv@72@00 s@$ g0@2@00 g1@3@00 n@71@00) n@71@00)
          (img@73@00 s@$ g0@2@00 g1@3@00 n@71@00)))
      :pattern ((Set_in n@71@00 g1@3@00))
      :pattern ((inv@72@00 s@$ g0@2@00 g1@3@00 n@71@00))
      :pattern ((img@73@00 s@$ g0@2@00 g1@3@00 n@71@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@73@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@72@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@72@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@76@00 $Ref)) (!
      (=>
        (Set_in n@76@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@77@00 s@$ g0@2@00 g1@3@00 n@76@00) n@76@00)
          (img@78@00 s@$ g0@2@00 g1@3@00 n@76@00)))
      :pattern ((Set_in n@76@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@77@00 s@$ g0@2@00 g1@3@00 n@76@00))
      :pattern ((img@78@00 s@$ g0@2@00 g1@3@00 n@76@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@78@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@77@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@77@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@81@00 $Ref)) (!
      (=>
        (Set_in n@81@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@82@00 s@$ g0@2@00 g1@3@00 n@81@00) n@81@00)
          (img@83@00 s@$ g0@2@00 g1@3@00 n@81@00)))
      :pattern ((Set_in n@81@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@82@00 s@$ g0@2@00 g1@3@00 n@81@00))
      :pattern ((img@83@00 s@$ g0@2@00 g1@3@00 n@81@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@83@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@82@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@82@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@88@00 $Ref)) (!
      (=>
        (Set_in n@88@00 g0@2@00)
        (and
          (= (inv@89@00 s@$ g0@2@00 g1@3@00 n@88@00) n@88@00)
          (img@90@00 s@$ g0@2@00 g1@3@00 n@88@00)))
      :pattern ((Set_in n@88@00 g0@2@00))
      :pattern ((inv@89@00 s@$ g0@2@00 g1@3@00 n@88@00))
      :pattern ((img@90@00 s@$ g0@2@00 g1@3@00 n@88@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@90@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@89@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@89@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@93@00 $Ref)) (!
      (=>
        (Set_in n@93@00 g0@2@00)
        (and
          (= (inv@94@00 s@$ g0@2@00 g1@3@00 n@93@00) n@93@00)
          (img@95@00 s@$ g0@2@00 g1@3@00 n@93@00)))
      :pattern ((Set_in n@93@00 g0@2@00))
      :pattern ((inv@94@00 s@$ g0@2@00 g1@3@00 n@93@00))
      :pattern ((img@95@00 s@$ g0@2@00 g1@3@00 n@93@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@95@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@94@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@94@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@98@00 $Ref)) (!
      (=>
        (Set_in n@98@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@99@00 s@$ g0@2@00 g1@3@00 n@98@00) n@98@00)
          (img@100@00 s@$ g0@2@00 g1@3@00 n@98@00)))
      :pattern ((Set_in n@98@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@99@00 s@$ g0@2@00 g1@3@00 n@98@00))
      :pattern ((img@100@00 s@$ g0@2@00 g1@3@00 n@98@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@100@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@99@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@99@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@103@00 $Ref)) (!
      (=>
        (Set_in n@103@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@104@00 s@$ g0@2@00 g1@3@00 n@103@00) n@103@00)
          (img@105@00 s@$ g0@2@00 g1@3@00 n@103@00)))
      :pattern ((Set_in n@103@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@104@00 s@$ g0@2@00 g1@3@00 n@103@00))
      :pattern ((img@105@00 s@$ g0@2@00 g1@3@00 n@103@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@105@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@104@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@104@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@110@00 $Ref)) (!
      (=>
        (Set_in n@110@00 g1@3@00)
        (and
          (= (inv@111@00 s@$ g0@2@00 g1@3@00 n@110@00) n@110@00)
          (img@112@00 s@$ g0@2@00 g1@3@00 n@110@00)))
      :pattern ((Set_in n@110@00 g1@3@00))
      :pattern ((inv@111@00 s@$ g0@2@00 g1@3@00 n@110@00))
      :pattern ((img@112@00 s@$ g0@2@00 g1@3@00 n@110@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@112@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@111@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@111@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@115@00 $Ref)) (!
      (=>
        (Set_in n@115@00 g1@3@00)
        (and
          (= (inv@116@00 s@$ g0@2@00 g1@3@00 n@115@00) n@115@00)
          (img@117@00 s@$ g0@2@00 g1@3@00 n@115@00)))
      :pattern ((Set_in n@115@00 g1@3@00))
      :pattern ((inv@116@00 s@$ g0@2@00 g1@3@00 n@115@00))
      :pattern ((img@117@00 s@$ g0@2@00 g1@3@00 n@115@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@117@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@116@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@116@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@120@00 $Ref)) (!
      (=>
        (Set_in n@120@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@121@00 s@$ g0@2@00 g1@3@00 n@120@00) n@120@00)
          (img@122@00 s@$ g0@2@00 g1@3@00 n@120@00)))
      :pattern ((Set_in n@120@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@121@00 s@$ g0@2@00 g1@3@00 n@120@00))
      :pattern ((img@122@00 s@$ g0@2@00 g1@3@00 n@120@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@122@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@121@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@121@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@125@00 $Ref)) (!
      (=>
        (Set_in n@125@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@126@00 s@$ g0@2@00 g1@3@00 n@125@00) n@125@00)
          (img@127@00 s@$ g0@2@00 g1@3@00 n@125@00)))
      :pattern ((Set_in n@125@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@126@00 s@$ g0@2@00 g1@3@00 n@125@00))
      :pattern ((img@127@00 s@$ g0@2@00 g1@3@00 n@125@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@127@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@126@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@126@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_l (sm@23@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef6|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_r (sm@28@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef9|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@25@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_l (sm@26@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@26@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef7|))
    (forall ((r $Ref)) (!
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_l (sm@26@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef8|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@30@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_r (sm@31@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@31@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_r (sm@31@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef11|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@48@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@48@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@48@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef21|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef18|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef19|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef20|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@53@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@53@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@53@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef28|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef25|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef26|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef27|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@58@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@58@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@58@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef35|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef32|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef33|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef34|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@63@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@63@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@63@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef42|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef39|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef40|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef41|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@70@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@70@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@70@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef49|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef46|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef47|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef48|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@75@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@75@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@75@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef56|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef53|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef54|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef55|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@80@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@80@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@80@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef63|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef60|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef61|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef62|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@85@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@85@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@85@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef70|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef67|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef68|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef69|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@92@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@92@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@92@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef77|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef74|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef75|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef76|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@97@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@97@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@97@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef84|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef81|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef82|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef83|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@102@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@102@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@102@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef91|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef88|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef89|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef90|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@107@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@107@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@107@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef98|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef95|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef96|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef97|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@114@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@114@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@114@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef105|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef102|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef103|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef104|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@119@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@119@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@119@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef112|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef109|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef110|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef111|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@124@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@124@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@124@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef119|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef116|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef117|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef118|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@129@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@129@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@129@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef126|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef123|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef124|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef125|))
    (=>
      (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
      (and
        (Set_equal (Set_union g0@2@00 g1@3@00) (Set_union g1@3@00 g0@2@00))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g0@2@00)
                    (ite
                      (Set_in u g0@2@00)
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v)))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g1@3@00)
                    (ite
                      (Set_in u g1@3@00)
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g1@3@00)
                  (and
                    (Set_in v g1@3@00)
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v)))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-178|)))
; WARNING: (2416,11): 'if' cannot be used in patterns.
; WARNING: (2416,11): 'if' cannot be used in patterns.
; WARNING: (2416,11): 'and' cannot be used in patterns.
; WARNING: (2416,11): 'and' cannot be used in patterns.
; WARNING: (2416,11): 'if' cannot be used in patterns.
; WARNING: (2477,11): 'if' cannot be used in patterns.
; WARNING: (2477,11): 'if' cannot be used in patterns.
; WARNING: (2477,11): 'and' cannot be used in patterns.
; WARNING: (2477,11): 'and' cannot be used in patterns.
; WARNING: (2477,11): 'if' cannot be used in patterns.
; WARNING: (2540,11): 'if' cannot be used in patterns.
; WARNING: (2540,11): 'if' cannot be used in patterns.
; WARNING: (2540,11): 'and' cannot be used in patterns.
; WARNING: (2540,11): 'and' cannot be used in patterns.
; WARNING: (2540,11): 'if' cannot be used in patterns.
; WARNING: (2603,11): 'if' cannot be used in patterns.
; WARNING: (2603,11): 'if' cannot be used in patterns.
; WARNING: (2603,11): 'and' cannot be used in patterns.
; WARNING: (2603,11): 'and' cannot be used in patterns.
; WARNING: (2603,11): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) true)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-179|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g0@2@00)
                (ite
                  (Set_in u g0@2@00)
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v)))
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-180|)))
; WARNING: (2695,7): 'if' cannot be used in patterns.
; WARNING: (2695,7): 'if' cannot be used in patterns.
; WARNING: (2695,7): 'and' cannot be used in patterns.
; WARNING: (2695,7): 'and' cannot be used in patterns.
; WARNING: (2695,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g1@3@00)
                (ite
                  (Set_in u g1@3@00)
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v)))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-181|)))
; WARNING: (2783,7): 'if' cannot be used in patterns.
; WARNING: (2783,7): 'if' cannot be used in patterns.
; WARNING: (2783,7): 'and' cannot be used in patterns.
; WARNING: (2783,7): 'and' cannot be used in patterns.
; WARNING: (2783,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))))
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-182|)))
; WARNING: (2872,7): 'if' cannot be used in patterns.
; WARNING: (2872,7): 'if' cannot be used in patterns.
; WARNING: (2872,7): 'and' cannot be used in patterns.
; WARNING: (2872,7): 'and' cannot be used in patterns.
; WARNING: (2872,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-183|)))
; WARNING: (2961,7): 'if' cannot be used in patterns.
; WARNING: (2961,7): 'if' cannot be used in patterns.
; WARNING: (2961,7): 'and' cannot be used in patterns.
; WARNING: (2961,7): 'and' cannot be used in patterns.
; WARNING: (2961,7): 'if' cannot be used in patterns.
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- link_left ----------
(declare-const g@0@01 Set<$Ref>)
(declare-const x@1@01 $Ref)
(declare-const y@2@01 $Ref)
(declare-const g@3@01 Set<$Ref>)
(declare-const x@4@01 $Ref)
(declare-const y@5@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
(assert (= ($Snap.first $t@6@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@4@01 g@3@01))
(assert (=
  ($Snap.second $t@6@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@01))
    ($Snap.second ($Snap.second $t@6@01)))))
(assert (= ($Snap.first ($Snap.second $t@6@01)) $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 0 | y@5@01 != Null | live]
; [else-branch: 0 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 3
(push) ; 3
; [else-branch: 0 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= y@5@01 $Ref.null) (not (= y@5@01 $Ref.null))))
(assert (=> (not (= y@5@01 $Ref.null)) (Set_in y@5@01 g@3@01)))
(assert (=
  ($Snap.second ($Snap.second $t@6@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@6@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01)))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 1 | True | live]
; [else-branch: 1 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@7@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@7@01  $FVF<l>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(assert (not (= x@4@01 $Ref.null)))
(declare-const sm@8@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@8@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@8@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@8@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@8@01  $FVF<l>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 2 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 2 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 2 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@9@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@9@01  $FVF<r>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(declare-const sm@10@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@10@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@10@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@10@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@10@01  $FVF<r>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(declare-const n@11@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 3 | !(n@11@01 in g@3@01) | live]
; [else-branch: 3 | n@11@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 3 | !(n@11@01 in g@3@01)]
(assert (not (Set_in n@11@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 3 | n@11@01 in g@3@01]
(assert (Set_in n@11@01 g@3@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@11@01 g@3@01) (not (Set_in n@11@01 g@3@01))))
(assert (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@12@01 ($Ref) $Ref)
(declare-fun img@13@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@11@01 $Ref)) (!
  (=>
    (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01)))
    (or (Set_in n@11@01 g@3@01) (not (Set_in n@11@01 g@3@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) n@11@01) n@11@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@11@01 $Ref) (n2@11@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@11@01 g@3@01) (not (= n1@11@01 x@4@01)))
      (and (Set_in n2@11@01 g@3@01) (not (= n2@11@01 x@4@01)))
      (= n1@11@01 n2@11@01))
    (= n1@11@01 n2@11@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@11@01 $Ref)) (!
  (=>
    (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01)))
    (and (= (inv@12@01 n@11@01) n@11@01) (img@13@01 n@11@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) n@11@01) n@11@01))
  :qid |quant-u-185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (= (inv@12@01 r) r))
  :pattern ((inv@12@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@11@01 $Ref)) (!
  (=>
    (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01)))
    (not (= n@11@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) n@11@01) n@11@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@14@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@12@01 r))
  :qid |quant-u-186|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
(declare-const n$0@15@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 4 | !(n$0@15@01 in g@3@01) | live]
; [else-branch: 4 | n$0@15@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 4 | !(n$0@15@01 in g@3@01)]
(assert (not (Set_in n$0@15@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | n$0@15@01 in g@3@01]
(assert (Set_in n$0@15@01 g@3@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@15@01 g@3@01) (not (Set_in n$0@15@01 g@3@01))))
(assert (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@16@01 ($Ref) $Ref)
(declare-fun img@17@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@15@01 $Ref)) (!
  (=>
    (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01)))
    (or (Set_in n$0@15@01 g@3@01) (not (Set_in n$0@15@01 g@3@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) n$0@15@01) n$0@15@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@15@01 $Ref) (n$02@15@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@15@01 g@3@01) (not (= n$01@15@01 x@4@01)))
      (and (Set_in n$02@15@01 g@3@01) (not (= n$02@15@01 x@4@01)))
      (= n$01@15@01 n$02@15@01))
    (= n$01@15@01 n$02@15@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@15@01 $Ref)) (!
  (=>
    (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01)))
    (and (= (inv@16@01 n$0@15@01) n$0@15@01) (img@17@01 n$0@15@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) n$0@15@01) n$0@15@01))
  :qid |quant-u-188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (= (inv@16@01 r) r))
  :pattern ((inv@16@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@15@01 $Ref)) (!
  (=>
    (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01)))
    (not (= n$0@15@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) n$0@15@01) n$0@15@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@18@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) r) r))
  :pattern ((inv@16@01 r))
  :qid |quant-u-189|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@19@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 5 | !(n$1@19@01 in g@3@01) | live]
; [else-branch: 5 | n$1@19@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 5 | !(n$1@19@01 in g@3@01)]
(assert (not (Set_in n$1@19@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | n$1@19@01 in g@3@01]
(assert (Set_in n$1@19@01 g@3@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef6|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@19@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@13@01 n$1@19@01)
        (and
          (Set_in (inv@12@01 n$1@19@01) g@3@01)
          (not (= (inv@12@01 n$1@19@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert (=>
  (Set_in n$1@19@01 g@3@01)
  (and
    (Set_in n$1@19@01 g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))))
(assert (or (Set_in n$1@19@01 g@3@01) (not (Set_in n$1@19@01 g@3@01))))
(push) ; 3
; [then-branch: 6 | n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null | live]
; [else-branch: 6 | !(n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null) | live]
(push) ; 4
; [then-branch: 6 | n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null]
(assert (and
  (Set_in n$1@19@01 g@3@01)
  (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef6|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@19@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@13@01 n$1@19@01)
        (and
          (Set_in (inv@12@01 n$1@19@01) g@3@01)
          (not (= (inv@12@01 n$1@19@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null)]
(assert (not
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert (=>
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@19@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@19@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@19@01 g@3@01)
      (and
        (Set_in n$1@19@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or (Set_in n$1@19@01 g@3@01) (not (Set_in n$1@19@01 g@3@01)))
    (=>
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or
      (not
        (and
          (Set_in n$1@19@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) g@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$1@19@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@19@01 g@3@01)
      (and
        (Set_in n$1@19@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or (Set_in n$1@19@01 g@3@01) (not (Set_in n$1@19@01 g@3@01)))
    (=>
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or
      (not
        (and
          (Set_in n$1@19@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
  :pattern ((Set_in n$1@19@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$1@19@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@19@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) g@3@01))
  :pattern ((Set_in n$1@19@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@20@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 7 | !(n$2@20@01 in g@3@01) | live]
; [else-branch: 7 | n$2@20@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 7 | !(n$2@20@01 in g@3@01)]
(assert (not (Set_in n$2@20@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | n$2@20@01 in g@3@01]
(assert (Set_in n$2@20@01 g@3@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@20@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@17@01 n$2@20@01)
        (and
          (Set_in (inv@16@01 n$2@20@01) g@3@01)
          (not (= (inv@16@01 n$2@20@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$2@20@01 g@3@01)
  (and
    (Set_in n$2@20@01 g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))))
(assert (or (Set_in n$2@20@01 g@3@01) (not (Set_in n$2@20@01 g@3@01))))
(push) ; 3
; [then-branch: 8 | n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null | live]
; [else-branch: 8 | !(n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null) | live]
(push) ; 4
; [then-branch: 8 | n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null]
(assert (and
  (Set_in n$2@20@01 g@3@01)
  (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@20@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@17@01 n$2@20@01)
        (and
          (Set_in (inv@16@01 n$2@20@01) g@3@01)
          (not (= (inv@16@01 n$2@20@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null)]
(assert (not
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@20@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@20@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@20@01 g@3@01)
      (and
        (Set_in n$2@20@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or (Set_in n$2@20@01 g@3@01) (not (Set_in n$2@20@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or
      (not
        (and
          (Set_in n$2@20@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) g@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$2@20@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@20@01 g@3@01)
      (and
        (Set_in n$2@20@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or (Set_in n$2@20@01 g@3@01) (not (Set_in n$2@20@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or
      (not
        (and
          (Set_in n$2@20@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
  :pattern ((Set_in n$2@20@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$2@20@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@20@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) g@3@01))
  :pattern ((Set_in n$2@20@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
  $Snap.unit))
; [eval] x.l == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef6|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) x@4@01) x@4@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@13@01 x@4@01)
        (and
          (Set_in (inv@12@01 x@4@01) g@3@01)
          (not (= (inv@12@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) x@4@01) $Ref.null))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 ($Snap.combine ($Snap.first $t@21@01) ($Snap.second $t@21@01))))
(assert (= ($Snap.first $t@21@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@21@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@01))
    ($Snap.second ($Snap.second $t@21@01)))))
(assert (= ($Snap.first ($Snap.second $t@21@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@21@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 9 | True | live]
; [else-branch: 9 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 9 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@22@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@22@01  $FVF<l>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
(declare-const sm@23@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@23@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@23@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@23@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@23@01  $FVF<l>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 3
; [then-branch: 10 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 10 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 10 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@24@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@24@01  $FVF<r>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
(declare-const sm@25@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@25@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@25@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@25@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef13|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@25@01  $FVF<r>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(declare-const n$3@26@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 11 | !(n$3@26@01 in g@3@01) | live]
; [else-branch: 11 | n$3@26@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 11 | !(n$3@26@01 in g@3@01)]
(assert (not (Set_in n$3@26@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | n$3@26@01 in g@3@01]
(assert (Set_in n$3@26@01 g@3@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@26@01 g@3@01) (not (Set_in n$3@26@01 g@3@01))))
(assert (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@27@01 ($Ref) $Ref)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@26@01 $Ref)) (!
  (=>
    (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01)))
    (or (Set_in n$3@26@01 g@3@01) (not (Set_in n$3@26@01 g@3@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) n$3@26@01) n$3@26@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@26@01 $Ref) (n$32@26@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@26@01 g@3@01) (not (= n$31@26@01 x@4@01)))
      (and (Set_in n$32@26@01 g@3@01) (not (= n$32@26@01 x@4@01)))
      (= n$31@26@01 n$32@26@01))
    (= n$31@26@01 n$32@26@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@26@01 $Ref)) (!
  (=>
    (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01)))
    (and (= (inv@27@01 n$3@26@01) n$3@26@01) (img@28@01 n$3@26@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) n$3@26@01) n$3@26@01))
  :qid |quant-u-191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@26@01 $Ref)) (!
  (=>
    (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01)))
    (not (= n$3@26@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) n$3@26@01) n$3@26@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@29@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@27@01 r))
  :qid |quant-u-192|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
(declare-const n$4@30@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 12 | !(n$4@30@01 in g@3@01) | live]
; [else-branch: 12 | n$4@30@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 12 | !(n$4@30@01 in g@3@01)]
(assert (not (Set_in n$4@30@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | n$4@30@01 in g@3@01]
(assert (Set_in n$4@30@01 g@3@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@30@01 g@3@01) (not (Set_in n$4@30@01 g@3@01))))
(assert (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@31@01 ($Ref) $Ref)
(declare-fun img@32@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@30@01 $Ref)) (!
  (=>
    (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01)))
    (or (Set_in n$4@30@01 g@3@01) (not (Set_in n$4@30@01 g@3@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) n$4@30@01) n$4@30@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@30@01 $Ref) (n$42@30@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@30@01 g@3@01) (not (= n$41@30@01 x@4@01)))
      (and (Set_in n$42@30@01 g@3@01) (not (= n$42@30@01 x@4@01)))
      (= n$41@30@01 n$42@30@01))
    (= n$41@30@01 n$42@30@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@30@01 $Ref)) (!
  (=>
    (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01)))
    (and (= (inv@31@01 n$4@30@01) n$4@30@01) (img@32@01 n$4@30@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) n$4@30@01) n$4@30@01))
  :qid |quant-u-194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (= (inv@31@01 r) r))
  :pattern ((inv@31@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@30@01 $Ref)) (!
  (=>
    (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01)))
    (not (= n$4@30@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) n$4@30@01) n$4@30@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@33@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) r) r))
  :pattern ((inv@31@01 r))
  :qid |quant-u-195|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@34@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 13 | !(n$5@34@01 in g@3@01) | live]
; [else-branch: 13 | n$5@34@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 13 | !(n$5@34@01 in g@3@01)]
(assert (not (Set_in n$5@34@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | n$5@34@01 in g@3@01]
(assert (Set_in n$5@34@01 g@3@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef16|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@34@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@28@01 n$5@34@01)
        (and
          (Set_in (inv@27@01 n$5@34@01) g@3@01)
          (not (= (inv@27@01 n$5@34@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (Set_in n$5@34@01 g@3@01)
  (and
    (Set_in n$5@34@01 g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))))
(assert (or (Set_in n$5@34@01 g@3@01) (not (Set_in n$5@34@01 g@3@01))))
(push) ; 4
; [then-branch: 14 | n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null | live]
; [else-branch: 14 | !(n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null) | live]
(push) ; 5
; [then-branch: 14 | n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null]
(assert (and
  (Set_in n$5@34@01 g@3@01)
  (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef16|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@34@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@28@01 n$5@34@01)
        (and
          (Set_in (inv@27@01 n$5@34@01) g@3@01)
          (not (= (inv@27@01 n$5@34@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 14 | !(n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null)]
(assert (not
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@34@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@34@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@34@01 g@3@01)
      (and
        (Set_in n$5@34@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or (Set_in n$5@34@01 g@3@01) (not (Set_in n$5@34@01 g@3@01)))
    (=>
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or
      (not
        (and
          (Set_in n$5@34@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) g@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$5@34@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@34@01 g@3@01)
      (and
        (Set_in n$5@34@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or (Set_in n$5@34@01 g@3@01) (not (Set_in n$5@34@01 g@3@01)))
    (=>
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or
      (not
        (and
          (Set_in n$5@34@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
  :pattern ((Set_in n$5@34@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$5@34@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@34@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) g@3@01))
  :pattern ((Set_in n$5@34@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@35@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 15 | !(n$6@35@01 in g@3@01) | live]
; [else-branch: 15 | n$6@35@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 15 | !(n$6@35@01 in g@3@01)]
(assert (not (Set_in n$6@35@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | n$6@35@01 in g@3@01]
(assert (Set_in n$6@35@01 g@3@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
    :qid |qp.fvfValDef18|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef19|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@35@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@32@01 n$6@35@01)
        (and
          (Set_in (inv@31@01 n$6@35@01) g@3@01)
          (not (= (inv@31@01 n$6@35@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (=>
  (Set_in n$6@35@01 g@3@01)
  (and
    (Set_in n$6@35@01 g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))))
(assert (or (Set_in n$6@35@01 g@3@01) (not (Set_in n$6@35@01 g@3@01))))
(push) ; 4
; [then-branch: 16 | n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null | live]
; [else-branch: 16 | !(n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null) | live]
(push) ; 5
; [then-branch: 16 | n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null]
(assert (and
  (Set_in n$6@35@01 g@3@01)
  (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
    :qid |qp.fvfValDef18|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef19|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@35@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@32@01 n$6@35@01)
        (and
          (Set_in (inv@31@01 n$6@35@01) g@3@01)
          (not (= (inv@31@01 n$6@35@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null)]
(assert (not
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (=>
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@35@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@35@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@35@01 g@3@01)
      (and
        (Set_in n$6@35@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or (Set_in n$6@35@01 g@3@01) (not (Set_in n$6@35@01 g@3@01)))
    (=>
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or
      (not
        (and
          (Set_in n$6@35@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) g@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$6@35@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@35@01 g@3@01)
      (and
        (Set_in n$6@35@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or (Set_in n$6@35@01 g@3@01) (not (Set_in n$6@35@01 g@3@01)))
    (=>
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or
      (not
        (and
          (Set_in n$6@35@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
  :pattern ((Set_in n$6@35@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$6@35@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@35@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) g@3@01))
  :pattern ((Set_in n$6@35@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  $Snap.unit))
; [eval] x.l == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef16|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) x@4@01) x@4@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@28@01 x@4@01)
        (and
          (Set_in (inv@27@01 x@4@01) g@3@01)
          (not (= (inv@27@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) x@4@01) y@5@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 17 | y@5@01 == Null | live]
; [else-branch: 17 | y@5@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 17 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@36@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@36@01 g@3@01))
(pop) ; 6
(declare-fun inv@37@01 ($Ref) $Ref)
(declare-fun img@38@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@36@01 $Ref) (n2@36@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@36@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n1@36@01) n1@36@01))
      (and
        (Set_in n2@36@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n2@36@01) n2@36@01))
      (= n1@36@01 n2@36@01))
    (= n1@36@01 n2@36@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-197|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@39@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    ($Perm.min
      (ite
        (and
          (img@28@01 r)
          (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@40@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@39@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@28@01 r)
          (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@39@01 r))
    $Perm.No)
  
  :qid |quant-u-199|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@39@01 r)) $Perm.No))
  
  :qid |quant-u-200|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@40@01 x@4@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@40@01 r) $Perm.No)
  
  :qid |quant-u-202|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@39@01 r)) (pTaken@40@01 r))
      $Perm.No))
  
  :qid |quant-u-203|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@41@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>))))
  :qid |qp.fvfDomDef23|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@41@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@41@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef22|)))
(declare-const n@42@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@42@01 g@3@01))
(pop) ; 6
(declare-fun inv@43@01 ($Ref) $Ref)
(declare-fun img@44@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@45@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@45@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@45@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef26|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@42@01 $Ref) (n2@42@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@42@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@45@01  $FVF<r>) n1@42@01) n1@42@01))
      (and
        (Set_in n2@42@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@45@01  $FVF<r>) n2@42@01) n2@42@01))
      (= n1@42@01 n2@42@01))
    (= n1@42@01 n2@42@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@43@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@45@01  $FVF<r>) r) r))
  :pattern ((inv@43@01 r))
  :qid |quant-u-205|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@46@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    ($Perm.min
      (ite
        (and
          (img@32@01 r)
          (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@47@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@46@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@32@01 r)
          (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@46@01 r))
    $Perm.No)
  
  :qid |quant-u-207|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@46@01 r)) $Perm.No))
  
  :qid |quant-u-208|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 2)) (pTaken@47@01 x@4@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@46@01 r)) (pTaken@47@01 r))
      $Perm.No))
  
  :qid |quant-u-210|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@48@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>))))
  :qid |qp.fvfDomDef30|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@48@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@48@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@41@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@48@01  $FVF<r>))) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@41@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@41@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@45@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@45@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@48@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@48@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@37@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
    :pattern ((inv@37@01 r))
    :qid |quant-u-197|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@43@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@45@01  $FVF<r>) r) r))
    :pattern ((inv@43@01 r))
    :qid |quant-u-205|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@41@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@48@01  $FVF<r>))) g@3@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 5
(declare-const n@49@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@49@01 g@3@01))
(pop) ; 6
(declare-fun inv@50@01 ($Ref) $Ref)
(declare-fun img@51@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@49@01 $Ref) (n2@49@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@49@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n1@49@01) n1@49@01))
      (and
        (Set_in n2@49@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n2@49@01) n2@49@01))
      (= n1@49@01 n2@49@01))
    (= n1@49@01 n2@49@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@49@01 $Ref)) (!
  (=>
    (Set_in n@49@01 g@3@01)
    (and (= (inv@50@01 n@49@01) n@49@01) (img@51@01 n@49@01)))
  :pattern ((Set_in n@49@01 g@3@01))
  :pattern ((inv@50@01 n@49@01))
  :pattern ((img@51@01 n@49@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@51@01 r) (Set_in (inv@50@01 r) g@3@01)) (= (inv@50@01 r) r))
  :pattern ((inv@50@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@50@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@50@01 r))
  :qid |quant-u-212|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@52@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r) (= r (inv@50@01 r)))
    ($Perm.min
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@53@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r) (= r (inv@50@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@52@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@52@01 r))
    $Perm.No)
  
  :qid |quant-u-214|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r) (= r (inv@50@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@52@01 r)) $Perm.No))
  
  :qid |quant-u-215|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@53@01 x@4@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@53@01 r) $Perm.No)
  
  :qid |quant-u-217|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r) (= r (inv@50@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@52@01 r)) (pTaken@53@01 r))
      $Perm.No))
  
  :qid |quant-u-218|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@54@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>)))
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)))
    (=>
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>))))
  :qid |qp.fvfDomDef34|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@54@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@54@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef33|)))
(declare-const n@55@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@55@01 g@3@01))
(pop) ; 6
(declare-fun inv@56@01 ($Ref) $Ref)
(declare-fun img@57@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@58@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@58@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@58@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef37|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@55@01 $Ref) (n2@55@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@55@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@58@01  $FVF<r>) n1@55@01) n1@55@01))
      (and
        (Set_in n2@55@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@58@01  $FVF<r>) n2@55@01) n2@55@01))
      (= n1@55@01 n2@55@01))
    (= n1@55@01 n2@55@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@56@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@58@01  $FVF<r>) r) r))
  :pattern ((inv@56@01 r))
  :qid |quant-u-220|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@59@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r) (= r (inv@56@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@60@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r) (= r (inv@56@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@59@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@59@01 r))
    $Perm.No)
  
  :qid |quant-u-222|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r) (= r (inv@56@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@59@01 r)) $Perm.No))
  
  :qid |quant-u-223|))))
(check-sat)
; unknown
(pop) ; 6
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 2)) (pTaken@60@01 x@4@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r) (= r (inv@56@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@59@01 r)) (pTaken@60@01 r))
      $Perm.No))
  
  :qid |quant-u-225|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@61@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>))))
  :qid |qp.fvfDomDef41|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@61@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@61@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@54@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@61@01  $FVF<r>))) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@49@01 $Ref)) (!
  (=>
    (Set_in n@49@01 g@3@01)
    (and (= (inv@50@01 n@49@01) n@49@01) (img@51@01 n@49@01)))
  :pattern ((Set_in n@49@01 g@3@01))
  :pattern ((inv@50@01 n@49@01))
  :pattern ((img@51@01 n@49@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@51@01 r) (Set_in (inv@50@01 r) g@3@01)) (= (inv@50@01 r) r))
  :pattern ((inv@50@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>)))
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)))
    (=>
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>))))
  :qid |qp.fvfDomDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@54@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@54@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@58@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@58@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@61@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@61@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@50@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
    :pattern ((inv@50@01 r))
    :qid |quant-u-212|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@56@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@58@01  $FVF<r>) r) r))
    :pattern ((inv@56@01 r))
    :qid |quant-u-220|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@54@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@61@01  $FVF<r>))) g@3@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 17 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@41@01  $FVF<l>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@41@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@41@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@41@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@45@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@45@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@45@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@48@01  $FVF<r>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@48@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@48@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@48@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (forall ((n@49@01 $Ref)) (!
  (=>
    (Set_in n@49@01 g@3@01)
    (and (= (inv@50@01 n@49@01) n@49@01) (img@51@01 n@49@01)))
  :pattern ((Set_in n@49@01 g@3@01))
  :pattern ((inv@50@01 n@49@01))
  :pattern ((img@51@01 n@49@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@51@01 r) (Set_in (inv@50@01 r) g@3@01)) (= (inv@50@01 r) r))
  :pattern ((inv@50@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>)))
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)))
    (=>
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@54@01  $FVF<l>))))
  :qid |qp.fvfDomDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@54@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@54@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@54@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@58@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@58@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@58@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@61@01  $FVF<r>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@61@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@61@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@61@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (=>
  (= y@5@01 $Ref.null)
  (and
    (= y@5@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@37@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
      :pattern ((inv@37@01 r))
      :qid |quant-u-197|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@43@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@45@01  $FVF<r>) r) r))
      :pattern ((inv@43@01 r))
      :qid |quant-u-205|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@41@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@48@01  $FVF<r>))) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@50@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
      :pattern ((inv@50@01 r))
      :qid |quant-u-212|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@56@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@58@01  $FVF<r>) r) r))
      :pattern ((inv@56@01 r))
      :qid |quant-u-220|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@54@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@61@01  $FVF<r>))) g@3@01))))
; Joined path conditions
(assert (or (not (= y@5@01 $Ref.null)) (= y@5@01 $Ref.null)))
(assert (=>
  (= y@5@01 $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@41@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@48@01  $FVF<r>))) g@3@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@54@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@61@01  $FVF<r>))) g@3@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 18 | y@5@01 != Null | live]
; [else-branch: 18 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 18 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@62@01 $Ref)
(declare-const v2@63@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@64@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@64@01 g@3@01))
(pop) ; 7
(declare-fun inv@65@01 ($Ref) $Ref)
(declare-fun img@66@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@64@01 $Ref) (n2@64@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@64@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n1@64@01) n1@64@01))
      (and
        (Set_in n2@64@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n2@64@01) n2@64@01))
      (= n1@64@01 n2@64@01))
    (= n1@64@01 n2@64@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@64@01 $Ref)) (!
  (=>
    (Set_in n@64@01 g@3@01)
    (and (= (inv@65@01 n@64@01) n@64@01) (img@66@01 n@64@01)))
  :pattern ((Set_in n@64@01 g@3@01))
  :pattern ((inv@65@01 n@64@01))
  :pattern ((img@66@01 n@64@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@66@01 r) (Set_in (inv@65@01 r) g@3@01)) (= (inv@65@01 r) r))
  :pattern ((inv@65@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@65@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@65@01 r))
  :qid |quant-u-227|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@67@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r) (= r (inv@65@01 r)))
    ($Perm.min
      (ite
        (and
          (img@28@01 r)
          (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@68@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r) (= r (inv@65@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@67@01 r v1@62@01 v2@63@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@28@01 r)
          (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@67@01 r v1@62@01 v2@63@01))
    $Perm.No)
  
  :qid |quant-u-229|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r) (= r (inv@65@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@67@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-230|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@68@01 x@4@01 v1@62@01 v2@63@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@68@01 r v1@62@01 v2@63@01) $Perm.No)
  
  :qid |quant-u-232|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r) (= r (inv@65@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@67@01 r v1@62@01 v2@63@01))
        (pTaken@68@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-233|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@69@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)))
    (=>
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(declare-const n@70@01 $Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@70@01 g@3@01))
(pop) ; 7
(declare-fun inv@71@01 ($Ref) $Ref)
(declare-fun img@72@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@73@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@70@01 $Ref) (n2@70@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@70@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@73@01  $FVF<r>) n1@70@01) n1@70@01))
      (and
        (Set_in n2@70@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@73@01  $FVF<r>) n2@70@01) n2@70@01))
      (= n1@70@01 n2@70@01))
    (= n1@70@01 n2@70@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@70@01 $Ref)) (!
  (=>
    (Set_in n@70@01 g@3@01)
    (and (= (inv@71@01 n@70@01) n@70@01) (img@72@01 n@70@01)))
  :pattern ((Set_in n@70@01 g@3@01))
  :pattern ((inv@71@01 n@70@01))
  :pattern ((img@72@01 n@70@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@72@01 r) (Set_in (inv@71@01 r) g@3@01)) (= (inv@71@01 r) r))
  :pattern ((inv@71@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@71@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@73@01  $FVF<r>) r) r))
  :pattern ((inv@71@01 r))
  :qid |quant-u-235|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@74@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r) (= r (inv@71@01 r)))
    ($Perm.min
      (ite
        (and
          (img@32@01 r)
          (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@75@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r) (= r (inv@71@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@74@01 r v1@62@01 v2@63@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@32@01 r)
          (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@74@01 r v1@62@01 v2@63@01))
    $Perm.No)
  
  :qid |quant-u-237|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r) (= r (inv@71@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@74@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-238|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@75@01 x@4@01 v1@62@01 v2@63@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r) (= r (inv@71@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@74@01 r v1@62@01 v2@63@01))
        (pTaken@75@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-240|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@76@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)))
    (=>
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@69@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@76@01  $FVF<r>))) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@64@01 $Ref)) (!
  (=>
    (Set_in n@64@01 g@3@01)
    (and (= (inv@65@01 n@64@01) n@64@01) (img@66@01 n@64@01)))
  :pattern ((Set_in n@64@01 g@3@01))
  :pattern ((inv@65@01 n@64@01))
  :pattern ((img@66@01 n@64@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@66@01 r) (Set_in (inv@65@01 r) g@3@01)) (= (inv@65@01 r) r))
  :pattern ((inv@65@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)))
    (=>
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
(assert (forall ((n@70@01 $Ref)) (!
  (=>
    (Set_in n@70@01 g@3@01)
    (and (= (inv@71@01 n@70@01) n@70@01) (img@72@01 n@70@01)))
  :pattern ((Set_in n@70@01 g@3@01))
  :pattern ((inv@71@01 n@70@01))
  :pattern ((img@72@01 n@70@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@72@01 r) (Set_in (inv@71@01 r) g@3@01)) (= (inv@71@01 r) r))
  :pattern ((inv@71@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)))
    (=>
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@65@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
    :pattern ((inv@65@01 r))
    :qid |quant-u-227|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@71@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@73@01  $FVF<r>) r) r))
    :pattern ((inv@71@01 r))
    :qid |quant-u-235|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@69@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@76@01  $FVF<r>))) g@3@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@77@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@77@01 g@3@01))
(pop) ; 7
(declare-fun inv@78@01 ($Ref) $Ref)
(declare-fun img@79@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@77@01 $Ref) (n2@77@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@77@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n1@77@01) n1@77@01))
      (and
        (Set_in n2@77@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n2@77@01) n2@77@01))
      (= n1@77@01 n2@77@01))
    (= n1@77@01 n2@77@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@77@01 $Ref)) (!
  (=>
    (Set_in n@77@01 g@3@01)
    (and (= (inv@78@01 n@77@01) n@77@01) (img@79@01 n@77@01)))
  :pattern ((Set_in n@77@01 g@3@01))
  :pattern ((inv@78@01 n@77@01))
  :pattern ((img@79@01 n@77@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@79@01 r) (Set_in (inv@78@01 r) g@3@01)) (= (inv@78@01 r) r))
  :pattern ((inv@78@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@78@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@78@01 r))
  :qid |quant-u-242|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@80@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r) (= r (inv@78@01 r)))
    ($Perm.min
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@81@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r) (= r (inv@78@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@80@01 r v1@62@01 v2@63@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@80@01 r v1@62@01 v2@63@01))
    $Perm.No)
  
  :qid |quant-u-244|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r) (= r (inv@78@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@80@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-245|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@81@01 x@4@01 v1@62@01 v2@63@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@81@01 r v1@62@01 v2@63@01) $Perm.No)
  
  :qid |quant-u-247|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r) (= r (inv@78@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@80@01 r v1@62@01 v2@63@01))
        (pTaken@81@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-248|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@82@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)))
    (=>
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(declare-const n@83@01 $Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@83@01 g@3@01))
(pop) ; 7
(declare-fun inv@84@01 ($Ref) $Ref)
(declare-fun img@85@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@86@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@83@01 $Ref) (n2@83@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@83@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@86@01  $FVF<r>) n1@83@01) n1@83@01))
      (and
        (Set_in n2@83@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@86@01  $FVF<r>) n2@83@01) n2@83@01))
      (= n1@83@01 n2@83@01))
    (= n1@83@01 n2@83@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (Set_in n@83@01 g@3@01)
    (and (= (inv@84@01 n@83@01) n@83@01) (img@85@01 n@83@01)))
  :pattern ((Set_in n@83@01 g@3@01))
  :pattern ((inv@84@01 n@83@01))
  :pattern ((img@85@01 n@83@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@85@01 r) (Set_in (inv@84@01 r) g@3@01)) (= (inv@84@01 r) r))
  :pattern ((inv@84@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@84@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@86@01  $FVF<r>) r) r))
  :pattern ((inv@84@01 r))
  :qid |quant-u-250|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@87@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r) (= r (inv@84@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@88@01 ((r $Ref) (v1@62@01 $Ref) (v2@63@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r) (= r (inv@84@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@87@01 r v1@62@01 v2@63@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@87@01 r v1@62@01 v2@63@01))
    $Perm.No)
  
  :qid |quant-u-252|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r) (= r (inv@84@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@87@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-253|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@88@01 x@4@01 v1@62@01 v2@63@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r) (= r (inv@84@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@87@01 r v1@62@01 v2@63@01))
        (pTaken@88@01 r v1@62@01 v2@63@01))
      $Perm.No))
  
  :qid |quant-u-255|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@89@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)))
    (=>
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@77@01 $Ref)) (!
  (=>
    (Set_in n@77@01 g@3@01)
    (and (= (inv@78@01 n@77@01) n@77@01) (img@79@01 n@77@01)))
  :pattern ((Set_in n@77@01 g@3@01))
  :pattern ((inv@78@01 n@77@01))
  :pattern ((img@79@01 n@77@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@79@01 r) (Set_in (inv@78@01 r) g@3@01)) (= (inv@78@01 r) r))
  :pattern ((inv@78@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)))
    (=>
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (Set_in n@83@01 g@3@01)
    (and (= (inv@84@01 n@83@01) n@83@01) (img@85@01 n@83@01)))
  :pattern ((Set_in n@83@01 g@3@01))
  :pattern ((inv@84@01 n@83@01))
  :pattern ((img@85@01 n@83@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@85@01 r) (Set_in (inv@84@01 r) g@3@01)) (= (inv@84@01 r) r))
  :pattern ((inv@84@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)))
    (=>
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@78@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
    :pattern ((inv@78@01 r))
    :qid |quant-u-242|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@84@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@86@01  $FVF<r>) r) r))
    :pattern ((inv@84@01 r))
    :qid |quant-u-250|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | edge[Bool]($$((sm@82@01, sm@89@01), g@3@01), v1@62@01, v2@63@01) | live]
; [else-branch: 19 | !(edge[Bool]($$((sm@82@01, sm@89@01), g@3@01), v1@62@01, v2@63@01)) | live]
(push) ; 7
; [then-branch: 19 | edge[Bool]($$((sm@82@01, sm@89@01), g@3@01), v1@62@01, v2@63@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
(pop) ; 7
(push) ; 7
; [else-branch: 19 | !(edge[Bool]($$((sm@82@01, sm@89@01), g@3@01), v1@62@01, v2@63@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 8
; [then-branch: 20 | v1@62@01 != x@4@01 | live]
; [else-branch: 20 | v1@62@01 == x@4@01 | live]
(push) ; 9
; [then-branch: 20 | v1@62@01 != x@4@01]
(assert (not (= v1@62@01 x@4@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 20 | v1@62@01 == x@4@01]
(assert (= v1@62@01 x@4@01))
; [eval] v2 == y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@62@01 x@4@01) (not (= v1@62@01 x@4@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
  (and
    (not
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
    (or (= v1@62@01 x@4@01) (not (= v1@62@01 x@4@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@64@01 $Ref)) (!
  (=>
    (Set_in n@64@01 g@3@01)
    (and (= (inv@65@01 n@64@01) n@64@01) (img@66@01 n@64@01)))
  :pattern ((Set_in n@64@01 g@3@01))
  :pattern ((inv@65@01 n@64@01))
  :pattern ((img@66@01 n@64@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@66@01 r) (Set_in (inv@65@01 r) g@3@01)) (= (inv@65@01 r) r))
  :pattern ((inv@65@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)))
    (=>
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
(assert (forall ((n@70@01 $Ref)) (!
  (=>
    (Set_in n@70@01 g@3@01)
    (and (= (inv@71@01 n@70@01) n@70@01) (img@72@01 n@70@01)))
  :pattern ((Set_in n@70@01 g@3@01))
  :pattern ((inv@71@01 n@70@01))
  :pattern ((img@72@01 n@70@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@72@01 r) (Set_in (inv@71@01 r) g@3@01)) (= (inv@71@01 r) r))
  :pattern ((inv@71@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)))
    (=>
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((n@77@01 $Ref)) (!
  (=>
    (Set_in n@77@01 g@3@01)
    (and (= (inv@78@01 n@77@01) n@77@01) (img@79@01 n@77@01)))
  :pattern ((Set_in n@77@01 g@3@01))
  :pattern ((inv@78@01 n@77@01))
  :pattern ((img@79@01 n@77@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@79@01 r) (Set_in (inv@78@01 r) g@3@01)) (= (inv@78@01 r) r))
  :pattern ((inv@78@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)))
    (=>
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (Set_in n@83@01 g@3@01)
    (and (= (inv@84@01 n@83@01) n@83@01) (img@85@01 n@83@01)))
  :pattern ((Set_in n@83@01 g@3@01))
  :pattern ((inv@84@01 n@83@01))
  :pattern ((img@85@01 n@83@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@85@01 r) (Set_in (inv@84@01 r) g@3@01)) (= (inv@84@01 r) r))
  :pattern ((inv@84@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)))
    (=>
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@65@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@65@01 r))
  :qid |quant-u-227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@71@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@73@01  $FVF<r>) r) r))
  :pattern ((inv@71@01 r))
  :qid |quant-u-235|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@69@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@76@01  $FVF<r>))) g@3@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@78@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@78@01 r))
  :qid |quant-u-242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@84@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@86@01  $FVF<r>) r) r))
  :pattern ((inv@84@01 r))
  :qid |quant-u-250|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@62@01 $Ref) (v2@63@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
      (and
        (not
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
        (or (= v1@62@01 x@4@01) (not (= v1@62@01 x@4@01)))))
    (or
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01)))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 18 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@64@01 $Ref)) (!
  (=>
    (Set_in n@64@01 g@3@01)
    (and (= (inv@65@01 n@64@01) n@64@01) (img@66@01 n@64@01)))
  :pattern ((Set_in n@64@01 g@3@01))
  :pattern ((inv@65@01 n@64@01))
  :pattern ((img@66@01 n@64@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@66@01 r) (Set_in (inv@65@01 r) g@3@01)) (= (inv@65@01 r) r))
  :pattern ((inv@65@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)))
    (=>
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@69@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@65@01 r) g@3@01) (img@66@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@69@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@69@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
(assert (forall ((n@70@01 $Ref)) (!
  (=>
    (Set_in n@70@01 g@3@01)
    (and (= (inv@71@01 n@70@01) n@70@01) (img@72@01 n@70@01)))
  :pattern ((Set_in n@70@01 g@3@01))
  :pattern ((inv@71@01 n@70@01))
  :pattern ((img@72@01 n@70@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@72@01 r) (Set_in (inv@71@01 r) g@3@01)) (= (inv@71@01 r) r))
  :pattern ((inv@71@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)))
    (=>
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@76@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@71@01 r) g@3@01) (img@72@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@76@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@76@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((n@77@01 $Ref)) (!
  (=>
    (Set_in n@77@01 g@3@01)
    (and (= (inv@78@01 n@77@01) n@77@01) (img@79@01 n@77@01)))
  :pattern ((Set_in n@77@01 g@3@01))
  :pattern ((inv@78@01 n@77@01))
  :pattern ((img@79@01 n@77@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@79@01 r) (Set_in (inv@78@01 r) g@3@01)) (= (inv@78@01 r) r))
  :pattern ((inv@78@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)))
    (=>
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@82@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@78@01 r) g@3@01) (img@79@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@82@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@82@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@86@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@86@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (Set_in n@83@01 g@3@01)
    (and (= (inv@84@01 n@83@01) n@83@01) (img@85@01 n@83@01)))
  :pattern ((Set_in n@83@01 g@3@01))
  :pattern ((inv@84@01 n@83@01))
  :pattern ((img@85@01 n@83@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@85@01 r) (Set_in (inv@84@01 r) g@3@01)) (= (inv@84@01 r) r))
  :pattern ((inv@84@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)))
    (=>
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@89@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@84@01 r) g@3@01) (img@85@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@89@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@89@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@65@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
      :pattern ((inv@65@01 r))
      :qid |quant-u-227|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@71@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@73@01  $FVF<r>) r) r))
      :pattern ((inv@71@01 r))
      :qid |quant-u-235|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@69@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@76@01  $FVF<r>))) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@78@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
      :pattern ((inv@78@01 r))
      :qid |quant-u-242|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@84@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@86@01  $FVF<r>) r) r))
      :pattern ((inv@84@01 r))
      :qid |quant-u-250|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01)
    (forall ((v1@62@01 $Ref) (v2@63@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
          (and
            (not
              (edge<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
            (or (= v1@62@01 x@4@01) (not (= v1@62@01 x@4@01)))))
        (or
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01)))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@62@01 $Ref) (v2@63@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@69@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@76@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01)
      (or
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01)
        (and (= v1@62@01 x@4@01) (= v2@63@01 y@5@01))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@82@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@89@01  $FVF<r>))) g@3@01) v1@62@01 v2@63@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,02s
; (get-info :all-statistics)
; [then-branch: 21 | y@5@01 != Null | live]
; [else-branch: 21 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@90@01 $Ref)
(declare-const v2@91@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 22 | v1@90@01 != v2@91@01 | live]
; [else-branch: 22 | v1@90@01 == v2@91@01 | live]
(push) ; 7
; [then-branch: 22 | v1@90@01 != v2@91@01]
(assert (not (= v1@90@01 v2@91@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@92@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@92@01 g@3@01))
(pop) ; 9
(declare-fun inv@93@01 ($Ref) $Ref)
(declare-fun img@94@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@92@01 $Ref) (n2@92@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@92@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n1@92@01) n1@92@01))
      (and
        (Set_in n2@92@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n2@92@01) n2@92@01))
      (= n1@92@01 n2@92@01))
    (= n1@92@01 n2@92@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@92@01 $Ref)) (!
  (=>
    (Set_in n@92@01 g@3@01)
    (and (= (inv@93@01 n@92@01) n@92@01) (img@94@01 n@92@01)))
  :pattern ((Set_in n@92@01 g@3@01))
  :pattern ((inv@93@01 n@92@01))
  :pattern ((img@94@01 n@92@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@94@01 r) (Set_in (inv@93@01 r) g@3@01)) (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@93@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@93@01 r))
  :qid |quant-u-257|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@95@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r) (= r (inv@93@01 r)))
    ($Perm.min
      (ite
        (and
          (img@28@01 r)
          (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@96@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r) (= r (inv@93@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@95@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@28@01 r)
          (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@95@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-259|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r) (= r (inv@93@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@95@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-260|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@96@01 x@4@01 v1@90@01 v2@91@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@96@01 r v1@90@01 v2@91@01) $Perm.No)
  
  :qid |quant-u-262|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r) (= r (inv@93@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@95@01 r v1@90@01 v2@91@01))
        (pTaken@96@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-263|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@97@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)))
    (=>
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(declare-const n@98@01 $Ref)
(set-option :timeout 0)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@98@01 g@3@01))
(pop) ; 9
(declare-fun inv@99@01 ($Ref) $Ref)
(declare-fun img@100@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@101@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@98@01 $Ref) (n2@98@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@98@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) n1@98@01) n1@98@01))
      (and
        (Set_in n2@98@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) n2@98@01) n2@98@01))
      (= n1@98@01 n2@98@01))
    (= n1@98@01 n2@98@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@98@01 $Ref)) (!
  (=>
    (Set_in n@98@01 g@3@01)
    (and (= (inv@99@01 n@98@01) n@98@01) (img@100@01 n@98@01)))
  :pattern ((Set_in n@98@01 g@3@01))
  :pattern ((inv@99@01 n@98@01))
  :pattern ((img@100@01 n@98@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@100@01 r) (Set_in (inv@99@01 r) g@3@01)) (= (inv@99@01 r) r))
  :pattern ((inv@99@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@99@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) r) r))
  :pattern ((inv@99@01 r))
  :qid |quant-u-265|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@102@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r) (= r (inv@99@01 r)))
    ($Perm.min
      (ite
        (and
          (img@32@01 r)
          (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@103@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r) (= r (inv@99@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@102@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@32@01 r)
          (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@102@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-267|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r) (= r (inv@99@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@102@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-268|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@103@01 x@4@01 v1@90@01 v2@91@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r) (= r (inv@99@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@102@01 r v1@90@01 v2@91@01))
        (pTaken@103@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-270|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@104@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)))
    (=>
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@92@01 $Ref)) (!
  (=>
    (Set_in n@92@01 g@3@01)
    (and (= (inv@93@01 n@92@01) n@92@01) (img@94@01 n@92@01)))
  :pattern ((Set_in n@92@01 g@3@01))
  :pattern ((inv@93@01 n@92@01))
  :pattern ((img@94@01 n@92@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@94@01 r) (Set_in (inv@93@01 r) g@3@01)) (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)))
    (=>
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@98@01 $Ref)) (!
  (=>
    (Set_in n@98@01 g@3@01)
    (and (= (inv@99@01 n@98@01) n@98@01) (img@100@01 n@98@01)))
  :pattern ((Set_in n@98@01 g@3@01))
  :pattern ((inv@99@01 n@98@01))
  :pattern ((img@100@01 n@98@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@100@01 r) (Set_in (inv@99@01 r) g@3@01)) (= (inv@99@01 r) r))
  :pattern ((inv@99@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)))
    (=>
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@93@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
    :pattern ((inv@93@01 r))
    :qid |quant-u-257|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@99@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) r) r))
    :pattern ((inv@99@01 r))
    :qid |quant-u-265|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@105@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@105@01 g@3@01))
(pop) ; 9
(declare-fun inv@106@01 ($Ref) $Ref)
(declare-fun img@107@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@105@01 $Ref) (n2@105@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@105@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n1@105@01) n1@105@01))
      (and
        (Set_in n2@105@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n2@105@01) n2@105@01))
      (= n1@105@01 n2@105@01))
    (= n1@105@01 n2@105@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@105@01 $Ref)) (!
  (=>
    (Set_in n@105@01 g@3@01)
    (and (= (inv@106@01 n@105@01) n@105@01) (img@107@01 n@105@01)))
  :pattern ((Set_in n@105@01 g@3@01))
  :pattern ((inv@106@01 n@105@01))
  :pattern ((img@107@01 n@105@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@107@01 r) (Set_in (inv@106@01 r) g@3@01)) (= (inv@106@01 r) r))
  :pattern ((inv@106@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@106@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@106@01 r))
  :qid |quant-u-272|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@108@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r) (= r (inv@106@01 r)))
    ($Perm.min
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@109@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r) (= r (inv@106@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@108@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@108@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-274|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r) (= r (inv@106@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@108@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-275|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@109@01 x@4@01 v1@90@01 v2@91@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@109@01 r v1@90@01 v2@91@01) $Perm.No)
  
  :qid |quant-u-277|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r) (= r (inv@106@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@108@01 r v1@90@01 v2@91@01))
        (pTaken@109@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-278|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@110@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)))
    (=>
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(declare-const n@111@01 $Ref)
(set-option :timeout 0)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@111@01 g@3@01))
(pop) ; 9
(declare-fun inv@112@01 ($Ref) $Ref)
(declare-fun img@113@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@114@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@111@01 $Ref) (n2@111@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@111@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) n1@111@01) n1@111@01))
      (and
        (Set_in n2@111@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) n2@111@01) n2@111@01))
      (= n1@111@01 n2@111@01))
    (= n1@111@01 n2@111@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 g@3@01)
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 g@3@01))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@113@01 r) (Set_in (inv@112@01 r) g@3@01)) (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@112@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) r) r))
  :pattern ((inv@112@01 r))
  :qid |quant-u-280|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@115@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r) (= r (inv@112@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@116@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r) (= r (inv@112@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@115@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@115@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-282|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r) (= r (inv@112@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@115@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-283|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@116@01 x@4@01 v1@90@01 v2@91@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r) (= r (inv@112@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@115@01 r v1@90@01 v2@91@01))
        (pTaken@116@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-285|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@117@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@105@01 $Ref)) (!
  (=>
    (Set_in n@105@01 g@3@01)
    (and (= (inv@106@01 n@105@01) n@105@01) (img@107@01 n@105@01)))
  :pattern ((Set_in n@105@01 g@3@01))
  :pattern ((inv@106@01 n@105@01))
  :pattern ((img@107@01 n@105@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@107@01 r) (Set_in (inv@106@01 r) g@3@01)) (= (inv@106@01 r) r))
  :pattern ((inv@106@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)))
    (=>
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 g@3@01)
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 g@3@01))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@113@01 r) (Set_in (inv@112@01 r) g@3@01)) (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@106@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
    :pattern ((inv@106@01 r))
    :qid |quant-u-272|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@112@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) r) r))
    :pattern ((inv@112@01 r))
    :qid |quant-u-280|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01)))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 23 | exists_path[Bool]($$((sm@110@01, sm@117@01), g@3@01), v1@90@01, v2@91@01) | live]
; [else-branch: 23 | !(exists_path[Bool]($$((sm@110@01, sm@117@01), g@3@01), v1@90@01, v2@91@01)) | live]
(push) ; 9
; [then-branch: 23 | exists_path[Bool]($$((sm@110@01, sm@117@01), g@3@01), v1@90@01, v2@91@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
(pop) ; 9
(push) ; 9
; [else-branch: 23 | !(exists_path[Bool]($$((sm@110@01, sm@117@01), g@3@01), v1@90@01, v2@91@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@118@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@118@01 g@3@01))
(pop) ; 11
(declare-fun inv@119@01 ($Ref) $Ref)
(declare-fun img@120@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@121@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@118@01 $Ref) (n2@118@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@118@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) n1@118@01) n1@118@01))
      (and
        (Set_in n2@118@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) n2@118@01) n2@118@01))
      (= n1@118@01 n2@118@01))
    (= n1@118@01 n2@118@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@118@01 $Ref)) (!
  (=>
    (Set_in n@118@01 g@3@01)
    (and (= (inv@119@01 n@118@01) n@118@01) (img@120@01 n@118@01)))
  :pattern ((Set_in n@118@01 g@3@01))
  :pattern ((inv@119@01 n@118@01))
  :pattern ((img@120@01 n@118@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@120@01 r) (Set_in (inv@119@01 r) g@3@01)) (= (inv@119@01 r) r))
  :pattern ((inv@119@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@119@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r))
  :pattern ((inv@119@01 r))
  :qid |quant-u-287|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@122@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r) (= r (inv@119@01 r)))
    ($Perm.min
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@123@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r) (= r (inv@119@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@122@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@122@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-289|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r) (= r (inv@119@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@122@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-290|))))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@123@01 x@4@01 v1@90@01 v2@91@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@123@01 r v1@90@01 v2@91@01) $Perm.No)
  
  :qid |quant-u-292|))))
(check-sat)
; unknown
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r) (= r (inv@119@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@122@01 r v1@90@01 v2@91@01))
        (pTaken@123@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-293|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@124@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)))
    (=>
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(declare-const n@125@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@125@01 g@3@01))
(pop) ; 11
(declare-fun inv@126@01 ($Ref) $Ref)
(declare-fun img@127@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@128@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@125@01 $Ref) (n2@125@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@125@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) n1@125@01) n1@125@01))
      (and
        (Set_in n2@125@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) n2@125@01) n2@125@01))
      (= n1@125@01 n2@125@01))
    (= n1@125@01 n2@125@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (Set_in n@125@01 g@3@01)
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern ((Set_in n@125@01 g@3@01))
  :pattern ((inv@126@01 n@125@01))
  :pattern ((img@127@01 n@125@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@127@01 r) (Set_in (inv@126@01 r) g@3@01)) (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@126@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) r) r))
  :pattern ((inv@126@01 r))
  :qid |quant-u-295|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@129@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r) (= r (inv@126@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@130@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r) (= r (inv@126@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@129@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@129@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-297|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r) (= r (inv@126@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@129@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-298|))))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@130@01 x@4@01 v1@90@01 v2@91@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r) (= r (inv@126@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@129@01 r v1@90@01 v2@91@01))
        (pTaken@130@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-300|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@131@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)))
    (=>
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@118@01 $Ref)) (!
  (=>
    (Set_in n@118@01 g@3@01)
    (and (= (inv@119@01 n@118@01) n@118@01) (img@120@01 n@118@01)))
  :pattern ((Set_in n@118@01 g@3@01))
  :pattern ((inv@119@01 n@118@01))
  :pattern ((img@120@01 n@118@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@120@01 r) (Set_in (inv@119@01 r) g@3@01)) (= (inv@119@01 r) r))
  :pattern ((inv@119@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)))
    (=>
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (Set_in n@125@01 g@3@01)
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern ((Set_in n@125@01 g@3@01))
  :pattern ((inv@126@01 n@125@01))
  :pattern ((img@127@01 n@125@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@127@01 r) (Set_in (inv@126@01 r) g@3@01)) (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)))
    (=>
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@119@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r))
    :pattern ((inv@119@01 r))
    :qid |quant-u-287|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@126@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) r) r))
    :pattern ((inv@126@01 r))
    :qid |quant-u-295|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01)))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 24 | !(exists_path[Bool]($$((sm@124@01, sm@131@01), g@3@01), v1@90@01, x@4@01)) | live]
; [else-branch: 24 | exists_path[Bool]($$((sm@124@01, sm@131@01), g@3@01), v1@90@01, x@4@01) | live]
(push) ; 11
; [then-branch: 24 | !(exists_path[Bool]($$((sm@124@01, sm@131@01), g@3@01), v1@90@01, x@4@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 24 | exists_path[Bool]($$((sm@124@01, sm@131@01), g@3@01), v1@90@01, x@4@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@132@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@132@01 g@3@01))
(pop) ; 13
(declare-fun inv@133@01 ($Ref) $Ref)
(declare-fun img@134@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@135@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@132@01 $Ref) (n2@132@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@132@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) n1@132@01) n1@132@01))
      (and
        (Set_in n2@132@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) n2@132@01) n2@132@01))
      (= n1@132@01 n2@132@01))
    (= n1@132@01 n2@132@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@133@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
  :pattern ((inv@133@01 r))
  :qid |quant-u-302|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@136@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r) (= r (inv@133@01 r)))
    ($Perm.min
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@137@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r) (= r (inv@133@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@136@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@13@01 r)
          (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@136@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-304|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r) (= r (inv@133@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@136@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-305|))))
(check-sat)
; unknown
(pop) ; 13
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@137@01 x@4@01 v1@90@01 v2@91@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@137@01 r v1@90@01 v2@91@01) $Perm.No)
  
  :qid |quant-u-307|))))
(check-sat)
; unknown
(pop) ; 13
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r) (= r (inv@133@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@136@01 r v1@90@01 v2@91@01))
        (pTaken@137@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-308|))))
(check-sat)
; unsat
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@138@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(declare-const n@139@01 $Ref)
(set-option :timeout 0)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@139@01 g@3@01))
(pop) ; 13
(declare-fun inv@140@01 ($Ref) $Ref)
(declare-fun img@141@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@142@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@139@01 $Ref) (n2@139@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@139@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) n1@139@01) n1@139@01))
      (and
        (Set_in n2@139@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) n2@139@01) n2@139@01))
      (= n1@139@01 n2@139@01))
    (= n1@139@01 n2@139@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@140@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
  :pattern ((inv@140@01 r))
  :qid |quant-u-310|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@143@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r) (= r (inv@140@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@144@01 ((r $Ref) (v1@90@01 $Ref) (v2@91@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r) (= r (inv@140@01 r)))
    ($Perm.min
      (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@143@01 r v1@90@01 v2@91@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@143@01 r v1@90@01 v2@91@01))
    $Perm.No)
  
  :qid |quant-u-312|))))
(check-sat)
; unsat
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r) (= r (inv@140@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@143@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-313|))))
(check-sat)
; unknown
(pop) ; 13
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@144@01 x@4@01 v1@90@01 v2@91@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r) (= r (inv@140@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@143@01 r v1@90@01 v2@91@01))
        (pTaken@144@01 r v1@90@01 v2@91@01))
      $Perm.No))
  
  :qid |quant-u-315|))))
(check-sat)
; unsat
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@145@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@133@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
    :pattern ((inv@133@01 r))
    :qid |quant-u-302|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@140@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
    :pattern ((inv@140@01 r))
    :qid |quant-u-310|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@133@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
      :pattern ((inv@133@01 r))
      :qid |quant-u-302|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@140@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
      :pattern ((inv@140@01 r))
      :qid |quant-u-310|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@118@01 $Ref)) (!
  (=>
    (Set_in n@118@01 g@3@01)
    (and (= (inv@119@01 n@118@01) n@118@01) (img@120@01 n@118@01)))
  :pattern ((Set_in n@118@01 g@3@01))
  :pattern ((inv@119@01 n@118@01))
  :pattern ((img@120@01 n@118@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@120@01 r) (Set_in (inv@119@01 r) g@3@01)) (= (inv@119@01 r) r))
  :pattern ((inv@119@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)))
    (=>
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (Set_in n@125@01 g@3@01)
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern ((Set_in n@125@01 g@3@01))
  :pattern ((inv@126@01 n@125@01))
  :pattern ((img@127@01 n@125@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@127@01 r) (Set_in (inv@126@01 r) g@3@01)) (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)))
    (=>
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
  (and
    (not
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@119@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r))
      :pattern ((inv@119@01 r))
      :qid |quant-u-287|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@126@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) r) r))
      :pattern ((inv@126@01 r))
      :qid |quant-u-295|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@133@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
          :pattern ((inv@133@01 r))
          :qid |quant-u-302|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@140@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
          :pattern ((inv@140@01 r))
          :qid |quant-u-310|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01)))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 22 | v1@90@01 == v2@91@01]
(assert (= v1@90@01 v2@91@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@92@01 $Ref)) (!
  (=>
    (Set_in n@92@01 g@3@01)
    (and (= (inv@93@01 n@92@01) n@92@01) (img@94@01 n@92@01)))
  :pattern ((Set_in n@92@01 g@3@01))
  :pattern ((inv@93@01 n@92@01))
  :pattern ((img@94@01 n@92@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@94@01 r) (Set_in (inv@93@01 r) g@3@01)) (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)))
    (=>
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@98@01 $Ref)) (!
  (=>
    (Set_in n@98@01 g@3@01)
    (and (= (inv@99@01 n@98@01) n@98@01) (img@100@01 n@98@01)))
  :pattern ((Set_in n@98@01 g@3@01))
  :pattern ((inv@99@01 n@98@01))
  :pattern ((img@100@01 n@98@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@100@01 r) (Set_in (inv@99@01 r) g@3@01)) (= (inv@99@01 r) r))
  :pattern ((inv@99@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)))
    (=>
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (forall ((n@105@01 $Ref)) (!
  (=>
    (Set_in n@105@01 g@3@01)
    (and (= (inv@106@01 n@105@01) n@105@01) (img@107@01 n@105@01)))
  :pattern ((Set_in n@105@01 g@3@01))
  :pattern ((inv@106@01 n@105@01))
  :pattern ((img@107@01 n@105@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@107@01 r) (Set_in (inv@106@01 r) g@3@01)) (= (inv@106@01 r) r))
  :pattern ((inv@106@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)))
    (=>
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 g@3@01)
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 g@3@01))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@113@01 r) (Set_in (inv@112@01 r) g@3@01)) (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@118@01 $Ref)) (!
  (=>
    (Set_in n@118@01 g@3@01)
    (and (= (inv@119@01 n@118@01) n@118@01) (img@120@01 n@118@01)))
  :pattern ((Set_in n@118@01 g@3@01))
  :pattern ((inv@119@01 n@118@01))
  :pattern ((img@120@01 n@118@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@120@01 r) (Set_in (inv@119@01 r) g@3@01)) (= (inv@119@01 r) r))
  :pattern ((inv@119@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)))
    (=>
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (Set_in n@125@01 g@3@01)
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern ((Set_in n@125@01 g@3@01))
  :pattern ((inv@126@01 n@125@01))
  :pattern ((img@127@01 n@125@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@127@01 r) (Set_in (inv@126@01 r) g@3@01)) (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)))
    (=>
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (not (= v1@90@01 v2@91@01))
  (and
    (not (= v1@90@01 v2@91@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@93@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
      :pattern ((inv@93@01 r))
      :qid |quant-u-257|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@99@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) r) r))
      :pattern ((inv@99@01 r))
      :qid |quant-u-265|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@106@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
      :pattern ((inv@106@01 r))
      :qid |quant-u-272|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@112@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) r) r))
      :pattern ((inv@112@01 r))
      :qid |quant-u-280|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
      (and
        (not
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@119@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r))
          :pattern ((inv@119@01 r))
          :qid |quant-u-287|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@126@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) r) r))
          :pattern ((inv@126@01 r))
          :qid |quant-u-295|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@133@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
              :pattern ((inv@133@01 r))
              :qid |quant-u-302|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@140@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
              :pattern ((inv@140@01 r))
              :qid |quant-u-310|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01)))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01)))))
; Joined path conditions
(assert (or (= v1@90@01 v2@91@01) (not (= v1@90@01 v2@91@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@92@01 $Ref)) (!
  (=>
    (Set_in n@92@01 g@3@01)
    (and (= (inv@93@01 n@92@01) n@92@01) (img@94@01 n@92@01)))
  :pattern ((Set_in n@92@01 g@3@01))
  :pattern ((inv@93@01 n@92@01))
  :pattern ((img@94@01 n@92@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@94@01 r) (Set_in (inv@93@01 r) g@3@01)) (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)))
    (=>
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@98@01 $Ref)) (!
  (=>
    (Set_in n@98@01 g@3@01)
    (and (= (inv@99@01 n@98@01) n@98@01) (img@100@01 n@98@01)))
  :pattern ((Set_in n@98@01 g@3@01))
  :pattern ((inv@99@01 n@98@01))
  :pattern ((img@100@01 n@98@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@100@01 r) (Set_in (inv@99@01 r) g@3@01)) (= (inv@99@01 r) r))
  :pattern ((inv@99@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)))
    (=>
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (forall ((n@105@01 $Ref)) (!
  (=>
    (Set_in n@105@01 g@3@01)
    (and (= (inv@106@01 n@105@01) n@105@01) (img@107@01 n@105@01)))
  :pattern ((Set_in n@105@01 g@3@01))
  :pattern ((inv@106@01 n@105@01))
  :pattern ((img@107@01 n@105@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@107@01 r) (Set_in (inv@106@01 r) g@3@01)) (= (inv@106@01 r) r))
  :pattern ((inv@106@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)))
    (=>
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 g@3@01)
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 g@3@01))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@113@01 r) (Set_in (inv@112@01 r) g@3@01)) (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@118@01 $Ref)) (!
  (=>
    (Set_in n@118@01 g@3@01)
    (and (= (inv@119@01 n@118@01) n@118@01) (img@120@01 n@118@01)))
  :pattern ((Set_in n@118@01 g@3@01))
  :pattern ((inv@119@01 n@118@01))
  :pattern ((img@120@01 n@118@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@120@01 r) (Set_in (inv@119@01 r) g@3@01)) (= (inv@119@01 r) r))
  :pattern ((inv@119@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)))
    (=>
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (Set_in n@125@01 g@3@01)
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern ((Set_in n@125@01 g@3@01))
  :pattern ((inv@126@01 n@125@01))
  :pattern ((img@127@01 n@125@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@127@01 r) (Set_in (inv@126@01 r) g@3@01)) (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)))
    (=>
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@90@01 $Ref) (v2@91@01 $Ref)) (!
  (and
    (=>
      (not (= v1@90@01 v2@91@01))
      (and
        (not (= v1@90@01 v2@91@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@93@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
          :pattern ((inv@93@01 r))
          :qid |quant-u-257|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@99@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) r) r))
          :pattern ((inv@99@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@106@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
          :pattern ((inv@106@01 r))
          :qid |quant-u-272|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-280|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
          (and
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@119@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r))
              :pattern ((inv@119@01 r))
              :qid |quant-u-287|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@126@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) r) r))
              :pattern ((inv@126@01 r))
              :qid |quant-u-295|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@133@01 r) g@3@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
                  :pattern ((inv@133@01 r))
                  :qid |quant-u-302|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@140@01 r) g@3@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
                  :pattern ((inv@140@01 r))
                  :qid |quant-u-310|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01)))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))))
    (or (= v1@90@01 v2@91@01) (not (= v1@90@01 v2@91@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 21 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@92@01 $Ref)) (!
  (=>
    (Set_in n@92@01 g@3@01)
    (and (= (inv@93@01 n@92@01) n@92@01) (img@94@01 n@92@01)))
  :pattern ((Set_in n@92@01 g@3@01))
  :pattern ((inv@93@01 n@92@01))
  :pattern ((img@94@01 n@92@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@94@01 r) (Set_in (inv@93@01 r) g@3@01)) (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)))
    (=>
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@97@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@93@01 r) g@3@01) (img@94@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@101@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@101@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@98@01 $Ref)) (!
  (=>
    (Set_in n@98@01 g@3@01)
    (and (= (inv@99@01 n@98@01) n@98@01) (img@100@01 n@98@01)))
  :pattern ((Set_in n@98@01 g@3@01))
  :pattern ((inv@99@01 n@98@01))
  :pattern ((img@100@01 n@98@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@100@01 r) (Set_in (inv@99@01 r) g@3@01)) (= (inv@99@01 r) r))
  :pattern ((inv@99@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)))
    (=>
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@104@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@99@01 r) g@3@01) (img@100@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@104@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@104@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (forall ((n@105@01 $Ref)) (!
  (=>
    (Set_in n@105@01 g@3@01)
    (and (= (inv@106@01 n@105@01) n@105@01) (img@107@01 n@105@01)))
  :pattern ((Set_in n@105@01 g@3@01))
  :pattern ((inv@106@01 n@105@01))
  :pattern ((img@107@01 n@105@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@107@01 r) (Set_in (inv@106@01 r) g@3@01)) (= (inv@106@01 r) r))
  :pattern ((inv@106@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)))
    (=>
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@110@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@106@01 r) g@3@01) (img@107@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@110@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@110@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@114@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@114@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 g@3@01)
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 g@3@01))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@113@01 r) (Set_in (inv@112@01 r) g@3@01)) (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@117@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@112@01 r) g@3@01) (img@113@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@117@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@117@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@118@01 $Ref)) (!
  (=>
    (Set_in n@118@01 g@3@01)
    (and (= (inv@119@01 n@118@01) n@118@01) (img@120@01 n@118@01)))
  :pattern ((Set_in n@118@01 g@3@01))
  :pattern ((inv@119@01 n@118@01))
  :pattern ((img@120@01 n@118@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@120@01 r) (Set_in (inv@119@01 r) g@3@01)) (= (inv@119@01 r) r))
  :pattern ((inv@119@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)))
    (=>
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@124@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@119@01 r) g@3@01) (img@120@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@124@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@124@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@128@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@128@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (Set_in n@125@01 g@3@01)
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern ((Set_in n@125@01 g@3@01))
  :pattern ((inv@126@01 n@125@01))
  :pattern ((img@127@01 n@125@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@127@01 r) (Set_in (inv@126@01 r) g@3@01)) (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)))
    (=>
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@131@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@126@01 r) g@3@01) (img@127@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@131@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@131@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@135@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@135@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@3@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@3@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@3@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@138@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@3@01) (img@134@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@138@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@138@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@142@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@142@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@3@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@3@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@3@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@145@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@140@01 r) g@3@01) (img@141@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@145@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@145@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((v1@90@01 $Ref) (v2@91@01 $Ref)) (!
      (and
        (=>
          (not (= v1@90@01 v2@91@01))
          (and
            (not (= v1@90@01 v2@91@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@93@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
              :pattern ((inv@93@01 r))
              :qid |quant-u-257|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@99@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@101@01  $FVF<r>) r) r))
              :pattern ((inv@99@01 r))
              :qid |quant-u-265|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@106@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
              :pattern ((inv@106@01 r))
              :qid |quant-u-272|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@112@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@114@01  $FVF<r>) r) r))
              :pattern ((inv@112@01 r))
              :qid |quant-u-280|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@119@01 r) g@3@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r))
                  :pattern ((inv@119@01 r))
                  :qid |quant-u-287|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@126@01 r) g@3@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@128@01  $FVF<r>) r) r))
                  :pattern ((inv@126@01 r))
                  :qid |quant-u-295|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01)
                (=>
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
                  (and
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@133@01 r) g@3@01)
                        ($FVF.loc_l ($FVF.lookup_l (as sm@135@01  $FVF<l>) r) r))
                      :pattern ((inv@133@01 r))
                      :qid |quant-u-302|))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@140@01 r) g@3@01)
                        ($FVF.loc_r ($FVF.lookup_r (as sm@142@01  $FVF<r>) r) r))
                      :pattern ((inv@140@01 r))
                      :qid |quant-u-310|))
                    ($$%precondition ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01)))
                (or
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
                  (not
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))))
        (or (= v1@90@01 v2@91@01) (not (= v1@90@01 v2@91@01))))
      :pattern ((exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@90@01 $Ref) (v2@91@01 $Ref)) (!
    (=>
      (not (= v1@90@01 v2@91@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01)
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@110@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@117@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@124@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@131@01  $FVF<r>))) g@3@01) v1@90@01 x@4@01)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@138@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@145@01  $FVF<r>))) g@3@01) y@5@01 v2@91@01)))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@97@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@104@01  $FVF<r>))) g@3@01) v1@90@01 v2@91@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- link_right ----------
(declare-const g@146@01 Set<$Ref>)
(declare-const x@147@01 $Ref)
(declare-const y@148@01 $Ref)
(declare-const g@149@01 Set<$Ref>)
(declare-const x@150@01 $Ref)
(declare-const y@151@01 $Ref)
(push) ; 1
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 ($Snap.combine ($Snap.first $t@152@01) ($Snap.second $t@152@01))))
(assert (= ($Snap.first $t@152@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@150@01 g@149@01))
(assert (=
  ($Snap.second $t@152@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@152@01))
    ($Snap.second ($Snap.second $t@152@01)))))
(assert (= ($Snap.first ($Snap.second $t@152@01)) $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= y@151@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= y@151@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 25 | y@151@01 != Null | live]
; [else-branch: 25 | y@151@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 25 | y@151@01 != Null]
(assert (not (= y@151@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 3
(push) ; 3
; [else-branch: 25 | y@151@01 == Null]
(assert (= y@151@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= y@151@01 $Ref.null) (not (= y@151@01 $Ref.null))))
(assert (=> (not (= y@151@01 $Ref.null)) (Set_in y@151@01 g@149@01)))
(assert (=
  ($Snap.second ($Snap.second $t@152@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@152@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@152@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@149@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@152@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@01))))
  $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))
; [eval] (__right__() == __left__() ? write : 1 / 2)
; [eval] __right__() == __left__()
; [eval] __right__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 26 | __right__[__FieldEnum__] == __left__[__FieldEnum__] | dead]
; [else-branch: 26 | __right__[__FieldEnum__] != __left__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 26 | __right__[__FieldEnum__] != __left__[__FieldEnum__]]
(assert (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@153@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@153@01  $FVF<l>) x@150@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))
(assert (not (= x@150@01 $Ref.null)))
(declare-const sm@154@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@154@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@154@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@154@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@154@01  $FVF<l>) x@150@01) x@150@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))
; [eval] (__right__() == __right__() ? write : 1 / 2)
; [eval] __right__() == __right__()
; [eval] __right__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 27 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@155@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@155@01  $FVF<r>) x@150@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))
(declare-const sm@156@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@156@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@156@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@156@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@156@01  $FVF<r>) x@150@01) x@150@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))))
(declare-const n@157@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 28 | !(n@157@01 in g@149@01) | live]
; [else-branch: 28 | n@157@01 in g@149@01 | live]
(push) ; 4
; [then-branch: 28 | !(n@157@01 in g@149@01)]
(assert (not (Set_in n@157@01 g@149@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 28 | n@157@01 in g@149@01]
(assert (Set_in n@157@01 g@149@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@157@01 g@149@01) (not (Set_in n@157@01 g@149@01))))
(assert (and (Set_in n@157@01 g@149@01) (not (= n@157@01 x@150@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@158@01 ($Ref) $Ref)
(declare-fun img@159@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@157@01 $Ref)) (!
  (=>
    (and (Set_in n@157@01 g@149@01) (not (= n@157@01 x@150@01)))
    (or (Set_in n@157@01 g@149@01) (not (Set_in n@157@01 g@149@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) n@157@01) n@157@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@157@01 $Ref) (n2@157@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@157@01 g@149@01) (not (= n1@157@01 x@150@01)))
      (and (Set_in n2@157@01 g@149@01) (not (= n2@157@01 x@150@01)))
      (= n1@157@01 n2@157@01))
    (= n1@157@01 n2@157@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@157@01 $Ref)) (!
  (=>
    (and (Set_in n@157@01 g@149@01) (not (= n@157@01 x@150@01)))
    (and (= (inv@158@01 n@157@01) n@157@01) (img@159@01 n@157@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) n@157@01) n@157@01))
  :qid |quant-u-317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (= (inv@158@01 r) r))
  :pattern ((inv@158@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@157@01 $Ref)) (!
  (=>
    (and (Set_in n@157@01 g@149@01) (not (= n@157@01 x@150@01)))
    (not (= n@157@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) n@157@01) n@157@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@160@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
  :pattern ((inv@158@01 r))
  :qid |quant-u-318|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))))
(declare-const n$0@161@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 29 | !(n$0@161@01 in g@149@01) | live]
; [else-branch: 29 | n$0@161@01 in g@149@01 | live]
(push) ; 4
; [then-branch: 29 | !(n$0@161@01 in g@149@01)]
(assert (not (Set_in n$0@161@01 g@149@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 29 | n$0@161@01 in g@149@01]
(assert (Set_in n$0@161@01 g@149@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@161@01 g@149@01) (not (Set_in n$0@161@01 g@149@01))))
(assert (and (Set_in n$0@161@01 g@149@01) (not (= n$0@161@01 x@150@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@162@01 ($Ref) $Ref)
(declare-fun img@163@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@161@01 $Ref)) (!
  (=>
    (and (Set_in n$0@161@01 g@149@01) (not (= n$0@161@01 x@150@01)))
    (or (Set_in n$0@161@01 g@149@01) (not (Set_in n$0@161@01 g@149@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) n$0@161@01) n$0@161@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@161@01 $Ref) (n$02@161@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@161@01 g@149@01) (not (= n$01@161@01 x@150@01)))
      (and (Set_in n$02@161@01 g@149@01) (not (= n$02@161@01 x@150@01)))
      (= n$01@161@01 n$02@161@01))
    (= n$01@161@01 n$02@161@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@161@01 $Ref)) (!
  (=>
    (and (Set_in n$0@161@01 g@149@01) (not (= n$0@161@01 x@150@01)))
    (and (= (inv@162@01 n$0@161@01) n$0@161@01) (img@163@01 n$0@161@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) n$0@161@01) n$0@161@01))
  :qid |quant-u-320|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@161@01 $Ref)) (!
  (=>
    (and (Set_in n$0@161@01 g@149@01) (not (= n$0@161@01 x@150@01)))
    (not (= n$0@161@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) n$0@161@01) n$0@161@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@164@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) r) r))
  :pattern ((inv@162@01 r))
  :qid |quant-u-321|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@165@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 30 | !(n$1@165@01 in g@149@01) | live]
; [else-branch: 30 | n$1@165@01 in g@149@01 | live]
(push) ; 4
; [then-branch: 30 | !(n$1@165@01 in g@149@01)]
(assert (not (Set_in n$1@165@01 g@149@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 30 | n$1@165@01 in g@149@01]
(assert (Set_in n$1@165@01 g@149@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
    :qid |qp.fvfValDef118|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
      (=
        ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
    :qid |qp.fvfValDef119|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef120|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@165@01 x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@159@01 n$1@165@01)
        (and
          (Set_in (inv@158@01 n$1@165@01) g@149@01)
          (not (= (inv@158@01 n$1@165@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (=>
  (Set_in n$1@165@01 g@149@01)
  (and
    (Set_in n$1@165@01 g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01))))
(assert (or (Set_in n$1@165@01 g@149@01) (not (Set_in n$1@165@01 g@149@01))))
(push) ; 3
; [then-branch: 31 | n$1@165@01 in g@149@01 && Lookup(l, sm@160@01, n$1@165@01) != Null | live]
; [else-branch: 31 | !(n$1@165@01 in g@149@01 && Lookup(l, sm@160@01, n$1@165@01) != Null) | live]
(push) ; 4
; [then-branch: 31 | n$1@165@01 in g@149@01 && Lookup(l, sm@160@01, n$1@165@01) != Null]
(assert (and
  (Set_in n$1@165@01 g@149@01)
  (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
    :qid |qp.fvfValDef118|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
      (=
        ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
    :qid |qp.fvfValDef119|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef120|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@165@01 x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@159@01 n$1@165@01)
        (and
          (Set_in (inv@158@01 n$1@165@01) g@149@01)
          (not (= (inv@158@01 n$1@165@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 31 | !(n$1@165@01 in g@149@01 && Lookup(l, sm@160@01, n$1@165@01) != Null)]
(assert (not
  (and
    (Set_in n$1@165@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (=>
  (and
    (Set_in n$1@165@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))
  (and
    (Set_in n$1@165@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@165@01 g@149@01)
      (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))))
  (and
    (Set_in n$1@165@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@160@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@160@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@165@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@165@01 g@149@01)
      (and
        (Set_in n$1@165@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01)))
    (or (Set_in n$1@165@01 g@149@01) (not (Set_in n$1@165@01 g@149@01)))
    (=>
      (and
        (Set_in n$1@165@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))
      (and
        (Set_in n$1@165@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01)))
    (or
      (not
        (and
          (Set_in n$1@165@01 g@149@01)
          (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))))
      (and
        (Set_in n$1@165@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) g@149@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$1@165@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@165@01 g@149@01)
      (and
        (Set_in n$1@165@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01)))
    (or (Set_in n$1@165@01 g@149@01) (not (Set_in n$1@165@01 g@149@01)))
    (=>
      (and
        (Set_in n$1@165@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))
      (and
        (Set_in n$1@165@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01)))
    (or
      (not
        (and
          (Set_in n$1@165@01 g@149@01)
          (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null))))
      (and
        (Set_in n$1@165@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))))
  :pattern ((Set_in n$1@165@01 g@149@01) ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$1@165@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@165@01 g@149@01)
      (not (= ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) g@149@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) g@149@01))
  :pattern ((Set_in n$1@165@01 g@149@01) ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n$1@165@01) n$1@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@166@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 32 | !(n$2@166@01 in g@149@01) | live]
; [else-branch: 32 | n$2@166@01 in g@149@01 | live]
(push) ; 4
; [then-branch: 32 | !(n$2@166@01 in g@149@01)]
(assert (not (Set_in n$2@166@01 g@149@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 32 | n$2@166@01 in g@149@01]
(assert (Set_in n$2@166@01 g@149@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
    :qid |qp.fvfValDef121|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
      (=
        ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
    :qid |qp.fvfValDef122|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef123|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@166@01 x@150@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@163@01 n$2@166@01)
        (and
          (Set_in (inv@162@01 n$2@166@01) g@149@01)
          (not (= (inv@162@01 n$2@166@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (=>
  (Set_in n$2@166@01 g@149@01)
  (and
    (Set_in n$2@166@01 g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01))))
(assert (or (Set_in n$2@166@01 g@149@01) (not (Set_in n$2@166@01 g@149@01))))
(push) ; 3
; [then-branch: 33 | n$2@166@01 in g@149@01 && Lookup(r, sm@164@01, n$2@166@01) != Null | live]
; [else-branch: 33 | !(n$2@166@01 in g@149@01 && Lookup(r, sm@164@01, n$2@166@01) != Null) | live]
(push) ; 4
; [then-branch: 33 | n$2@166@01 in g@149@01 && Lookup(r, sm@164@01, n$2@166@01) != Null]
(assert (and
  (Set_in n$2@166@01 g@149@01)
  (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
    :qid |qp.fvfValDef121|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
      (=
        ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
    :qid |qp.fvfValDef122|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef123|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@166@01 x@150@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@163@01 n$2@166@01)
        (and
          (Set_in (inv@162@01 n$2@166@01) g@149@01)
          (not (= (inv@162@01 n$2@166@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 33 | !(n$2@166@01 in g@149@01 && Lookup(r, sm@164@01, n$2@166@01) != Null)]
(assert (not
  (and
    (Set_in n$2@166@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (=>
  (and
    (Set_in n$2@166@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))
  (and
    (Set_in n$2@166@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@166@01 g@149@01)
      (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))))
  (and
    (Set_in n$2@166@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@166@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@166@01 g@149@01)
      (and
        (Set_in n$2@166@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01)))
    (or (Set_in n$2@166@01 g@149@01) (not (Set_in n$2@166@01 g@149@01)))
    (=>
      (and
        (Set_in n$2@166@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))
      (and
        (Set_in n$2@166@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01)))
    (or
      (not
        (and
          (Set_in n$2@166@01 g@149@01)
          (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))))
      (and
        (Set_in n$2@166@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) g@149@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$2@166@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@166@01 g@149@01)
      (and
        (Set_in n$2@166@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01)))
    (or (Set_in n$2@166@01 g@149@01) (not (Set_in n$2@166@01 g@149@01)))
    (=>
      (and
        (Set_in n$2@166@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))
      (and
        (Set_in n$2@166@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01)))
    (or
      (not
        (and
          (Set_in n$2@166@01 g@149@01)
          (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null))))
      (and
        (Set_in n$2@166@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))))
  :pattern ((Set_in n$2@166@01 g@149@01) ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$2@166@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@166@01 g@149@01)
      (not (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) g@149@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) g@149@01))
  :pattern ((Set_in n$2@166@01 g@149@01) ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) n$2@166@01) n$2@166@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))))
  $Snap.unit))
; [eval] x.r == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
    :qid |qp.fvfValDef121|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
      (=
        ($FVF.lookup_r (as sm@164@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
    :qid |qp.fvfValDef122|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@164@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef123|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@164@01  $FVF<r>) x@150@01) x@150@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@163@01 x@150@01)
        (and
          (Set_in (inv@162@01 x@150@01) g@149@01)
          (not (= (inv@162@01 x@150@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_r (as sm@164@01  $FVF<r>) x@150@01) $Ref.null))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 ($Snap.combine ($Snap.first $t@167@01) ($Snap.second $t@167@01))))
(assert (= ($Snap.first $t@167@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@167@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@167@01))
    ($Snap.second ($Snap.second $t@167@01)))))
(assert (= ($Snap.first ($Snap.second $t@167@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@167@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@167@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
; [eval] (__right__() == __left__() ? write : 1 / 2)
; [eval] __right__() == __left__()
; [eval] __right__()
; [eval] __left__()
(push) ; 3
; [then-branch: 34 | __right__[__FieldEnum__] == __left__[__FieldEnum__] | dead]
; [else-branch: 34 | __right__[__FieldEnum__] != __left__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 34 | __right__[__FieldEnum__] != __left__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@168@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@168@01  $FVF<l>) x@150@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@167@01))))))
(declare-const sm@169@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@169@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@169@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@169@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@169@01  $FVF<l>) x@150@01) x@150@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@167@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
; [eval] (__right__() == __right__() ? write : 1 / 2)
; [eval] __right__() == __right__()
; [eval] __right__()
; [eval] __right__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 35 | True | live]
; [else-branch: 35 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 35 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@170@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@170@01  $FVF<r>) x@150@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
(declare-const sm@171@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@171@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@171@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@171@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@171@01  $FVF<r>) x@150@01) x@150@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
(declare-const n$3@172@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 36 | !(n$3@172@01 in g@149@01) | live]
; [else-branch: 36 | n$3@172@01 in g@149@01 | live]
(push) ; 5
; [then-branch: 36 | !(n$3@172@01 in g@149@01)]
(assert (not (Set_in n$3@172@01 g@149@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | n$3@172@01 in g@149@01]
(assert (Set_in n$3@172@01 g@149@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@172@01 g@149@01) (not (Set_in n$3@172@01 g@149@01))))
(assert (and (Set_in n$3@172@01 g@149@01) (not (= n$3@172@01 x@150@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@173@01 ($Ref) $Ref)
(declare-fun img@174@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@172@01 $Ref)) (!
  (=>
    (and (Set_in n$3@172@01 g@149@01) (not (= n$3@172@01 x@150@01)))
    (or (Set_in n$3@172@01 g@149@01) (not (Set_in n$3@172@01 g@149@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) n$3@172@01) n$3@172@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@172@01 $Ref) (n$32@172@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@172@01 g@149@01) (not (= n$31@172@01 x@150@01)))
      (and (Set_in n$32@172@01 g@149@01) (not (= n$32@172@01 x@150@01)))
      (= n$31@172@01 n$32@172@01))
    (= n$31@172@01 n$32@172@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@172@01 $Ref)) (!
  (=>
    (and (Set_in n$3@172@01 g@149@01) (not (= n$3@172@01 x@150@01)))
    (and (= (inv@173@01 n$3@172@01) n$3@172@01) (img@174@01 n$3@172@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) n$3@172@01) n$3@172@01))
  :qid |quant-u-323|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@174@01 r)
      (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
    (= (inv@173@01 r) r))
  :pattern ((inv@173@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@172@01 $Ref)) (!
  (=>
    (and (Set_in n$3@172@01 g@149@01) (not (= n$3@172@01 x@150@01)))
    (not (= n$3@172@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) n$3@172@01) n$3@172@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@175@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@174@01 r)
      (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
  :pattern ((inv@173@01 r))
  :qid |quant-u-324|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
(declare-const n$4@176@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 37 | !(n$4@176@01 in g@149@01) | live]
; [else-branch: 37 | n$4@176@01 in g@149@01 | live]
(push) ; 5
; [then-branch: 37 | !(n$4@176@01 in g@149@01)]
(assert (not (Set_in n$4@176@01 g@149@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 37 | n$4@176@01 in g@149@01]
(assert (Set_in n$4@176@01 g@149@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@176@01 g@149@01) (not (Set_in n$4@176@01 g@149@01))))
(assert (and (Set_in n$4@176@01 g@149@01) (not (= n$4@176@01 x@150@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@177@01 ($Ref) $Ref)
(declare-fun img@178@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@176@01 $Ref)) (!
  (=>
    (and (Set_in n$4@176@01 g@149@01) (not (= n$4@176@01 x@150@01)))
    (or (Set_in n$4@176@01 g@149@01) (not (Set_in n$4@176@01 g@149@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) n$4@176@01) n$4@176@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@176@01 $Ref) (n$42@176@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@176@01 g@149@01) (not (= n$41@176@01 x@150@01)))
      (and (Set_in n$42@176@01 g@149@01) (not (= n$42@176@01 x@150@01)))
      (= n$41@176@01 n$42@176@01))
    (= n$41@176@01 n$42@176@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@176@01 $Ref)) (!
  (=>
    (and (Set_in n$4@176@01 g@149@01) (not (= n$4@176@01 x@150@01)))
    (and (= (inv@177@01 n$4@176@01) n$4@176@01) (img@178@01 n$4@176@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) n$4@176@01) n$4@176@01))
  :qid |quant-u-326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (= (inv@177@01 r) r))
  :pattern ((inv@177@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@176@01 $Ref)) (!
  (=>
    (and (Set_in n$4@176@01 g@149@01) (not (= n$4@176@01 x@150@01)))
    (not (= n$4@176@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) n$4@176@01) n$4@176@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@179@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) r) r))
  :pattern ((inv@177@01 r))
  :qid |quant-u-327|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@180@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 38 | !(n$5@180@01 in g@149@01) | live]
; [else-branch: 38 | n$5@180@01 in g@149@01 | live]
(push) ; 5
; [then-branch: 38 | !(n$5@180@01 in g@149@01)]
(assert (not (Set_in n$5@180@01 g@149@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 38 | n$5@180@01 in g@149@01]
(assert (Set_in n$5@180@01 g@149@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
    :qid |qp.fvfValDef128|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
      (=
        ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef129|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef130|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@180@01 x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@174@01 n$5@180@01)
        (and
          (Set_in (inv@173@01 n$5@180@01) g@149@01)
          (not (= (inv@173@01 n$5@180@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@174@01 r)
      (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (=>
  (Set_in n$5@180@01 g@149@01)
  (and
    (Set_in n$5@180@01 g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01))))
(assert (or (Set_in n$5@180@01 g@149@01) (not (Set_in n$5@180@01 g@149@01))))
(push) ; 4
; [then-branch: 39 | n$5@180@01 in g@149@01 && Lookup(l, sm@175@01, n$5@180@01) != Null | live]
; [else-branch: 39 | !(n$5@180@01 in g@149@01 && Lookup(l, sm@175@01, n$5@180@01) != Null) | live]
(push) ; 5
; [then-branch: 39 | n$5@180@01 in g@149@01 && Lookup(l, sm@175@01, n$5@180@01) != Null]
(assert (and
  (Set_in n$5@180@01 g@149@01)
  (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
    :qid |qp.fvfValDef128|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
      (=
        ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef129|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef130|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@180@01 x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@174@01 n$5@180@01)
        (and
          (Set_in (inv@173@01 n$5@180@01) g@149@01)
          (not (= (inv@173@01 n$5@180@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 39 | !(n$5@180@01 in g@149@01 && Lookup(l, sm@175@01, n$5@180@01) != Null)]
(assert (not
  (and
    (Set_in n$5@180@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@174@01 r)
      (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (=>
  (and
    (Set_in n$5@180@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))
  (and
    (Set_in n$5@180@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@180@01 g@149@01)
      (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))))
  (and
    (Set_in n$5@180@01 g@149@01)
    (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@174@01 r)
      (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@175@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@175@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@180@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@180@01 g@149@01)
      (and
        (Set_in n$5@180@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01)))
    (or (Set_in n$5@180@01 g@149@01) (not (Set_in n$5@180@01 g@149@01)))
    (=>
      (and
        (Set_in n$5@180@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))
      (and
        (Set_in n$5@180@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01)))
    (or
      (not
        (and
          (Set_in n$5@180@01 g@149@01)
          (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))))
      (and
        (Set_in n$5@180@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) g@149@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$5@180@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@180@01 g@149@01)
      (and
        (Set_in n$5@180@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01)))
    (or (Set_in n$5@180@01 g@149@01) (not (Set_in n$5@180@01 g@149@01)))
    (=>
      (and
        (Set_in n$5@180@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))
      (and
        (Set_in n$5@180@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01)))
    (or
      (not
        (and
          (Set_in n$5@180@01 g@149@01)
          (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null))))
      (and
        (Set_in n$5@180@01 g@149@01)
        (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))))
  :pattern ((Set_in n$5@180@01 g@149@01) ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$5@180@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@180@01 g@149@01)
      (not (= ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) g@149@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) g@149@01))
  :pattern ((Set_in n$5@180@01 g@149@01) ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n$5@180@01) n$5@180@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@181@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 40 | !(n$6@181@01 in g@149@01) | live]
; [else-branch: 40 | n$6@181@01 in g@149@01 | live]
(push) ; 5
; [then-branch: 40 | !(n$6@181@01 in g@149@01)]
(assert (not (Set_in n$6@181@01 g@149@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 40 | n$6@181@01 in g@149@01]
(assert (Set_in n$6@181@01 g@149@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
    :qid |qp.fvfValDef131|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
      (=
        ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
    :qid |qp.fvfValDef132|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef133|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@181@01 x@150@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@178@01 n$6@181@01)
        (and
          (Set_in (inv@177@01 n$6@181@01) g@149@01)
          (not (= (inv@177@01 n$6@181@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
(assert (=>
  (Set_in n$6@181@01 g@149@01)
  (and
    (Set_in n$6@181@01 g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01))))
(assert (or (Set_in n$6@181@01 g@149@01) (not (Set_in n$6@181@01 g@149@01))))
(push) ; 4
; [then-branch: 41 | n$6@181@01 in g@149@01 && Lookup(r, sm@179@01, n$6@181@01) != Null | live]
; [else-branch: 41 | !(n$6@181@01 in g@149@01 && Lookup(r, sm@179@01, n$6@181@01) != Null) | live]
(push) ; 5
; [then-branch: 41 | n$6@181@01 in g@149@01 && Lookup(r, sm@179@01, n$6@181@01) != Null]
(assert (and
  (Set_in n$6@181@01 g@149@01)
  (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
    :qid |qp.fvfValDef131|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
      (=
        ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
    :qid |qp.fvfValDef132|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef133|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@181@01 x@150@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@178@01 n$6@181@01)
        (and
          (Set_in (inv@177@01 n$6@181@01) g@149@01)
          (not (= (inv@177@01 n$6@181@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 41 | !(n$6@181@01 in g@149@01 && Lookup(r, sm@179@01, n$6@181@01) != Null)]
(assert (not
  (and
    (Set_in n$6@181@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
(assert (=>
  (and
    (Set_in n$6@181@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))
  (and
    (Set_in n$6@181@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@181@01 g@149@01)
      (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))))
  (and
    (Set_in n$6@181@01 g@149@01)
    (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@181@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@181@01 g@149@01)
      (and
        (Set_in n$6@181@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01)))
    (or (Set_in n$6@181@01 g@149@01) (not (Set_in n$6@181@01 g@149@01)))
    (=>
      (and
        (Set_in n$6@181@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))
      (and
        (Set_in n$6@181@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01)))
    (or
      (not
        (and
          (Set_in n$6@181@01 g@149@01)
          (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))))
      (and
        (Set_in n$6@181@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) g@149@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$6@181@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@181@01 g@149@01)
      (and
        (Set_in n$6@181@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01)))
    (or (Set_in n$6@181@01 g@149@01) (not (Set_in n$6@181@01 g@149@01)))
    (=>
      (and
        (Set_in n$6@181@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))
      (and
        (Set_in n$6@181@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01)))
    (or
      (not
        (and
          (Set_in n$6@181@01 g@149@01)
          (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null))))
      (and
        (Set_in n$6@181@01 g@149@01)
        (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))))
  :pattern ((Set_in n$6@181@01 g@149@01) ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$6@181@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@181@01 g@149@01)
      (not (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) g@149@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) g@149@01))
  :pattern ((Set_in n$6@181@01 g@149@01) ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) n$6@181@01) n$6@181@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
  $Snap.unit))
; [eval] x.r == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@150@01)
      (=
        ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
    :qid |qp.fvfValDef131|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
      (=
        ($FVF.lookup_r (as sm@179@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
    :qid |qp.fvfValDef132|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@179@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef133|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@179@01  $FVF<r>) x@150@01) x@150@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@178@01 x@150@01)
        (and
          (Set_in (inv@177@01 x@150@01) g@149@01)
          (not (= (inv@177@01 x@150@01) x@150@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_r (as sm@179@01  $FVF<r>) x@150@01) y@151@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@151@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@151@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 42 | y@151@01 == Null | live]
; [else-branch: 42 | y@151@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 42 | y@151@01 == Null]
(assert (= y@151@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@182@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@182@01 g@149@01))
(pop) ; 6
(declare-fun inv@183@01 ($Ref) $Ref)
(declare-fun img@184@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@182@01 $Ref) (n2@182@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@182@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n1@182@01) n1@182@01))
      (and
        (Set_in n2@182@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n2@182@01) n2@182@01))
      (= n1@182@01 n2@182@01))
    (= n1@182@01 n2@182@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@149@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@149@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@149@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@183@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
  :pattern ((inv@183@01 r))
  :qid |quant-u-329|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@185@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r) (= r (inv@183@01 r)))
    ($Perm.min
      (ite
        (and
          (img@174@01 r)
          (and
            (Set_in (inv@173@01 r) g@149@01)
            (not (= (inv@173@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@186@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r) (= r (inv@183@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@185@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@174@01 r)
          (and
            (Set_in (inv@173@01 r) g@149@01)
            (not (= (inv@173@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@185@01 r))
    $Perm.No)
  
  :qid |quant-u-331|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r) (= r (inv@183@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@185@01 r)) $Perm.No))
  
  :qid |quant-u-332|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 2)) (pTaken@186@01 x@150@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r) (= r (inv@183@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@185@01 r)) (pTaken@186@01 r))
      $Perm.No))
  
  :qid |quant-u-334|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@187@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>)))
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r))
      (Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>))))
  :qid |qp.fvfDomDef137|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@187@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@187@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef136|)))
(declare-const n@188@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@188@01 g@149@01))
(pop) ; 6
(declare-fun inv@189@01 ($Ref) $Ref)
(declare-fun img@190@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@191@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@191@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@191@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef140|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@188@01 $Ref) (n2@188@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@188@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@191@01  $FVF<r>) n1@188@01) n1@188@01))
      (and
        (Set_in n2@188@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@191@01  $FVF<r>) n2@188@01) n2@188@01))
      (= n1@188@01 n2@188@01))
    (= n1@188@01 n2@188@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@188@01 $Ref)) (!
  (=>
    (Set_in n@188@01 g@149@01)
    (and (= (inv@189@01 n@188@01) n@188@01) (img@190@01 n@188@01)))
  :pattern ((Set_in n@188@01 g@149@01))
  :pattern ((inv@189@01 n@188@01))
  :pattern ((img@190@01 n@188@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@190@01 r) (Set_in (inv@189@01 r) g@149@01)) (= (inv@189@01 r) r))
  :pattern ((inv@189@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@189@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@191@01  $FVF<r>) r) r))
  :pattern ((inv@189@01 r))
  :qid |quant-u-336|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@192@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r) (= r (inv@189@01 r)))
    ($Perm.min
      (ite
        (and
          (img@178@01 r)
          (and
            (Set_in (inv@177@01 r) g@149@01)
            (not (= (inv@177@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@193@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r) (= r (inv@189@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@192@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@178@01 r)
          (and
            (Set_in (inv@177@01 r) g@149@01)
            (not (= (inv@177@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@192@01 r))
    $Perm.No)
  
  :qid |quant-u-338|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r) (= r (inv@189@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@192@01 r)) $Perm.No))
  
  :qid |quant-u-339|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@193@01 x@150@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@193@01 r) $Perm.No)
  
  :qid |quant-u-341|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r) (= r (inv@189@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@192@01 r)) (pTaken@193@01 r))
      $Perm.No))
  
  :qid |quant-u-342|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@194@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>)))
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r)))
    (=>
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r))
      (Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>))))
  :qid |qp.fvfDomDef144|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@194@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@194@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef143|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@187@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@194@01  $FVF<r>))) g@149@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@149@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@149@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@149@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>)))
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r))
      (Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@187@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@187@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@191@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@191@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef140|)))
(assert (forall ((n@188@01 $Ref)) (!
  (=>
    (Set_in n@188@01 g@149@01)
    (and (= (inv@189@01 n@188@01) n@188@01) (img@190@01 n@188@01)))
  :pattern ((Set_in n@188@01 g@149@01))
  :pattern ((inv@189@01 n@188@01))
  :pattern ((img@190@01 n@188@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@190@01 r) (Set_in (inv@189@01 r) g@149@01)) (= (inv@189@01 r) r))
  :pattern ((inv@189@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>)))
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r)))
    (=>
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r))
      (Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>))))
  :qid |qp.fvfDomDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@194@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@194@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef143|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@183@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
    :pattern ((inv@183@01 r))
    :qid |quant-u-329|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@189@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@191@01  $FVF<r>) r) r))
    :pattern ((inv@189@01 r))
    :qid |quant-u-336|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@187@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@194@01  $FVF<r>))) g@149@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 5
(declare-const n@195@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@195@01 g@149@01))
(pop) ; 6
(declare-fun inv@196@01 ($Ref) $Ref)
(declare-fun img@197@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@195@01 $Ref) (n2@195@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@195@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n1@195@01) n1@195@01))
      (and
        (Set_in n2@195@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n2@195@01) n2@195@01))
      (= n1@195@01 n2@195@01))
    (= n1@195@01 n2@195@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@195@01 $Ref)) (!
  (=>
    (Set_in n@195@01 g@149@01)
    (and (= (inv@196@01 n@195@01) n@195@01) (img@197@01 n@195@01)))
  :pattern ((Set_in n@195@01 g@149@01))
  :pattern ((inv@196@01 n@195@01))
  :pattern ((img@197@01 n@195@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@197@01 r) (Set_in (inv@196@01 r) g@149@01)) (= (inv@196@01 r) r))
  :pattern ((inv@196@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@196@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
  :pattern ((inv@196@01 r))
  :qid |quant-u-344|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@198@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r) (= r (inv@196@01 r)))
    ($Perm.min
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@199@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r) (= r (inv@196@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@198@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@198@01 r))
    $Perm.No)
  
  :qid |quant-u-346|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r) (= r (inv@196@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@198@01 r)) $Perm.No))
  
  :qid |quant-u-347|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 2)) (pTaken@199@01 x@150@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r) (= r (inv@196@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@198@01 r)) (pTaken@199@01 r))
      $Perm.No))
  
  :qid |quant-u-349|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@200@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>)))
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r)))
    (=>
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r))
      (Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>))))
  :qid |qp.fvfDomDef148|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@200@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@200@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef147|)))
(declare-const n@201@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@201@01 g@149@01))
(pop) ; 6
(declare-fun inv@202@01 ($Ref) $Ref)
(declare-fun img@203@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@204@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@204@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@204@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef151|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@201@01 $Ref) (n2@201@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@201@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@204@01  $FVF<r>) n1@201@01) n1@201@01))
      (and
        (Set_in n2@201@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@204@01  $FVF<r>) n2@201@01) n2@201@01))
      (= n1@201@01 n2@201@01))
    (= n1@201@01 n2@201@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@149@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@149@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@149@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@202@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@204@01  $FVF<r>) r) r))
  :pattern ((inv@202@01 r))
  :qid |quant-u-351|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@205@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r) (= r (inv@202@01 r)))
    ($Perm.min
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@206@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r) (= r (inv@202@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@205@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@205@01 r))
    $Perm.No)
  
  :qid |quant-u-353|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r) (= r (inv@202@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@205@01 r)) $Perm.No))
  
  :qid |quant-u-354|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@206@01 x@150@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@206@01 r) $Perm.No)
  
  :qid |quant-u-356|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r) (= r (inv@202@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@205@01 r)) (pTaken@206@01 r))
      $Perm.No))
  
  :qid |quant-u-357|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@207@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef155|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@200@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@149@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@195@01 $Ref)) (!
  (=>
    (Set_in n@195@01 g@149@01)
    (and (= (inv@196@01 n@195@01) n@195@01) (img@197@01 n@195@01)))
  :pattern ((Set_in n@195@01 g@149@01))
  :pattern ((inv@196@01 n@195@01))
  :pattern ((img@197@01 n@195@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@197@01 r) (Set_in (inv@196@01 r) g@149@01)) (= (inv@196@01 r) r))
  :pattern ((inv@196@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>)))
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r)))
    (=>
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r))
      (Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>))))
  :qid |qp.fvfDomDef148|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@200@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@200@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@204@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@204@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@149@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@149@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@149@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@196@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
    :pattern ((inv@196@01 r))
    :qid |quant-u-344|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@202@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@204@01  $FVF<r>) r) r))
    :pattern ((inv@202@01 r))
    :qid |quant-u-351|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@200@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@149@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 42 | y@151@01 != Null]
(assert (not (= y@151@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@149@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@149@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@149@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>)))
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r))
      (Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@187@01  $FVF<l>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@187@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@149@01) (img@184@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@187@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@187@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@191@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@191@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@191@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef140|)))
(assert (forall ((n@188@01 $Ref)) (!
  (=>
    (Set_in n@188@01 g@149@01)
    (and (= (inv@189@01 n@188@01) n@188@01) (img@190@01 n@188@01)))
  :pattern ((Set_in n@188@01 g@149@01))
  :pattern ((inv@189@01 n@188@01))
  :pattern ((img@190@01 n@188@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@190@01 r) (Set_in (inv@189@01 r) g@149@01)) (= (inv@189@01 r) r))
  :pattern ((inv@189@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>)))
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r)))
    (=>
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r))
      (Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@194@01  $FVF<r>))))
  :qid |qp.fvfDomDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@194@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@189@01 r) g@149@01) (img@190@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@194@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@194@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef143|)))
(assert (forall ((n@195@01 $Ref)) (!
  (=>
    (Set_in n@195@01 g@149@01)
    (and (= (inv@196@01 n@195@01) n@195@01) (img@197@01 n@195@01)))
  :pattern ((Set_in n@195@01 g@149@01))
  :pattern ((inv@196@01 n@195@01))
  :pattern ((img@197@01 n@195@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@197@01 r) (Set_in (inv@196@01 r) g@149@01)) (= (inv@196@01 r) r))
  :pattern ((inv@196@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>)))
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r)))
    (=>
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r))
      (Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@200@01  $FVF<l>))))
  :qid |qp.fvfDomDef148|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@200@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@196@01 r) g@149@01) (img@197@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@200@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@200@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@204@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@204@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@204@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@149@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@149@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@149@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@202@01 r) g@149@01) (img@203@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (=>
  (= y@151@01 $Ref.null)
  (and
    (= y@151@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@183@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
      :pattern ((inv@183@01 r))
      :qid |quant-u-329|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@189@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@191@01  $FVF<r>) r) r))
      :pattern ((inv@189@01 r))
      :qid |quant-u-336|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@187@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@194@01  $FVF<r>))) g@149@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@196@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
      :pattern ((inv@196@01 r))
      :qid |quant-u-344|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@202@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@204@01  $FVF<r>) r) r))
      :pattern ((inv@202@01 r))
      :qid |quant-u-351|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@200@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@149@01))))
; Joined path conditions
(assert (or (not (= y@151@01 $Ref.null)) (= y@151@01 $Ref.null)))
(assert (=>
  (= y@151@01 $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@187@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@194@01  $FVF<r>))) g@149@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@200@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@149@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@151@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@151@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 43 | y@151@01 != Null | live]
; [else-branch: 43 | y@151@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 43 | y@151@01 != Null]
(assert (not (= y@151@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@208@01 $Ref)
(declare-const v2@209@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@210@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@210@01 g@149@01))
(pop) ; 7
(declare-fun inv@211@01 ($Ref) $Ref)
(declare-fun img@212@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@210@01 $Ref) (n2@210@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@210@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n1@210@01) n1@210@01))
      (and
        (Set_in n2@210@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n2@210@01) n2@210@01))
      (= n1@210@01 n2@210@01))
    (= n1@210@01 n2@210@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@210@01 $Ref)) (!
  (=>
    (Set_in n@210@01 g@149@01)
    (and (= (inv@211@01 n@210@01) n@210@01) (img@212@01 n@210@01)))
  :pattern ((Set_in n@210@01 g@149@01))
  :pattern ((inv@211@01 n@210@01))
  :pattern ((img@212@01 n@210@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@212@01 r) (Set_in (inv@211@01 r) g@149@01)) (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@211@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
  :pattern ((inv@211@01 r))
  :qid |quant-u-359|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@213@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r) (= r (inv@211@01 r)))
    ($Perm.min
      (ite
        (and
          (img@174@01 r)
          (and
            (Set_in (inv@173@01 r) g@149@01)
            (not (= (inv@173@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@214@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r) (= r (inv@211@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@213@01 r v1@208@01 v2@209@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@174@01 r)
          (and
            (Set_in (inv@173@01 r) g@149@01)
            (not (= (inv@173@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@213@01 r v1@208@01 v2@209@01))
    $Perm.No)
  
  :qid |quant-u-361|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r) (= r (inv@211@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@213@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-362|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@214@01 x@150@01 v1@208@01 v2@209@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r) (= r (inv@211@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@213@01 r v1@208@01 v2@209@01))
        (pTaken@214@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-364|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@215@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)))
    (=>
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(declare-const n@216@01 $Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@216@01 g@149@01))
(pop) ; 7
(declare-fun inv@217@01 ($Ref) $Ref)
(declare-fun img@218@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@219@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@216@01 $Ref) (n2@216@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@216@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@219@01  $FVF<r>) n1@216@01) n1@216@01))
      (and
        (Set_in n2@216@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@219@01  $FVF<r>) n2@216@01) n2@216@01))
      (= n1@216@01 n2@216@01))
    (= n1@216@01 n2@216@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@216@01 $Ref)) (!
  (=>
    (Set_in n@216@01 g@149@01)
    (and (= (inv@217@01 n@216@01) n@216@01) (img@218@01 n@216@01)))
  :pattern ((Set_in n@216@01 g@149@01))
  :pattern ((inv@217@01 n@216@01))
  :pattern ((img@218@01 n@216@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@218@01 r) (Set_in (inv@217@01 r) g@149@01)) (= (inv@217@01 r) r))
  :pattern ((inv@217@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@217@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@219@01  $FVF<r>) r) r))
  :pattern ((inv@217@01 r))
  :qid |quant-u-366|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@220@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r) (= r (inv@217@01 r)))
    ($Perm.min
      (ite
        (and
          (img@178@01 r)
          (and
            (Set_in (inv@177@01 r) g@149@01)
            (not (= (inv@177@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@221@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r) (= r (inv@217@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@220@01 r v1@208@01 v2@209@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@178@01 r)
          (and
            (Set_in (inv@177@01 r) g@149@01)
            (not (= (inv@177@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@220@01 r v1@208@01 v2@209@01))
    $Perm.No)
  
  :qid |quant-u-368|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r) (= r (inv@217@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@220@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-369|))))
(check-sat)
; unknown
(pop) ; 7
; 0,06s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@221@01 x@150@01 v1@208@01 v2@209@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,05s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@221@01 r v1@208@01 v2@209@01) $Perm.No)
  
  :qid |quant-u-371|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r) (= r (inv@217@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@220@01 r v1@208@01 v2@209@01))
        (pTaken@221@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-372|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@222@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)))
    (=>
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@215@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@222@01  $FVF<r>))) g@149@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@210@01 $Ref)) (!
  (=>
    (Set_in n@210@01 g@149@01)
    (and (= (inv@211@01 n@210@01) n@210@01) (img@212@01 n@210@01)))
  :pattern ((Set_in n@210@01 g@149@01))
  :pattern ((inv@211@01 n@210@01))
  :pattern ((img@212@01 n@210@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@212@01 r) (Set_in (inv@211@01 r) g@149@01)) (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)))
    (=>
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@216@01 $Ref)) (!
  (=>
    (Set_in n@216@01 g@149@01)
    (and (= (inv@217@01 n@216@01) n@216@01) (img@218@01 n@216@01)))
  :pattern ((Set_in n@216@01 g@149@01))
  :pattern ((inv@217@01 n@216@01))
  :pattern ((img@218@01 n@216@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@218@01 r) (Set_in (inv@217@01 r) g@149@01)) (= (inv@217@01 r) r))
  :pattern ((inv@217@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)))
    (=>
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@211@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
    :pattern ((inv@211@01 r))
    :qid |quant-u-359|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@217@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@219@01  $FVF<r>) r) r))
    :pattern ((inv@217@01 r))
    :qid |quant-u-366|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@215@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@222@01  $FVF<r>))) g@149@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@223@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@223@01 g@149@01))
(pop) ; 7
(declare-fun inv@224@01 ($Ref) $Ref)
(declare-fun img@225@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@223@01 $Ref) (n2@223@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@223@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n1@223@01) n1@223@01))
      (and
        (Set_in n2@223@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n2@223@01) n2@223@01))
      (= n1@223@01 n2@223@01))
    (= n1@223@01 n2@223@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@149@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@149@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@149@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@224@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
  :pattern ((inv@224@01 r))
  :qid |quant-u-374|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@226@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r) (= r (inv@224@01 r)))
    ($Perm.min
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@227@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r) (= r (inv@224@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@226@01 r v1@208@01 v2@209@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@226@01 r v1@208@01 v2@209@01))
    $Perm.No)
  
  :qid |quant-u-376|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r) (= r (inv@224@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@226@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-377|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@227@01 x@150@01 v1@208@01 v2@209@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r) (= r (inv@224@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@226@01 r v1@208@01 v2@209@01))
        (pTaken@227@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-379|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@228@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(declare-const n@229@01 $Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@229@01 g@149@01))
(pop) ; 7
(declare-fun inv@230@01 ($Ref) $Ref)
(declare-fun img@231@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@232@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@229@01 $Ref) (n2@229@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@229@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@232@01  $FVF<r>) n1@229@01) n1@229@01))
      (and
        (Set_in n2@229@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@232@01  $FVF<r>) n2@229@01) n2@229@01))
      (= n1@229@01 n2@229@01))
    (= n1@229@01 n2@229@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@149@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@149@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@149@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@230@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@232@01  $FVF<r>) r) r))
  :pattern ((inv@230@01 r))
  :qid |quant-u-381|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@233@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r) (= r (inv@230@01 r)))
    ($Perm.min
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@234@01 ((r $Ref) (v1@208@01 $Ref) (v2@209@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r) (= r (inv@230@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@233@01 r v1@208@01 v2@209@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@233@01 r v1@208@01 v2@209@01))
    $Perm.No)
  
  :qid |quant-u-383|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r) (= r (inv@230@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@233@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-384|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@234@01 x@150@01 v1@208@01 v2@209@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@234@01 r v1@208@01 v2@209@01) $Perm.No)
  
  :qid |quant-u-386|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r) (= r (inv@230@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@233@01 r v1@208@01 v2@209@01))
        (pTaken@234@01 r v1@208@01 v2@209@01))
      $Perm.No))
  
  :qid |quant-u-387|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@235@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@149@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@149@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@149@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@149@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@149@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@149@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@224@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
    :pattern ((inv@224@01 r))
    :qid |quant-u-374|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@230@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@232@01  $FVF<r>) r) r))
    :pattern ((inv@230@01 r))
    :qid |quant-u-381|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 44 | edge[Bool]($$((sm@228@01, sm@235@01), g@149@01), v1@208@01, v2@209@01) | live]
; [else-branch: 44 | !(edge[Bool]($$((sm@228@01, sm@235@01), g@149@01), v1@208@01, v2@209@01)) | live]
(push) ; 7
; [then-branch: 44 | edge[Bool]($$((sm@228@01, sm@235@01), g@149@01), v1@208@01, v2@209@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
(pop) ; 7
(push) ; 7
; [else-branch: 44 | !(edge[Bool]($$((sm@228@01, sm@235@01), g@149@01), v1@208@01, v2@209@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 8
; [then-branch: 45 | v1@208@01 != x@150@01 | live]
; [else-branch: 45 | v1@208@01 == x@150@01 | live]
(push) ; 9
; [then-branch: 45 | v1@208@01 != x@150@01]
(assert (not (= v1@208@01 x@150@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 45 | v1@208@01 == x@150@01]
(assert (= v1@208@01 x@150@01))
; [eval] v2 == y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@208@01 x@150@01) (not (= v1@208@01 x@150@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
  (and
    (not
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
    (or (= v1@208@01 x@150@01) (not (= v1@208@01 x@150@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@210@01 $Ref)) (!
  (=>
    (Set_in n@210@01 g@149@01)
    (and (= (inv@211@01 n@210@01) n@210@01) (img@212@01 n@210@01)))
  :pattern ((Set_in n@210@01 g@149@01))
  :pattern ((inv@211@01 n@210@01))
  :pattern ((img@212@01 n@210@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@212@01 r) (Set_in (inv@211@01 r) g@149@01)) (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)))
    (=>
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@216@01 $Ref)) (!
  (=>
    (Set_in n@216@01 g@149@01)
    (and (= (inv@217@01 n@216@01) n@216@01) (img@218@01 n@216@01)))
  :pattern ((Set_in n@216@01 g@149@01))
  :pattern ((inv@217@01 n@216@01))
  :pattern ((img@218@01 n@216@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@218@01 r) (Set_in (inv@217@01 r) g@149@01)) (= (inv@217@01 r) r))
  :pattern ((inv@217@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)))
    (=>
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@149@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@149@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@149@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@149@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@149@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@149@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@211@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
  :pattern ((inv@211@01 r))
  :qid |quant-u-359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@217@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@219@01  $FVF<r>) r) r))
  :pattern ((inv@217@01 r))
  :qid |quant-u-366|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@215@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@222@01  $FVF<r>))) g@149@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@224@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
  :pattern ((inv@224@01 r))
  :qid |quant-u-374|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@230@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@232@01  $FVF<r>) r) r))
  :pattern ((inv@230@01 r))
  :qid |quant-u-381|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@208@01 $Ref) (v2@209@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
      (and
        (not
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
        (or (= v1@208@01 x@150@01) (not (= v1@208@01 x@150@01)))))
    (or
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01)))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@267@27@269@78-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 43 | y@151@01 == Null]
(assert (= y@151@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@210@01 $Ref)) (!
  (=>
    (Set_in n@210@01 g@149@01)
    (and (= (inv@211@01 n@210@01) n@210@01) (img@212@01 n@210@01)))
  :pattern ((Set_in n@210@01 g@149@01))
  :pattern ((inv@211@01 n@210@01))
  :pattern ((img@212@01 n@210@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@212@01 r) (Set_in (inv@211@01 r) g@149@01)) (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)))
    (=>
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@215@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@211@01 r) g@149@01) (img@212@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@215@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@215@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@219@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@219@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@216@01 $Ref)) (!
  (=>
    (Set_in n@216@01 g@149@01)
    (and (= (inv@217@01 n@216@01) n@216@01) (img@218@01 n@216@01)))
  :pattern ((Set_in n@216@01 g@149@01))
  :pattern ((inv@217@01 n@216@01))
  :pattern ((img@218@01 n@216@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@218@01 r) (Set_in (inv@217@01 r) g@149@01)) (= (inv@217@01 r) r))
  :pattern ((inv@217@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)))
    (=>
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@222@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@217@01 r) g@149@01) (img@218@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@222@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@222@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@149@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@149@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@149@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@228@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@149@01) (img@225@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@228@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@228@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@232@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@232@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@149@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@149@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@149@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@235@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@149@01) (img@231@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (=>
  (not (= y@151@01 $Ref.null))
  (and
    (not (= y@151@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@211@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
      :pattern ((inv@211@01 r))
      :qid |quant-u-359|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@217@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@219@01  $FVF<r>) r) r))
      :pattern ((inv@217@01 r))
      :qid |quant-u-366|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@215@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@222@01  $FVF<r>))) g@149@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@224@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
      :pattern ((inv@224@01 r))
      :qid |quant-u-374|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@230@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@232@01  $FVF<r>) r) r))
      :pattern ((inv@230@01 r))
      :qid |quant-u-381|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01)
    (forall ((v1@208@01 $Ref) (v2@209@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
          (and
            (not
              (edge<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
            (or (= v1@208@01 x@150@01) (not (= v1@208@01 x@150@01)))))
        (or
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01)))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@267@27@269@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@151@01 $Ref.null))
  (forall ((v1@208@01 $Ref) (v2@209@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@215@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@222@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01)
      (or
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01)
        (and (= v1@208@01 x@150@01) (= v2@209@01 y@151@01))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@228@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@235@01  $FVF<r>))) g@149@01) v1@208@01 v2@209@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@267@27@269@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@151@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@151@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 46 | y@151@01 != Null | live]
; [else-branch: 46 | y@151@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 46 | y@151@01 != Null]
(assert (not (= y@151@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@236@01 $Ref)
(declare-const v2@237@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 47 | v1@236@01 != v2@237@01 | live]
; [else-branch: 47 | v1@236@01 == v2@237@01 | live]
(push) ; 7
; [then-branch: 47 | v1@236@01 != v2@237@01]
(assert (not (= v1@236@01 v2@237@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@238@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@238@01 g@149@01))
(pop) ; 9
(declare-fun inv@239@01 ($Ref) $Ref)
(declare-fun img@240@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@238@01 $Ref) (n2@238@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@238@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n1@238@01) n1@238@01))
      (and
        (Set_in n2@238@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) n2@238@01) n2@238@01))
      (= n1@238@01 n2@238@01))
    (= n1@238@01 n2@238@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@238@01 $Ref)) (!
  (=>
    (Set_in n@238@01 g@149@01)
    (and (= (inv@239@01 n@238@01) n@238@01) (img@240@01 n@238@01)))
  :pattern ((Set_in n@238@01 g@149@01))
  :pattern ((inv@239@01 n@238@01))
  :pattern ((img@240@01 n@238@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@240@01 r) (Set_in (inv@239@01 r) g@149@01)) (= (inv@239@01 r) r))
  :pattern ((inv@239@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@239@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
  :pattern ((inv@239@01 r))
  :qid |quant-u-389|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@241@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r) (= r (inv@239@01 r)))
    ($Perm.min
      (ite
        (and
          (img@174@01 r)
          (and
            (Set_in (inv@173@01 r) g@149@01)
            (not (= (inv@173@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@242@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r) (= r (inv@239@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@241@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@174@01 r)
          (and
            (Set_in (inv@173@01 r) g@149@01)
            (not (= (inv@173@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@241@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-391|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r) (= r (inv@239@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@241@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-392|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@242@01 x@150@01 v1@236@01 v2@237@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r) (= r (inv@239@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@241@01 r v1@236@01 v2@237@01))
        (pTaken@242@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-394|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@243@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)))
    (=>
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(declare-const n@244@01 $Ref)
(set-option :timeout 0)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@244@01 g@149@01))
(pop) ; 9
(declare-fun inv@245@01 ($Ref) $Ref)
(declare-fun img@246@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@247@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@244@01 $Ref) (n2@244@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@244@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) n1@244@01) n1@244@01))
      (and
        (Set_in n2@244@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) n2@244@01) n2@244@01))
      (= n1@244@01 n2@244@01))
    (= n1@244@01 n2@244@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@244@01 $Ref)) (!
  (=>
    (Set_in n@244@01 g@149@01)
    (and (= (inv@245@01 n@244@01) n@244@01) (img@246@01 n@244@01)))
  :pattern ((Set_in n@244@01 g@149@01))
  :pattern ((inv@245@01 n@244@01))
  :pattern ((img@246@01 n@244@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@246@01 r) (Set_in (inv@245@01 r) g@149@01)) (= (inv@245@01 r) r))
  :pattern ((inv@245@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@245@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) r) r))
  :pattern ((inv@245@01 r))
  :qid |quant-u-396|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@248@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r) (= r (inv@245@01 r)))
    ($Perm.min
      (ite
        (and
          (img@178@01 r)
          (and
            (Set_in (inv@177@01 r) g@149@01)
            (not (= (inv@177@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@249@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r) (= r (inv@245@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@248@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@178@01 r)
          (and
            (Set_in (inv@177@01 r) g@149@01)
            (not (= (inv@177@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@248@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-398|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r) (= r (inv@245@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@248@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-399|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@249@01 x@150@01 v1@236@01 v2@237@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@249@01 r v1@236@01 v2@237@01) $Perm.No)
  
  :qid |quant-u-401|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r) (= r (inv@245@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@248@01 r v1@236@01 v2@237@01))
        (pTaken@249@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-402|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@250@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)))
    (=>
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@238@01 $Ref)) (!
  (=>
    (Set_in n@238@01 g@149@01)
    (and (= (inv@239@01 n@238@01) n@238@01) (img@240@01 n@238@01)))
  :pattern ((Set_in n@238@01 g@149@01))
  :pattern ((inv@239@01 n@238@01))
  :pattern ((img@240@01 n@238@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@240@01 r) (Set_in (inv@239@01 r) g@149@01)) (= (inv@239@01 r) r))
  :pattern ((inv@239@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)))
    (=>
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@244@01 $Ref)) (!
  (=>
    (Set_in n@244@01 g@149@01)
    (and (= (inv@245@01 n@244@01) n@244@01) (img@246@01 n@244@01)))
  :pattern ((Set_in n@244@01 g@149@01))
  :pattern ((inv@245@01 n@244@01))
  :pattern ((img@246@01 n@244@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@246@01 r) (Set_in (inv@245@01 r) g@149@01)) (= (inv@245@01 r) r))
  :pattern ((inv@245@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)))
    (=>
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@239@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
    :pattern ((inv@239@01 r))
    :qid |quant-u-389|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@245@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) r) r))
    :pattern ((inv@245@01 r))
    :qid |quant-u-396|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@251@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@251@01 g@149@01))
(pop) ; 9
(declare-fun inv@252@01 ($Ref) $Ref)
(declare-fun img@253@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@251@01 $Ref) (n2@251@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@251@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n1@251@01) n1@251@01))
      (and
        (Set_in n2@251@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) n2@251@01) n2@251@01))
      (= n1@251@01 n2@251@01))
    (= n1@251@01 n2@251@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@149@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@149@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@149@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@252@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
  :pattern ((inv@252@01 r))
  :qid |quant-u-404|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@254@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r) (= r (inv@252@01 r)))
    ($Perm.min
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@255@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r) (= r (inv@252@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@254@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@254@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-406|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r) (= r (inv@252@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@254@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-407|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@255@01 x@150@01 v1@236@01 v2@237@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r) (= r (inv@252@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@254@01 r v1@236@01 v2@237@01))
        (pTaken@255@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-409|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@256@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(declare-const n@257@01 $Ref)
(set-option :timeout 0)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@257@01 g@149@01))
(pop) ; 9
(declare-fun inv@258@01 ($Ref) $Ref)
(declare-fun img@259@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@260@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@257@01 $Ref) (n2@257@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@257@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) n1@257@01) n1@257@01))
      (and
        (Set_in n2@257@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) n2@257@01) n2@257@01))
      (= n1@257@01 n2@257@01))
    (= n1@257@01 n2@257@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@149@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@149@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@149@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@258@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) r) r))
  :pattern ((inv@258@01 r))
  :qid |quant-u-411|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@261@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r) (= r (inv@258@01 r)))
    ($Perm.min
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@262@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r) (= r (inv@258@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@261@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@261@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-413|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r) (= r (inv@258@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@261@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-414|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@262@01 x@150@01 v1@236@01 v2@237@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@262@01 r v1@236@01 v2@237@01) $Perm.No)
  
  :qid |quant-u-416|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r) (= r (inv@258@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@261@01 r v1@236@01 v2@237@01))
        (pTaken@262@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-417|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@263@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@149@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@149@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@149@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@149@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@149@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@149@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@252@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
    :pattern ((inv@252@01 r))
    :qid |quant-u-404|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@258@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) r) r))
    :pattern ((inv@258@01 r))
    :qid |quant-u-411|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01)))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 48 | exists_path[Bool]($$((sm@256@01, sm@263@01), g@149@01), v1@236@01, v2@237@01) | live]
; [else-branch: 48 | !(exists_path[Bool]($$((sm@256@01, sm@263@01), g@149@01), v1@236@01, v2@237@01)) | live]
(push) ; 9
; [then-branch: 48 | exists_path[Bool]($$((sm@256@01, sm@263@01), g@149@01), v1@236@01, v2@237@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
(pop) ; 9
(push) ; 9
; [else-branch: 48 | !(exists_path[Bool]($$((sm@256@01, sm@263@01), g@149@01), v1@236@01, v2@237@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@264@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@264@01 g@149@01))
(pop) ; 11
(declare-fun inv@265@01 ($Ref) $Ref)
(declare-fun img@266@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@267@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@264@01 $Ref) (n2@264@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@264@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) n1@264@01) n1@264@01))
      (and
        (Set_in n2@264@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) n2@264@01) n2@264@01))
      (= n1@264@01 n2@264@01))
    (= n1@264@01 n2@264@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@264@01 $Ref)) (!
  (=>
    (Set_in n@264@01 g@149@01)
    (and (= (inv@265@01 n@264@01) n@264@01) (img@266@01 n@264@01)))
  :pattern ((Set_in n@264@01 g@149@01))
  :pattern ((inv@265@01 n@264@01))
  :pattern ((img@266@01 n@264@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@266@01 r) (Set_in (inv@265@01 r) g@149@01)) (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@265@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) r) r))
  :pattern ((inv@265@01 r))
  :qid |quant-u-419|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@268@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r) (= r (inv@265@01 r)))
    ($Perm.min
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@269@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r) (= r (inv@265@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@268@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@268@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-421|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r) (= r (inv@265@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@268@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-422|))))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@269@01 x@150@01 v1@236@01 v2@237@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r) (= r (inv@265@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@268@01 r v1@236@01 v2@237@01))
        (pTaken@269@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-424|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@270@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)))
    (=>
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(declare-const n@271@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@271@01 g@149@01))
(pop) ; 11
(declare-fun inv@272@01 ($Ref) $Ref)
(declare-fun img@273@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@274@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@271@01 $Ref) (n2@271@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@271@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) n1@271@01) n1@271@01))
      (and
        (Set_in n2@271@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) n2@271@01) n2@271@01))
      (= n1@271@01 n2@271@01))
    (= n1@271@01 n2@271@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@149@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@149@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@149@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-426|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@275@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r) (= r (inv@272@01 r)))
    ($Perm.min
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@276@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r) (= r (inv@272@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@275@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@275@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-428|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r) (= r (inv@272@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@275@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-429|))))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@276@01 x@150@01 v1@236@01 v2@237@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@276@01 r v1@236@01 v2@237@01) $Perm.No)
  
  :qid |quant-u-431|))))
(check-sat)
; unknown
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r) (= r (inv@272@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@275@01 r v1@236@01 v2@237@01))
        (pTaken@276@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-432|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@277@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@264@01 $Ref)) (!
  (=>
    (Set_in n@264@01 g@149@01)
    (and (= (inv@265@01 n@264@01) n@264@01) (img@266@01 n@264@01)))
  :pattern ((Set_in n@264@01 g@149@01))
  :pattern ((inv@265@01 n@264@01))
  :pattern ((img@266@01 n@264@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@266@01 r) (Set_in (inv@265@01 r) g@149@01)) (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)))
    (=>
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@149@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@149@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@149@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@265@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) r) r))
    :pattern ((inv@265@01 r))
    :qid |quant-u-419|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@272@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) r) r))
    :pattern ((inv@272@01 r))
    :qid |quant-u-426|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01)))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 49 | !(exists_path[Bool]($$((sm@270@01, sm@277@01), g@149@01), v1@236@01, x@150@01)) | live]
; [else-branch: 49 | exists_path[Bool]($$((sm@270@01, sm@277@01), g@149@01), v1@236@01, x@150@01) | live]
(push) ; 11
; [then-branch: 49 | !(exists_path[Bool]($$((sm@270@01, sm@277@01), g@149@01), v1@236@01, x@150@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 49 | exists_path[Bool]($$((sm@270@01, sm@277@01), g@149@01), v1@236@01, x@150@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@278@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@278@01 g@149@01))
(pop) ; 13
(declare-fun inv@279@01 ($Ref) $Ref)
(declare-fun img@280@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@281@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@278@01 $Ref) (n2@278@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@278@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) n1@278@01) n1@278@01))
      (and
        (Set_in n2@278@01 g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) n2@278@01) n2@278@01))
      (= n1@278@01 n2@278@01))
    (= n1@278@01 n2@278@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@279@01 r) g@149@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
  :pattern ((inv@279@01 r))
  :qid |quant-u-434|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@282@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r) (= r (inv@279@01 r)))
    ($Perm.min
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@283@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r) (= r (inv@279@01 r)))
    ($Perm.min
      (ite (= r x@150@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@282@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@159@01 r)
          (and
            (Set_in (inv@158@01 r) g@149@01)
            (not (= (inv@158@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@282@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-436|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r) (= r (inv@279@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@282@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-437|))))
(check-sat)
; unknown
(pop) ; 13
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@283@01 x@150@01 v1@236@01 v2@237@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r) (= r (inv@279@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@282@01 r v1@236@01 v2@237@01))
        (pTaken@283@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-439|))))
(check-sat)
; unsat
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@284@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(declare-const n@285@01 $Ref)
(set-option :timeout 0)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@285@01 g@149@01))
(pop) ; 13
(declare-fun inv@286@01 ($Ref) $Ref)
(declare-fun img@287@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@288@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@285@01 $Ref) (n2@285@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@285@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) n1@285@01) n1@285@01))
      (and
        (Set_in n2@285@01 g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) n2@285@01) n2@285@01))
      (= n1@285@01 n2@285@01))
    (= n1@285@01 n2@285@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@286@01 r) g@149@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
  :pattern ((inv@286@01 r))
  :qid |quant-u-441|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@289@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r) (= r (inv@286@01 r)))
    ($Perm.min
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@290@01 ((r $Ref) (v1@236@01 $Ref) (v2@237@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r) (= r (inv@286@01 r)))
    ($Perm.min
      (ite (= r x@150@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@289@01 r v1@236@01 v2@237@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@163@01 r)
          (and
            (Set_in (inv@162@01 r) g@149@01)
            (not (= (inv@162@01 r) x@150@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@289@01 r v1@236@01 v2@237@01))
    $Perm.No)
  
  :qid |quant-u-443|))))
(check-sat)
; unsat
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r) (= r (inv@286@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@289@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-444|))))
(check-sat)
; unknown
(pop) ; 13
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@290@01 x@150@01 v1@236@01 v2@237@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@290@01 r v1@236@01 v2@237@01) $Perm.No)
  
  :qid |quant-u-446|))))
(check-sat)
; unknown
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r) (= r (inv@286@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@289@01 r v1@236@01 v2@237@01))
        (pTaken@290@01 r v1@236@01 v2@237@01))
      $Perm.No))
  
  :qid |quant-u-447|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@291@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@279@01 r) g@149@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
    :pattern ((inv@279@01 r))
    :qid |quant-u-434|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@286@01 r) g@149@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
    :pattern ((inv@286@01 r))
    :qid |quant-u-441|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@279@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
      :pattern ((inv@279@01 r))
      :qid |quant-u-434|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@286@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
      :pattern ((inv@286@01 r))
      :qid |quant-u-441|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@264@01 $Ref)) (!
  (=>
    (Set_in n@264@01 g@149@01)
    (and (= (inv@265@01 n@264@01) n@264@01) (img@266@01 n@264@01)))
  :pattern ((Set_in n@264@01 g@149@01))
  :pattern ((inv@265@01 n@264@01))
  :pattern ((img@266@01 n@264@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@266@01 r) (Set_in (inv@265@01 r) g@149@01)) (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)))
    (=>
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@149@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@149@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@149@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
  (and
    (not
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@265@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) r) r))
      :pattern ((inv@265@01 r))
      :qid |quant-u-419|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@272@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) r) r))
      :pattern ((inv@272@01 r))
      :qid |quant-u-426|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@279@01 r) g@149@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
          :pattern ((inv@279@01 r))
          :qid |quant-u-434|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@286@01 r) g@149@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
          :pattern ((inv@286@01 r))
          :qid |quant-u-441|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01)))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 47 | v1@236@01 == v2@237@01]
(assert (= v1@236@01 v2@237@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@238@01 $Ref)) (!
  (=>
    (Set_in n@238@01 g@149@01)
    (and (= (inv@239@01 n@238@01) n@238@01) (img@240@01 n@238@01)))
  :pattern ((Set_in n@238@01 g@149@01))
  :pattern ((inv@239@01 n@238@01))
  :pattern ((img@240@01 n@238@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@240@01 r) (Set_in (inv@239@01 r) g@149@01)) (= (inv@239@01 r) r))
  :pattern ((inv@239@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)))
    (=>
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@244@01 $Ref)) (!
  (=>
    (Set_in n@244@01 g@149@01)
    (and (= (inv@245@01 n@244@01) n@244@01) (img@246@01 n@244@01)))
  :pattern ((Set_in n@244@01 g@149@01))
  :pattern ((inv@245@01 n@244@01))
  :pattern ((img@246@01 n@244@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@246@01 r) (Set_in (inv@245@01 r) g@149@01)) (= (inv@245@01 r) r))
  :pattern ((inv@245@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)))
    (=>
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@149@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@149@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@149@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@149@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@149@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@149@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@264@01 $Ref)) (!
  (=>
    (Set_in n@264@01 g@149@01)
    (and (= (inv@265@01 n@264@01) n@264@01) (img@266@01 n@264@01)))
  :pattern ((Set_in n@264@01 g@149@01))
  :pattern ((inv@265@01 n@264@01))
  :pattern ((img@266@01 n@264@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@266@01 r) (Set_in (inv@265@01 r) g@149@01)) (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)))
    (=>
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@149@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@149@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@149@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (not (= v1@236@01 v2@237@01))
  (and
    (not (= v1@236@01 v2@237@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@239@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
      :pattern ((inv@239@01 r))
      :qid |quant-u-389|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@245@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) r) r))
      :pattern ((inv@245@01 r))
      :qid |quant-u-396|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@252@01 r) g@149@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
      :pattern ((inv@252@01 r))
      :qid |quant-u-404|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@258@01 r) g@149@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) r) r))
      :pattern ((inv@258@01 r))
      :qid |quant-u-411|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
      (and
        (not
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@265@01 r) g@149@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) r) r))
          :pattern ((inv@265@01 r))
          :qid |quant-u-419|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@272@01 r) g@149@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) r) r))
          :pattern ((inv@272@01 r))
          :qid |quant-u-426|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@279@01 r) g@149@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
              :pattern ((inv@279@01 r))
              :qid |quant-u-434|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@286@01 r) g@149@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
              :pattern ((inv@286@01 r))
              :qid |quant-u-441|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01)))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01)))))
; Joined path conditions
(assert (or (= v1@236@01 v2@237@01) (not (= v1@236@01 v2@237@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@238@01 $Ref)) (!
  (=>
    (Set_in n@238@01 g@149@01)
    (and (= (inv@239@01 n@238@01) n@238@01) (img@240@01 n@238@01)))
  :pattern ((Set_in n@238@01 g@149@01))
  :pattern ((inv@239@01 n@238@01))
  :pattern ((img@240@01 n@238@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@240@01 r) (Set_in (inv@239@01 r) g@149@01)) (= (inv@239@01 r) r))
  :pattern ((inv@239@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)))
    (=>
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@244@01 $Ref)) (!
  (=>
    (Set_in n@244@01 g@149@01)
    (and (= (inv@245@01 n@244@01) n@244@01) (img@246@01 n@244@01)))
  :pattern ((Set_in n@244@01 g@149@01))
  :pattern ((inv@245@01 n@244@01))
  :pattern ((img@246@01 n@244@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@246@01 r) (Set_in (inv@245@01 r) g@149@01)) (= (inv@245@01 r) r))
  :pattern ((inv@245@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)))
    (=>
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@149@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@149@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@149@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@149@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@149@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@149@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@264@01 $Ref)) (!
  (=>
    (Set_in n@264@01 g@149@01)
    (and (= (inv@265@01 n@264@01) n@264@01) (img@266@01 n@264@01)))
  :pattern ((Set_in n@264@01 g@149@01))
  :pattern ((inv@265@01 n@264@01))
  :pattern ((img@266@01 n@264@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@266@01 r) (Set_in (inv@265@01 r) g@149@01)) (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)))
    (=>
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@149@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@149@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@149@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@236@01 $Ref) (v2@237@01 $Ref)) (!
  (and
    (=>
      (not (= v1@236@01 v2@237@01))
      (and
        (not (= v1@236@01 v2@237@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@239@01 r) g@149@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
          :pattern ((inv@239@01 r))
          :qid |quant-u-389|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@245@01 r) g@149@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) r) r))
          :pattern ((inv@245@01 r))
          :qid |quant-u-396|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@252@01 r) g@149@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
          :pattern ((inv@252@01 r))
          :qid |quant-u-404|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@258@01 r) g@149@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) r) r))
          :pattern ((inv@258@01 r))
          :qid |quant-u-411|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
          (and
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@265@01 r) g@149@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) r) r))
              :pattern ((inv@265@01 r))
              :qid |quant-u-419|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@272@01 r) g@149@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) r) r))
              :pattern ((inv@272@01 r))
              :qid |quant-u-426|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@279@01 r) g@149@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
                  :pattern ((inv@279@01 r))
                  :qid |quant-u-434|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@286@01 r) g@149@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
                  :pattern ((inv@286@01 r))
                  :qid |quant-u-441|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01)))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))))
    (or (= v1@236@01 v2@237@01) (not (= v1@236@01 v2@237@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@270@27@275@10-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 46 | y@151@01 == Null]
(assert (= y@151@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@238@01 $Ref)) (!
  (=>
    (Set_in n@238@01 g@149@01)
    (and (= (inv@239@01 n@238@01) n@238@01) (img@240@01 n@238@01)))
  :pattern ((Set_in n@238@01 g@149@01))
  :pattern ((inv@239@01 n@238@01))
  :pattern ((img@240@01 n@238@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@240@01 r) (Set_in (inv@239@01 r) g@149@01)) (= (inv@239@01 r) r))
  :pattern ((inv@239@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)))
    (=>
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@243@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@168@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@168@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@239@01 r) g@149@01) (img@240@01 r))
      (and
        (img@174@01 r)
        (and (Set_in (inv@173@01 r) g@149@01) (not (= (inv@173@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@243@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@168@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@243@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@178@01 r)
      (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@247@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@247@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@244@01 $Ref)) (!
  (=>
    (Set_in n@244@01 g@149@01)
    (and (= (inv@245@01 n@244@01) n@244@01) (img@246@01 n@244@01)))
  :pattern ((Set_in n@244@01 g@149@01))
  :pattern ((inv@245@01 n@244@01))
  :pattern ((img@246@01 n@244@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@246@01 r) (Set_in (inv@245@01 r) g@149@01)) (= (inv@245@01 r) r))
  :pattern ((inv@245@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)))
    (=>
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@250@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r))
      (and
        (img@178@01 r)
        (and (Set_in (inv@177@01 r) g@149@01) (not (= (inv@177@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@245@01 r) g@149@01) (img@246@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@170@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@170@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@170@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@149@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@149@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@149@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@256@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@149@01) (img@253@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@256@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@256@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@260@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@260@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@149@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@149@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@149@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@263@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@258@01 r) g@149@01) (img@259@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@263@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@263@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@267@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@267@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@264@01 $Ref)) (!
  (=>
    (Set_in n@264@01 g@149@01)
    (and (= (inv@265@01 n@264@01) n@264@01) (img@266@01 n@264@01)))
  :pattern ((Set_in n@264@01 g@149@01))
  :pattern ((inv@265@01 n@264@01))
  :pattern ((img@266@01 n@264@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@266@01 r) (Set_in (inv@265@01 r) g@149@01)) (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)))
    (=>
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@270@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@265@01 r) g@149@01) (img@266@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@270@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@270@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@274@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@274@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@149@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@149@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@149@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@277@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@149@01) (img@273@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@277@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@277@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@159@01 r)
      (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01))))
    (=
      ($FVF.lookup_l (as sm@281@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@281@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@149@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@149@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@149@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@284@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@149@01) (img@280@01 r))
      (and
        (img@159@01 r)
        (and (Set_in (inv@158@01 r) g@149@01) (not (= (inv@158@01 r) x@150@01)))))
    (=
      ($FVF.lookup_l (as sm@284@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@153@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@284@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@163@01 r)
      (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01))))
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@150@01)
    (=
      ($FVF.lookup_r (as sm@288@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@288@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@285@01 $Ref)) (!
  (=>
    (Set_in n@285@01 g@149@01)
    (and (= (inv@286@01 n@285@01) n@285@01) (img@287@01 n@285@01)))
  :pattern ((Set_in n@285@01 g@149@01))
  :pattern ((inv@286@01 n@285@01))
  :pattern ((img@287@01 n@285@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@287@01 r) (Set_in (inv@286@01 r) g@149@01)) (= (inv@286@01 r) r))
  :pattern ((inv@286@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)))
    (=>
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@291@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r))
      (and
        (img@163@01 r)
        (and (Set_in (inv@162@01 r) g@149@01) (not (= (inv@162@01 r) x@150@01)))))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@286@01 r) g@149@01) (img@287@01 r)) (= r x@150@01))
    (=
      ($FVF.lookup_r (as sm@291@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@155@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@155@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@155@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@291@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (not (= y@151@01 $Ref.null))
  (and
    (not (= y@151@01 $Ref.null))
    (forall ((v1@236@01 $Ref) (v2@237@01 $Ref)) (!
      (and
        (=>
          (not (= v1@236@01 v2@237@01))
          (and
            (not (= v1@236@01 v2@237@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@239@01 r) g@149@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@175@01  $FVF<l>) r) r))
              :pattern ((inv@239@01 r))
              :qid |quant-u-389|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@245@01 r) g@149@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@247@01  $FVF<r>) r) r))
              :pattern ((inv@245@01 r))
              :qid |quant-u-396|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@252@01 r) g@149@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@160@01  $FVF<l>) r) r))
              :pattern ((inv@252@01 r))
              :qid |quant-u-404|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@258@01 r) g@149@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@260@01  $FVF<r>) r) r))
              :pattern ((inv@258@01 r))
              :qid |quant-u-411|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@265@01 r) g@149@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@267@01  $FVF<l>) r) r))
                  :pattern ((inv@265@01 r))
                  :qid |quant-u-419|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@272@01 r) g@149@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@274@01  $FVF<r>) r) r))
                  :pattern ((inv@272@01 r))
                  :qid |quant-u-426|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01)
                (=>
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
                  (and
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@279@01 r) g@149@01)
                        ($FVF.loc_l ($FVF.lookup_l (as sm@281@01  $FVF<l>) r) r))
                      :pattern ((inv@279@01 r))
                      :qid |quant-u-434|))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@286@01 r) g@149@01)
                        ($FVF.loc_r ($FVF.lookup_r (as sm@288@01  $FVF<r>) r) r))
                      :pattern ((inv@286@01 r))
                      :qid |quant-u-441|))
                    ($$%precondition ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01)))
                (or
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
                  (not
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))))
        (or (= v1@236@01 v2@237@01) (not (= v1@236@01 v2@237@01))))
      :pattern ((exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@270@27@275@10-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@151@01 $Ref.null))
  (forall ((v1@236@01 $Ref) (v2@237@01 $Ref)) (!
    (=>
      (not (= v1@236@01 v2@237@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01)
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@256@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@263@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@270@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@277@01  $FVF<r>))) g@149@01) v1@236@01 x@150@01)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@284@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@291@01  $FVF<r>))) g@149@01) y@151@01 v2@237@01)))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@243@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@250@01  $FVF<r>))) g@149@01) v1@236@01 v2@237@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@270@27@275@10|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- unlink_left ----------
(declare-const g@292@01 Set<$Ref>)
(declare-const x@293@01 $Ref)
(declare-const g@294@01 Set<$Ref>)
(declare-const x@295@01 $Ref)
(push) ; 1
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 ($Snap.combine ($Snap.first $t@296@01) ($Snap.second $t@296@01))))
(assert (= ($Snap.first $t@296@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@295@01 g@294@01))
(assert (=
  ($Snap.second $t@296@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@296@01))
    ($Snap.second ($Snap.second $t@296@01)))))
(assert (= ($Snap.first ($Snap.second $t@296@01)) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@294@01)))
(assert (=
  ($Snap.second ($Snap.second $t@296@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@296@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@296@01))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@296@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@296@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 50 | True | live]
; [else-branch: 50 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 50 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@297@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@297@01  $FVF<l>) x@295@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))
(assert (not (= x@295@01 $Ref.null)))
(declare-const sm@298@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@298@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@298@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@298@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@298@01  $FVF<l>) x@295@01) x@295@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 51 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 51 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 51 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@299@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@299@01  $FVF<r>) x@295@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))))
(declare-const sm@300@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@300@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@300@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@300@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef231|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@300@01  $FVF<r>) x@295@01) x@295@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))))
(declare-const n@301@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 52 | !(n@301@01 in g@294@01) | live]
; [else-branch: 52 | n@301@01 in g@294@01 | live]
(push) ; 4
; [then-branch: 52 | !(n@301@01 in g@294@01)]
(assert (not (Set_in n@301@01 g@294@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 52 | n@301@01 in g@294@01]
(assert (Set_in n@301@01 g@294@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@301@01 g@294@01) (not (Set_in n@301@01 g@294@01))))
(assert (and (Set_in n@301@01 g@294@01) (not (= n@301@01 x@295@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@302@01 ($Ref) $Ref)
(declare-fun img@303@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@301@01 $Ref)) (!
  (=>
    (and (Set_in n@301@01 g@294@01) (not (= n@301@01 x@295@01)))
    (or (Set_in n@301@01 g@294@01) (not (Set_in n@301@01 g@294@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) n@301@01) n@301@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@301@01 $Ref) (n2@301@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@301@01 g@294@01) (not (= n1@301@01 x@295@01)))
      (and (Set_in n2@301@01 g@294@01) (not (= n2@301@01 x@295@01)))
      (= n1@301@01 n2@301@01))
    (= n1@301@01 n2@301@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@301@01 $Ref)) (!
  (=>
    (and (Set_in n@301@01 g@294@01) (not (= n@301@01 x@295@01)))
    (and (= (inv@302@01 n@301@01) n@301@01) (img@303@01 n@301@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) n@301@01) n@301@01))
  :qid |quant-u-449|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (= (inv@302@01 r) r))
  :pattern ((inv@302@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@301@01 $Ref)) (!
  (=>
    (and (Set_in n@301@01 g@294@01) (not (= n@301@01 x@295@01)))
    (not (= n@301@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) n@301@01) n@301@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@304@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
  :pattern ((inv@302@01 r))
  :qid |quant-u-450|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))))))
(declare-const n$0@305@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 53 | !(n$0@305@01 in g@294@01) | live]
; [else-branch: 53 | n$0@305@01 in g@294@01 | live]
(push) ; 4
; [then-branch: 53 | !(n$0@305@01 in g@294@01)]
(assert (not (Set_in n$0@305@01 g@294@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 53 | n$0@305@01 in g@294@01]
(assert (Set_in n$0@305@01 g@294@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@305@01 g@294@01) (not (Set_in n$0@305@01 g@294@01))))
(assert (and (Set_in n$0@305@01 g@294@01) (not (= n$0@305@01 x@295@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@306@01 ($Ref) $Ref)
(declare-fun img@307@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@305@01 $Ref)) (!
  (=>
    (and (Set_in n$0@305@01 g@294@01) (not (= n$0@305@01 x@295@01)))
    (or (Set_in n$0@305@01 g@294@01) (not (Set_in n$0@305@01 g@294@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) n$0@305@01) n$0@305@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@305@01 $Ref) (n$02@305@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@305@01 g@294@01) (not (= n$01@305@01 x@295@01)))
      (and (Set_in n$02@305@01 g@294@01) (not (= n$02@305@01 x@295@01)))
      (= n$01@305@01 n$02@305@01))
    (= n$01@305@01 n$02@305@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@305@01 $Ref)) (!
  (=>
    (and (Set_in n$0@305@01 g@294@01) (not (= n$0@305@01 x@295@01)))
    (and (= (inv@306@01 n$0@305@01) n$0@305@01) (img@307@01 n$0@305@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) n$0@305@01) n$0@305@01))
  :qid |quant-u-452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (= (inv@306@01 r) r))
  :pattern ((inv@306@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@305@01 $Ref)) (!
  (=>
    (and (Set_in n$0@305@01 g@294@01) (not (= n$0@305@01 x@295@01)))
    (not (= n$0@305@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) n$0@305@01) n$0@305@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@308@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) r) r))
  :pattern ((inv@306@01 r))
  :qid |quant-u-453|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@309@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 54 | !(n$1@309@01 in g@294@01) | live]
; [else-branch: 54 | n$1@309@01 in g@294@01 | live]
(push) ; 4
; [then-branch: 54 | !(n$1@309@01 in g@294@01)]
(assert (not (Set_in n$1@309@01 g@294@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 54 | n$1@309@01 in g@294@01]
(assert (Set_in n$1@309@01 g@294@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@309@01 x@295@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@303@01 n$1@309@01)
        (and
          (Set_in (inv@302@01 n$1@309@01) g@294@01)
          (not (= (inv@302@01 n$1@309@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (=>
  (Set_in n$1@309@01 g@294@01)
  (and
    (Set_in n$1@309@01 g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01))))
(assert (or (Set_in n$1@309@01 g@294@01) (not (Set_in n$1@309@01 g@294@01))))
(push) ; 3
; [then-branch: 55 | n$1@309@01 in g@294@01 && Lookup(l, sm@304@01, n$1@309@01) != Null | live]
; [else-branch: 55 | !(n$1@309@01 in g@294@01 && Lookup(l, sm@304@01, n$1@309@01) != Null) | live]
(push) ; 4
; [then-branch: 55 | n$1@309@01 in g@294@01 && Lookup(l, sm@304@01, n$1@309@01) != Null]
(assert (and
  (Set_in n$1@309@01 g@294@01)
  (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@309@01 x@295@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@303@01 n$1@309@01)
        (and
          (Set_in (inv@302@01 n$1@309@01) g@294@01)
          (not (= (inv@302@01 n$1@309@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 55 | !(n$1@309@01 in g@294@01 && Lookup(l, sm@304@01, n$1@309@01) != Null)]
(assert (not
  (and
    (Set_in n$1@309@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (=>
  (and
    (Set_in n$1@309@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))
  (and
    (Set_in n$1@309@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@309@01 g@294@01)
      (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))))
  (and
    (Set_in n$1@309@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@309@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@309@01 g@294@01)
      (and
        (Set_in n$1@309@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01)))
    (or (Set_in n$1@309@01 g@294@01) (not (Set_in n$1@309@01 g@294@01)))
    (=>
      (and
        (Set_in n$1@309@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))
      (and
        (Set_in n$1@309@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01)))
    (or
      (not
        (and
          (Set_in n$1@309@01 g@294@01)
          (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))))
      (and
        (Set_in n$1@309@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) g@294@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$1@309@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@309@01 g@294@01)
      (and
        (Set_in n$1@309@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01)))
    (or (Set_in n$1@309@01 g@294@01) (not (Set_in n$1@309@01 g@294@01)))
    (=>
      (and
        (Set_in n$1@309@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))
      (and
        (Set_in n$1@309@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01)))
    (or
      (not
        (and
          (Set_in n$1@309@01 g@294@01)
          (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null))))
      (and
        (Set_in n$1@309@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))))
  :pattern ((Set_in n$1@309@01 g@294@01) ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$1@309@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@309@01 g@294@01)
      (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) g@294@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) g@294@01))
  :pattern ((Set_in n$1@309@01 g@294@01) ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n$1@309@01) n$1@309@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@310@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 56 | !(n$2@310@01 in g@294@01) | live]
; [else-branch: 56 | n$2@310@01 in g@294@01 | live]
(push) ; 4
; [then-branch: 56 | !(n$2@310@01 in g@294@01)]
(assert (not (Set_in n$2@310@01 g@294@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 56 | n$2@310@01 in g@294@01]
(assert (Set_in n$2@310@01 g@294@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
    :qid |qp.fvfValDef235|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
      (=
        ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
    :qid |qp.fvfValDef236|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef237|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@310@01 x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@307@01 n$2@310@01)
        (and
          (Set_in (inv@306@01 n$2@310@01) g@294@01)
          (not (= (inv@306@01 n$2@310@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (=>
  (Set_in n$2@310@01 g@294@01)
  (and
    (Set_in n$2@310@01 g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01))))
(assert (or (Set_in n$2@310@01 g@294@01) (not (Set_in n$2@310@01 g@294@01))))
(push) ; 3
; [then-branch: 57 | n$2@310@01 in g@294@01 && Lookup(r, sm@308@01, n$2@310@01) != Null | live]
; [else-branch: 57 | !(n$2@310@01 in g@294@01 && Lookup(r, sm@308@01, n$2@310@01) != Null) | live]
(push) ; 4
; [then-branch: 57 | n$2@310@01 in g@294@01 && Lookup(r, sm@308@01, n$2@310@01) != Null]
(assert (and
  (Set_in n$2@310@01 g@294@01)
  (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
    :qid |qp.fvfValDef235|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
      (=
        ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
    :qid |qp.fvfValDef236|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef237|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@310@01 x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@307@01 n$2@310@01)
        (and
          (Set_in (inv@306@01 n$2@310@01) g@294@01)
          (not (= (inv@306@01 n$2@310@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 57 | !(n$2@310@01 in g@294@01 && Lookup(r, sm@308@01, n$2@310@01) != Null)]
(assert (not
  (and
    (Set_in n$2@310@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (=>
  (and
    (Set_in n$2@310@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))
  (and
    (Set_in n$2@310@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@310@01 g@294@01)
      (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))))
  (and
    (Set_in n$2@310@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@308@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@308@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@310@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@310@01 g@294@01)
      (and
        (Set_in n$2@310@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01)))
    (or (Set_in n$2@310@01 g@294@01) (not (Set_in n$2@310@01 g@294@01)))
    (=>
      (and
        (Set_in n$2@310@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))
      (and
        (Set_in n$2@310@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01)))
    (or
      (not
        (and
          (Set_in n$2@310@01 g@294@01)
          (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))))
      (and
        (Set_in n$2@310@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) g@294@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$2@310@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@310@01 g@294@01)
      (and
        (Set_in n$2@310@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01)))
    (or (Set_in n$2@310@01 g@294@01) (not (Set_in n$2@310@01 g@294@01)))
    (=>
      (and
        (Set_in n$2@310@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))
      (and
        (Set_in n$2@310@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01)))
    (or
      (not
        (and
          (Set_in n$2@310@01 g@294@01)
          (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null))))
      (and
        (Set_in n$2@310@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))))
  :pattern ((Set_in n$2@310@01 g@294@01) ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$2@310@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@310@01 g@294@01)
      (not (= ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) g@294@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) g@294@01))
  :pattern ((Set_in n$2@310@01 g@294@01) ($FVF.loc_r ($FVF.lookup_r (as sm@308@01  $FVF<r>) n$2@310@01) n$2@310@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(assert (= ($Snap.first $t@311@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@311@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@311@01))
    ($Snap.second ($Snap.second $t@311@01)))))
(assert (= ($Snap.first ($Snap.second $t@311@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@311@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@311@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 58 | True | live]
; [else-branch: 58 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 58 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@312@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@312@01  $FVF<l>) x@295@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@311@01))))))
(declare-const sm@313@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@313@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@313@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@313@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@313@01  $FVF<l>) x@295@01) x@295@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@311@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@311@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 3
; [then-branch: 59 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 59 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 59 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@314@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@314@01  $FVF<r>) x@295@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))
(declare-const sm@315@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@315@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@315@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@315@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef241|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@315@01  $FVF<r>) x@295@01) x@295@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))
(declare-const n$3@316@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 60 | !(n$3@316@01 in g@294@01) | live]
; [else-branch: 60 | n$3@316@01 in g@294@01 | live]
(push) ; 5
; [then-branch: 60 | !(n$3@316@01 in g@294@01)]
(assert (not (Set_in n$3@316@01 g@294@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | n$3@316@01 in g@294@01]
(assert (Set_in n$3@316@01 g@294@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@316@01 g@294@01) (not (Set_in n$3@316@01 g@294@01))))
(assert (and (Set_in n$3@316@01 g@294@01) (not (= n$3@316@01 x@295@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@317@01 ($Ref) $Ref)
(declare-fun img@318@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@316@01 $Ref)) (!
  (=>
    (and (Set_in n$3@316@01 g@294@01) (not (= n$3@316@01 x@295@01)))
    (or (Set_in n$3@316@01 g@294@01) (not (Set_in n$3@316@01 g@294@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) n$3@316@01) n$3@316@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@316@01 $Ref) (n$32@316@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@316@01 g@294@01) (not (= n$31@316@01 x@295@01)))
      (and (Set_in n$32@316@01 g@294@01) (not (= n$32@316@01 x@295@01)))
      (= n$31@316@01 n$32@316@01))
    (= n$31@316@01 n$32@316@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@316@01 $Ref)) (!
  (=>
    (and (Set_in n$3@316@01 g@294@01) (not (= n$3@316@01 x@295@01)))
    (and (= (inv@317@01 n$3@316@01) n$3@316@01) (img@318@01 n$3@316@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) n$3@316@01) n$3@316@01))
  :qid |quant-u-455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@318@01 r)
      (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
    (= (inv@317@01 r) r))
  :pattern ((inv@317@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@316@01 $Ref)) (!
  (=>
    (and (Set_in n$3@316@01 g@294@01) (not (= n$3@316@01 x@295@01)))
    (not (= n$3@316@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) n$3@316@01) n$3@316@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@319@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@318@01 r)
      (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
  :pattern ((inv@317@01 r))
  :qid |quant-u-456|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))
(declare-const n$4@320@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 61 | !(n$4@320@01 in g@294@01) | live]
; [else-branch: 61 | n$4@320@01 in g@294@01 | live]
(push) ; 5
; [then-branch: 61 | !(n$4@320@01 in g@294@01)]
(assert (not (Set_in n$4@320@01 g@294@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | n$4@320@01 in g@294@01]
(assert (Set_in n$4@320@01 g@294@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@320@01 g@294@01) (not (Set_in n$4@320@01 g@294@01))))
(assert (and (Set_in n$4@320@01 g@294@01) (not (= n$4@320@01 x@295@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@321@01 ($Ref) $Ref)
(declare-fun img@322@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@320@01 $Ref)) (!
  (=>
    (and (Set_in n$4@320@01 g@294@01) (not (= n$4@320@01 x@295@01)))
    (or (Set_in n$4@320@01 g@294@01) (not (Set_in n$4@320@01 g@294@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) n$4@320@01) n$4@320@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@320@01 $Ref) (n$42@320@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@320@01 g@294@01) (not (= n$41@320@01 x@295@01)))
      (and (Set_in n$42@320@01 g@294@01) (not (= n$42@320@01 x@295@01)))
      (= n$41@320@01 n$42@320@01))
    (= n$41@320@01 n$42@320@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@320@01 $Ref)) (!
  (=>
    (and (Set_in n$4@320@01 g@294@01) (not (= n$4@320@01 x@295@01)))
    (and (= (inv@321@01 n$4@320@01) n$4@320@01) (img@322@01 n$4@320@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) n$4@320@01) n$4@320@01))
  :qid |quant-u-458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (= (inv@321@01 r) r))
  :pattern ((inv@321@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@320@01 $Ref)) (!
  (=>
    (and (Set_in n$4@320@01 g@294@01) (not (= n$4@320@01 x@295@01)))
    (not (= n$4@320@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) n$4@320@01) n$4@320@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@323@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) r) r))
  :pattern ((inv@321@01 r))
  :qid |quant-u-459|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@324@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 62 | !(n$5@324@01 in g@294@01) | live]
; [else-branch: 62 | n$5@324@01 in g@294@01 | live]
(push) ; 5
; [then-branch: 62 | !(n$5@324@01 in g@294@01)]
(assert (not (Set_in n$5@324@01 g@294@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 62 | n$5@324@01 in g@294@01]
(assert (Set_in n$5@324@01 g@294@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
    :qid |qp.fvfValDef242|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
    :qid |qp.fvfValDef243|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef244|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@324@01 x@295@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@318@01 n$5@324@01)
        (and
          (Set_in (inv@317@01 n$5@324@01) g@294@01)
          (not (= (inv@317@01 n$5@324@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@318@01 r)
      (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (=>
  (Set_in n$5@324@01 g@294@01)
  (and
    (Set_in n$5@324@01 g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01))))
(assert (or (Set_in n$5@324@01 g@294@01) (not (Set_in n$5@324@01 g@294@01))))
(push) ; 4
; [then-branch: 63 | n$5@324@01 in g@294@01 && Lookup(l, sm@319@01, n$5@324@01) != Null | live]
; [else-branch: 63 | !(n$5@324@01 in g@294@01 && Lookup(l, sm@319@01, n$5@324@01) != Null) | live]
(push) ; 5
; [then-branch: 63 | n$5@324@01 in g@294@01 && Lookup(l, sm@319@01, n$5@324@01) != Null]
(assert (and
  (Set_in n$5@324@01 g@294@01)
  (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
    :qid |qp.fvfValDef242|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
    :qid |qp.fvfValDef243|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef244|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@324@01 x@295@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@318@01 n$5@324@01)
        (and
          (Set_in (inv@317@01 n$5@324@01) g@294@01)
          (not (= (inv@317@01 n$5@324@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 63 | !(n$5@324@01 in g@294@01 && Lookup(l, sm@319@01, n$5@324@01) != Null)]
(assert (not
  (and
    (Set_in n$5@324@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@318@01 r)
      (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (=>
  (and
    (Set_in n$5@324@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))
  (and
    (Set_in n$5@324@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@324@01 g@294@01)
      (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))))
  (and
    (Set_in n$5@324@01 g@294@01)
    (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@318@01 r)
      (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@324@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@324@01 g@294@01)
      (and
        (Set_in n$5@324@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01)))
    (or (Set_in n$5@324@01 g@294@01) (not (Set_in n$5@324@01 g@294@01)))
    (=>
      (and
        (Set_in n$5@324@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))
      (and
        (Set_in n$5@324@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01)))
    (or
      (not
        (and
          (Set_in n$5@324@01 g@294@01)
          (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))))
      (and
        (Set_in n$5@324@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) g@294@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$5@324@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@324@01 g@294@01)
      (and
        (Set_in n$5@324@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01)))
    (or (Set_in n$5@324@01 g@294@01) (not (Set_in n$5@324@01 g@294@01)))
    (=>
      (and
        (Set_in n$5@324@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))
      (and
        (Set_in n$5@324@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01)))
    (or
      (not
        (and
          (Set_in n$5@324@01 g@294@01)
          (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null))))
      (and
        (Set_in n$5@324@01 g@294@01)
        (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))))
  :pattern ((Set_in n$5@324@01 g@294@01) ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$5@324@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@324@01 g@294@01)
      (not (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) g@294@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) g@294@01))
  :pattern ((Set_in n$5@324@01 g@294@01) ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n$5@324@01) n$5@324@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@325@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 64 | !(n$6@325@01 in g@294@01) | live]
; [else-branch: 64 | n$6@325@01 in g@294@01 | live]
(push) ; 5
; [then-branch: 64 | !(n$6@325@01 in g@294@01)]
(assert (not (Set_in n$6@325@01 g@294@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 64 | n$6@325@01 in g@294@01]
(assert (Set_in n$6@325@01 g@294@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
    :qid |qp.fvfValDef245|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
      (=
        ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
    :qid |qp.fvfValDef246|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef247|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@325@01 x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@322@01 n$6@325@01)
        (and
          (Set_in (inv@321@01 n$6@325@01) g@294@01)
          (not (= (inv@321@01 n$6@325@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (=>
  (Set_in n$6@325@01 g@294@01)
  (and
    (Set_in n$6@325@01 g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01))))
(assert (or (Set_in n$6@325@01 g@294@01) (not (Set_in n$6@325@01 g@294@01))))
(push) ; 4
; [then-branch: 65 | n$6@325@01 in g@294@01 && Lookup(r, sm@323@01, n$6@325@01) != Null | live]
; [else-branch: 65 | !(n$6@325@01 in g@294@01 && Lookup(r, sm@323@01, n$6@325@01) != Null) | live]
(push) ; 5
; [then-branch: 65 | n$6@325@01 in g@294@01 && Lookup(r, sm@323@01, n$6@325@01) != Null]
(assert (and
  (Set_in n$6@325@01 g@294@01)
  (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
    :qid |qp.fvfValDef245|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
      (=
        ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
    :qid |qp.fvfValDef246|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef247|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@325@01 x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@322@01 n$6@325@01)
        (and
          (Set_in (inv@321@01 n$6@325@01) g@294@01)
          (not (= (inv@321@01 n$6@325@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 65 | !(n$6@325@01 in g@294@01 && Lookup(r, sm@323@01, n$6@325@01) != Null)]
(assert (not
  (and
    (Set_in n$6@325@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (=>
  (and
    (Set_in n$6@325@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))
  (and
    (Set_in n$6@325@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@325@01 g@294@01)
      (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))))
  (and
    (Set_in n$6@325@01 g@294@01)
    (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@323@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@323@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@325@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@325@01 g@294@01)
      (and
        (Set_in n$6@325@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01)))
    (or (Set_in n$6@325@01 g@294@01) (not (Set_in n$6@325@01 g@294@01)))
    (=>
      (and
        (Set_in n$6@325@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))
      (and
        (Set_in n$6@325@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01)))
    (or
      (not
        (and
          (Set_in n$6@325@01 g@294@01)
          (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))))
      (and
        (Set_in n$6@325@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) g@294@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$6@325@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@325@01 g@294@01)
      (and
        (Set_in n$6@325@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01)))
    (or (Set_in n$6@325@01 g@294@01) (not (Set_in n$6@325@01 g@294@01)))
    (=>
      (and
        (Set_in n$6@325@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))
      (and
        (Set_in n$6@325@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01)))
    (or
      (not
        (and
          (Set_in n$6@325@01 g@294@01)
          (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null))))
      (and
        (Set_in n$6@325@01 g@294@01)
        (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))))
  :pattern ((Set_in n$6@325@01 g@294@01) ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$6@325@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@325@01 g@294@01)
      (not (= ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) g@294@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) g@294@01))
  :pattern ((Set_in n$6@325@01 g@294@01) ($FVF.loc_r ($FVF.lookup_r (as sm@323@01  $FVF<r>) n$6@325@01) n$6@325@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))
  $Snap.unit))
; [eval] x.l == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
    :qid |qp.fvfValDef242|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@319@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
    :qid |qp.fvfValDef243|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@319@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef244|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) x@295@01) x@295@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@318@01 x@295@01)
        (and
          (Set_in (inv@317@01 x@295@01) g@294@01)
          (not (= (inv@317@01 x@295@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@319@01  $FVF<l>) x@295@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))))
  $Snap.unit))
; [eval] old(x.l) == null ==> $$(g) == old($$(g))
; [eval] old(x.l) == null
; [eval] old(x.l)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) x@295@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@303@01 x@295@01)
        (and
          (Set_in (inv@302@01 x@295@01) g@294@01)
          (not (= (inv@302@01 x@295@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 66 | Lookup(l, sm@304@01, x@295@01) == Null | live]
; [else-branch: 66 | Lookup(l, sm@304@01, x@295@01) != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 66 | Lookup(l, sm@304@01, x@295@01) == Null]
(assert (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@326@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@326@01 g@294@01))
(pop) ; 6
(declare-fun inv@327@01 ($Ref) $Ref)
(declare-fun img@328@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@326@01 $Ref) (n2@326@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@326@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n1@326@01) n1@326@01))
      (and
        (Set_in n2@326@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n2@326@01) n2@326@01))
      (= n1@326@01 n2@326@01))
    (= n1@326@01 n2@326@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@326@01 $Ref)) (!
  (=>
    (Set_in n@326@01 g@294@01)
    (and (= (inv@327@01 n@326@01) n@326@01) (img@328@01 n@326@01)))
  :pattern ((Set_in n@326@01 g@294@01))
  :pattern ((inv@327@01 n@326@01))
  :pattern ((img@328@01 n@326@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@328@01 r) (Set_in (inv@327@01 r) g@294@01)) (= (inv@327@01 r) r))
  :pattern ((inv@327@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@327@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
  :pattern ((inv@327@01 r))
  :qid |quant-u-461|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@329@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r) (= r (inv@327@01 r)))
    ($Perm.min
      (ite
        (and
          (img@318@01 r)
          (and
            (Set_in (inv@317@01 r) g@294@01)
            (not (= (inv@317@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@330@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r) (= r (inv@327@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@329@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@318@01 r)
          (and
            (Set_in (inv@317@01 r) g@294@01)
            (not (= (inv@317@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@329@01 r))
    $Perm.No)
  
  :qid |quant-u-463|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r) (= r (inv@327@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@329@01 r)) $Perm.No))
  
  :qid |quant-u-464|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@330@01 x@295@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@330@01 r) $Perm.No)
  
  :qid |quant-u-466|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r) (= r (inv@327@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@329@01 r)) (pTaken@330@01 r))
      $Perm.No))
  
  :qid |quant-u-467|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@331@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>)))
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r)))
    (=>
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r))
      (Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>))))
  :qid |qp.fvfDomDef251|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@331@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@331@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef250|)))
(declare-const n@332@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@332@01 g@294@01))
(pop) ; 6
(declare-fun inv@333@01 ($Ref) $Ref)
(declare-fun img@334@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@335@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@335@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@335@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef254|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@332@01 $Ref) (n2@332@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@332@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@335@01  $FVF<r>) n1@332@01) n1@332@01))
      (and
        (Set_in n2@332@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@335@01  $FVF<r>) n2@332@01) n2@332@01))
      (= n1@332@01 n2@332@01))
    (= n1@332@01 n2@332@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@294@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@294@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@294@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@333@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@335@01  $FVF<r>) r) r))
  :pattern ((inv@333@01 r))
  :qid |quant-u-469|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@336@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r) (= r (inv@333@01 r)))
    ($Perm.min
      (ite
        (and
          (img@322@01 r)
          (and
            (Set_in (inv@321@01 r) g@294@01)
            (not (= (inv@321@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@337@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r) (= r (inv@333@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@336@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@322@01 r)
          (and
            (Set_in (inv@321@01 r) g@294@01)
            (not (= (inv@321@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@336@01 r))
    $Perm.No)
  
  :qid |quant-u-471|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r) (= r (inv@333@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@336@01 r)) $Perm.No))
  
  :qid |quant-u-472|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 2)) (pTaken@337@01 x@295@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r) (= r (inv@333@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@336@01 r)) (pTaken@337@01 r))
      $Perm.No))
  
  :qid |quant-u-474|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@338@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>)))
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r))
      (Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>))))
  :qid |qp.fvfDomDef258|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@338@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@338@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@331@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@338@01  $FVF<r>))) g@294@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@326@01 $Ref)) (!
  (=>
    (Set_in n@326@01 g@294@01)
    (and (= (inv@327@01 n@326@01) n@326@01) (img@328@01 n@326@01)))
  :pattern ((Set_in n@326@01 g@294@01))
  :pattern ((inv@327@01 n@326@01))
  :pattern ((img@328@01 n@326@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@328@01 r) (Set_in (inv@327@01 r) g@294@01)) (= (inv@327@01 r) r))
  :pattern ((inv@327@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>)))
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r)))
    (=>
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r))
      (Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>))))
  :qid |qp.fvfDomDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@331@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@331@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@335@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@335@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef254|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@294@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@294@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@294@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>)))
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r))
      (Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>))))
  :qid |qp.fvfDomDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@338@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@338@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@327@01 r) g@294@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
    :pattern ((inv@327@01 r))
    :qid |quant-u-461|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@333@01 r) g@294@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@335@01  $FVF<r>) r) r))
    :pattern ((inv@333@01 r))
    :qid |quant-u-469|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@331@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@338@01  $FVF<r>))) g@294@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 5
(declare-const n@339@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@339@01 g@294@01))
(pop) ; 6
(declare-fun inv@340@01 ($Ref) $Ref)
(declare-fun img@341@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@339@01 $Ref) (n2@339@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@339@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n1@339@01) n1@339@01))
      (and
        (Set_in n2@339@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n2@339@01) n2@339@01))
      (= n1@339@01 n2@339@01))
    (= n1@339@01 n2@339@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@294@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@294@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@294@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@340@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
  :pattern ((inv@340@01 r))
  :qid |quant-u-476|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@342@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r) (= r (inv@340@01 r)))
    ($Perm.min
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@343@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r) (= r (inv@340@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@342@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@342@01 r))
    $Perm.No)
  
  :qid |quant-u-478|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r) (= r (inv@340@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@342@01 r)) $Perm.No))
  
  :qid |quant-u-479|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@343@01 x@295@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@343@01 r) $Perm.No)
  
  :qid |quant-u-481|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r) (= r (inv@340@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@342@01 r)) (pTaken@343@01 r))
      $Perm.No))
  
  :qid |quant-u-482|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@344@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>)))
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r))
      (Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>))))
  :qid |qp.fvfDomDef262|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@344@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@344@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef261|)))
(declare-const n@345@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@345@01 g@294@01))
(pop) ; 6
(declare-fun inv@346@01 ($Ref) $Ref)
(declare-fun img@347@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@348@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@348@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@348@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef265|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@345@01 $Ref) (n2@345@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@345@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@348@01  $FVF<r>) n1@345@01) n1@345@01))
      (and
        (Set_in n2@345@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@348@01  $FVF<r>) n2@345@01) n2@345@01))
      (= n1@345@01 n2@345@01))
    (= n1@345@01 n2@345@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@294@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@294@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@294@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@346@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@348@01  $FVF<r>) r) r))
  :pattern ((inv@346@01 r))
  :qid |quant-u-484|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@349@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r) (= r (inv@346@01 r)))
    ($Perm.min
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@350@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r) (= r (inv@346@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@349@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@349@01 r))
    $Perm.No)
  
  :qid |quant-u-486|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r) (= r (inv@346@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@349@01 r)) $Perm.No))
  
  :qid |quant-u-487|))))
(check-sat)
; unknown
(pop) ; 6
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 2)) (pTaken@350@01 x@295@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r) (= r (inv@346@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@349@01 r)) (pTaken@350@01 r))
      $Perm.No))
  
  :qid |quant-u-489|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@351@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>)))
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r))
      (Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>))))
  :qid |qp.fvfDomDef269|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@344@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@351@01  $FVF<r>))) g@294@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@294@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@294@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@294@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>)))
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r))
      (Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>))))
  :qid |qp.fvfDomDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@344@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@344@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@348@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@348@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@294@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@294@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@294@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>)))
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r))
      (Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@340@01 r) g@294@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
    :pattern ((inv@340@01 r))
    :qid |quant-u-476|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@346@01 r) g@294@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@348@01  $FVF<r>) r) r))
    :pattern ((inv@346@01 r))
    :qid |quant-u-484|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@344@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@351@01  $FVF<r>))) g@294@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 66 | Lookup(l, sm@304@01, x@295@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@326@01 $Ref)) (!
  (=>
    (Set_in n@326@01 g@294@01)
    (and (= (inv@327@01 n@326@01) n@326@01) (img@328@01 n@326@01)))
  :pattern ((Set_in n@326@01 g@294@01))
  :pattern ((inv@327@01 n@326@01))
  :pattern ((img@328@01 n@326@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@328@01 r) (Set_in (inv@327@01 r) g@294@01)) (= (inv@327@01 r) r))
  :pattern ((inv@327@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>)))
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r)))
    (=>
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r))
      (Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@331@01  $FVF<l>))))
  :qid |qp.fvfDomDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@331@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@327@01 r) g@294@01) (img@328@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@331@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@331@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@335@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@335@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@335@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef254|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@294@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@294@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@294@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>)))
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r))
      (Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@338@01  $FVF<r>))))
  :qid |qp.fvfDomDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@338@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@294@01) (img@334@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@338@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@338@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@294@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@294@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@294@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>)))
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r))
      (Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@344@01  $FVF<l>))))
  :qid |qp.fvfDomDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@344@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@294@01) (img@341@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@344@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@344@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@348@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@348@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@348@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@294@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@294@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@294@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>)))
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r))
      (Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@351@01  $FVF<r>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@346@01 r) g@294@01) (img@347@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (=>
  (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)
  (and
    (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@327@01 r) g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
      :pattern ((inv@327@01 r))
      :qid |quant-u-461|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@333@01 r) g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@335@01  $FVF<r>) r) r))
      :pattern ((inv@333@01 r))
      :qid |quant-u-469|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@331@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@338@01  $FVF<r>))) g@294@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@340@01 r) g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
      :pattern ((inv@340@01 r))
      :qid |quant-u-476|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@346@01 r) g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@348@01  $FVF<r>) r) r))
      :pattern ((inv@346@01 r))
      :qid |quant-u-484|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@344@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@351@01  $FVF<r>))) g@294@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))
  (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@331@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@338@01  $FVF<r>))) g@294@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@344@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@351@01  $FVF<r>))) g@294@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))))
  $Snap.unit))
; [eval] old(x.l) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l))))
; [eval] old(x.l) != null
; [eval] old(x.l)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@303@01 x@295@01)
        (and
          (Set_in (inv@302@01 x@295@01) g@294@01)
          (not (= (inv@302@01 x@295@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 67 | Lookup(l, sm@304@01, x@295@01) != Null | live]
; [else-branch: 67 | Lookup(l, sm@304@01, x@295@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 67 | Lookup(l, sm@304@01, x@295@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l))))
(declare-const v1@352@01 $Ref)
(declare-const v2@353@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@354@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@354@01 g@294@01))
(pop) ; 7
(declare-fun inv@355@01 ($Ref) $Ref)
(declare-fun img@356@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@354@01 $Ref) (n2@354@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@354@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n1@354@01) n1@354@01))
      (and
        (Set_in n2@354@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n2@354@01) n2@354@01))
      (= n1@354@01 n2@354@01))
    (= n1@354@01 n2@354@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@354@01 $Ref)) (!
  (=>
    (Set_in n@354@01 g@294@01)
    (and (= (inv@355@01 n@354@01) n@354@01) (img@356@01 n@354@01)))
  :pattern ((Set_in n@354@01 g@294@01))
  :pattern ((inv@355@01 n@354@01))
  :pattern ((img@356@01 n@354@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@356@01 r) (Set_in (inv@355@01 r) g@294@01)) (= (inv@355@01 r) r))
  :pattern ((inv@355@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@355@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
  :pattern ((inv@355@01 r))
  :qid |quant-u-491|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@357@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r) (= r (inv@355@01 r)))
    ($Perm.min
      (ite
        (and
          (img@318@01 r)
          (and
            (Set_in (inv@317@01 r) g@294@01)
            (not (= (inv@317@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@358@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r) (= r (inv@355@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@357@01 r v1@352@01 v2@353@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@318@01 r)
          (and
            (Set_in (inv@317@01 r) g@294@01)
            (not (= (inv@317@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@357@01 r v1@352@01 v2@353@01))
    $Perm.No)
  
  :qid |quant-u-493|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r) (= r (inv@355@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@357@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-494|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@358@01 x@295@01 v1@352@01 v2@353@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@358@01 r v1@352@01 v2@353@01) $Perm.No)
  
  :qid |quant-u-496|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r) (= r (inv@355@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@357@01 r v1@352@01 v2@353@01))
        (pTaken@358@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-497|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@359@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)))
    (=>
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(declare-const n@360@01 $Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@360@01 g@294@01))
(pop) ; 7
(declare-fun inv@361@01 ($Ref) $Ref)
(declare-fun img@362@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@363@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@360@01 $Ref) (n2@360@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@360@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@363@01  $FVF<r>) n1@360@01) n1@360@01))
      (and
        (Set_in n2@360@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@363@01  $FVF<r>) n2@360@01) n2@360@01))
      (= n1@360@01 n2@360@01))
    (= n1@360@01 n2@360@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@360@01 $Ref)) (!
  (=>
    (Set_in n@360@01 g@294@01)
    (and (= (inv@361@01 n@360@01) n@360@01) (img@362@01 n@360@01)))
  :pattern ((Set_in n@360@01 g@294@01))
  :pattern ((inv@361@01 n@360@01))
  :pattern ((img@362@01 n@360@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@362@01 r) (Set_in (inv@361@01 r) g@294@01)) (= (inv@361@01 r) r))
  :pattern ((inv@361@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@361@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@363@01  $FVF<r>) r) r))
  :pattern ((inv@361@01 r))
  :qid |quant-u-499|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@364@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r) (= r (inv@361@01 r)))
    ($Perm.min
      (ite
        (and
          (img@322@01 r)
          (and
            (Set_in (inv@321@01 r) g@294@01)
            (not (= (inv@321@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@365@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r) (= r (inv@361@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@364@01 r v1@352@01 v2@353@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@322@01 r)
          (and
            (Set_in (inv@321@01 r) g@294@01)
            (not (= (inv@321@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@364@01 r v1@352@01 v2@353@01))
    $Perm.No)
  
  :qid |quant-u-501|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r) (= r (inv@361@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@364@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-502|))))
(check-sat)
; unknown
(pop) ; 7
; 0,10s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@365@01 x@295@01 v1@352@01 v2@353@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r) (= r (inv@361@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@364@01 r v1@352@01 v2@353@01))
        (pTaken@365@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-504|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@366@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)))
    (=>
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@354@01 $Ref)) (!
  (=>
    (Set_in n@354@01 g@294@01)
    (and (= (inv@355@01 n@354@01) n@354@01) (img@356@01 n@354@01)))
  :pattern ((Set_in n@354@01 g@294@01))
  :pattern ((inv@355@01 n@354@01))
  :pattern ((img@356@01 n@354@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@356@01 r) (Set_in (inv@355@01 r) g@294@01)) (= (inv@355@01 r) r))
  :pattern ((inv@355@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)))
    (=>
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((n@360@01 $Ref)) (!
  (=>
    (Set_in n@360@01 g@294@01)
    (and (= (inv@361@01 n@360@01) n@360@01) (img@362@01 n@360@01)))
  :pattern ((Set_in n@360@01 g@294@01))
  :pattern ((inv@361@01 n@360@01))
  :pattern ((img@362@01 n@360@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@362@01 r) (Set_in (inv@361@01 r) g@294@01)) (= (inv@361@01 r) r))
  :pattern ((inv@361@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)))
    (=>
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@355@01 r) g@294@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
    :pattern ((inv@355@01 r))
    :qid |quant-u-491|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@361@01 r) g@294@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@363@01  $FVF<r>) r) r))
    :pattern ((inv@361@01 r))
    :qid |quant-u-499|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@367@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@367@01 g@294@01))
(pop) ; 7
(declare-fun inv@368@01 ($Ref) $Ref)
(declare-fun img@369@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@367@01 $Ref) (n2@367@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@367@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n1@367@01) n1@367@01))
      (and
        (Set_in n2@367@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n2@367@01) n2@367@01))
      (= n1@367@01 n2@367@01))
    (= n1@367@01 n2@367@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@367@01 $Ref)) (!
  (=>
    (Set_in n@367@01 g@294@01)
    (and (= (inv@368@01 n@367@01) n@367@01) (img@369@01 n@367@01)))
  :pattern ((Set_in n@367@01 g@294@01))
  :pattern ((inv@368@01 n@367@01))
  :pattern ((img@369@01 n@367@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@369@01 r) (Set_in (inv@368@01 r) g@294@01)) (= (inv@368@01 r) r))
  :pattern ((inv@368@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@368@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
  :pattern ((inv@368@01 r))
  :qid |quant-u-506|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@370@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r) (= r (inv@368@01 r)))
    ($Perm.min
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@371@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r) (= r (inv@368@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@370@01 r v1@352@01 v2@353@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@370@01 r v1@352@01 v2@353@01))
    $Perm.No)
  
  :qid |quant-u-508|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r) (= r (inv@368@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@370@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-509|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@371@01 x@295@01 v1@352@01 v2@353@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@371@01 r v1@352@01 v2@353@01) $Perm.No)
  
  :qid |quant-u-511|))))
(check-sat)
; unknown
(pop) ; 7
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r) (= r (inv@368@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@370@01 r v1@352@01 v2@353@01))
        (pTaken@371@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-512|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@372@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)))
    (=>
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(declare-const n@373@01 $Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@373@01 g@294@01))
(pop) ; 7
(declare-fun inv@374@01 ($Ref) $Ref)
(declare-fun img@375@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@376@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@373@01 $Ref) (n2@373@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@373@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@376@01  $FVF<r>) n1@373@01) n1@373@01))
      (and
        (Set_in n2@373@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@376@01  $FVF<r>) n2@373@01) n2@373@01))
      (= n1@373@01 n2@373@01))
    (= n1@373@01 n2@373@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@373@01 $Ref)) (!
  (=>
    (Set_in n@373@01 g@294@01)
    (and (= (inv@374@01 n@373@01) n@373@01) (img@375@01 n@373@01)))
  :pattern ((Set_in n@373@01 g@294@01))
  :pattern ((inv@374@01 n@373@01))
  :pattern ((img@375@01 n@373@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@375@01 r) (Set_in (inv@374@01 r) g@294@01)) (= (inv@374@01 r) r))
  :pattern ((inv@374@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@374@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@376@01  $FVF<r>) r) r))
  :pattern ((inv@374@01 r))
  :qid |quant-u-514|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@377@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r) (= r (inv@374@01 r)))
    ($Perm.min
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@378@01 ((r $Ref) (v1@352@01 $Ref) (v2@353@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r) (= r (inv@374@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@377@01 r v1@352@01 v2@353@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@377@01 r v1@352@01 v2@353@01))
    $Perm.No)
  
  :qid |quant-u-516|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r) (= r (inv@374@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@377@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-517|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@378@01 x@295@01 v1@352@01 v2@353@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r) (= r (inv@374@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@377@01 r v1@352@01 v2@353@01))
        (pTaken@378@01 r v1@352@01 v2@353@01))
      $Perm.No))
  
  :qid |quant-u-519|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@379@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)))
    (=>
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@367@01 $Ref)) (!
  (=>
    (Set_in n@367@01 g@294@01)
    (and (= (inv@368@01 n@367@01) n@367@01) (img@369@01 n@367@01)))
  :pattern ((Set_in n@367@01 g@294@01))
  :pattern ((inv@368@01 n@367@01))
  :pattern ((img@369@01 n@367@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@369@01 r) (Set_in (inv@368@01 r) g@294@01)) (= (inv@368@01 r) r))
  :pattern ((inv@368@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)))
    (=>
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@373@01 $Ref)) (!
  (=>
    (Set_in n@373@01 g@294@01)
    (and (= (inv@374@01 n@373@01) n@373@01) (img@375@01 n@373@01)))
  :pattern ((Set_in n@373@01 g@294@01))
  :pattern ((inv@374@01 n@373@01))
  :pattern ((img@375@01 n@373@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@375@01 r) (Set_in (inv@374@01 r) g@294@01)) (= (inv@374@01 r) r))
  :pattern ((inv@374@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)))
    (=>
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@368@01 r) g@294@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
    :pattern ((inv@368@01 r))
    :qid |quant-u-506|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@374@01 r) g@294@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@376@01  $FVF<r>) r) r))
    :pattern ((inv@374@01 r))
    :qid |quant-u-514|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 68 | !(edge[Bool]($$((sm@372@01, sm@379@01), g@294@01), v1@352@01, v2@353@01)) | live]
; [else-branch: 68 | edge[Bool]($$((sm@372@01, sm@379@01), g@294@01), v1@352@01, v2@353@01) | live]
(push) ; 7
; [then-branch: 68 | !(edge[Bool]($$((sm@372@01, sm@379@01), g@294@01), v1@352@01, v2@353@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | edge[Bool]($$((sm@372@01, sm@379@01), g@294@01), v1@352@01, v2@353@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))
; [eval] !(v1 == x && v2 == old(x.l))
; [eval] v1 == x && v2 == old(x.l)
; [eval] v1 == x
(push) ; 8
; [then-branch: 69 | v1@352@01 != x@295@01 | live]
; [else-branch: 69 | v1@352@01 == x@295@01 | live]
(push) ; 9
; [then-branch: 69 | v1@352@01 != x@295@01]
(assert (not (= v1@352@01 x@295@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 69 | v1@352@01 == x@295@01]
(assert (= v1@352@01 x@295@01))
; [eval] v2 == old(x.l)
; [eval] old(x.l)
(declare-const sm@380@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(declare-const pm@381@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@381@01  $FPM) r)
    (+
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) x@295@01) x@295@01))
(push) ; 10
(assert (not (< $Perm.No ($FVF.perm_l (as pm@381@01  $FPM) x@295@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@381@01  $FPM) r)
    (+
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (=>
  (= v1@352@01 x@295@01)
  (and
    (= v1@352@01 x@295@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) x@295@01) x@295@01))))
(assert (or (= v1@352@01 x@295@01) (not (= v1@352@01 x@295@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@381@01  $FPM) r)
    (+
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (=>
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
  (and
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
    (=>
      (= v1@352@01 x@295@01)
      (and
        (= v1@352@01 x@295@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) x@295@01) x@295@01)))
    (or (= v1@352@01 x@295@01) (not (= v1@352@01 x@295@01))))))
(assert (or
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@354@01 $Ref)) (!
  (=>
    (Set_in n@354@01 g@294@01)
    (and (= (inv@355@01 n@354@01) n@354@01) (img@356@01 n@354@01)))
  :pattern ((Set_in n@354@01 g@294@01))
  :pattern ((inv@355@01 n@354@01))
  :pattern ((img@356@01 n@354@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@356@01 r) (Set_in (inv@355@01 r) g@294@01)) (= (inv@355@01 r) r))
  :pattern ((inv@355@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)))
    (=>
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((n@360@01 $Ref)) (!
  (=>
    (Set_in n@360@01 g@294@01)
    (and (= (inv@361@01 n@360@01) n@360@01) (img@362@01 n@360@01)))
  :pattern ((Set_in n@360@01 g@294@01))
  :pattern ((inv@361@01 n@360@01))
  :pattern ((img@362@01 n@360@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@362@01 r) (Set_in (inv@361@01 r) g@294@01)) (= (inv@361@01 r) r))
  :pattern ((inv@361@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)))
    (=>
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert (forall ((n@367@01 $Ref)) (!
  (=>
    (Set_in n@367@01 g@294@01)
    (and (= (inv@368@01 n@367@01) n@367@01) (img@369@01 n@367@01)))
  :pattern ((Set_in n@367@01 g@294@01))
  :pattern ((inv@368@01 n@367@01))
  :pattern ((img@369@01 n@367@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@369@01 r) (Set_in (inv@368@01 r) g@294@01)) (= (inv@368@01 r) r))
  :pattern ((inv@368@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)))
    (=>
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@373@01 $Ref)) (!
  (=>
    (Set_in n@373@01 g@294@01)
    (and (= (inv@374@01 n@373@01) n@373@01) (img@375@01 n@373@01)))
  :pattern ((Set_in n@373@01 g@294@01))
  :pattern ((inv@374@01 n@373@01))
  :pattern ((img@375@01 n@373@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@375@01 r) (Set_in (inv@374@01 r) g@294@01)) (= (inv@374@01 r) r))
  :pattern ((inv@374@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)))
    (=>
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@381@01  $FPM) r)
    (+
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@355@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
  :pattern ((inv@355@01 r))
  :qid |quant-u-491|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@361@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@363@01  $FVF<r>) r) r))
  :pattern ((inv@361@01 r))
  :qid |quant-u-499|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@368@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
  :pattern ((inv@368@01 r))
  :qid |quant-u-506|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@374@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@376@01  $FVF<r>) r) r))
  :pattern ((inv@374@01 r))
  :qid |quant-u-514|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@352@01 $Ref) (v2@353@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
      (and
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
        (=>
          (= v1@352@01 x@295@01)
          (and
            (= v1@352@01 x@295@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) x@295@01) x@295@01)))
        (or (= v1@352@01 x@295@01) (not (= v1@352@01 x@295@01)))))
    (or
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@283@34@285@86-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 67 | Lookup(l, sm@304@01, x@295@01) == Null]
(assert (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@354@01 $Ref)) (!
  (=>
    (Set_in n@354@01 g@294@01)
    (and (= (inv@355@01 n@354@01) n@354@01) (img@356@01 n@354@01)))
  :pattern ((Set_in n@354@01 g@294@01))
  :pattern ((inv@355@01 n@354@01))
  :pattern ((img@356@01 n@354@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@356@01 r) (Set_in (inv@355@01 r) g@294@01)) (= (inv@355@01 r) r))
  :pattern ((inv@355@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)))
    (=>
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@359@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@355@01 r) g@294@01) (img@356@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@359@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@359@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@363@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@363@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((n@360@01 $Ref)) (!
  (=>
    (Set_in n@360@01 g@294@01)
    (and (= (inv@361@01 n@360@01) n@360@01) (img@362@01 n@360@01)))
  :pattern ((Set_in n@360@01 g@294@01))
  :pattern ((inv@361@01 n@360@01))
  :pattern ((img@362@01 n@360@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@362@01 r) (Set_in (inv@361@01 r) g@294@01)) (= (inv@361@01 r) r))
  :pattern ((inv@361@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)))
    (=>
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@366@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@361@01 r) g@294@01) (img@362@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert (forall ((n@367@01 $Ref)) (!
  (=>
    (Set_in n@367@01 g@294@01)
    (and (= (inv@368@01 n@367@01) n@367@01) (img@369@01 n@367@01)))
  :pattern ((Set_in n@367@01 g@294@01))
  :pattern ((inv@368@01 n@367@01))
  :pattern ((img@369@01 n@367@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@369@01 r) (Set_in (inv@368@01 r) g@294@01)) (= (inv@368@01 r) r))
  :pattern ((inv@368@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)))
    (=>
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@372@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@368@01 r) g@294@01) (img@369@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@372@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@372@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@376@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@376@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@373@01 $Ref)) (!
  (=>
    (Set_in n@373@01 g@294@01)
    (and (= (inv@374@01 n@373@01) n@373@01) (img@375@01 n@373@01)))
  :pattern ((Set_in n@373@01 g@294@01))
  :pattern ((inv@374@01 n@373@01))
  :pattern ((img@375@01 n@373@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@375@01 r) (Set_in (inv@374@01 r) g@294@01)) (= (inv@374@01 r) r))
  :pattern ((inv@374@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)))
    (=>
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@379@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@374@01 r) g@294@01) (img@375@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@379@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@379@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@380@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@380@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@381@01  $FPM) r)
    (+
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@381@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (=>
  (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@355@01 r) g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
      :pattern ((inv@355@01 r))
      :qid |quant-u-491|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@361@01 r) g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@363@01  $FVF<r>) r) r))
      :pattern ((inv@361@01 r))
      :qid |quant-u-499|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@368@01 r) g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
      :pattern ((inv@368@01 r))
      :qid |quant-u-506|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@374@01 r) g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@376@01  $FVF<r>) r) r))
      :pattern ((inv@374@01 r))
      :qid |quant-u-514|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01)
    (forall ((v1@352@01 $Ref) (v2@353@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
          (and
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
            (=>
              (= v1@352@01 x@295@01)
              (and
                (= v1@352@01 x@295@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@380@01  $FVF<l>) x@295@01) x@295@01)))
            (or (= v1@352@01 x@295@01) (not (= v1@352@01 x@295@01)))))
        (or
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@283@34@285@86-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)
  (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))
  (forall ((v1@352@01 $Ref) (v2@353@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
      (and
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@372@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@379@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01)
        (not
          (and
            (= v1@352@01 x@295@01)
            (= v2@353@01 ($FVF.lookup_l (as sm@380@01  $FVF<l>) x@295@01))))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@359@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@366@01  $FVF<r>))) g@294@01) v1@352@01 v2@353@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@283@34@285@86|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))))))
  $Snap.unit))
; [eval] old(x.l) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))))
; [eval] old(x.l) != null
; [eval] old(x.l)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@295@01)
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
      (=
        ($FVF.lookup_l (as sm@304@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@304@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@303@01 x@295@01)
        (and
          (Set_in (inv@302@01 x@295@01) g@294@01)
          (not (= (inv@302@01 x@295@01) x@295@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 70 | Lookup(l, sm@304@01, x@295@01) != Null | live]
; [else-branch: 70 | Lookup(l, sm@304@01, x@295@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 70 | Lookup(l, sm@304@01, x@295@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@304@01  $FVF<l>) x@295@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))))
(declare-const v1@382@01 $Ref)
(declare-const v2@383@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2)))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 71 | v1@382@01 != v2@383@01 | live]
; [else-branch: 71 | v1@382@01 == v2@383@01 | live]
(push) ; 7
; [then-branch: 71 | v1@382@01 != v2@383@01]
(assert (not (= v1@382@01 v2@383@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@384@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@384@01 g@294@01))
(pop) ; 9
(declare-fun inv@385@01 ($Ref) $Ref)
(declare-fun img@386@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@384@01 $Ref) (n2@384@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@384@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n1@384@01) n1@384@01))
      (and
        (Set_in n2@384@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) n2@384@01) n2@384@01))
      (= n1@384@01 n2@384@01))
    (= n1@384@01 n2@384@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@384@01 $Ref)) (!
  (=>
    (Set_in n@384@01 g@294@01)
    (and (= (inv@385@01 n@384@01) n@384@01) (img@386@01 n@384@01)))
  :pattern ((Set_in n@384@01 g@294@01))
  :pattern ((inv@385@01 n@384@01))
  :pattern ((img@386@01 n@384@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@386@01 r) (Set_in (inv@385@01 r) g@294@01)) (= (inv@385@01 r) r))
  :pattern ((inv@385@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@385@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
  :pattern ((inv@385@01 r))
  :qid |quant-u-521|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@387@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r) (= r (inv@385@01 r)))
    ($Perm.min
      (ite
        (and
          (img@318@01 r)
          (and
            (Set_in (inv@317@01 r) g@294@01)
            (not (= (inv@317@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@388@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r) (= r (inv@385@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@387@01 r v1@382@01 v2@383@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@318@01 r)
          (and
            (Set_in (inv@317@01 r) g@294@01)
            (not (= (inv@317@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@387@01 r v1@382@01 v2@383@01))
    $Perm.No)
  
  :qid |quant-u-523|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r) (= r (inv@385@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@387@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-524|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@388@01 x@295@01 v1@382@01 v2@383@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@388@01 r v1@382@01 v2@383@01) $Perm.No)
  
  :qid |quant-u-526|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r) (= r (inv@385@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@387@01 r v1@382@01 v2@383@01))
        (pTaken@388@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-527|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@389@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@389@01  $FVF<l>)))
      (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r)))
    (=>
      (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r))
      (Set_in r ($FVF.domain_l (as sm@389@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@389@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@389@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@389@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@389@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@389@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@389@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(declare-const n@390@01 $Ref)
(set-option :timeout 0)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@390@01 g@294@01))
(pop) ; 9
(declare-fun inv@391@01 ($Ref) $Ref)
(declare-fun img@392@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@393@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@393@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@393@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@393@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@393@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@393@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@390@01 $Ref) (n2@390@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@390@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@393@01  $FVF<r>) n1@390@01) n1@390@01))
      (and
        (Set_in n2@390@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@393@01  $FVF<r>) n2@390@01) n2@390@01))
      (= n1@390@01 n2@390@01))
    (= n1@390@01 n2@390@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@390@01 $Ref)) (!
  (=>
    (Set_in n@390@01 g@294@01)
    (and (= (inv@391@01 n@390@01) n@390@01) (img@392@01 n@390@01)))
  :pattern ((Set_in n@390@01 g@294@01))
  :pattern ((inv@391@01 n@390@01))
  :pattern ((img@392@01 n@390@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@392@01 r) (Set_in (inv@391@01 r) g@294@01)) (= (inv@391@01 r) r))
  :pattern ((inv@391@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@391@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@393@01  $FVF<r>) r) r))
  :pattern ((inv@391@01 r))
  :qid |quant-u-529|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@394@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r) (= r (inv@391@01 r)))
    ($Perm.min
      (ite
        (and
          (img@322@01 r)
          (and
            (Set_in (inv@321@01 r) g@294@01)
            (not (= (inv@321@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@395@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r) (= r (inv@391@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@394@01 r v1@382@01 v2@383@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@322@01 r)
          (and
            (Set_in (inv@321@01 r) g@294@01)
            (not (= (inv@321@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@394@01 r v1@382@01 v2@383@01))
    $Perm.No)
  
  :qid |quant-u-531|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r) (= r (inv@391@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@394@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-532|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@395@01 x@295@01 v1@382@01 v2@383@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r) (= r (inv@391@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@394@01 r v1@382@01 v2@383@01))
        (pTaken@395@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-534|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@396@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@396@01  $FVF<r>)))
      (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r)))
    (=>
      (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r))
      (Set_in r ($FVF.domain_r (as sm@396@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@396@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@396@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@396@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@396@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@396@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@396@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@389@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@396@01  $FVF<r>))) g@294@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@384@01 $Ref)) (!
  (=>
    (Set_in n@384@01 g@294@01)
    (and (= (inv@385@01 n@384@01) n@384@01) (img@386@01 n@384@01)))
  :pattern ((Set_in n@384@01 g@294@01))
  :pattern ((inv@385@01 n@384@01))
  :pattern ((img@386@01 n@384@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@386@01 r) (Set_in (inv@385@01 r) g@294@01)) (= (inv@385@01 r) r))
  :pattern ((inv@385@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@389@01  $FVF<l>)))
      (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r)))
    (=>
      (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r))
      (Set_in r ($FVF.domain_l (as sm@389@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@389@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@389@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@312@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@389@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@312@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@385@01 r) g@294@01) (img@386@01 r))
      (and
        (img@318@01 r)
        (and (Set_in (inv@317@01 r) g@294@01) (not (= (inv@317@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@389@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@389@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@312@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@389@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@393@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@393@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@393@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@393@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@393@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
(assert (forall ((n@390@01 $Ref)) (!
  (=>
    (Set_in n@390@01 g@294@01)
    (and (= (inv@391@01 n@390@01) n@390@01) (img@392@01 n@390@01)))
  :pattern ((Set_in n@390@01 g@294@01))
  :pattern ((inv@391@01 n@390@01))
  :pattern ((img@392@01 n@390@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@392@01 r) (Set_in (inv@391@01 r) g@294@01)) (= (inv@391@01 r) r))
  :pattern ((inv@391@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@396@01  $FVF<r>)))
      (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r)))
    (=>
      (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r))
      (Set_in r ($FVF.domain_r (as sm@396@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@396@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r))
      (and
        (img@322@01 r)
        (and (Set_in (inv@321@01 r) g@294@01) (not (= (inv@321@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@396@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@396@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@391@01 r) g@294@01) (img@392@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@396@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@314@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@396@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@314@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@314@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@396@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@385@01 r) g@294@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@319@01  $FVF<l>) r) r))
    :pattern ((inv@385@01 r))
    :qid |quant-u-521|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@391@01 r) g@294@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@393@01  $FVF<r>) r) r))
    :pattern ((inv@391@01 r))
    :qid |quant-u-529|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@389@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@396@01  $FVF<r>))) g@294@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@397@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@397@01 g@294@01))
(pop) ; 9
(declare-fun inv@398@01 ($Ref) $Ref)
(declare-fun img@399@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@397@01 $Ref) (n2@397@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@397@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n1@397@01) n1@397@01))
      (and
        (Set_in n2@397@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) n2@397@01) n2@397@01))
      (= n1@397@01 n2@397@01))
    (= n1@397@01 n2@397@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 g@294@01)
    (and (= (inv@398@01 n@397@01) n@397@01) (img@399@01 n@397@01)))
  :pattern ((Set_in n@397@01 g@294@01))
  :pattern ((inv@398@01 n@397@01))
  :pattern ((img@399@01 n@397@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@399@01 r) (Set_in (inv@398@01 r) g@294@01)) (= (inv@398@01 r) r))
  :pattern ((inv@398@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@398@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
  :pattern ((inv@398@01 r))
  :qid |quant-u-536|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@400@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r) (= r (inv@398@01 r)))
    ($Perm.min
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@401@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r) (= r (inv@398@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@400@01 r v1@382@01 v2@383@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@400@01 r v1@382@01 v2@383@01))
    $Perm.No)
  
  :qid |quant-u-538|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r) (= r (inv@398@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@400@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-539|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@401@01 x@295@01 v1@382@01 v2@383@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@401@01 r v1@382@01 v2@383@01) $Perm.No)
  
  :qid |quant-u-541|))))
(check-sat)
; unknown
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r) (= r (inv@398@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@400@01 r v1@382@01 v2@383@01))
        (pTaken@401@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-542|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@402@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@402@01  $FVF<l>)))
      (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r)))
    (=>
      (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r))
      (Set_in r ($FVF.domain_l (as sm@402@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@402@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@402@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@402@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@402@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@402@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@402@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(declare-const n@403@01 $Ref)
(set-option :timeout 0)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@403@01 g@294@01))
(pop) ; 9
(declare-fun inv@404@01 ($Ref) $Ref)
(declare-fun img@405@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@406@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@403@01 $Ref) (n2@403@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@403@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@406@01  $FVF<r>) n1@403@01) n1@403@01))
      (and
        (Set_in n2@403@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@406@01  $FVF<r>) n2@403@01) n2@403@01))
      (= n1@403@01 n2@403@01))
    (= n1@403@01 n2@403@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@403@01 $Ref)) (!
  (=>
    (Set_in n@403@01 g@294@01)
    (and (= (inv@404@01 n@403@01) n@403@01) (img@405@01 n@403@01)))
  :pattern ((Set_in n@403@01 g@294@01))
  :pattern ((inv@404@01 n@403@01))
  :pattern ((img@405@01 n@403@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@405@01 r) (Set_in (inv@404@01 r) g@294@01)) (= (inv@404@01 r) r))
  :pattern ((inv@404@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@404@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@406@01  $FVF<r>) r) r))
  :pattern ((inv@404@01 r))
  :qid |quant-u-544|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@407@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r) (= r (inv@404@01 r)))
    ($Perm.min
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@408@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r) (= r (inv@404@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@407@01 r v1@382@01 v2@383@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@407@01 r v1@382@01 v2@383@01))
    $Perm.No)
  
  :qid |quant-u-546|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r) (= r (inv@404@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@407@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-547|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- (/ (to_real 1) (to_real 2)) (pTaken@408@01 x@295@01 v1@382@01 v2@383@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r) (= r (inv@404@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@407@01 r v1@382@01 v2@383@01))
        (pTaken@408@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-549|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@409@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@409@01  $FVF<r>)))
      (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r)))
    (=>
      (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r))
      (Set_in r ($FVF.domain_r (as sm@409@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@409@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@409@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@409@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@409@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@409@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@409@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@402@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@409@01  $FVF<r>))) g@294@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 g@294@01)
    (and (= (inv@398@01 n@397@01) n@397@01) (img@399@01 n@397@01)))
  :pattern ((Set_in n@397@01 g@294@01))
  :pattern ((inv@398@01 n@397@01))
  :pattern ((img@399@01 n@397@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@399@01 r) (Set_in (inv@398@01 r) g@294@01)) (= (inv@398@01 r) r))
  :pattern ((inv@398@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@402@01  $FVF<l>)))
      (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r)))
    (=>
      (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r))
      (Set_in r ($FVF.domain_l (as sm@402@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@402@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@402@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@402@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@294@01) (img@399@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@402@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@402@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@402@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (forall ((n@403@01 $Ref)) (!
  (=>
    (Set_in n@403@01 g@294@01)
    (and (= (inv@404@01 n@403@01) n@403@01) (img@405@01 n@403@01)))
  :pattern ((Set_in n@403@01 g@294@01))
  :pattern ((inv@404@01 n@403@01))
  :pattern ((img@405@01 n@403@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@405@01 r) (Set_in (inv@404@01 r) g@294@01)) (= (inv@404@01 r) r))
  :pattern ((inv@404@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@409@01  $FVF<r>)))
      (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r)))
    (=>
      (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r))
      (Set_in r ($FVF.domain_r (as sm@409@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@409@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r))
      (and
        (img@307@01 r)
        (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01)))))
    (=
      ($FVF.lookup_r (as sm@409@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@409@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@404@01 r) g@294@01) (img@405@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_r (as sm@409@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@409@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@409@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@398@01 r) g@294@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@304@01  $FVF<l>) r) r))
    :pattern ((inv@398@01 r))
    :qid |quant-u-536|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@404@01 r) g@294@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@406@01  $FVF<r>) r) r))
    :pattern ((inv@404@01 r))
    :qid |quant-u-544|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@402@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@409@01  $FVF<r>))) g@294@01)))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 72 | !(exists_path[Bool]($$((sm@402@01, sm@409@01), g@294@01), v1@382@01, v2@383@01)) | live]
; [else-branch: 72 | exists_path[Bool]($$((sm@402@01, sm@409@01), g@294@01), v1@382@01, v2@383@01) | live]
(push) ; 9
; [then-branch: 72 | !(exists_path[Bool]($$((sm@402@01, sm@409@01), g@294@01), v1@382@01, v2@383@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@402@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@409@01  $FVF<r>))) g@294@01) v1@382@01 v2@383@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 72 | exists_path[Bool]($$((sm@402@01, sm@409@01), g@294@01), v1@382@01, v2@383@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@402@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@409@01  $FVF<r>))) g@294@01) v1@382@01 v2@383@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@410@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@410@01 g@294@01))
(pop) ; 11
(declare-fun inv@411@01 ($Ref) $Ref)
(declare-fun img@412@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@413@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_l (as sm@413@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@413@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01))))
    (=
      ($FVF.lookup_l (as sm@413@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@413@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@413@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@410@01 $Ref) (n2@410@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@410@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@413@01  $FVF<l>) n1@410@01) n1@410@01))
      (and
        (Set_in n2@410@01 g@294@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@413@01  $FVF<l>) n2@410@01) n2@410@01))
      (= n1@410@01 n2@410@01))
    (= n1@410@01 n2@410@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@410@01 $Ref)) (!
  (=>
    (Set_in n@410@01 g@294@01)
    (and (= (inv@411@01 n@410@01) n@410@01) (img@412@01 n@410@01)))
  :pattern ((Set_in n@410@01 g@294@01))
  :pattern ((inv@411@01 n@410@01))
  :pattern ((img@412@01 n@410@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@412@01 r) (Set_in (inv@411@01 r) g@294@01)) (= (inv@411@01 r) r))
  :pattern ((inv@411@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@411@01 r) g@294@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@413@01  $FVF<l>) r) r))
  :pattern ((inv@411@01 r))
  :qid |quant-u-551|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@414@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r) (= r (inv@411@01 r)))
    ($Perm.min
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@415@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r) (= r (inv@411@01 r)))
    ($Perm.min
      (ite (= r x@295@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@414@01 r v1@382@01 v2@383@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@303@01 r)
          (and
            (Set_in (inv@302@01 r) g@294@01)
            (not (= (inv@302@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@414@01 r v1@382@01 v2@383@01))
    $Perm.No)
  
  :qid |quant-u-553|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r) (= r (inv@411@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@414@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-554|))))
(check-sat)
; unknown
(pop) ; 11
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@415@01 x@295@01 v1@382@01 v2@383@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@415@01 r v1@382@01 v2@383@01) $Perm.No)
  
  :qid |quant-u-556|))))
(check-sat)
; unknown
(pop) ; 11
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r) (= r (inv@411@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@414@01 r v1@382@01 v2@383@01))
        (pTaken@415@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-557|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@416@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@416@01  $FVF<l>)))
      (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r)))
    (=>
      (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r))
      (Set_in r ($FVF.domain_l (as sm@416@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@416@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r)) (= r x@295@01))
    (=
      ($FVF.lookup_l (as sm@416@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@297@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@416@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@297@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@411@01 r) g@294@01) (img@412@01 r))
      (and
        (img@303@01 r)
        (and (Set_in (inv@302@01 r) g@294@01) (not (= (inv@302@01 r) x@295@01)))))
    (=
      ($FVF.lookup_l (as sm@416@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@416@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@297@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@416@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(declare-const n@417@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@417@01 g@294@01))
(pop) ; 11
(declare-fun inv@418@01 ($Ref) $Ref)
(declare-fun img@419@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@420@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@307@01 r)
      (and (Set_in (inv@306@01 r) g@294@01) (not (= (inv@306@01 r) x@295@01))))
    (=
      ($FVF.lookup_r (as sm@420@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@420@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@295@01)
    (=
      ($FVF.lookup_r (as sm@420@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@420@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@299@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@420@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@417@01 $Ref) (n2@417@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@417@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@420@01  $FVF<r>) n1@417@01) n1@417@01))
      (and
        (Set_in n2@417@01 g@294@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@420@01  $FVF<r>) n2@417@01) n2@417@01))
      (= n1@417@01 n2@417@01))
    (= n1@417@01 n2@417@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@417@01 $Ref)) (!
  (=>
    (Set_in n@417@01 g@294@01)
    (and (= (inv@418@01 n@417@01) n@417@01) (img@419@01 n@417@01)))
  :pattern ((Set_in n@417@01 g@294@01))
  :pattern ((inv@418@01 n@417@01))
  :pattern ((img@419@01 n@417@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@419@01 r) (Set_in (inv@418@01 r) g@294@01)) (= (inv@418@01 r) r))
  :pattern ((inv@418@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@418@01 r) g@294@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@420@01  $FVF<r>) r) r))
  :pattern ((inv@418@01 r))
  :qid |quant-u-559|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@421@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@418@01 r) g@294@01) (img@419@01 r) (= r (inv@418@01 r)))
    ($Perm.min
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@422@01 ((r $Ref) (v1@382@01 $Ref) (v2@383@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@418@01 r) g@294@01) (img@419@01 r) (= r (inv@418@01 r)))
    ($Perm.min
      (ite (= r x@295@01) (/ (to_real 1) (to_real 2)) $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@421@01 r v1@382@01 v2@383@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@307@01 r)
          (and
            (Set_in (inv@306@01 r) g@294@01)
            (not (= (inv@306@01 r) x@295@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@421@01 r v1@382@01 v2@383@01))
    $Perm.No)
  
  :qid |quant-u-561|))))
(check-sat)
; unsat
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@418@01 r) g@294@01) (img@419@01 r) (= r (inv@418@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@421@01 r v1@382@01 v2@383@01))
      $Perm.No))
  
  :qid |quant-u-562|))))
(check-sat)
