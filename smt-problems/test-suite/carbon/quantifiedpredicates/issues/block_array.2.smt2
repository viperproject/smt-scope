(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun val () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun RefType () T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun access (T@U Int) T@U)
(declare-fun IArrayDomainTypeType () T@T)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun PredicateType_accessType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |access#trigger| (T@U T@U) Bool)
(declare-fun |access#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun len (T@U) Int)
(declare-fun |access#sm| (T@U Int) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun loc (T@U Int) T@U)
(declare-fun first (T@U) T@U)
(declare-fun second (T@U) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type val) (FieldType NormalFieldType intType))))
(assert (distinct $allocated val)
)
(assert  (and (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 8)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val@@0 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val@@0) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val@@0) x0 x1) val@@0)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@1 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@1) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@2 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@2) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@3 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@3) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (Ctor RefType) 9)))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@4 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@4) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@4) x0@@3 x1@@3) val@@4)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@5 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@5) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@6 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@6) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@7 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@7) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (and (= (Ctor IArrayDomainTypeType) 11) (= (Ctor PredicateType_accessType) 12)) (= (Ctor FrameTypeType) 13)) (forall ((arg0@@23 T@U) (arg1@@9 Int) ) (! (= (type (access arg0@@23 arg1@@9)) (FieldType PredicateType_accessType FrameTypeType))
 :qid |funType:access|
 :pattern ( (access arg0@@23 arg1@@9))
))))
(assert (forall ((a_3 T@U) (i_1 Int) ) (!  (=> (= (type a_3) IArrayDomainTypeType) (IsPredicateField (access a_3 i_1)))
 :qid |stdinbpl.282:15|
 :skolemid |25|
 :pattern ( (access a_3 i_1))
)))
(assert (forall ((Heap@@0 T@U) (a_3@@0 T@U) (i_1@@0 Int) ) (!  (=> (and (= (type Heap@@0) (MapType0Type RefType)) (= (type a_3@@0) IArrayDomainTypeType)) (|access#everUsed| (access a_3@@0 i_1@@0)))
 :qid |stdinbpl.301:15|
 :skolemid |29|
 :pattern ( (|access#trigger| Heap@@0 (access a_3@@0 i_1@@0)))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@24 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@24))))
(= (type (PredicateMaskField arg0@@24)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@24))
))))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@1 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@25 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@25))))
(= (type (WandMaskField arg0@@25)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@25))
)))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@2 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@3 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((a_3@@1 T@U) ) (!  (=> (= (type a_3@@1) IArrayDomainTypeType) (>= (len a_3@@1) 0))
 :qid |stdinbpl.258:15|
 :skolemid |23|
 :pattern ( (len a_3@@1))
)))
(assert (forall ((a_3@@2 T@U) (i_1@@1 Int) (a2 T@U) (i2 Int) ) (!  (=> (and (and (= (type a_3@@2) IArrayDomainTypeType) (= (type a2) IArrayDomainTypeType)) (= (access a_3@@2 i_1@@1) (access a2 i2))) (and (= a_3@@2 a2) (= i_1@@1 i2)))
 :qid |stdinbpl.292:15|
 :skolemid |27|
 :pattern ( (access a_3@@2 i_1@@1) (access a2 i2))
)))
(assert (forall ((arg0@@26 T@U) (arg1@@10 Int) ) (! (= (type (|access#sm| arg0@@26 arg1@@10)) (FieldType PredicateType_accessType (MapType1Type RefType boolType)))
 :qid |funType:access#sm|
 :pattern ( (|access#sm| arg0@@26 arg1@@10))
)))
(assert (forall ((a_3@@3 T@U) (i_1@@2 Int) (a2@@0 T@U) (i2@@0 Int) ) (!  (=> (and (and (= (type a_3@@3) IArrayDomainTypeType) (= (type a2@@0) IArrayDomainTypeType)) (= (|access#sm| a_3@@3 i_1@@2) (|access#sm| a2@@0 i2@@0))) (and (= a_3@@3 a2@@0) (= i_1@@2 i2@@0)))
 :qid |stdinbpl.296:15|
 :skolemid |28|
 :pattern ( (|access#sm| a_3@@3 i_1@@2) (|access#sm| a2@@0 i2@@0))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@4 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.227:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField val)))
(assert  (not (IsWandField val)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@5 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@27 Real) (arg1@@11 T@U) ) (! (= (type (ConditionalFrame arg0@@27 arg1@@11)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@27 arg1@@11))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.215:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert  (and (forall ((arg0@@28 T@U) (arg1@@12 Int) ) (! (= (type (loc arg0@@28 arg1@@12)) RefType)
 :qid |funType:loc|
 :pattern ( (loc arg0@@28 arg1@@12))
)) (forall ((arg0@@29 T@U) ) (! (= (type (first arg0@@29)) IArrayDomainTypeType)
 :qid |funType:first|
 :pattern ( (first arg0@@29))
))))
(assert (forall ((a_3@@4 T@U) (i_1@@3 Int) ) (!  (=> (= (type a_3@@4) IArrayDomainTypeType) (and (= (first (loc a_3@@4 i_1@@3)) a_3@@4) (= (second (loc a_3@@4 i_1@@3)) i_1@@3)))
 :qid |stdinbpl.252:15|
 :skolemid |22|
 :pattern ( (loc a_3@@4 i_1@@3))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((a_3@@5 T@U) (i_1@@4 Int) ) (!  (=> (= (type a_3@@5) IArrayDomainTypeType) (= (getPredWandId (access a_3@@5 i_1@@4)) 0))
 :qid |stdinbpl.286:15|
 :skolemid |26|
 :pattern ( (access a_3@@5 i_1@@4))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@6 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@7 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@7 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@8 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@8) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@8 o $allocated))) (U_2_bool (MapType0Select Heap@@8 (MapType0Select Heap@@8 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@8 o f))
)))
(assert (forall ((a_3@@6 T@U) (i_1@@5 Int) ) (!  (=> (= (type a_3@@6) IArrayDomainTypeType) (= (PredicateMaskField (access a_3@@6 i_1@@5)) (|access#sm| a_3@@6 i_1@@5)))
 :qid |stdinbpl.278:15|
 :skolemid |24|
 :pattern ( (PredicateMaskField (access a_3@@6 i_1@@5)))
)))
(assert (forall ((Heap@@9 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@9 (MapType0Store Heap@@9 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@9 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.222:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun i_1@@6 () Int)
(declare-fun UnfoldingMask@71 () T@U)
(declare-fun UnfoldingMask@68 () T@U)
(declare-fun a_3@@7 () T@U)
(declare-fun UnfoldingMask@69 () T@U)
(declare-fun PostHeap@6 () T@U)
(declare-fun UnfoldingMask@70 () T@U)
(declare-fun QPMask@4 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun PostHeap@3 () T@U)
(declare-fun PostHeap@4 () T@U)
(declare-fun PostHeap@5 () T@U)
(declare-fun UnfoldingMask@67 () T@U)
(declare-fun UnfoldingMask@64 () T@U)
(declare-fun UnfoldingMask@65 () T@U)
(declare-fun UnfoldingMask@66 () T@U)
(declare-fun UnfoldingMask@63 () T@U)
(declare-fun newVal () Int)
(declare-fun UnfoldingMask@60 () T@U)
(declare-fun UnfoldingMask@61 () T@U)
(declare-fun UnfoldingMask@62 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun PostHeap@1 () T@U)
(declare-fun PostHeap@2 () T@U)
(declare-fun UnfoldingMask@59 () T@U)
(declare-fun UnfoldingMask@56 () T@U)
(declare-fun UnfoldingMask@57 () T@U)
(declare-fun UnfoldingMask@58 () T@U)
(declare-fun Heap@@10 () T@U)
(declare-fun PostHeap@12 () T@U)
(declare-fun j_2 () Int)
(declare-fun PostHeap@9 () T@U)
(declare-fun PostHeap@10 () T@U)
(declare-fun PostHeap@11 () T@U)
(declare-fun UnfoldingMask@79 () T@U)
(declare-fun UnfoldingMask@76 () T@U)
(declare-fun UnfoldingMask@77 () T@U)
(declare-fun UnfoldingMask@78 () T@U)
(declare-fun QPMask@0 () T@U)
(declare-fun PostHeap@7 () T@U)
(declare-fun PostHeap@8 () T@U)
(declare-fun UnfoldingMask@75 () T@U)
(declare-fun UnfoldingMask@72 () T@U)
(declare-fun UnfoldingMask@73 () T@U)
(declare-fun UnfoldingMask@74 () T@U)
(declare-fun PostHeap@18 () T@U)
(declare-fun j () Int)
(declare-fun PostHeap@15 () T@U)
(declare-fun PostHeap@16 () T@U)
(declare-fun PostHeap@17 () T@U)
(declare-fun UnfoldingMask@87 () T@U)
(declare-fun UnfoldingMask@84 () T@U)
(declare-fun UnfoldingMask@85 () T@U)
(declare-fun UnfoldingMask@86 () T@U)
(declare-fun PostHeap@13 () T@U)
(declare-fun PostHeap@14 () T@U)
(declare-fun UnfoldingMask@83 () T@U)
(declare-fun UnfoldingMask@80 () T@U)
(declare-fun UnfoldingMask@81 () T@U)
(declare-fun UnfoldingMask@82 () T@U)
(declare-fun neverTriggered7 (Int) Bool)
(declare-fun invRecv7 (T@U Int) Int)
(declare-fun qpRange7 (T@U Int) Bool)
(declare-fun Heap@59 () T@U)
(declare-fun QPMask@2 () T@U)
(declare-fun j_11 () Int)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun UnfoldingMask@47 () T@U)
(declare-fun UnfoldingMask@44 () T@U)
(declare-fun UnfoldingMask@45 () T@U)
(declare-fun UnfoldingMask@46 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun UnfoldingMask@43 () T@U)
(declare-fun UnfoldingMask@40 () T@U)
(declare-fun UnfoldingMask@41 () T@U)
(declare-fun UnfoldingMask@42 () T@U)
(declare-fun arg_i@0 () Int)
(declare-fun Heap@65 () T@U)
(declare-fun j_5 () Int)
(declare-fun Heap@62 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun UnfoldingMask@55 () T@U)
(declare-fun UnfoldingMask@52 () T@U)
(declare-fun UnfoldingMask@53 () T@U)
(declare-fun UnfoldingMask@54 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun UnfoldingMask@51 () T@U)
(declare-fun UnfoldingMask@48 () T@U)
(declare-fun UnfoldingMask@49 () T@U)
(declare-fun UnfoldingMask@50 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun QPMask@3 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun UnfoldingMask@39 () T@U)
(declare-fun UnfoldingMask@36 () T@U)
(declare-fun UnfoldingMask@37 () T@U)
(declare-fun UnfoldingMask@38 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun UnfoldingMask@35 () T@U)
(declare-fun UnfoldingMask@32 () T@U)
(declare-fun UnfoldingMask@33 () T@U)
(declare-fun UnfoldingMask@34 () T@U)
(declare-fun j_13 () Int)
(declare-fun j_11_1 () Int)
(declare-fun neverTriggered8 (Int) Bool)
(declare-fun invRecv8 (T@U Int) Int)
(declare-fun qpRange8 (T@U Int) Bool)
(declare-fun Heap@44 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun UnfoldingMask@31 () T@U)
(declare-fun UnfoldingMask@28 () T@U)
(declare-fun UnfoldingMask@29 () T@U)
(declare-fun UnfoldingMask@30 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun UnfoldingMask@27 () T@U)
(declare-fun UnfoldingMask@24 () T@U)
(declare-fun UnfoldingMask@25 () T@U)
(declare-fun UnfoldingMask@26 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun neverTriggered9 (Int) Bool)
(declare-fun invRecv9 (T@U Int) Int)
(declare-fun qpRange9 (T@U Int) Bool)
(declare-fun QPMask@1 () T@U)
(declare-fun neverTriggered10 (Int) Bool)
(declare-fun invRecv10 (T@U Int) Int)
(declare-fun qpRange10 (T@U Int) Bool)
(declare-fun Heap@6 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun neverTriggered6 (Int) Bool)
(declare-fun invRecv6 (T@U Int) Int)
(declare-fun qpRange6 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Heap@47) (MapType0Type RefType)) (= (type a_3@@7) IArrayDomainTypeType)) (= (type Heap@@10) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type Heap@50) (MapType0Type RefType))) (= (type Heap@52) (MapType0Type RefType))) (= (type Heap@53) (MapType0Type RefType))) (= (type QPMask@3) (MapType1Type RefType realType))) (= (type Heap@48) (MapType0Type RefType))) (= (type Heap@49) (MapType0Type RefType))) (= (type UnfoldingMask@39) (MapType1Type RefType realType))) (= (type UnfoldingMask@37) (MapType1Type RefType realType))) (= (type UnfoldingMask@36) (MapType1Type RefType realType))) (= (type UnfoldingMask@38) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@35) (MapType1Type RefType realType))) (forall ((arg0@@30 T@U) ) (! (= (type (FrameFragment arg0@@30)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@30))
))) (forall ((arg0@@31 T@U) (arg1@@13 T@U) ) (! (= (type (CombineFrames arg0@@31 arg1@@13)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@31 arg1@@13))
))) (= (type UnfoldingMask@33) (MapType1Type RefType realType))) (= (type UnfoldingMask@32) (MapType1Type RefType realType))) (= (type UnfoldingMask@34) (MapType1Type RefType realType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Heap@44) (MapType0Type RefType))) (= (type Heap@46) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Heap@35) (MapType0Type RefType))) (= (type UnfoldingMask@31) (MapType1Type RefType realType))) (= (type UnfoldingMask@29) (MapType1Type RefType realType))) (= (type UnfoldingMask@28) (MapType1Type RefType realType))) (= (type UnfoldingMask@30) (MapType1Type RefType realType))) (= (type Heap@36) (MapType0Type RefType))) (= (type Heap@37) (MapType0Type RefType))) (= (type UnfoldingMask@27) (MapType1Type RefType realType))) (= (type UnfoldingMask@25) (MapType1Type RefType realType))) (= (type UnfoldingMask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@26) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type QPMask@2) (MapType1Type RefType realType))) (= (type Heap@63) (MapType0Type RefType))) (= (type Heap@62) (MapType0Type RefType))) (= (type Heap@64) (MapType0Type RefType))) (= (type UnfoldingMask@55) (MapType1Type RefType realType))) (= (type UnfoldingMask@53) (MapType1Type RefType realType))) (= (type UnfoldingMask@52) (MapType1Type RefType realType))) (= (type UnfoldingMask@54) (MapType1Type RefType realType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@61) (MapType0Type RefType))) (= (type UnfoldingMask@51) (MapType1Type RefType realType))) (= (type UnfoldingMask@49) (MapType1Type RefType realType))) (= (type UnfoldingMask@48) (MapType1Type RefType realType))) (= (type UnfoldingMask@50) (MapType1Type RefType realType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type UnfoldingMask@47) (MapType1Type RefType realType))) (= (type UnfoldingMask@45) (MapType1Type RefType realType))) (= (type UnfoldingMask@44) (MapType1Type RefType realType))) (= (type UnfoldingMask@46) (MapType1Type RefType realType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type UnfoldingMask@43) (MapType1Type RefType realType))) (= (type UnfoldingMask@41) (MapType1Type RefType realType))) (= (type UnfoldingMask@40) (MapType1Type RefType realType))) (= (type UnfoldingMask@42) (MapType1Type RefType realType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Heap@22) (MapType0Type RefType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type Heap@23) (MapType0Type RefType))) (= (type Heap@24) (MapType0Type RefType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type Heap@18) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type Heap@10) (MapType0Type RefType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Heap@11) (MapType0Type RefType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type QPMask@1) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type QPMask@0) (MapType1Type RefType realType))) (= (type PostHeap@18) (MapType0Type RefType))) (= (type QPMask@4) (MapType1Type RefType realType))) (= (type PostHeap@16) (MapType0Type RefType))) (= (type PostHeap@15) (MapType0Type RefType))) (= (type PostHeap@17) (MapType0Type RefType))) (= (type UnfoldingMask@87) (MapType1Type RefType realType))) (= (type UnfoldingMask@85) (MapType1Type RefType realType))) (= (type UnfoldingMask@84) (MapType1Type RefType realType))) (= (type UnfoldingMask@86) (MapType1Type RefType realType))) (= (type PostHeap@13) (MapType0Type RefType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type PostHeap@14) (MapType0Type RefType))) (= (type UnfoldingMask@83) (MapType1Type RefType realType))) (= (type UnfoldingMask@81) (MapType1Type RefType realType))) (= (type UnfoldingMask@80) (MapType1Type RefType realType))) (= (type UnfoldingMask@82) (MapType1Type RefType realType))) (= (type PostHeap@12) (MapType0Type RefType))) (= (type PostHeap@10) (MapType0Type RefType))) (= (type PostHeap@9) (MapType0Type RefType))) (= (type PostHeap@11) (MapType0Type RefType))) (= (type UnfoldingMask@79) (MapType1Type RefType realType))) (= (type UnfoldingMask@77) (MapType1Type RefType realType))) (= (type UnfoldingMask@76) (MapType1Type RefType realType))) (= (type UnfoldingMask@78) (MapType1Type RefType realType))) (= (type PostHeap@7) (MapType0Type RefType))) (= (type PostHeap@8) (MapType0Type RefType))) (= (type UnfoldingMask@75) (MapType1Type RefType realType))) (= (type UnfoldingMask@73) (MapType1Type RefType realType))) (= (type UnfoldingMask@72) (MapType1Type RefType realType))) (= (type UnfoldingMask@74) (MapType1Type RefType realType))) (= (type UnfoldingMask@69) (MapType1Type RefType realType))) (= (type UnfoldingMask@68) (MapType1Type RefType realType))) (= (type PostHeap@6) (MapType0Type RefType))) (= (type UnfoldingMask@70) (MapType1Type RefType realType))) (= (type UnfoldingMask@71) (MapType1Type RefType realType))) (= (type PostHeap@4) (MapType0Type RefType))) (= (type PostHeap@3) (MapType0Type RefType))) (= (type PostHeap@5) (MapType0Type RefType))) (= (type UnfoldingMask@67) (MapType1Type RefType realType))) (= (type UnfoldingMask@65) (MapType1Type RefType realType))) (= (type UnfoldingMask@64) (MapType1Type RefType realType))) (= (type UnfoldingMask@66) (MapType1Type RefType realType))) (= (type UnfoldingMask@63) (MapType1Type RefType realType))) (= (type UnfoldingMask@61) (MapType1Type RefType realType))) (= (type UnfoldingMask@60) (MapType1Type RefType realType))) (= (type UnfoldingMask@62) (MapType1Type RefType realType))) (= (type PostHeap@1) (MapType0Type RefType))) (= (type PostHeap@2) (MapType0Type RefType))) (= (type UnfoldingMask@59) (MapType1Type RefType realType))) (= (type UnfoldingMask@57) (MapType1Type RefType realType))) (= (type UnfoldingMask@56) (MapType1Type RefType realType))) (= (type UnfoldingMask@58) (MapType1Type RefType realType))))
(set-info :boogie-vc-id setVal)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 306) (let ((anon53_correct true))
(let ((anon205_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@71 UnfoldingMask@68) (= (ControlFlow 0 272) 270)) anon53_correct))))
(let ((anon205_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@69 (MapType1Store UnfoldingMask@68 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@68 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state PostHeap@6 UnfoldingMask@69) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@70 (MapType1Store UnfoldingMask@69 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@69 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state PostHeap@6 UnfoldingMask@70)) (and (= UnfoldingMask@71 UnfoldingMask@70) (= (ControlFlow 0 271) 270)))) anon53_correct))))
(let ((anon51_correct  (=> (and (and (state PostHeap@6 QPMask@4) (|access#trigger| PostHeap@6 (access a_3@@7 i_1@@6))) (and (= (MapType0Select PostHeap@6 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select PostHeap@6 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select PostHeap@6 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame))) (= UnfoldingMask@68 (MapType1Store QPMask@4 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6))) FullPerm)))))) (and (=> (= (ControlFlow 0 273) 271) anon205_Then_correct) (=> (= (ControlFlow 0 273) 272) anon205_Else_correct)))))
(let ((anon204_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= PostHeap@6 PostHeap@3) (= (ControlFlow 0 275) 273)) anon51_correct))))
(let ((anon204_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= PostHeap@4 (MapType0Store PostHeap@3 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select PostHeap@3 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= PostHeap@5 (MapType0Store PostHeap@4 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select PostHeap@4 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= PostHeap@6 PostHeap@5) (= (ControlFlow 0 274) 273))) anon51_correct))))
(let ((anon49_correct  (=> (state PostHeap@3 UnfoldingMask@67) (and (=> (= (ControlFlow 0 276) (- 0 277)) (HasDirectPerm UnfoldingMask@67 (loc a_3@@7 (+ i_1@@6 1)) val)) (=> (HasDirectPerm UnfoldingMask@67 (loc a_3@@7 (+ i_1@@6 1)) val) (and (=> (= (ControlFlow 0 276) 274) anon204_Then_correct) (=> (= (ControlFlow 0 276) 275) anon204_Else_correct)))))))
(let ((anon203_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@67 UnfoldingMask@64) (= (ControlFlow 0 279) 276)) anon49_correct))))
(let ((anon203_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@65 (MapType1Store UnfoldingMask@64 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@64 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state PostHeap@3 UnfoldingMask@65) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@66 (MapType1Store UnfoldingMask@65 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@65 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state PostHeap@3 UnfoldingMask@66)) (and (= UnfoldingMask@67 UnfoldingMask@66) (= (ControlFlow 0 278) 276)))) anon49_correct))))
(let ((anon47_correct  (=> (= UnfoldingMask@64 (MapType1Store QPMask@4 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 280) 278) anon203_Then_correct) (=> (= (ControlFlow 0 280) 279) anon203_Else_correct)))))
(let ((anon202_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 283) 280)) anon47_correct)))
(let ((anon202_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 281) (- 0 282)) (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 281) 280) anon47_correct))))))
(let ((anon45_correct  (=> (and (and (state PostHeap@3 UnfoldingMask@63) (= (U_2_int (MapType0Select PostHeap@3 (loc a_3@@7 i_1@@6) val)) newVal)) (and (|access#trigger| PostHeap@3 (access a_3@@7 i_1@@6)) (= (MapType0Select PostHeap@3 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select PostHeap@3 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select PostHeap@3 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 284) 281) anon202_Then_correct) (=> (= (ControlFlow 0 284) 283) anon202_Else_correct)))))
(let ((anon201_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@63 UnfoldingMask@60) (= (ControlFlow 0 286) 284)) anon45_correct))))
(let ((anon201_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@61 (MapType1Store UnfoldingMask@60 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@60 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state PostHeap@3 UnfoldingMask@61) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@62 (MapType1Store UnfoldingMask@61 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@61 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state PostHeap@3 UnfoldingMask@62)) (and (= UnfoldingMask@63 UnfoldingMask@62) (= (ControlFlow 0 285) 284)))) anon45_correct))))
(let ((anon43_correct  (=> (and (and (state PostHeap@3 QPMask@4) (|access#trigger| PostHeap@3 (access a_3@@7 i_1@@6))) (and (= (MapType0Select PostHeap@3 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select PostHeap@3 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select PostHeap@3 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame))) (= UnfoldingMask@60 (MapType1Store QPMask@4 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6))) FullPerm)))))) (and (=> (= (ControlFlow 0 287) 285) anon201_Then_correct) (=> (= (ControlFlow 0 287) 286) anon201_Else_correct)))))
(let ((anon200_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= PostHeap@3 PostHeap@0) (= (ControlFlow 0 289) 287)) anon43_correct))))
(let ((anon200_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= PostHeap@1 (MapType0Store PostHeap@0 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select PostHeap@0 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= PostHeap@2 (MapType0Store PostHeap@1 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select PostHeap@1 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= PostHeap@3 PostHeap@2) (= (ControlFlow 0 288) 287))) anon43_correct))))
(let ((anon41_correct  (=> (state PostHeap@0 UnfoldingMask@59) (and (=> (= (ControlFlow 0 290) (- 0 291)) (HasDirectPerm UnfoldingMask@59 (loc a_3@@7 i_1@@6) val)) (=> (HasDirectPerm UnfoldingMask@59 (loc a_3@@7 i_1@@6) val) (and (=> (= (ControlFlow 0 290) 288) anon200_Then_correct) (=> (= (ControlFlow 0 290) 289) anon200_Else_correct)))))))
(let ((anon199_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@59 UnfoldingMask@56) (= (ControlFlow 0 293) 290)) anon41_correct))))
(let ((anon199_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@57 (MapType1Store UnfoldingMask@56 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@56 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state PostHeap@0 UnfoldingMask@57) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@58 (MapType1Store UnfoldingMask@57 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@57 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state PostHeap@0 UnfoldingMask@58)) (and (= UnfoldingMask@59 UnfoldingMask@58) (= (ControlFlow 0 292) 290)))) anon41_correct))))
(let ((anon39_correct  (=> (= UnfoldingMask@56 (MapType1Store QPMask@4 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 294) 292) anon199_Then_correct) (=> (= (ControlFlow 0 294) 293) anon199_Else_correct)))))
(let ((anon198_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 297) 294)) anon39_correct)))
(let ((anon198_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 295) (- 0 296)) (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 295) 294) anon39_correct))))))
(let ((anon190_Else_correct  (=> (and (and (forall ((j_9 Int) ) (!  (=> (and (>= j_9 0) (and (< j_9 i_1@@6) (= (mod j_9 2) 0))) (= (U_2_int (MapType0Select PostHeap@0 (loc a_3@@7 (+ j_9 1)) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 (+ j_9 1)) val))))
 :qid |stdinbpl.1149:20|
 :skolemid |75|
)) (state PostHeap@0 QPMask@4)) (and (|access#trigger| PostHeap@0 (access a_3@@7 i_1@@6)) (= (MapType0Select PostHeap@0 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select PostHeap@0 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 298) 295) anon198_Then_correct) (=> (= (ControlFlow 0 298) 297) anon198_Else_correct)))))
(let ((anon36_correct true))
(let ((anon35_correct  (=> (and (state PostHeap@12 QPMask@4) (= (ControlFlow 0 247) 245)) anon36_correct)))
(let ((anon197_Else_correct  (=> (not (= (mod j_2 2) 0)) (=> (and (= PostHeap@12 PostHeap@9) (= (ControlFlow 0 249) 247)) anon35_correct))))
(let ((anon197_Then_correct  (=> (= (mod j_2 2) 0) (=> (and (and (= PostHeap@10 (MapType0Store PostHeap@9 null (|access#sm| a_3@@7 j_2) (MapType1Store (MapType0Select PostHeap@9 null (|access#sm| a_3@@7 j_2)) (loc a_3@@7 j_2) val (bool_2_U true)))) (= PostHeap@11 (MapType0Store PostHeap@10 null (|access#sm| a_3@@7 j_2) (MapType1Store (MapType0Select PostHeap@10 null (|access#sm| a_3@@7 j_2)) (loc a_3@@7 (+ j_2 1)) val (bool_2_U true))))) (and (= PostHeap@12 PostHeap@11) (= (ControlFlow 0 248) 247))) anon35_correct))))
(let ((anon33_correct  (=> (state Heap@@10 UnfoldingMask@79) (and (=> (= (ControlFlow 0 250) (- 0 251)) (HasDirectPerm UnfoldingMask@79 (loc a_3@@7 (+ j_2 1)) val)) (=> (HasDirectPerm UnfoldingMask@79 (loc a_3@@7 (+ j_2 1)) val) (and (=> (= (ControlFlow 0 250) 248) anon197_Then_correct) (=> (= (ControlFlow 0 250) 249) anon197_Else_correct)))))))
(let ((anon196_Else_correct  (=> (not (= (mod j_2 2) 0)) (=> (and (= UnfoldingMask@79 UnfoldingMask@76) (= (ControlFlow 0 253) 250)) anon33_correct))))
(let ((anon196_Then_correct  (=> (= (mod j_2 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j_2) null)) (= UnfoldingMask@77 (MapType1Store UnfoldingMask@76 (loc a_3@@7 j_2) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@76 (loc a_3@@7 j_2) val)) FullPerm))))) (and (state Heap@@10 UnfoldingMask@77) (not (= (loc a_3@@7 (+ j_2 1)) null)))) (and (and (= UnfoldingMask@78 (MapType1Store UnfoldingMask@77 (loc a_3@@7 (+ j_2 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@77 (loc a_3@@7 (+ j_2 1)) val)) FullPerm)))) (state Heap@@10 UnfoldingMask@78)) (and (= UnfoldingMask@79 UnfoldingMask@78) (= (ControlFlow 0 252) 250)))) anon33_correct))))
(let ((anon31_correct  (=> (= UnfoldingMask@76 (MapType1Store QPMask@0 null (access a_3@@7 j_2) (real_2_U (- (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 j_2))) FullPerm)))) (and (=> (= (ControlFlow 0 254) 252) anon196_Then_correct) (=> (= (ControlFlow 0 254) 253) anon196_Else_correct)))))
(let ((anon195_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 257) 254)) anon31_correct)))
(let ((anon195_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 255) (- 0 256)) (<= FullPerm (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 j_2))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 j_2)))) (=> (= (ControlFlow 0 255) 254) anon31_correct))))))
(let ((anon29_correct  (=> (state PostHeap@9 QPMask@4) (=> (and (|access#trigger| Heap@@10 (access a_3@@7 j_2)) (= (MapType0Select Heap@@10 null (access a_3@@7 j_2)) (FrameFragment (ite (= (mod j_2 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@@10 (loc a_3@@7 j_2) val)) (FrameFragment (MapType0Select Heap@@10 (loc a_3@@7 (+ j_2 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 258) 255) anon195_Then_correct) (=> (= (ControlFlow 0 258) 257) anon195_Else_correct))))))
(let ((anon194_Else_correct  (=> (not (= (mod j_2 2) 0)) (=> (and (= PostHeap@9 PostHeap@0) (= (ControlFlow 0 260) 258)) anon29_correct))))
(let ((anon194_Then_correct  (=> (= (mod j_2 2) 0) (=> (and (and (= PostHeap@7 (MapType0Store PostHeap@0 null (|access#sm| a_3@@7 j_2) (MapType1Store (MapType0Select PostHeap@0 null (|access#sm| a_3@@7 j_2)) (loc a_3@@7 j_2) val (bool_2_U true)))) (= PostHeap@8 (MapType0Store PostHeap@7 null (|access#sm| a_3@@7 j_2) (MapType1Store (MapType0Select PostHeap@7 null (|access#sm| a_3@@7 j_2)) (loc a_3@@7 (+ j_2 1)) val (bool_2_U true))))) (and (= PostHeap@9 PostHeap@8) (= (ControlFlow 0 259) 258))) anon29_correct))))
(let ((anon27_correct  (=> (state PostHeap@0 UnfoldingMask@75) (and (=> (= (ControlFlow 0 261) (- 0 262)) (HasDirectPerm UnfoldingMask@75 (loc a_3@@7 (+ j_2 1)) val)) (=> (HasDirectPerm UnfoldingMask@75 (loc a_3@@7 (+ j_2 1)) val) (and (=> (= (ControlFlow 0 261) 259) anon194_Then_correct) (=> (= (ControlFlow 0 261) 260) anon194_Else_correct)))))))
(let ((anon193_Else_correct  (=> (not (= (mod j_2 2) 0)) (=> (and (= UnfoldingMask@75 UnfoldingMask@72) (= (ControlFlow 0 264) 261)) anon27_correct))))
(let ((anon193_Then_correct  (=> (= (mod j_2 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j_2) null)) (= UnfoldingMask@73 (MapType1Store UnfoldingMask@72 (loc a_3@@7 j_2) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@72 (loc a_3@@7 j_2) val)) FullPerm))))) (and (state PostHeap@0 UnfoldingMask@73) (not (= (loc a_3@@7 (+ j_2 1)) null)))) (and (and (= UnfoldingMask@74 (MapType1Store UnfoldingMask@73 (loc a_3@@7 (+ j_2 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@73 (loc a_3@@7 (+ j_2 1)) val)) FullPerm)))) (state PostHeap@0 UnfoldingMask@74)) (and (= UnfoldingMask@75 UnfoldingMask@74) (= (ControlFlow 0 263) 261)))) anon27_correct))))
(let ((anon25_correct  (=> (= UnfoldingMask@72 (MapType1Store QPMask@4 null (access a_3@@7 j_2) (real_2_U (- (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 j_2))) FullPerm)))) (and (=> (= (ControlFlow 0 265) 263) anon193_Then_correct) (=> (= (ControlFlow 0 265) 264) anon193_Else_correct)))))
(let ((anon192_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 268) 265)) anon25_correct)))
(let ((anon192_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 266) (- 0 267)) (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 j_2))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 j_2)))) (=> (= (ControlFlow 0 266) 265) anon25_correct))))))
(let ((anon191_Then_correct  (=> (and (and (>= j_2 0) (and (< j_2 i_1@@6) (= (mod j_2 2) 0))) (and (|access#trigger| PostHeap@0 (access a_3@@7 j_2)) (= (MapType0Select PostHeap@0 null (access a_3@@7 j_2)) (FrameFragment (ite (= (mod j_2 2) 0) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 (loc a_3@@7 j_2) val)) (FrameFragment (MapType0Select PostHeap@0 (loc a_3@@7 (+ j_2 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 269) 266) anon192_Then_correct) (=> (= (ControlFlow 0 269) 268) anon192_Else_correct)))))
(let ((anon191_Else_correct  (=> (and (not (and (>= j_2 0) (and (< j_2 i_1@@6) (= (mod j_2 2) 0)))) (= (ControlFlow 0 246) 245)) anon36_correct)))
(let ((anon182_Else_correct  (=> (and (forall ((j_7 Int) ) (!  (=> (and (>= j_7 0) (and (< j_7 i_1@@6) (= (mod j_7 2) 0))) (= (U_2_int (MapType0Select PostHeap@0 (loc a_3@@7 j_7) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 j_7) val))))
 :qid |stdinbpl.1073:20|
 :skolemid |74|
 :pattern ( (loc a_3@@7 j_7))
)) (state PostHeap@0 QPMask@4)) (and (and (=> (= (ControlFlow 0 299) 298) anon190_Else_correct) (=> (= (ControlFlow 0 299) 269) anon191_Then_correct)) (=> (= (ControlFlow 0 299) 246) anon191_Else_correct)))))
(let ((anon20_correct true))
(let ((anon19_correct  (=> (and (state PostHeap@18 QPMask@4) (= (ControlFlow 0 222) 220)) anon20_correct)))
(let ((anon189_Else_correct  (=> (not (= (mod j 2) 0)) (=> (and (= PostHeap@18 PostHeap@15) (= (ControlFlow 0 224) 222)) anon19_correct))))
(let ((anon189_Then_correct  (=> (= (mod j 2) 0) (=> (and (and (= PostHeap@16 (MapType0Store PostHeap@15 null (|access#sm| a_3@@7 j) (MapType1Store (MapType0Select PostHeap@15 null (|access#sm| a_3@@7 j)) (loc a_3@@7 j) val (bool_2_U true)))) (= PostHeap@17 (MapType0Store PostHeap@16 null (|access#sm| a_3@@7 j) (MapType1Store (MapType0Select PostHeap@16 null (|access#sm| a_3@@7 j)) (loc a_3@@7 (+ j 1)) val (bool_2_U true))))) (and (= PostHeap@18 PostHeap@17) (= (ControlFlow 0 223) 222))) anon19_correct))))
(let ((anon17_correct  (=> (state Heap@@10 UnfoldingMask@87) (and (=> (= (ControlFlow 0 225) (- 0 226)) (HasDirectPerm UnfoldingMask@87 (loc a_3@@7 j) val)) (=> (HasDirectPerm UnfoldingMask@87 (loc a_3@@7 j) val) (and (=> (= (ControlFlow 0 225) 223) anon189_Then_correct) (=> (= (ControlFlow 0 225) 224) anon189_Else_correct)))))))
(let ((anon188_Else_correct  (=> (not (= (mod j 2) 0)) (=> (and (= UnfoldingMask@87 UnfoldingMask@84) (= (ControlFlow 0 228) 225)) anon17_correct))))
(let ((anon188_Then_correct  (=> (= (mod j 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j) null)) (= UnfoldingMask@85 (MapType1Store UnfoldingMask@84 (loc a_3@@7 j) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@84 (loc a_3@@7 j) val)) FullPerm))))) (and (state Heap@@10 UnfoldingMask@85) (not (= (loc a_3@@7 (+ j 1)) null)))) (and (and (= UnfoldingMask@86 (MapType1Store UnfoldingMask@85 (loc a_3@@7 (+ j 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@85 (loc a_3@@7 (+ j 1)) val)) FullPerm)))) (state Heap@@10 UnfoldingMask@86)) (and (= UnfoldingMask@87 UnfoldingMask@86) (= (ControlFlow 0 227) 225)))) anon17_correct))))
(let ((anon15_correct  (=> (= UnfoldingMask@84 (MapType1Store QPMask@0 null (access a_3@@7 j) (real_2_U (- (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 j))) FullPerm)))) (and (=> (= (ControlFlow 0 229) 227) anon188_Then_correct) (=> (= (ControlFlow 0 229) 228) anon188_Else_correct)))))
(let ((anon187_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 232) 229)) anon15_correct)))
(let ((anon187_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 230) (- 0 231)) (<= FullPerm (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 j))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 j)))) (=> (= (ControlFlow 0 230) 229) anon15_correct))))))
(let ((anon13_correct  (=> (state PostHeap@15 QPMask@4) (=> (and (|access#trigger| Heap@@10 (access a_3@@7 j)) (= (MapType0Select Heap@@10 null (access a_3@@7 j)) (FrameFragment (ite (= (mod j 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@@10 (loc a_3@@7 j) val)) (FrameFragment (MapType0Select Heap@@10 (loc a_3@@7 (+ j 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 233) 230) anon187_Then_correct) (=> (= (ControlFlow 0 233) 232) anon187_Else_correct))))))
(let ((anon186_Else_correct  (=> (not (= (mod j 2) 0)) (=> (and (= PostHeap@15 PostHeap@0) (= (ControlFlow 0 235) 233)) anon13_correct))))
(let ((anon186_Then_correct  (=> (= (mod j 2) 0) (=> (and (and (= PostHeap@13 (MapType0Store PostHeap@0 null (|access#sm| a_3@@7 j) (MapType1Store (MapType0Select PostHeap@0 null (|access#sm| a_3@@7 j)) (loc a_3@@7 j) val (bool_2_U true)))) (= PostHeap@14 (MapType0Store PostHeap@13 null (|access#sm| a_3@@7 j) (MapType1Store (MapType0Select PostHeap@13 null (|access#sm| a_3@@7 j)) (loc a_3@@7 (+ j 1)) val (bool_2_U true))))) (and (= PostHeap@15 PostHeap@14) (= (ControlFlow 0 234) 233))) anon13_correct))))
(let ((anon11_correct  (=> (state PostHeap@0 UnfoldingMask@83) (and (=> (= (ControlFlow 0 236) (- 0 237)) (HasDirectPerm UnfoldingMask@83 (loc a_3@@7 j) val)) (=> (HasDirectPerm UnfoldingMask@83 (loc a_3@@7 j) val) (and (=> (= (ControlFlow 0 236) 234) anon186_Then_correct) (=> (= (ControlFlow 0 236) 235) anon186_Else_correct)))))))
(let ((anon185_Else_correct  (=> (not (= (mod j 2) 0)) (=> (and (= UnfoldingMask@83 UnfoldingMask@80) (= (ControlFlow 0 239) 236)) anon11_correct))))
(let ((anon185_Then_correct  (=> (= (mod j 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j) null)) (= UnfoldingMask@81 (MapType1Store UnfoldingMask@80 (loc a_3@@7 j) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@80 (loc a_3@@7 j) val)) FullPerm))))) (and (state PostHeap@0 UnfoldingMask@81) (not (= (loc a_3@@7 (+ j 1)) null)))) (and (and (= UnfoldingMask@82 (MapType1Store UnfoldingMask@81 (loc a_3@@7 (+ j 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@81 (loc a_3@@7 (+ j 1)) val)) FullPerm)))) (state PostHeap@0 UnfoldingMask@82)) (and (= UnfoldingMask@83 UnfoldingMask@82) (= (ControlFlow 0 238) 236)))) anon11_correct))))
(let ((anon9_correct  (=> (= UnfoldingMask@80 (MapType1Store QPMask@4 null (access a_3@@7 j) (real_2_U (- (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 j))) FullPerm)))) (and (=> (= (ControlFlow 0 240) 238) anon185_Then_correct) (=> (= (ControlFlow 0 240) 239) anon185_Else_correct)))))
(let ((anon184_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 243) 240)) anon9_correct)))
(let ((anon184_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 241) (- 0 242)) (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 j))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@4 null (access a_3@@7 j)))) (=> (= (ControlFlow 0 241) 240) anon9_correct))))))
(let ((anon183_Then_correct  (=> (and (and (>= j 0) (and (< j i_1@@6) (= (mod j 2) 0))) (and (|access#trigger| PostHeap@0 (access a_3@@7 j)) (= (MapType0Select PostHeap@0 null (access a_3@@7 j)) (FrameFragment (ite (= (mod j 2) 0) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 (loc a_3@@7 j) val)) (FrameFragment (MapType0Select PostHeap@0 (loc a_3@@7 (+ j 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 244) 241) anon184_Then_correct) (=> (= (ControlFlow 0 244) 243) anon184_Else_correct)))))
(let ((anon183_Else_correct  (=> (and (not (and (>= j 0) (and (< j i_1@@6) (= (mod j 2) 0)))) (= (ControlFlow 0 221) 220)) anon20_correct)))
(let ((anon181_Else_correct  (and (=> (= (ControlFlow 0 300) (- 0 301)) (forall ((j_4 Int) (j_4_1 Int) ) (!  (=> (and (and (and (and (not (= j_4 j_4_1)) (and (>= j_4 0) (and (< j_4 (len a_3@@7)) (= (mod j_4 2) 0)))) (and (>= j_4_1 0) (and (< j_4_1 (len a_3@@7)) (= (mod j_4_1 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_4 j_4_1))))
 :qid |stdinbpl.969:17|
 :skolemid |68|
 :pattern ( (neverTriggered7 j_4) (neverTriggered7 j_4_1))
))) (=> (forall ((j_4@@0 Int) (j_4_1@@0 Int) ) (!  (=> (and (and (and (and (not (= j_4@@0 j_4_1@@0)) (and (>= j_4@@0 0) (and (< j_4@@0 (len a_3@@7)) (= (mod j_4@@0 2) 0)))) (and (>= j_4_1@@0 0) (and (< j_4_1@@0 (len a_3@@7)) (= (mod j_4_1@@0 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_4@@0 j_4_1@@0))))
 :qid |stdinbpl.969:17|
 :skolemid |68|
 :pattern ( (neverTriggered7 j_4@@0) (neverTriggered7 j_4_1@@0))
)) (=> (forall ((j_4@@1 Int) ) (!  (=> (and (and (>= j_4@@1 0) (and (< j_4@@1 (len a_3@@7)) (= (mod j_4@@1 2) 0))) (< NoPerm FullPerm)) (and (= (invRecv7 a_3@@7 j_4@@1) j_4@@1) (qpRange7 a_3@@7 j_4@@1)))
 :qid |stdinbpl.975:22|
 :skolemid |69|
 :pattern ( (MapType0Select PostHeap@0 null (access a_3@@7 j_4@@1)))
 :pattern ( (MapType1Select ZeroMask null (access a_3@@7 j_4@@1)))
)) (=> (and (forall ((a_2_1 T@U) (i_2_1 Int) ) (!  (=> (= (type a_2_1) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv7 a_2_1 i_2_1) 0) (and (< (invRecv7 a_2_1 i_2_1) (len a_3@@7)) (= (mod (invRecv7 a_2_1 i_2_1) 2) 0))) (< NoPerm FullPerm)) (qpRange7 a_2_1 i_2_1)) (and (= a_3@@7 a_2_1) (= (invRecv7 a_2_1 i_2_1) i_2_1))))
 :qid |stdinbpl.979:22|
 :skolemid |70|
 :pattern ( (invRecv7 a_2_1 i_2_1))
)) (forall ((a_2_1@@0 T@U) (i_2_1@@0 Int) ) (!  (=> (= (type a_2_1@@0) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv7 a_2_1@@0 i_2_1@@0) 0) (and (< (invRecv7 a_2_1@@0 i_2_1@@0) (len a_3@@7)) (= (mod (invRecv7 a_2_1@@0 i_2_1@@0) 2) 0))) (< NoPerm FullPerm)) (qpRange7 a_2_1@@0 i_2_1@@0)) (and (=> (< NoPerm FullPerm) (and (= a_3@@7 a_2_1@@0) (= (invRecv7 a_2_1@@0 i_2_1@@0) i_2_1@@0))) (= (U_2_real (MapType1Select QPMask@4 null (access a_2_1@@0 i_2_1@@0))) (+ (U_2_real (MapType1Select ZeroMask null (access a_2_1@@0 i_2_1@@0))) FullPerm)))))
 :qid |stdinbpl.985:22|
 :skolemid |71|
 :pattern ( (MapType1Select QPMask@4 null (access a_2_1@@0 i_2_1@@0)))
))) (=> (and (and (forall ((o_3 T@U) (f_5 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_5))))
(let ((A@@12 (FieldTypeInv0 (type f_5))))
 (=> (and (and (= (type o_3) RefType) (= (type f_5) (FieldType A@@12 B@@11))) (or (or (not (= o_3 null)) (not (IsPredicateField f_5))) (not (= (getPredWandId f_5) 0)))) (= (U_2_real (MapType1Select ZeroMask o_3 f_5)) (U_2_real (MapType1Select QPMask@4 o_3 f_5))))))
 :qid |stdinbpl.991:29|
 :skolemid |72|
 :pattern ( (MapType1Select ZeroMask o_3 f_5))
 :pattern ( (MapType1Select QPMask@4 o_3 f_5))
)) (forall ((a_2_1@@1 T@U) (i_2_1@@1 Int) ) (!  (=> (and (= (type a_2_1@@1) IArrayDomainTypeType) (not (and (and (and (>= (invRecv7 a_2_1@@1 i_2_1@@1) 0) (and (< (invRecv7 a_2_1@@1 i_2_1@@1) (len a_3@@7)) (= (mod (invRecv7 a_2_1@@1 i_2_1@@1) 2) 0))) (< NoPerm FullPerm)) (qpRange7 a_2_1@@1 i_2_1@@1)))) (= (U_2_real (MapType1Select QPMask@4 null (access a_2_1@@1 i_2_1@@1))) (U_2_real (MapType1Select ZeroMask null (access a_2_1@@1 i_2_1@@1)))))
 :qid |stdinbpl.995:22|
 :skolemid |73|
 :pattern ( (MapType1Select QPMask@4 null (access a_2_1@@1 i_2_1@@1)))
))) (and (state PostHeap@0 QPMask@4) (state PostHeap@0 QPMask@4))) (and (and (=> (= (ControlFlow 0 300) 299) anon182_Else_correct) (=> (= (ControlFlow 0 300) 244) anon183_Then_correct)) (=> (= (ControlFlow 0 300) 221) anon183_Else_correct)))))))))
(let ((anon181_Then_correct true))
(let ((anon180_Then_correct  (=> (and (state PostHeap@0 ZeroMask) (>= i_1@@6 0)) (=> (and (and (< i_1@@6 (len a_3@@7)) (state PostHeap@0 ZeroMask)) (and (= (mod (len a_3@@7) 2) (mod (len a_3@@7) 2)) (state PostHeap@0 ZeroMask))) (and (=> (= (ControlFlow 0 302) 219) anon181_Then_correct) (=> (= (ControlFlow 0 302) 300) anon181_Else_correct))))))
(let ((anon110_correct true))
(let ((anon109_correct  (=> (and (state Heap@59 QPMask@2) (= (ControlFlow 0 96) 94)) anon110_correct)))
(let ((anon234_Else_correct  (=> (not (= (mod j_11 2) 0)) (=> (and (= Heap@59 Heap@56) (= (ControlFlow 0 98) 96)) anon109_correct))))
(let ((anon234_Then_correct  (=> (= (mod j_11 2) 0) (=> (and (and (= Heap@57 (MapType0Store Heap@56 null (|access#sm| a_3@@7 j_11) (MapType1Store (MapType0Select Heap@56 null (|access#sm| a_3@@7 j_11)) (loc a_3@@7 j_11) val (bool_2_U true)))) (= Heap@58 (MapType0Store Heap@57 null (|access#sm| a_3@@7 j_11) (MapType1Store (MapType0Select Heap@57 null (|access#sm| a_3@@7 j_11)) (loc a_3@@7 (+ j_11 1)) val (bool_2_U true))))) (and (= Heap@59 Heap@58) (= (ControlFlow 0 97) 96))) anon109_correct))))
(let ((anon107_correct  (=> (state Heap@9 UnfoldingMask@47) (and (=> (= (ControlFlow 0 99) 97) anon234_Then_correct) (=> (= (ControlFlow 0 99) 98) anon234_Else_correct)))))
(let ((anon233_Else_correct  (=> (not (= (mod j_11 2) 0)) (=> (and (= UnfoldingMask@47 UnfoldingMask@44) (= (ControlFlow 0 101) 99)) anon107_correct))))
(let ((anon233_Then_correct  (=> (= (mod j_11 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j_11) null)) (= UnfoldingMask@45 (MapType1Store UnfoldingMask@44 (loc a_3@@7 j_11) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@44 (loc a_3@@7 j_11) val)) FullPerm))))) (and (state Heap@9 UnfoldingMask@45) (not (= (loc a_3@@7 (+ j_11 1)) null)))) (and (and (= UnfoldingMask@46 (MapType1Store UnfoldingMask@45 (loc a_3@@7 (+ j_11 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@45 (loc a_3@@7 (+ j_11 1)) val)) FullPerm)))) (state Heap@9 UnfoldingMask@46)) (and (= UnfoldingMask@47 UnfoldingMask@46) (= (ControlFlow 0 100) 99)))) anon107_correct))))
(let ((anon105_correct  (=> (= UnfoldingMask@44 (MapType1Store Mask@7 null (access a_3@@7 j_11) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_11))) FullPerm)))) (and (=> (= (ControlFlow 0 102) 100) anon233_Then_correct) (=> (= (ControlFlow 0 102) 101) anon233_Else_correct)))))
(let ((anon232_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 105) 102)) anon105_correct)))
(let ((anon232_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 103) (- 0 104)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_11))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_11)))) (=> (= (ControlFlow 0 103) 102) anon105_correct))))))
(let ((anon103_correct  (=> (state Heap@56 QPMask@2) (=> (and (|access#trigger| Heap@9 (access a_3@@7 j_11)) (= (MapType0Select Heap@9 null (access a_3@@7 j_11)) (FrameFragment (ite (= (mod j_11 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@9 (loc a_3@@7 j_11) val)) (FrameFragment (MapType0Select Heap@9 (loc a_3@@7 (+ j_11 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 106) 103) anon232_Then_correct) (=> (= (ControlFlow 0 106) 105) anon232_Else_correct))))))
(let ((anon231_Else_correct  (=> (not (= (mod j_11 2) 0)) (=> (and (= Heap@56 Heap@15) (= (ControlFlow 0 108) 106)) anon103_correct))))
(let ((anon231_Then_correct  (=> (= (mod j_11 2) 0) (=> (and (and (= Heap@54 (MapType0Store Heap@15 null (|access#sm| a_3@@7 j_11) (MapType1Store (MapType0Select Heap@15 null (|access#sm| a_3@@7 j_11)) (loc a_3@@7 j_11) val (bool_2_U true)))) (= Heap@55 (MapType0Store Heap@54 null (|access#sm| a_3@@7 j_11) (MapType1Store (MapType0Select Heap@54 null (|access#sm| a_3@@7 j_11)) (loc a_3@@7 (+ j_11 1)) val (bool_2_U true))))) (and (= Heap@56 Heap@55) (= (ControlFlow 0 107) 106))) anon103_correct))))
(let ((anon101_correct  (=> (state Heap@15 UnfoldingMask@43) (and (=> (= (ControlFlow 0 109) 107) anon231_Then_correct) (=> (= (ControlFlow 0 109) 108) anon231_Else_correct)))))
(let ((anon230_Else_correct  (=> (not (= (mod j_11 2) 0)) (=> (and (= UnfoldingMask@43 UnfoldingMask@40) (= (ControlFlow 0 111) 109)) anon101_correct))))
(let ((anon230_Then_correct  (=> (= (mod j_11 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j_11) null)) (= UnfoldingMask@41 (MapType1Store UnfoldingMask@40 (loc a_3@@7 j_11) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@40 (loc a_3@@7 j_11) val)) FullPerm))))) (and (state Heap@15 UnfoldingMask@41) (not (= (loc a_3@@7 (+ j_11 1)) null)))) (and (and (= UnfoldingMask@42 (MapType1Store UnfoldingMask@41 (loc a_3@@7 (+ j_11 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@41 (loc a_3@@7 (+ j_11 1)) val)) FullPerm)))) (state Heap@15 UnfoldingMask@42)) (and (= UnfoldingMask@43 UnfoldingMask@42) (= (ControlFlow 0 110) 109)))) anon101_correct))))
(let ((anon99_correct  (=> (= UnfoldingMask@40 (MapType1Store QPMask@2 null (access a_3@@7 j_11) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 j_11))) FullPerm)))) (and (=> (= (ControlFlow 0 112) 110) anon230_Then_correct) (=> (= (ControlFlow 0 112) 111) anon230_Else_correct)))))
(let ((anon229_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 115) 112)) anon99_correct)))
(let ((anon229_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 113) (- 0 114)) (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 j_11))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 j_11)))) (=> (= (ControlFlow 0 113) 112) anon99_correct))))))
(let ((anon228_Then_correct  (=> (and (and (>= j_11 0) (and (< j_11 arg_i@0) (= (mod j_11 2) 0))) (and (|access#trigger| Heap@15 (access a_3@@7 j_11)) (= (MapType0Select Heap@15 null (access a_3@@7 j_11)) (FrameFragment (ite (= (mod j_11 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@15 (loc a_3@@7 j_11) val)) (FrameFragment (MapType0Select Heap@15 (loc a_3@@7 (+ j_11 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 116) 113) anon229_Then_correct) (=> (= (ControlFlow 0 116) 115) anon229_Else_correct)))))
(let ((anon228_Else_correct  (=> (and (not (and (>= j_11 0) (and (< j_11 arg_i@0) (= (mod j_11 2) 0)))) (= (ControlFlow 0 95) 94)) anon110_correct)))
(let ((anon94_correct true))
(let ((anon93_correct  (=> (and (state Heap@65 QPMask@2) (= (ControlFlow 0 73) 71)) anon94_correct)))
(let ((anon226_Else_correct  (=> (not (= (mod j_5 2) 0)) (=> (and (= Heap@65 Heap@62) (= (ControlFlow 0 75) 73)) anon93_correct))))
(let ((anon226_Then_correct  (=> (= (mod j_5 2) 0) (=> (and (and (= Heap@63 (MapType0Store Heap@62 null (|access#sm| a_3@@7 j_5) (MapType1Store (MapType0Select Heap@62 null (|access#sm| a_3@@7 j_5)) (loc a_3@@7 j_5) val (bool_2_U true)))) (= Heap@64 (MapType0Store Heap@63 null (|access#sm| a_3@@7 j_5) (MapType1Store (MapType0Select Heap@63 null (|access#sm| a_3@@7 j_5)) (loc a_3@@7 (+ j_5 1)) val (bool_2_U true))))) (and (= Heap@65 Heap@64) (= (ControlFlow 0 74) 73))) anon93_correct))))
(let ((anon91_correct  (=> (state Heap@9 UnfoldingMask@55) (and (=> (= (ControlFlow 0 76) 74) anon226_Then_correct) (=> (= (ControlFlow 0 76) 75) anon226_Else_correct)))))
(let ((anon225_Else_correct  (=> (not (= (mod j_5 2) 0)) (=> (and (= UnfoldingMask@55 UnfoldingMask@52) (= (ControlFlow 0 78) 76)) anon91_correct))))
(let ((anon225_Then_correct  (=> (= (mod j_5 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j_5) null)) (= UnfoldingMask@53 (MapType1Store UnfoldingMask@52 (loc a_3@@7 j_5) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@52 (loc a_3@@7 j_5) val)) FullPerm))))) (and (state Heap@9 UnfoldingMask@53) (not (= (loc a_3@@7 (+ j_5 1)) null)))) (and (and (= UnfoldingMask@54 (MapType1Store UnfoldingMask@53 (loc a_3@@7 (+ j_5 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@53 (loc a_3@@7 (+ j_5 1)) val)) FullPerm)))) (state Heap@9 UnfoldingMask@54)) (and (= UnfoldingMask@55 UnfoldingMask@54) (= (ControlFlow 0 77) 76)))) anon91_correct))))
(let ((anon89_correct  (=> (= UnfoldingMask@52 (MapType1Store Mask@7 null (access a_3@@7 j_5) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_5))) FullPerm)))) (and (=> (= (ControlFlow 0 79) 77) anon225_Then_correct) (=> (= (ControlFlow 0 79) 78) anon225_Else_correct)))))
(let ((anon224_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 82) 79)) anon89_correct)))
(let ((anon224_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 80) (- 0 81)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_5)))) (=> (= (ControlFlow 0 80) 79) anon89_correct))))))
(let ((anon87_correct  (=> (state Heap@62 QPMask@2) (=> (and (|access#trigger| Heap@9 (access a_3@@7 j_5)) (= (MapType0Select Heap@9 null (access a_3@@7 j_5)) (FrameFragment (ite (= (mod j_5 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@9 (loc a_3@@7 j_5) val)) (FrameFragment (MapType0Select Heap@9 (loc a_3@@7 (+ j_5 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 83) 80) anon224_Then_correct) (=> (= (ControlFlow 0 83) 82) anon224_Else_correct))))))
(let ((anon223_Else_correct  (=> (not (= (mod j_5 2) 0)) (=> (and (= Heap@62 Heap@15) (= (ControlFlow 0 85) 83)) anon87_correct))))
(let ((anon223_Then_correct  (=> (= (mod j_5 2) 0) (=> (and (and (= Heap@60 (MapType0Store Heap@15 null (|access#sm| a_3@@7 j_5) (MapType1Store (MapType0Select Heap@15 null (|access#sm| a_3@@7 j_5)) (loc a_3@@7 j_5) val (bool_2_U true)))) (= Heap@61 (MapType0Store Heap@60 null (|access#sm| a_3@@7 j_5) (MapType1Store (MapType0Select Heap@60 null (|access#sm| a_3@@7 j_5)) (loc a_3@@7 (+ j_5 1)) val (bool_2_U true))))) (and (= Heap@62 Heap@61) (= (ControlFlow 0 84) 83))) anon87_correct))))
(let ((anon85_correct  (=> (state Heap@15 UnfoldingMask@51) (and (=> (= (ControlFlow 0 86) 84) anon223_Then_correct) (=> (= (ControlFlow 0 86) 85) anon223_Else_correct)))))
(let ((anon222_Else_correct  (=> (not (= (mod j_5 2) 0)) (=> (and (= UnfoldingMask@51 UnfoldingMask@48) (= (ControlFlow 0 88) 86)) anon85_correct))))
(let ((anon222_Then_correct  (=> (= (mod j_5 2) 0) (=> (and (and (and (not (= (loc a_3@@7 j_5) null)) (= UnfoldingMask@49 (MapType1Store UnfoldingMask@48 (loc a_3@@7 j_5) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@48 (loc a_3@@7 j_5) val)) FullPerm))))) (and (state Heap@15 UnfoldingMask@49) (not (= (loc a_3@@7 (+ j_5 1)) null)))) (and (and (= UnfoldingMask@50 (MapType1Store UnfoldingMask@49 (loc a_3@@7 (+ j_5 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@49 (loc a_3@@7 (+ j_5 1)) val)) FullPerm)))) (state Heap@15 UnfoldingMask@50)) (and (= UnfoldingMask@51 UnfoldingMask@50) (= (ControlFlow 0 87) 86)))) anon85_correct))))
(let ((anon83_correct  (=> (= UnfoldingMask@48 (MapType1Store QPMask@2 null (access a_3@@7 j_5) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 j_5))) FullPerm)))) (and (=> (= (ControlFlow 0 89) 87) anon222_Then_correct) (=> (= (ControlFlow 0 89) 88) anon222_Else_correct)))))
(let ((anon221_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 92) 89)) anon83_correct)))
(let ((anon221_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 90) (- 0 91)) (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 j_5))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 j_5)))) (=> (= (ControlFlow 0 90) 89) anon83_correct))))))
(let ((anon220_Then_correct  (=> (and (and (>= j_5 0) (and (< j_5 arg_i@0) (= (mod j_5 2) 0))) (and (|access#trigger| Heap@15 (access a_3@@7 j_5)) (= (MapType0Select Heap@15 null (access a_3@@7 j_5)) (FrameFragment (ite (= (mod j_5 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@15 (loc a_3@@7 j_5) val)) (FrameFragment (MapType0Select Heap@15 (loc a_3@@7 (+ j_5 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 93) 90) anon221_Then_correct) (=> (= (ControlFlow 0 93) 92) anon221_Else_correct)))))
(let ((anon220_Else_correct  (=> (and (not (and (>= j_5 0) (and (< j_5 arg_i@0) (= (mod j_5 2) 0)))) (= (ControlFlow 0 72) 71)) anon94_correct)))
(let ((anon178_correct true))
(let ((anon267_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@53 Heap@50) (= (ControlFlow 0 12) 10)) anon178_correct))))
(let ((anon267_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@51 (MapType0Store Heap@50 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@50 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@52 (MapType0Store Heap@51 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@51 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@53 Heap@52) (= (ControlFlow 0 11) 10))) anon178_correct))))
(let ((anon176_correct  (=> (state Heap@50 QPMask@3) (and (=> (= (ControlFlow 0 13) 11) anon267_Then_correct) (=> (= (ControlFlow 0 13) 12) anon267_Else_correct)))))
(let ((anon266_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@50 Heap@47) (= (ControlFlow 0 15) 13)) anon176_correct))))
(let ((anon266_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@48 (MapType0Store Heap@47 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@47 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@49 (MapType0Store Heap@48 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@48 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@50 Heap@49) (= (ControlFlow 0 14) 13))) anon176_correct))))
(let ((anon174_correct  (=> (state Heap@47 UnfoldingMask@39) (and (=> (= (ControlFlow 0 16) (- 0 17)) (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 (+ i_1@@6 1)) val)) newVal)) (=> (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 (+ i_1@@6 1)) val)) newVal) (and (=> (= (ControlFlow 0 16) 14) anon266_Then_correct) (=> (= (ControlFlow 0 16) 15) anon266_Else_correct)))))))
(let ((anon265_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@39 UnfoldingMask@36) (= (ControlFlow 0 19) 16)) anon174_correct))))
(let ((anon265_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@37 (MapType1Store UnfoldingMask@36 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@36 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state Heap@47 UnfoldingMask@37) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@38 (MapType1Store UnfoldingMask@37 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@37 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state Heap@47 UnfoldingMask@38)) (and (= UnfoldingMask@39 UnfoldingMask@38) (= (ControlFlow 0 18) 16)))) anon174_correct))))
(let ((anon172_correct  (=> (= UnfoldingMask@36 (MapType1Store Mask@8 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 20) 18) anon265_Then_correct) (=> (= (ControlFlow 0 20) 19) anon265_Else_correct)))))
(let ((anon264_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 23) 20)) anon172_correct)))
(let ((anon264_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 21) 20) anon172_correct))))))
(let ((anon170_correct  (=> (state Heap@47 UnfoldingMask@35) (and (=> (= (ControlFlow 0 24) (- 0 25)) (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 i_1@@6) val)) newVal)) (=> (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 i_1@@6) val)) newVal) (=> (and (|access#trigger| Heap@47 (access a_3@@7 i_1@@6)) (= (MapType0Select Heap@47 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@47 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select Heap@47 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 24) 21) anon264_Then_correct) (=> (= (ControlFlow 0 24) 23) anon264_Else_correct))))))))
(let ((anon263_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@35 UnfoldingMask@32) (= (ControlFlow 0 27) 24)) anon170_correct))))
(let ((anon263_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@33 (MapType1Store UnfoldingMask@32 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@32 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state Heap@47 UnfoldingMask@33) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@34 (MapType1Store UnfoldingMask@33 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@33 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state Heap@47 UnfoldingMask@34)) (and (= UnfoldingMask@35 UnfoldingMask@34) (= (ControlFlow 0 26) 24)))) anon170_correct))))
(let ((anon168_correct  (=> (= UnfoldingMask@32 (MapType1Store Mask@8 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 28) 26) anon263_Then_correct) (=> (= (ControlFlow 0 28) 27) anon263_Else_correct)))))
(let ((anon262_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 31) 28)) anon168_correct)))
(let ((anon262_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 29) 28) anon168_correct))))))
(let ((anon260_Else_correct  (=> (forall ((j_14_1 Int) ) (!  (=> (and (>= j_14_1 0) (and (< j_14_1 i_1@@6) (= (mod j_14_1 2) 0))) (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 (+ j_14_1 1)) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 (+ j_14_1 1)) val))))
 :qid |stdinbpl.1979:20|
 :skolemid |99|
)) (=> (and (|access#trigger| Heap@47 (access a_3@@7 i_1@@6)) (= (MapType0Select Heap@47 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@47 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select Heap@47 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 32) 29) anon262_Then_correct) (=> (= (ControlFlow 0 32) 31) anon262_Else_correct))))))
(let ((anon165_correct true))
(let ((anon261_Else_correct  (=> (and (not (and (>= j_13 0) (and (< j_13 i_1@@6) (= (mod j_13 2) 0)))) (= (ControlFlow 0 9) 6)) anon165_correct)))
(let ((anon261_Then_correct  (=> (and (>= j_13 0) (and (< j_13 i_1@@6) (= (mod j_13 2) 0))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 (+ j_13 1)) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 (+ j_13 1)) val)))) (=> (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 (+ j_13 1)) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 (+ j_13 1)) val))) (=> (= (ControlFlow 0 7) 6) anon165_correct))))))
(let ((anon258_Else_correct  (=> (forall ((j_12_1 Int) ) (!  (=> (and (>= j_12_1 0) (and (< j_12_1 i_1@@6) (= (mod j_12_1 2) 0))) (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 j_12_1) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 j_12_1) val))))
 :qid |stdinbpl.1968:20|
 :skolemid |98|
 :pattern ( (loc a_3@@7 j_12_1))
)) (and (and (=> (= (ControlFlow 0 33) 32) anon260_Else_correct) (=> (= (ControlFlow 0 33) 7) anon261_Then_correct)) (=> (= (ControlFlow 0 33) 9) anon261_Else_correct)))))
(let ((anon161_correct true))
(let ((anon259_Else_correct  (=> (and (not (and (>= j_11_1 0) (and (< j_11_1 i_1@@6) (= (mod j_11_1 2) 0)))) (= (ControlFlow 0 5) 2)) anon161_correct)))
(let ((anon259_Then_correct  (=> (and (>= j_11_1 0) (and (< j_11_1 i_1@@6) (= (mod j_11_1 2) 0))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 j_11_1) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 j_11_1) val)))) (=> (= (U_2_int (MapType0Select Heap@47 (loc a_3@@7 j_11_1) val)) (U_2_int (MapType0Select Heap@@10 (loc a_3@@7 j_11_1) val))) (=> (= (ControlFlow 0 3) 2) anon161_correct))))))
(let ((anon158_correct  (=> (and (state Heap@47 Mask@8) (state Heap@47 Mask@8)) (and (=> (= (ControlFlow 0 34) (- 0 39)) (>= i_1@@6 0)) (=> (>= i_1@@6 0) (and (=> (= (ControlFlow 0 34) (- 0 38)) (< i_1@@6 (len a_3@@7))) (=> (< i_1@@6 (len a_3@@7)) (and (=> (= (ControlFlow 0 34) (- 0 37)) (= (mod (len a_3@@7) 2) (mod (len a_3@@7) 2))) (=> (= (mod (len a_3@@7) 2) (mod (len a_3@@7) 2)) (and (=> (= (ControlFlow 0 34) (- 0 36)) (forall ((j_10 Int) (j_10_1 Int) ) (!  (=> (and (and (and (and (not (= j_10 j_10_1)) (and (>= j_10 0) (and (< j_10 (len a_3@@7)) (= (mod j_10 2) 0)))) (and (>= j_10_1 0) (and (< j_10_1 (len a_3@@7)) (= (mod j_10_1 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_10 j_10_1))))
 :qid |stdinbpl.1923:17|
 :skolemid |91|
 :pattern ( (neverTriggered8 j_10) (neverTriggered8 j_10_1))
))) (=> (forall ((j_10@@0 Int) (j_10_1@@0 Int) ) (!  (=> (and (and (and (and (not (= j_10@@0 j_10_1@@0)) (and (>= j_10@@0 0) (and (< j_10@@0 (len a_3@@7)) (= (mod j_10@@0 2) 0)))) (and (>= j_10_1@@0 0) (and (< j_10_1@@0 (len a_3@@7)) (= (mod j_10_1@@0 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_10@@0 j_10_1@@0))))
 :qid |stdinbpl.1923:17|
 :skolemid |91|
 :pattern ( (neverTriggered8 j_10@@0) (neverTriggered8 j_10_1@@0))
)) (and (=> (= (ControlFlow 0 34) (- 0 35)) (forall ((j_10@@1 Int) ) (!  (=> (and (>= j_10@@1 0) (and (< j_10@@1 (len a_3@@7)) (= (mod j_10@@1 2) 0))) (>= (U_2_real (MapType1Select Mask@8 null (access a_3@@7 j_10@@1))) FullPerm))
 :qid |stdinbpl.1930:17|
 :skolemid |92|
 :pattern ( (MapType0Select Heap@47 null (access a_3@@7 j_10@@1)))
 :pattern ( (MapType1Select Mask@8 null (access a_3@@7 j_10@@1)))
))) (=> (forall ((j_10@@2 Int) ) (!  (=> (and (>= j_10@@2 0) (and (< j_10@@2 (len a_3@@7)) (= (mod j_10@@2 2) 0))) (>= (U_2_real (MapType1Select Mask@8 null (access a_3@@7 j_10@@2))) FullPerm))
 :qid |stdinbpl.1930:17|
 :skolemid |92|
 :pattern ( (MapType0Select Heap@47 null (access a_3@@7 j_10@@2)))
 :pattern ( (MapType1Select Mask@8 null (access a_3@@7 j_10@@2)))
)) (=> (forall ((j_10@@3 Int) ) (!  (=> (and (and (>= j_10@@3 0) (and (< j_10@@3 (len a_3@@7)) (= (mod j_10@@3 2) 0))) (< NoPerm FullPerm)) (and (= (invRecv8 a_3@@7 j_10@@3) j_10@@3) (qpRange8 a_3@@7 j_10@@3)))
 :qid |stdinbpl.1936:22|
 :skolemid |93|
 :pattern ( (MapType0Select Heap@47 null (access a_3@@7 j_10@@3)))
 :pattern ( (MapType1Select Mask@8 null (access a_3@@7 j_10@@3)))
)) (=> (and (and (forall ((a_3_1 T@U) (i_3_1 Int) ) (!  (=> (= (type a_3_1) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv8 a_3_1 i_3_1) 0) (and (< (invRecv8 a_3_1 i_3_1) (len a_3@@7)) (= (mod (invRecv8 a_3_1 i_3_1) 2) 0))) (< NoPerm FullPerm)) (qpRange8 a_3_1 i_3_1)) (and (= a_3@@7 a_3_1) (= (invRecv8 a_3_1 i_3_1) i_3_1))))
 :qid |stdinbpl.1940:22|
 :skolemid |94|
 :pattern ( (invRecv8 a_3_1 i_3_1))
)) (forall ((a_3_1@@0 T@U) (i_3_1@@0 Int) ) (!  (=> (= (type a_3_1@@0) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv8 a_3_1@@0 i_3_1@@0) 0) (and (< (invRecv8 a_3_1@@0 i_3_1@@0) (len a_3@@7)) (= (mod (invRecv8 a_3_1@@0 i_3_1@@0) 2) 0))) (< NoPerm FullPerm)) (qpRange8 a_3_1@@0 i_3_1@@0)) (and (and (= a_3@@7 a_3_1@@0) (= (invRecv8 a_3_1@@0 i_3_1@@0) i_3_1@@0)) (= (U_2_real (MapType1Select QPMask@3 null (access a_3_1@@0 i_3_1@@0))) (- (U_2_real (MapType1Select Mask@8 null (access a_3_1@@0 i_3_1@@0))) FullPerm)))))
 :qid |stdinbpl.1946:22|
 :skolemid |95|
 :pattern ( (MapType1Select QPMask@3 null (access a_3_1@@0 i_3_1@@0)))
))) (and (forall ((a_3_1@@1 T@U) (i_3_1@@1 Int) ) (!  (=> (and (= (type a_3_1@@1) IArrayDomainTypeType) (not (and (and (and (>= (invRecv8 a_3_1@@1 i_3_1@@1) 0) (and (< (invRecv8 a_3_1@@1 i_3_1@@1) (len a_3@@7)) (= (mod (invRecv8 a_3_1@@1 i_3_1@@1) 2) 0))) (< NoPerm FullPerm)) (qpRange8 a_3_1@@1 i_3_1@@1)))) (= (U_2_real (MapType1Select QPMask@3 null (access a_3_1@@1 i_3_1@@1))) (U_2_real (MapType1Select Mask@8 null (access a_3_1@@1 i_3_1@@1)))))
 :qid |stdinbpl.1950:22|
 :skolemid |96|
 :pattern ( (MapType1Select QPMask@3 null (access a_3_1@@1 i_3_1@@1)))
)) (forall ((o_3@@0 T@U) (f_5@@0 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_5@@0))))
(let ((A@@13 (FieldTypeInv0 (type f_5@@0))))
 (=> (and (and (= (type o_3@@0) RefType) (= (type f_5@@0) (FieldType A@@13 B@@12))) (or (or (not (= o_3@@0 null)) (not (IsPredicateField f_5@@0))) (not (= (getPredWandId f_5@@0) 0)))) (= (U_2_real (MapType1Select Mask@8 o_3@@0 f_5@@0)) (U_2_real (MapType1Select QPMask@3 o_3@@0 f_5@@0))))))
 :qid |stdinbpl.1956:29|
 :skolemid |97|
 :pattern ( (MapType1Select Mask@8 o_3@@0 f_5@@0))
 :pattern ( (MapType1Select QPMask@3 o_3@@0 f_5@@0))
)))) (and (and (=> (= (ControlFlow 0 34) 33) anon258_Else_correct) (=> (= (ControlFlow 0 34) 3) anon259_Then_correct)) (=> (= (ControlFlow 0 34) 5) anon259_Else_correct)))))))))))))))))
(let ((anon257_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@47 Heap@44) (= (ControlFlow 0 41) 34)) anon158_correct))))
(let ((anon257_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@45 (MapType0Store Heap@44 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@44 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@46 (MapType0Store Heap@45 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@45 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@47 Heap@46) (= (ControlFlow 0 40) 34))) anon158_correct))))
(let ((anon156_correct  (=> (state Heap@44 Mask@8) (and (=> (= (ControlFlow 0 42) 40) anon257_Then_correct) (=> (= (ControlFlow 0 42) 41) anon257_Else_correct)))))
(let ((anon256_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@44 Heap@41) (= (ControlFlow 0 44) 42)) anon156_correct))))
(let ((anon256_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@42 (MapType0Store Heap@41 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@41 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@43 (MapType0Store Heap@42 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@42 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@44 Heap@43) (= (ControlFlow 0 43) 42))) anon156_correct))))
(let ((anon154_correct  (=> (state Heap@41 Mask@8) (and (=> (= (ControlFlow 0 45) (- 0 46)) (= (U_2_int (MapType0Select Heap@41 (loc a_3@@7 (+ i_1@@6 1)) val)) newVal)) (=> (= (U_2_int (MapType0Select Heap@41 (loc a_3@@7 (+ i_1@@6 1)) val)) newVal) (and (=> (= (ControlFlow 0 45) 43) anon256_Then_correct) (=> (= (ControlFlow 0 45) 44) anon256_Else_correct)))))))
(let ((anon255_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@41 Heap@38) (= (ControlFlow 0 48) 45)) anon154_correct))))
(let ((anon255_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@39 (MapType0Store Heap@38 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@38 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@40 (MapType0Store Heap@39 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@39 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@41 Heap@40) (= (ControlFlow 0 47) 45))) anon154_correct))))
(let ((anon152_correct  (=> (state Heap@35 UnfoldingMask@31) (and (=> (= (ControlFlow 0 49) (- 0 50)) (HasDirectPerm UnfoldingMask@31 (loc a_3@@7 (+ i_1@@6 1)) val)) (=> (HasDirectPerm UnfoldingMask@31 (loc a_3@@7 (+ i_1@@6 1)) val) (and (=> (= (ControlFlow 0 49) 47) anon255_Then_correct) (=> (= (ControlFlow 0 49) 48) anon255_Else_correct)))))))
(let ((anon254_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@31 UnfoldingMask@28) (= (ControlFlow 0 52) 49)) anon152_correct))))
(let ((anon254_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@29 (MapType1Store UnfoldingMask@28 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@28 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state Heap@35 UnfoldingMask@29) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@30 (MapType1Store UnfoldingMask@29 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@29 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state Heap@35 UnfoldingMask@30)) (and (= UnfoldingMask@31 UnfoldingMask@30) (= (ControlFlow 0 51) 49)))) anon152_correct))))
(let ((anon150_correct  (=> (= UnfoldingMask@28 (MapType1Store Mask@8 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 53) 51) anon254_Then_correct) (=> (= (ControlFlow 0 53) 52) anon254_Else_correct)))))
(let ((anon253_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 56) 53)) anon150_correct)))
(let ((anon253_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 54) (- 0 55)) (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 54) 53) anon150_correct))))))
(let ((anon148_correct  (=> (state Heap@38 Mask@8) (and (=> (= (ControlFlow 0 57) (- 0 58)) (= (U_2_int (MapType0Select Heap@38 (loc a_3@@7 i_1@@6) val)) newVal)) (=> (= (U_2_int (MapType0Select Heap@38 (loc a_3@@7 i_1@@6) val)) newVal) (=> (and (|access#trigger| Heap@35 (access a_3@@7 i_1@@6)) (= (MapType0Select Heap@35 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@35 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select Heap@35 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 57) 54) anon253_Then_correct) (=> (= (ControlFlow 0 57) 56) anon253_Else_correct))))))))
(let ((anon252_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@38 Heap@35) (= (ControlFlow 0 60) 57)) anon148_correct))))
(let ((anon252_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@36 (MapType0Store Heap@35 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@35 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@37 (MapType0Store Heap@36 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@36 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@38 Heap@37) (= (ControlFlow 0 59) 57))) anon148_correct))))
(let ((anon146_correct  (=> (state Heap@35 UnfoldingMask@27) (and (=> (= (ControlFlow 0 61) (- 0 62)) (HasDirectPerm UnfoldingMask@27 (loc a_3@@7 i_1@@6) val)) (=> (HasDirectPerm UnfoldingMask@27 (loc a_3@@7 i_1@@6) val) (and (=> (= (ControlFlow 0 61) 59) anon252_Then_correct) (=> (= (ControlFlow 0 61) 60) anon252_Else_correct)))))))
(let ((anon251_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= UnfoldingMask@27 UnfoldingMask@24) (= (ControlFlow 0 64) 61)) anon146_correct))))
(let ((anon251_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= UnfoldingMask@25 (MapType1Store UnfoldingMask@24 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@24 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state Heap@35 UnfoldingMask@25) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= UnfoldingMask@26 (MapType1Store UnfoldingMask@25 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@25 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state Heap@35 UnfoldingMask@26)) (and (= UnfoldingMask@27 UnfoldingMask@26) (= (ControlFlow 0 63) 61)))) anon146_correct))))
(let ((anon144_correct  (=> (= UnfoldingMask@24 (MapType1Store Mask@8 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 65) 63) anon251_Then_correct) (=> (= (ControlFlow 0 65) 64) anon251_Else_correct)))))
(let ((anon250_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 68) 65)) anon144_correct)))
(let ((anon250_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 66) (- 0 67)) (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 66) 65) anon144_correct))))))
(let ((anon142_correct  (=> (state Heap@35 Mask@8) (=> (and (|access#trigger| Heap@35 (access a_3@@7 i_1@@6)) (= (MapType0Select Heap@35 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@35 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select Heap@35 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 69) 66) anon250_Then_correct) (=> (= (ControlFlow 0 69) 68) anon250_Else_correct))))))
(let ((anon141_correct  (=> (state Heap@34 QPMask@2) (=> (and (and (state Heap@34 QPMask@2) (= Mask@8 QPMask@2)) (and (= Heap@35 Heap@34) (= (ControlFlow 0 117) 69))) anon142_correct))))
(let ((anon249_Else_correct  (=> (not (= (mod (+ i_1@@6 2) 2) 0)) (=> (and (= Heap@34 Heap@31) (= (ControlFlow 0 119) 117)) anon141_correct))))
(let ((anon249_Then_correct  (=> (= (mod (+ i_1@@6 2) 2) 0) (=> (and (and (= Heap@32 (MapType0Store Heap@31 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@31 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ i_1@@6 2)) val (bool_2_U true)))) (= Heap@33 (MapType0Store Heap@32 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@32 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val (bool_2_U true))))) (and (= Heap@34 Heap@33) (= (ControlFlow 0 118) 117))) anon141_correct))))
(let ((anon139_correct  (=> (state Heap@31 QPMask@2) (and (=> (= (ControlFlow 0 120) 118) anon249_Then_correct) (=> (= (ControlFlow 0 120) 119) anon249_Else_correct)))))
(let ((anon248_Else_correct  (=> (not (= (mod (+ i_1@@6 2) 2) 0)) (=> (and (= Heap@31 Heap@28) (= (ControlFlow 0 122) 120)) anon139_correct))))
(let ((anon248_Then_correct  (=> (= (mod (+ i_1@@6 2) 2) 0) (=> (and (and (= Heap@29 (MapType0Store Heap@28 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@28 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ i_1@@6 2)) val (bool_2_U true)))) (= Heap@30 (MapType0Store Heap@29 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@29 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val (bool_2_U true))))) (and (= Heap@31 Heap@30) (= (ControlFlow 0 121) 120))) anon139_correct))))
(let ((anon137_correct  (=> (state Heap@28 QPMask@2) (and (=> (= (ControlFlow 0 123) (- 0 124)) (= (U_2_int (MapType0Select Heap@28 (loc a_3@@7 (+ i_1@@6 3)) val)) newVal)) (=> (= (U_2_int (MapType0Select Heap@28 (loc a_3@@7 (+ i_1@@6 3)) val)) newVal) (and (=> (= (ControlFlow 0 123) 121) anon248_Then_correct) (=> (= (ControlFlow 0 123) 122) anon248_Else_correct)))))))
(let ((anon247_Else_correct  (=> (not (= (mod (+ i_1@@6 2) 2) 0)) (=> (and (= Heap@28 Heap@25) (= (ControlFlow 0 126) 123)) anon137_correct))))
(let ((anon247_Then_correct  (=> (= (mod (+ i_1@@6 2) 2) 0) (=> (and (and (= Heap@26 (MapType0Store Heap@25 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@25 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ i_1@@6 2)) val (bool_2_U true)))) (= Heap@27 (MapType0Store Heap@26 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@26 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val (bool_2_U true))))) (and (= Heap@28 Heap@27) (= (ControlFlow 0 125) 123))) anon137_correct))))
(let ((anon135_correct  (=> (state Heap@22 UnfoldingMask@23) (and (=> (= (ControlFlow 0 127) (- 0 128)) (HasDirectPerm UnfoldingMask@23 (loc a_3@@7 (+ i_1@@6 3)) val)) (=> (HasDirectPerm UnfoldingMask@23 (loc a_3@@7 (+ i_1@@6 3)) val) (and (=> (= (ControlFlow 0 127) 125) anon247_Then_correct) (=> (= (ControlFlow 0 127) 126) anon247_Else_correct)))))))
(let ((anon246_Else_correct  (=> (not (= (mod (+ i_1@@6 2) 2) 0)) (=> (and (= UnfoldingMask@23 UnfoldingMask@20) (= (ControlFlow 0 130) 127)) anon135_correct))))
(let ((anon246_Then_correct  (=> (= (mod (+ i_1@@6 2) 2) 0) (=> (and (and (and (not (= (loc a_3@@7 (+ i_1@@6 2)) null)) (= UnfoldingMask@21 (MapType1Store UnfoldingMask@20 (loc a_3@@7 (+ i_1@@6 2)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@20 (loc a_3@@7 (+ i_1@@6 2)) val)) FullPerm))))) (and (state Heap@22 UnfoldingMask@21) (not (= (loc a_3@@7 (+ (+ i_1@@6 2) 1)) null)))) (and (and (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val)) FullPerm)))) (state Heap@22 UnfoldingMask@22)) (and (= UnfoldingMask@23 UnfoldingMask@22) (= (ControlFlow 0 129) 127)))) anon135_correct))))
(let ((anon133_correct  (=> (= UnfoldingMask@20 (MapType1Store QPMask@2 null (access a_3@@7 (+ i_1@@6 2)) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 (+ i_1@@6 2)))) FullPerm)))) (and (=> (= (ControlFlow 0 131) 129) anon246_Then_correct) (=> (= (ControlFlow 0 131) 130) anon246_Else_correct)))))
(let ((anon245_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 134) 131)) anon133_correct)))
(let ((anon245_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 132) (- 0 133)) (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 (+ i_1@@6 2)))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 (+ i_1@@6 2))))) (=> (= (ControlFlow 0 132) 131) anon133_correct))))))
(let ((anon131_correct  (=> (state Heap@25 QPMask@2) (and (=> (= (ControlFlow 0 135) (- 0 136)) (= (U_2_int (MapType0Select Heap@25 (loc a_3@@7 (+ i_1@@6 2)) val)) newVal)) (=> (= (U_2_int (MapType0Select Heap@25 (loc a_3@@7 (+ i_1@@6 2)) val)) newVal) (=> (and (|access#trigger| Heap@22 (access a_3@@7 (+ i_1@@6 2))) (= (MapType0Select Heap@22 null (access a_3@@7 (+ i_1@@6 2))) (FrameFragment (ite (= (mod (+ i_1@@6 2) 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@22 (loc a_3@@7 (+ i_1@@6 2)) val)) (FrameFragment (MapType0Select Heap@22 (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 135) 132) anon245_Then_correct) (=> (= (ControlFlow 0 135) 134) anon245_Else_correct))))))))
(let ((anon244_Else_correct  (=> (not (= (mod (+ i_1@@6 2) 2) 0)) (=> (and (= Heap@25 Heap@22) (= (ControlFlow 0 138) 135)) anon131_correct))))
(let ((anon244_Then_correct  (=> (= (mod (+ i_1@@6 2) 2) 0) (=> (and (and (= Heap@23 (MapType0Store Heap@22 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@22 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ i_1@@6 2)) val (bool_2_U true)))) (= Heap@24 (MapType0Store Heap@23 null (|access#sm| a_3@@7 (+ i_1@@6 2)) (MapType1Store (MapType0Select Heap@23 null (|access#sm| a_3@@7 (+ i_1@@6 2))) (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val (bool_2_U true))))) (and (= Heap@25 Heap@24) (= (ControlFlow 0 137) 135))) anon131_correct))))
(let ((anon129_correct  (=> (state Heap@22 UnfoldingMask@19) (and (=> (= (ControlFlow 0 139) (- 0 140)) (HasDirectPerm UnfoldingMask@19 (loc a_3@@7 (+ i_1@@6 2)) val)) (=> (HasDirectPerm UnfoldingMask@19 (loc a_3@@7 (+ i_1@@6 2)) val) (and (=> (= (ControlFlow 0 139) 137) anon244_Then_correct) (=> (= (ControlFlow 0 139) 138) anon244_Else_correct)))))))
(let ((anon243_Else_correct  (=> (not (= (mod (+ i_1@@6 2) 2) 0)) (=> (and (= UnfoldingMask@19 UnfoldingMask@16) (= (ControlFlow 0 142) 139)) anon129_correct))))
(let ((anon243_Then_correct  (=> (= (mod (+ i_1@@6 2) 2) 0) (=> (and (and (and (not (= (loc a_3@@7 (+ i_1@@6 2)) null)) (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 (loc a_3@@7 (+ i_1@@6 2)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 (loc a_3@@7 (+ i_1@@6 2)) val)) FullPerm))))) (and (state Heap@22 UnfoldingMask@17) (not (= (loc a_3@@7 (+ (+ i_1@@6 2) 1)) null)))) (and (and (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val)) FullPerm)))) (state Heap@22 UnfoldingMask@18)) (and (= UnfoldingMask@19 UnfoldingMask@18) (= (ControlFlow 0 141) 139)))) anon129_correct))))
(let ((anon127_correct  (=> (= UnfoldingMask@16 (MapType1Store QPMask@2 null (access a_3@@7 (+ i_1@@6 2)) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 (+ i_1@@6 2)))) FullPerm)))) (and (=> (= (ControlFlow 0 143) 141) anon243_Then_correct) (=> (= (ControlFlow 0 143) 142) anon243_Else_correct)))))
(let ((anon242_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 146) 143)) anon127_correct)))
(let ((anon242_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 144) (- 0 145)) (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 (+ i_1@@6 2)))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 (+ i_1@@6 2))))) (=> (= (ControlFlow 0 144) 143) anon127_correct))))))
(let ((anon125_correct  (=> (state Heap@22 QPMask@2) (=> (and (|access#trigger| Heap@22 (access a_3@@7 (+ i_1@@6 2))) (= (MapType0Select Heap@22 null (access a_3@@7 (+ i_1@@6 2))) (FrameFragment (ite (= (mod (+ i_1@@6 2) 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@22 (loc a_3@@7 (+ i_1@@6 2)) val)) (FrameFragment (MapType0Select Heap@22 (loc a_3@@7 (+ (+ i_1@@6 2) 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 147) 144) anon242_Then_correct) (=> (= (ControlFlow 0 147) 146) anon242_Else_correct))))))
(let ((anon124_correct  (=> (state Heap@21 QPMask@2) (=> (and (= Heap@22 Heap@21) (= (ControlFlow 0 149) 147)) anon125_correct))))
(let ((anon241_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= Heap@21 Heap@18) (= (ControlFlow 0 151) 149)) anon124_correct))))
(let ((anon241_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (= Heap@19 (MapType0Store Heap@18 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@18 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 arg_i@0) val (bool_2_U true)))) (= Heap@20 (MapType0Store Heap@19 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@19 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 (+ arg_i@0 1)) val (bool_2_U true))))) (and (= Heap@21 Heap@20) (= (ControlFlow 0 150) 149))) anon124_correct))))
(let ((anon122_correct  (=> (state Heap@18 UnfoldingMask@15) (and (=> (= (ControlFlow 0 152) 150) anon241_Then_correct) (=> (= (ControlFlow 0 152) 151) anon241_Else_correct)))))
(let ((anon240_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= UnfoldingMask@15 UnfoldingMask@12) (= (ControlFlow 0 154) 152)) anon122_correct))))
(let ((anon240_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (and (not (= (loc a_3@@7 arg_i@0) null)) (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 (loc a_3@@7 arg_i@0) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 (loc a_3@@7 arg_i@0) val)) FullPerm))))) (and (state Heap@18 UnfoldingMask@13) (not (= (loc a_3@@7 (+ arg_i@0 1)) null)))) (and (and (= UnfoldingMask@14 (MapType1Store UnfoldingMask@13 (loc a_3@@7 (+ arg_i@0 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@13 (loc a_3@@7 (+ arg_i@0 1)) val)) FullPerm)))) (state Heap@18 UnfoldingMask@14)) (and (= UnfoldingMask@15 UnfoldingMask@14) (= (ControlFlow 0 153) 152)))) anon122_correct))))
(let ((anon120_correct  (=> (= UnfoldingMask@12 (MapType1Store QPMask@2 null (access a_3@@7 arg_i@0) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0))) FullPerm)))) (and (=> (= (ControlFlow 0 155) 153) anon240_Then_correct) (=> (= (ControlFlow 0 155) 154) anon240_Else_correct)))))
(let ((anon239_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 158) 155)) anon120_correct)))
(let ((anon239_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 156) (- 0 157)) (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0)))) (=> (= (ControlFlow 0 156) 155) anon120_correct))))))
(let ((anon238_Then_correct  (=> (= (U_2_int (MapType0Select Heap@18 (loc a_3@@7 arg_i@0) val)) newVal) (=> (and (|access#trigger| Heap@18 (access a_3@@7 arg_i@0)) (= (MapType0Select Heap@18 null (access a_3@@7 arg_i@0)) (FrameFragment (ite (= (mod arg_i@0 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@18 (loc a_3@@7 arg_i@0) val)) (FrameFragment (MapType0Select Heap@18 (loc a_3@@7 (+ arg_i@0 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 159) 156) anon239_Then_correct) (=> (= (ControlFlow 0 159) 158) anon239_Else_correct))))))
(let ((anon238_Else_correct  (=> (not (= (U_2_int (MapType0Select Heap@18 (loc a_3@@7 arg_i@0) val)) newVal)) (=> (and (= Heap@22 Heap@18) (= (ControlFlow 0 148) 147)) anon125_correct))))
(let ((anon117_correct  (=> (state Heap@18 QPMask@2) (and (=> (= (ControlFlow 0 160) 159) anon238_Then_correct) (=> (= (ControlFlow 0 160) 148) anon238_Else_correct)))))
(let ((anon237_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= Heap@18 Heap@15) (= (ControlFlow 0 162) 160)) anon117_correct))))
(let ((anon237_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (= Heap@16 (MapType0Store Heap@15 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@15 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 arg_i@0) val (bool_2_U true)))) (= Heap@17 (MapType0Store Heap@16 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@16 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 (+ arg_i@0 1)) val (bool_2_U true))))) (and (= Heap@18 Heap@17) (= (ControlFlow 0 161) 160))) anon117_correct))))
(let ((anon115_correct  (=> (state Heap@15 UnfoldingMask@11) (and (=> (= (ControlFlow 0 163) 161) anon237_Then_correct) (=> (= (ControlFlow 0 163) 162) anon237_Else_correct)))))
(let ((anon236_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= UnfoldingMask@11 UnfoldingMask@8) (= (ControlFlow 0 165) 163)) anon115_correct))))
(let ((anon236_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (and (not (= (loc a_3@@7 arg_i@0) null)) (= UnfoldingMask@9 (MapType1Store UnfoldingMask@8 (loc a_3@@7 arg_i@0) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@8 (loc a_3@@7 arg_i@0) val)) FullPerm))))) (and (state Heap@15 UnfoldingMask@9) (not (= (loc a_3@@7 (+ arg_i@0 1)) null)))) (and (and (= UnfoldingMask@10 (MapType1Store UnfoldingMask@9 (loc a_3@@7 (+ arg_i@0 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@9 (loc a_3@@7 (+ arg_i@0 1)) val)) FullPerm)))) (state Heap@15 UnfoldingMask@10)) (and (= UnfoldingMask@11 UnfoldingMask@10) (= (ControlFlow 0 164) 163)))) anon115_correct))))
(let ((anon113_correct  (=> (= UnfoldingMask@8 (MapType1Store QPMask@2 null (access a_3@@7 arg_i@0) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0))) FullPerm)))) (and (=> (= (ControlFlow 0 166) 164) anon236_Then_correct) (=> (= (ControlFlow 0 166) 165) anon236_Else_correct)))))
(let ((anon235_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 169) 166)) anon113_correct)))
(let ((anon235_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 167) (- 0 168)) (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0)))) (=> (= (ControlFlow 0 167) 166) anon113_correct))))))
(let ((anon227_Else_correct  (=> (and (|access#trigger| Heap@15 (access a_3@@7 arg_i@0)) (= (MapType0Select Heap@15 null (access a_3@@7 arg_i@0)) (FrameFragment (ite (= (mod arg_i@0 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@15 (loc a_3@@7 arg_i@0) val)) (FrameFragment (MapType0Select Heap@15 (loc a_3@@7 (+ arg_i@0 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 170) 167) anon235_Then_correct) (=> (= (ControlFlow 0 170) 169) anon235_Else_correct)))))
(let ((anon79_correct  (=> (and (state Heap@15 QPMask@2) (state Heap@15 QPMask@2)) (and (and (and (and (=> (= (ControlFlow 0 171) 170) anon227_Else_correct) (=> (= (ControlFlow 0 171) 116) anon228_Then_correct)) (=> (= (ControlFlow 0 171) 95) anon228_Else_correct)) (=> (= (ControlFlow 0 171) 93) anon220_Then_correct)) (=> (= (ControlFlow 0 171) 72) anon220_Else_correct)))))
(let ((anon218_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= Heap@15 Heap@12) (= (ControlFlow 0 173) 171)) anon79_correct))))
(let ((anon218_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (= Heap@13 (MapType0Store Heap@12 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@12 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 arg_i@0) val (bool_2_U true)))) (= Heap@14 (MapType0Store Heap@13 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@13 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 (+ arg_i@0 1)) val (bool_2_U true))))) (and (= Heap@15 Heap@14) (= (ControlFlow 0 172) 171))) anon79_correct))))
(let ((anon77_correct  (=> (and (state Heap@12 UnfoldingMask@7) (= (U_2_int (MapType0Select Heap@12 (loc a_3@@7 (+ arg_i@0 1)) val)) newVal)) (and (=> (= (ControlFlow 0 174) 172) anon218_Then_correct) (=> (= (ControlFlow 0 174) 173) anon218_Else_correct)))))
(let ((anon217_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= UnfoldingMask@7 UnfoldingMask@4) (= (ControlFlow 0 176) 174)) anon77_correct))))
(let ((anon217_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (and (not (= (loc a_3@@7 arg_i@0) null)) (= UnfoldingMask@5 (MapType1Store UnfoldingMask@4 (loc a_3@@7 arg_i@0) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@4 (loc a_3@@7 arg_i@0) val)) FullPerm))))) (and (state Heap@12 UnfoldingMask@5) (not (= (loc a_3@@7 (+ arg_i@0 1)) null)))) (and (and (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 (loc a_3@@7 (+ arg_i@0 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 (loc a_3@@7 (+ arg_i@0 1)) val)) FullPerm)))) (state Heap@12 UnfoldingMask@6)) (and (= UnfoldingMask@7 UnfoldingMask@6) (= (ControlFlow 0 175) 174)))) anon77_correct))))
(let ((anon75_correct  (=> (and (and (state Heap@12 QPMask@2) (|access#trigger| Heap@12 (access a_3@@7 arg_i@0))) (and (= (MapType0Select Heap@12 null (access a_3@@7 arg_i@0)) (FrameFragment (ite (= (mod arg_i@0 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@12 (loc a_3@@7 arg_i@0) val)) (FrameFragment (MapType0Select Heap@12 (loc a_3@@7 (+ arg_i@0 1)) val))) EmptyFrame))) (= UnfoldingMask@4 (MapType1Store QPMask@2 null (access a_3@@7 arg_i@0) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0))) FullPerm)))))) (and (=> (= (ControlFlow 0 177) 175) anon217_Then_correct) (=> (= (ControlFlow 0 177) 176) anon217_Else_correct)))))
(let ((anon216_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= Heap@12 ExhaleHeap@0) (= (ControlFlow 0 179) 177)) anon75_correct))))
(let ((anon216_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (= Heap@10 (MapType0Store ExhaleHeap@0 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select ExhaleHeap@0 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 arg_i@0) val (bool_2_U true)))) (= Heap@11 (MapType0Store Heap@10 null (|access#sm| a_3@@7 arg_i@0) (MapType1Store (MapType0Select Heap@10 null (|access#sm| a_3@@7 arg_i@0)) (loc a_3@@7 (+ arg_i@0 1)) val (bool_2_U true))))) (and (= Heap@12 Heap@11) (= (ControlFlow 0 178) 177))) anon75_correct))))
(let ((anon73_correct  (=> (and (state ExhaleHeap@0 UnfoldingMask@3) (= (U_2_int (MapType0Select ExhaleHeap@0 (loc a_3@@7 arg_i@0) val)) newVal)) (and (=> (= (ControlFlow 0 180) 178) anon216_Then_correct) (=> (= (ControlFlow 0 180) 179) anon216_Else_correct)))))
(let ((anon215_Else_correct  (=> (not (= (mod arg_i@0 2) 0)) (=> (and (= UnfoldingMask@3 UnfoldingMask@0) (= (ControlFlow 0 182) 180)) anon73_correct))))
(let ((anon215_Then_correct  (=> (= (mod arg_i@0 2) 0) (=> (and (and (and (not (= (loc a_3@@7 arg_i@0) null)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 (loc a_3@@7 arg_i@0) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 (loc a_3@@7 arg_i@0) val)) FullPerm))))) (and (state ExhaleHeap@0 UnfoldingMask@1) (not (= (loc a_3@@7 (+ arg_i@0 1)) null)))) (and (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 (loc a_3@@7 (+ arg_i@0 1)) val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 (loc a_3@@7 (+ arg_i@0 1)) val)) FullPerm)))) (state ExhaleHeap@0 UnfoldingMask@2)) (and (= UnfoldingMask@3 UnfoldingMask@2) (= (ControlFlow 0 181) 180)))) anon73_correct))))
(let ((anon214_Then_correct  (=> (and (< (+ i_1@@6 2) (len a_3@@7)) (= arg_i@0 (+ i_1@@6 2))) (and (=> (= (ControlFlow 0 183) (- 0 190)) (>= arg_i@0 0)) (=> (>= arg_i@0 0) (and (=> (= (ControlFlow 0 183) (- 0 189)) (< arg_i@0 (len a_3@@7))) (=> (< arg_i@0 (len a_3@@7)) (and (=> (= (ControlFlow 0 183) (- 0 188)) (= (mod arg_i@0 2) 0)) (=> (= (mod arg_i@0 2) 0) (and (=> (= (ControlFlow 0 183) (- 0 187)) (= (mod (len a_3@@7) 2) 0)) (=> (= (mod (len a_3@@7) 2) 0) (and (=> (= (ControlFlow 0 183) (- 0 186)) (forall ((j_15 Int) (j_15_1 Int) ) (!  (=> (and (and (and (and (not (= j_15 j_15_1)) (and (>= j_15 0) (and (< j_15 (len a_3@@7)) (= (mod j_15 2) 0)))) (and (>= j_15_1 0) (and (< j_15_1 (len a_3@@7)) (= (mod j_15_1 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_15 j_15_1))))
 :qid |stdinbpl.1374:23|
 :skolemid |76|
 :pattern ( (neverTriggered9 j_15) (neverTriggered9 j_15_1))
))) (=> (forall ((j_15@@0 Int) (j_15_1@@0 Int) ) (!  (=> (and (and (and (and (not (= j_15@@0 j_15_1@@0)) (and (>= j_15@@0 0) (and (< j_15@@0 (len a_3@@7)) (= (mod j_15@@0 2) 0)))) (and (>= j_15_1@@0 0) (and (< j_15_1@@0 (len a_3@@7)) (= (mod j_15_1@@0 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_15@@0 j_15_1@@0))))
 :qid |stdinbpl.1374:23|
 :skolemid |76|
 :pattern ( (neverTriggered9 j_15@@0) (neverTriggered9 j_15_1@@0))
)) (and (=> (= (ControlFlow 0 183) (- 0 185)) (forall ((j_15@@1 Int) ) (!  (=> (and (>= j_15@@1 0) (and (< j_15@@1 (len a_3@@7)) (= (mod j_15@@1 2) 0))) (>= (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_15@@1))) FullPerm))
 :qid |stdinbpl.1381:23|
 :skolemid |77|
 :pattern ( (MapType0Select Heap@9 null (access a_3@@7 j_15@@1)))
 :pattern ( (MapType1Select Mask@7 null (access a_3@@7 j_15@@1)))
))) (=> (forall ((j_15@@2 Int) ) (!  (=> (and (>= j_15@@2 0) (and (< j_15@@2 (len a_3@@7)) (= (mod j_15@@2 2) 0))) (>= (U_2_real (MapType1Select Mask@7 null (access a_3@@7 j_15@@2))) FullPerm))
 :qid |stdinbpl.1381:23|
 :skolemid |77|
 :pattern ( (MapType0Select Heap@9 null (access a_3@@7 j_15@@2)))
 :pattern ( (MapType1Select Mask@7 null (access a_3@@7 j_15@@2)))
)) (=> (forall ((j_15@@3 Int) ) (!  (=> (and (and (>= j_15@@3 0) (and (< j_15@@3 (len a_3@@7)) (= (mod j_15@@3 2) 0))) (< NoPerm FullPerm)) (and (= (invRecv9 a_3@@7 j_15@@3) j_15@@3) (qpRange9 a_3@@7 j_15@@3)))
 :qid |stdinbpl.1387:28|
 :skolemid |78|
 :pattern ( (MapType0Select Heap@9 null (access a_3@@7 j_15@@3)))
 :pattern ( (MapType1Select Mask@7 null (access a_3@@7 j_15@@3)))
)) (=> (and (and (and (forall ((a_4_1 T@U) (i_4_1 Int) ) (!  (=> (= (type a_4_1) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv9 a_4_1 i_4_1) 0) (and (< (invRecv9 a_4_1 i_4_1) (len a_3@@7)) (= (mod (invRecv9 a_4_1 i_4_1) 2) 0))) (< NoPerm FullPerm)) (qpRange9 a_4_1 i_4_1)) (and (= a_3@@7 a_4_1) (= (invRecv9 a_4_1 i_4_1) i_4_1))))
 :qid |stdinbpl.1391:28|
 :skolemid |79|
 :pattern ( (invRecv9 a_4_1 i_4_1))
)) (forall ((a_4_1@@0 T@U) (i_4_1@@0 Int) ) (!  (=> (= (type a_4_1@@0) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv9 a_4_1@@0 i_4_1@@0) 0) (and (< (invRecv9 a_4_1@@0 i_4_1@@0) (len a_3@@7)) (= (mod (invRecv9 a_4_1@@0 i_4_1@@0) 2) 0))) (< NoPerm FullPerm)) (qpRange9 a_4_1@@0 i_4_1@@0)) (and (and (= a_3@@7 a_4_1@@0) (= (invRecv9 a_4_1@@0 i_4_1@@0) i_4_1@@0)) (= (U_2_real (MapType1Select QPMask@1 null (access a_4_1@@0 i_4_1@@0))) (- (U_2_real (MapType1Select Mask@7 null (access a_4_1@@0 i_4_1@@0))) FullPerm)))))
 :qid |stdinbpl.1397:28|
 :skolemid |80|
 :pattern ( (MapType1Select QPMask@1 null (access a_4_1@@0 i_4_1@@0)))
))) (and (forall ((a_4_1@@1 T@U) (i_4_1@@1 Int) ) (!  (=> (and (= (type a_4_1@@1) IArrayDomainTypeType) (not (and (and (and (>= (invRecv9 a_4_1@@1 i_4_1@@1) 0) (and (< (invRecv9 a_4_1@@1 i_4_1@@1) (len a_3@@7)) (= (mod (invRecv9 a_4_1@@1 i_4_1@@1) 2) 0))) (< NoPerm FullPerm)) (qpRange9 a_4_1@@1 i_4_1@@1)))) (= (U_2_real (MapType1Select QPMask@1 null (access a_4_1@@1 i_4_1@@1))) (U_2_real (MapType1Select Mask@7 null (access a_4_1@@1 i_4_1@@1)))))
 :qid |stdinbpl.1401:28|
 :skolemid |81|
 :pattern ( (MapType1Select QPMask@1 null (access a_4_1@@1 i_4_1@@1)))
)) (forall ((o_3@@1 T@U) (f_5@@1 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_5@@1))))
(let ((A@@14 (FieldTypeInv0 (type f_5@@1))))
 (=> (and (and (= (type o_3@@1) RefType) (= (type f_5@@1) (FieldType A@@14 B@@13))) (or (or (not (= o_3@@1 null)) (not (IsPredicateField f_5@@1))) (not (= (getPredWandId f_5@@1) 0)))) (= (U_2_real (MapType1Select Mask@7 o_3@@1 f_5@@1)) (U_2_real (MapType1Select QPMask@1 o_3@@1 f_5@@1))))))
 :qid |stdinbpl.1407:35|
 :skolemid |82|
 :pattern ( (MapType1Select Mask@7 o_3@@1 f_5@@1))
 :pattern ( (MapType1Select QPMask@1 o_3@@1 f_5@@1))
)))) (and (and (IdenticalOnKnownLocations Heap@9 ExhaleHeap@0 QPMask@1) (>= arg_i@0 0)) (and (< arg_i@0 (len a_3@@7)) (= (mod (len a_3@@7) 2) (mod (len a_3@@7) 2))))) (and (=> (= (ControlFlow 0 183) (- 0 184)) (forall ((j_16 Int) (j_16_1 Int) ) (!  (=> (and (and (and (and (not (= j_16 j_16_1)) (and (>= j_16 0) (and (< j_16 (len a_3@@7)) (= (mod j_16 2) 0)))) (and (>= j_16_1 0) (and (< j_16_1 (len a_3@@7)) (= (mod j_16_1 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_16 j_16_1))))
 :qid |stdinbpl.1425:23|
 :skolemid |83|
 :pattern ( (neverTriggered10 j_16) (neverTriggered10 j_16_1))
))) (=> (forall ((j_16@@0 Int) (j_16_1@@0 Int) ) (!  (=> (and (and (and (and (not (= j_16@@0 j_16_1@@0)) (and (>= j_16@@0 0) (and (< j_16@@0 (len a_3@@7)) (= (mod j_16@@0 2) 0)))) (and (>= j_16_1@@0 0) (and (< j_16_1@@0 (len a_3@@7)) (= (mod j_16_1@@0 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_16@@0 j_16_1@@0))))
 :qid |stdinbpl.1425:23|
 :skolemid |83|
 :pattern ( (neverTriggered10 j_16@@0) (neverTriggered10 j_16_1@@0))
)) (=> (forall ((j_16@@1 Int) ) (!  (=> (and (and (>= j_16@@1 0) (and (< j_16@@1 (len a_3@@7)) (= (mod j_16@@1 2) 0))) (< NoPerm FullPerm)) (and (= (invRecv10 a_3@@7 j_16@@1) j_16@@1) (qpRange10 a_3@@7 j_16@@1)))
 :qid |stdinbpl.1431:28|
 :skolemid |84|
 :pattern ( (MapType0Select ExhaleHeap@0 null (access a_3@@7 j_16@@1)))
 :pattern ( (MapType1Select QPMask@1 null (access a_3@@7 j_16@@1)))
)) (=> (and (forall ((a_5_1 T@U) (i_5_1 Int) ) (!  (=> (= (type a_5_1) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv10 a_5_1 i_5_1) 0) (and (< (invRecv10 a_5_1 i_5_1) (len a_3@@7)) (= (mod (invRecv10 a_5_1 i_5_1) 2) 0))) (< NoPerm FullPerm)) (qpRange10 a_5_1 i_5_1)) (and (= a_3@@7 a_5_1) (= (invRecv10 a_5_1 i_5_1) i_5_1))))
 :qid |stdinbpl.1435:28|
 :skolemid |85|
 :pattern ( (invRecv10 a_5_1 i_5_1))
)) (forall ((a_5_1@@0 T@U) (i_5_1@@0 Int) ) (!  (=> (= (type a_5_1@@0) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv10 a_5_1@@0 i_5_1@@0) 0) (and (< (invRecv10 a_5_1@@0 i_5_1@@0) (len a_3@@7)) (= (mod (invRecv10 a_5_1@@0 i_5_1@@0) 2) 0))) (< NoPerm FullPerm)) (qpRange10 a_5_1@@0 i_5_1@@0)) (and (=> (< NoPerm FullPerm) (and (= a_3@@7 a_5_1@@0) (= (invRecv10 a_5_1@@0 i_5_1@@0) i_5_1@@0))) (= (U_2_real (MapType1Select QPMask@2 null (access a_5_1@@0 i_5_1@@0))) (+ (U_2_real (MapType1Select QPMask@1 null (access a_5_1@@0 i_5_1@@0))) FullPerm)))))
 :qid |stdinbpl.1441:28|
 :skolemid |86|
 :pattern ( (MapType1Select QPMask@2 null (access a_5_1@@0 i_5_1@@0)))
))) (=> (and (and (and (forall ((o_3@@2 T@U) (f_5@@2 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_5@@2))))
(let ((A@@15 (FieldTypeInv0 (type f_5@@2))))
 (=> (and (and (= (type o_3@@2) RefType) (= (type f_5@@2) (FieldType A@@15 B@@14))) (or (or (not (= o_3@@2 null)) (not (IsPredicateField f_5@@2))) (not (= (getPredWandId f_5@@2) 0)))) (= (U_2_real (MapType1Select QPMask@1 o_3@@2 f_5@@2)) (U_2_real (MapType1Select QPMask@2 o_3@@2 f_5@@2))))))
 :qid |stdinbpl.1447:35|
 :skolemid |87|
 :pattern ( (MapType1Select QPMask@1 o_3@@2 f_5@@2))
 :pattern ( (MapType1Select QPMask@2 o_3@@2 f_5@@2))
)) (forall ((a_5_1@@1 T@U) (i_5_1@@1 Int) ) (!  (=> (and (= (type a_5_1@@1) IArrayDomainTypeType) (not (and (and (and (>= (invRecv10 a_5_1@@1 i_5_1@@1) 0) (and (< (invRecv10 a_5_1@@1 i_5_1@@1) (len a_3@@7)) (= (mod (invRecv10 a_5_1@@1 i_5_1@@1) 2) 0))) (< NoPerm FullPerm)) (qpRange10 a_5_1@@1 i_5_1@@1)))) (= (U_2_real (MapType1Select QPMask@2 null (access a_5_1@@1 i_5_1@@1))) (U_2_real (MapType1Select QPMask@1 null (access a_5_1@@1 i_5_1@@1)))))
 :qid |stdinbpl.1451:28|
 :skolemid |88|
 :pattern ( (MapType1Select QPMask@2 null (access a_5_1@@1 i_5_1@@1)))
))) (and (state ExhaleHeap@0 QPMask@2) (forall ((j_18 Int) ) (!  (=> (and (>= j_18 0) (and (< j_18 arg_i@0) (= (mod j_18 2) 0))) (= (U_2_int (MapType0Select ExhaleHeap@0 (loc a_3@@7 j_18) val)) (U_2_int (MapType0Select Heap@9 (loc a_3@@7 j_18) val))))
 :qid |stdinbpl.1457:26|
 :skolemid |89|
 :pattern ( (loc a_3@@7 j_18))
)))) (and (and (forall ((j_19 Int) ) (!  (=> (and (>= j_19 0) (and (< j_19 arg_i@0) (= (mod j_19 2) 0))) (= (U_2_int (MapType0Select ExhaleHeap@0 (loc a_3@@7 (+ j_19 1)) val)) (U_2_int (MapType0Select Heap@9 (loc a_3@@7 (+ j_19 1)) val))))
 :qid |stdinbpl.1461:26|
 :skolemid |90|
)) (|access#trigger| ExhaleHeap@0 (access a_3@@7 arg_i@0))) (and (= (MapType0Select ExhaleHeap@0 null (access a_3@@7 arg_i@0)) (FrameFragment (ite (= (mod arg_i@0 2) 0) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (loc a_3@@7 arg_i@0) val)) (FrameFragment (MapType0Select ExhaleHeap@0 (loc a_3@@7 (+ arg_i@0 1)) val))) EmptyFrame))) (= UnfoldingMask@0 (MapType1Store QPMask@2 null (access a_3@@7 arg_i@0) (real_2_U (- (U_2_real (MapType1Select QPMask@2 null (access a_3@@7 arg_i@0))) FullPerm))))))) (and (=> (= (ControlFlow 0 183) 181) anon215_Then_correct) (=> (= (ControlFlow 0 183) 182) anon215_Else_correct))))))))))))))))))))))))
(let ((anon214_Else_correct  (=> (and (and (<= (len a_3@@7) (+ i_1@@6 2)) (= Mask@8 Mask@7)) (and (= Heap@35 Heap@9) (= (ControlFlow 0 70) 69))) anon142_correct)))
(let ((anon70_correct  (=> (and (state Heap@9 Mask@7) (state Heap@9 Mask@7)) (and (=> (= (ControlFlow 0 191) 183) anon214_Then_correct) (=> (= (ControlFlow 0 191) 70) anon214_Else_correct)))))
(let ((anon213_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Heap@9 Heap@6) (= (ControlFlow 0 193) 191)) anon70_correct))))
(let ((anon213_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (= Heap@7 (MapType0Store Heap@6 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@6 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 i_1@@6) val (bool_2_U true)))) (= Heap@8 (MapType0Store Heap@7 null (|access#sm| a_3@@7 i_1@@6) (MapType1Store (MapType0Select Heap@7 null (|access#sm| a_3@@7 i_1@@6)) (loc a_3@@7 (+ i_1@@6 1)) val (bool_2_U true))))) (and (= Heap@9 Heap@8) (= (ControlFlow 0 192) 191))) anon70_correct))))
(let ((anon212_Else_correct  (=> (and (HasDirectPerm Mask@7 null (access a_3@@7 i_1@@6)) (= Heap@6 Heap@3)) (and (=> (= (ControlFlow 0 195) 192) anon213_Then_correct) (=> (= (ControlFlow 0 195) 193) anon213_Else_correct)))))
(let ((anon212_Then_correct  (=> (and (and (not (HasDirectPerm Mask@7 null (access a_3@@7 i_1@@6))) (= Heap@4 (MapType0Store Heap@3 null (|access#sm| a_3@@7 i_1@@6) ZeroPMask))) (and (= Heap@5 (MapType0Store Heap@4 null (access a_3@@7 i_1@@6) freshVersion@0)) (= Heap@6 Heap@5))) (and (=> (= (ControlFlow 0 194) 192) anon213_Then_correct) (=> (= (ControlFlow 0 194) 193) anon213_Else_correct)))))
(let ((anon66_correct  (=> (= Mask@7 (MapType1Store Mask@6 null (access a_3@@7 i_1@@6) (real_2_U (+ (U_2_real (MapType1Select Mask@6 null (access a_3@@7 i_1@@6))) FullPerm)))) (=> (and (and (state Heap@3 Mask@7) (state Heap@3 Mask@7)) (and (|access#trigger| Heap@3 (access a_3@@7 i_1@@6)) (= (MapType0Select Heap@3 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@3 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select Heap@3 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame))))) (and (=> (= (ControlFlow 0 196) 194) anon212_Then_correct) (=> (= (ControlFlow 0 196) 195) anon212_Else_correct))))))
(let ((anon65_correct  (=> (= Mask@5 (MapType1Store Mask@4 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (- (U_2_real (MapType1Select Mask@4 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (=> (and (= Mask@6 Mask@5) (= (ControlFlow 0 198) 196)) anon66_correct))))
(let ((anon211_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 201) 198)) anon65_correct)))
(let ((anon211_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 199) (- 0 200)) (<= FullPerm (U_2_real (MapType1Select Mask@4 (loc a_3@@7 (+ i_1@@6 1)) val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 (loc a_3@@7 (+ i_1@@6 1)) val))) (=> (= (ControlFlow 0 199) 198) anon65_correct))))))
(let ((anon63_correct  (=> (= Mask@4 (MapType1Store Mask@3 (loc a_3@@7 i_1@@6) val (real_2_U (- (U_2_real (MapType1Select Mask@3 (loc a_3@@7 i_1@@6) val)) FullPerm)))) (and (=> (= (ControlFlow 0 202) 199) anon211_Then_correct) (=> (= (ControlFlow 0 202) 201) anon211_Else_correct)))))
(let ((anon210_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 205) 202)) anon63_correct)))
(let ((anon210_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 203) (- 0 204)) (<= FullPerm (U_2_real (MapType1Select Mask@3 (loc a_3@@7 i_1@@6) val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@3 (loc a_3@@7 i_1@@6) val))) (=> (= (ControlFlow 0 203) 202) anon63_correct))))))
(let ((anon209_Then_correct  (=> (= (mod i_1@@6 2) 0) (and (=> (= (ControlFlow 0 206) 203) anon210_Then_correct) (=> (= (ControlFlow 0 206) 205) anon210_Else_correct)))))
(let ((anon209_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Mask@6 Mask@3) (= (ControlFlow 0 197) 196)) anon66_correct))))
(let ((anon60_correct  (=> (and (state Heap@1 Mask@3) (state Heap@1 Mask@3)) (and (=> (= (ControlFlow 0 207) (- 0 209)) (= FullPerm (U_2_real (MapType1Select Mask@3 (loc a_3@@7 i_1@@6) val)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 (loc a_3@@7 i_1@@6) val))) (=> (and (= Heap@2 (MapType0Store Heap@1 (loc a_3@@7 i_1@@6) val (int_2_U newVal))) (state Heap@2 Mask@3)) (and (=> (= (ControlFlow 0 207) (- 0 208)) (= FullPerm (U_2_real (MapType1Select Mask@3 (loc a_3@@7 (+ i_1@@6 1)) val)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 (loc a_3@@7 (+ i_1@@6 1)) val))) (=> (and (= Heap@3 (MapType0Store Heap@2 (loc a_3@@7 (+ i_1@@6 1)) val (int_2_U newVal))) (state Heap@3 Mask@3)) (and (=> (= (ControlFlow 0 207) 206) anon209_Then_correct) (=> (= (ControlFlow 0 207) 197) anon209_Else_correct)))))))))))
(let ((anon208_Else_correct  (=> (not (= (mod i_1@@6 2) 0)) (=> (and (= Mask@3 Mask@0) (= (ControlFlow 0 211) 207)) anon60_correct))))
(let ((anon208_Then_correct  (=> (= (mod i_1@@6 2) 0) (=> (and (and (and (not (= (loc a_3@@7 i_1@@6) null)) (= Mask@1 (MapType1Store Mask@0 (loc a_3@@7 i_1@@6) val (real_2_U (+ (U_2_real (MapType1Select Mask@0 (loc a_3@@7 i_1@@6) val)) FullPerm))))) (and (state Heap@1 Mask@1) (not (= (loc a_3@@7 (+ i_1@@6 1)) null)))) (and (and (= Mask@2 (MapType1Store Mask@1 (loc a_3@@7 (+ i_1@@6 1)) val (real_2_U (+ (U_2_real (MapType1Select Mask@1 (loc a_3@@7 (+ i_1@@6 1)) val)) FullPerm)))) (state Heap@1 Mask@2)) (and (= Mask@3 Mask@2) (= (ControlFlow 0 210) 207)))) anon60_correct))))
(let ((anon207_Else_correct  (=> (and (HasDirectPerm Mask@0 null (access a_3@@7 i_1@@6)) (= Heap@1 Heap@@10)) (and (=> (= (ControlFlow 0 213) 210) anon208_Then_correct) (=> (= (ControlFlow 0 213) 211) anon208_Else_correct)))))
(let ((anon207_Then_correct  (=> (not (HasDirectPerm Mask@0 null (access a_3@@7 i_1@@6))) (=> (and (= Heap@0 (MapType0Store Heap@@10 null (access a_3@@7 i_1@@6) newVersion@0)) (= Heap@1 Heap@0)) (and (=> (= (ControlFlow 0 212) 210) anon208_Then_correct) (=> (= (ControlFlow 0 212) 211) anon208_Else_correct))))))
(let ((anon56_correct  (=> (= Mask@0 (MapType1Store QPMask@0 null (access a_3@@7 i_1@@6) (real_2_U (- (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 i_1@@6))) FullPerm)))) (and (=> (= (ControlFlow 0 214) 212) anon207_Then_correct) (=> (= (ControlFlow 0 214) 213) anon207_Else_correct)))))
(let ((anon206_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 217) 214)) anon56_correct)))
(let ((anon206_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 215) (- 0 216)) (<= FullPerm (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 i_1@@6))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@0 null (access a_3@@7 i_1@@6)))) (=> (= (ControlFlow 0 215) 214) anon56_correct))))))
(let ((anon180_Else_correct  (=> (and (|access#trigger| Heap@@10 (access a_3@@7 i_1@@6)) (= (MapType0Select Heap@@10 null (access a_3@@7 i_1@@6)) (FrameFragment (ite (= (mod i_1@@6 2) 0) (CombineFrames (FrameFragment (MapType0Select Heap@@10 (loc a_3@@7 i_1@@6) val)) (FrameFragment (MapType0Select Heap@@10 (loc a_3@@7 (+ i_1@@6 1)) val))) EmptyFrame)))) (and (=> (= (ControlFlow 0 218) 215) anon206_Then_correct) (=> (= (ControlFlow 0 218) 217) anon206_Else_correct)))))
(let ((anon179_Else_correct  (and (=> (= (ControlFlow 0 303) (- 0 304)) (forall ((j_1 Int) (j_1_1 Int) ) (!  (=> (and (and (and (and (not (= j_1 j_1_1)) (and (>= j_1 0) (and (< j_1 (len a_3@@7)) (= (mod j_1 2) 0)))) (and (>= j_1_1 0) (and (< j_1_1 (len a_3@@7)) (= (mod j_1_1 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_1 j_1_1))))
 :qid |stdinbpl.911:17|
 :skolemid |62|
 :pattern ( (neverTriggered6 j_1) (neverTriggered6 j_1_1))
))) (=> (forall ((j_1@@0 Int) (j_1_1@@0 Int) ) (!  (=> (and (and (and (and (not (= j_1@@0 j_1_1@@0)) (and (>= j_1@@0 0) (and (< j_1@@0 (len a_3@@7)) (= (mod j_1@@0 2) 0)))) (and (>= j_1_1@@0 0) (and (< j_1_1@@0 (len a_3@@7)) (= (mod j_1_1@@0 2) 0)))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (not (= a_3@@7 a_3@@7)) (not (= j_1@@0 j_1_1@@0))))
 :qid |stdinbpl.911:17|
 :skolemid |62|
 :pattern ( (neverTriggered6 j_1@@0) (neverTriggered6 j_1_1@@0))
)) (=> (forall ((j_1@@1 Int) ) (!  (=> (and (and (>= j_1@@1 0) (and (< j_1@@1 (len a_3@@7)) (= (mod j_1@@1 2) 0))) (< NoPerm FullPerm)) (and (= (invRecv6 a_3@@7 j_1@@1) j_1@@1) (qpRange6 a_3@@7 j_1@@1)))
 :qid |stdinbpl.917:22|
 :skolemid |63|
 :pattern ( (MapType0Select Heap@@10 null (access a_3@@7 j_1@@1)))
 :pattern ( (MapType1Select ZeroMask null (access a_3@@7 j_1@@1)))
)) (=> (and (forall ((a_1_1 T@U) (i_1_1 Int) ) (!  (=> (= (type a_1_1) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv6 a_1_1 i_1_1) 0) (and (< (invRecv6 a_1_1 i_1_1) (len a_3@@7)) (= (mod (invRecv6 a_1_1 i_1_1) 2) 0))) (< NoPerm FullPerm)) (qpRange6 a_1_1 i_1_1)) (and (= a_3@@7 a_1_1) (= (invRecv6 a_1_1 i_1_1) i_1_1))))
 :qid |stdinbpl.921:22|
 :skolemid |64|
 :pattern ( (invRecv6 a_1_1 i_1_1))
)) (forall ((a_1_1@@0 T@U) (i_1_1@@0 Int) ) (!  (=> (= (type a_1_1@@0) IArrayDomainTypeType) (=> (and (and (and (>= (invRecv6 a_1_1@@0 i_1_1@@0) 0) (and (< (invRecv6 a_1_1@@0 i_1_1@@0) (len a_3@@7)) (= (mod (invRecv6 a_1_1@@0 i_1_1@@0) 2) 0))) (< NoPerm FullPerm)) (qpRange6 a_1_1@@0 i_1_1@@0)) (and (=> (< NoPerm FullPerm) (and (= a_3@@7 a_1_1@@0) (= (invRecv6 a_1_1@@0 i_1_1@@0) i_1_1@@0))) (= (U_2_real (MapType1Select QPMask@0 null (access a_1_1@@0 i_1_1@@0))) (+ (U_2_real (MapType1Select ZeroMask null (access a_1_1@@0 i_1_1@@0))) FullPerm)))))
 :qid |stdinbpl.927:22|
 :skolemid |65|
 :pattern ( (MapType1Select QPMask@0 null (access a_1_1@@0 i_1_1@@0)))
))) (=> (and (and (forall ((o_3@@3 T@U) (f_5@@3 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_5@@3))))
(let ((A@@16 (FieldTypeInv0 (type f_5@@3))))
 (=> (and (and (= (type o_3@@3) RefType) (= (type f_5@@3) (FieldType A@@16 B@@15))) (or (or (not (= o_3@@3 null)) (not (IsPredicateField f_5@@3))) (not (= (getPredWandId f_5@@3) 0)))) (= (U_2_real (MapType1Select ZeroMask o_3@@3 f_5@@3)) (U_2_real (MapType1Select QPMask@0 o_3@@3 f_5@@3))))))
 :qid |stdinbpl.933:29|
 :skolemid |66|
 :pattern ( (MapType1Select ZeroMask o_3@@3 f_5@@3))
 :pattern ( (MapType1Select QPMask@0 o_3@@3 f_5@@3))
)) (forall ((a_1_1@@1 T@U) (i_1_1@@1 Int) ) (!  (=> (and (= (type a_1_1@@1) IArrayDomainTypeType) (not (and (and (and (>= (invRecv6 a_1_1@@1 i_1_1@@1) 0) (and (< (invRecv6 a_1_1@@1 i_1_1@@1) (len a_3@@7)) (= (mod (invRecv6 a_1_1@@1 i_1_1@@1) 2) 0))) (< NoPerm FullPerm)) (qpRange6 a_1_1@@1 i_1_1@@1)))) (= (U_2_real (MapType1Select QPMask@0 null (access a_1_1@@1 i_1_1@@1))) (U_2_real (MapType1Select ZeroMask null (access a_1_1@@1 i_1_1@@1)))))
 :qid |stdinbpl.937:22|
 :skolemid |67|
 :pattern ( (MapType1Select QPMask@0 null (access a_1_1@@1 i_1_1@@1)))
))) (and (state Heap@@10 QPMask@0) (state Heap@@10 QPMask@0))) (and (=> (= (ControlFlow 0 303) 302) anon180_Then_correct) (=> (= (ControlFlow 0 303) 218) anon180_Else_correct)))))))))
(let ((anon179_Then_correct true))
(let ((anon0_correct  (=> (and (and (and (state Heap@@10 ZeroMask) (>= i_1@@6 0)) (and (< i_1@@6 (len a_3@@7)) (state Heap@@10 ZeroMask))) (and (and (= (mod i_1@@6 2) 0) (state Heap@@10 ZeroMask)) (and (= (mod (len a_3@@7) 2) 0) (state Heap@@10 ZeroMask)))) (and (=> (= (ControlFlow 0 305) 1) anon179_Then_correct) (=> (= (ControlFlow 0 305) 303) anon179_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 306) 305) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
