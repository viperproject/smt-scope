(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun f_7 () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun RefType () T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand#ft| (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand#sm| (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun MultiSetTypeInv0 (T@T) T@T)
(declare-fun MultiSetType (T@T) T@T)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun p_1 (T@U T@U T@U) T@U)
(declare-fun PredicateType_pType () T@T)
(declare-fun |p#trigger| (T@U T@U) Bool)
(declare-fun |p#everUsed| (T@U) Bool)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun |MultiSet#Select| (T@U T@U) Int)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2Type (T@T T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |p#sm| (T@U T@U T@U) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun FullPerm () Real)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type f_7) (FieldType NormalFieldType intType))))
(assert (distinct $allocated f_7)
)
(assert  (and (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 8)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (Ctor RefType) 9)))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@18 T@U) (arg1@@4 Real) (arg2@@1 T@U) (arg3@@0 Real) (arg4 T@U) (arg5 Real) (arg6 T@U) (arg7 T@U) (arg8 T@U) (arg9 Real) ) (! (= (type (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9))
))))
(assert (forall ((arg1@@5 T@U) (arg2@@2 Real) (arg3@@1 T@U) (arg4@@0 Real) (arg5@@0 T@U) (arg6@@0 Real) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10 Real) ) (!  (=> (and (and (and (and (and (= (type arg1@@5) RefType) (= (type arg3@@1) RefType)) (= (type arg5@@0) RefType)) (= (type arg7@@0) RefType)) (= (type arg8@@0) RefType)) (= (type arg9@@0) RefType)) (IsWandField (wand arg1@@5 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10)))
 :qid |stdinbpl.523:15|
 :skolemid |82|
 :pattern ( (wand arg1@@5 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10))
)))
(assert  (and (= (Ctor FrameTypeType) 11) (forall ((arg0@@19 T@U) (arg1@@6 Real) (arg2@@3 T@U) (arg3@@2 Real) (arg4@@1 T@U) (arg5@@1 Real) (arg6@@1 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9@@1 Real) ) (! (= (type (|wand#ft| arg0@@19 arg1@@6 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@19 arg1@@6 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1))
))))
(assert (forall ((arg1@@7 T@U) (arg2@@4 Real) (arg3@@3 T@U) (arg4@@2 Real) (arg5@@2 T@U) (arg6@@2 Real) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@2 T@U) (arg10@@0 Real) ) (!  (=> (and (and (and (and (and (= (type arg1@@7) RefType) (= (type arg3@@3) RefType)) (= (type arg5@@2) RefType)) (= (type arg7@@2) RefType)) (= (type arg8@@2) RefType)) (= (type arg9@@2) RefType)) (IsWandField (|wand#ft| arg1@@7 arg2@@4 arg3@@3 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@0)))
 :qid |stdinbpl.527:15|
 :skolemid |83|
 :pattern ( (|wand#ft| arg1@@7 arg2@@4 arg3@@3 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@0))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@20 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType1Type arg0@@20 arg1@@8)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@21 T@T) (arg1@@9 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@21 arg1@@9)) arg0@@21)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@21 arg1@@9))
))) (forall ((arg0@@22 T@T) (arg1@@10 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@22 arg1@@10)) arg1@@10)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@22 arg1@@10))
))) (forall ((arg0@@23 T@U) (arg1@@11 T@U) (arg2@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@23))))
(= (type (MapType1Select arg0@@23 arg1@@11 arg2@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@23 arg1@@11 arg2@@5))
))) (forall ((arg0@@24 T@U) (arg1@@12 T@U) (arg2@@6 T@U) (arg3@@4 T@U) ) (! (let ((aVar1@@0 (type arg3@@4)))
(let ((aVar0@@0 (type arg1@@12)))
(= (type (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (forall ((arg0@@25 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@25))))
(= (type (WandMaskField arg0@@25)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@25))
))) (forall ((arg0@@26 T@U) (arg1@@13 Real) (arg2@@7 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@3 Real) (arg6@@3 T@U) (arg7@@3 T@U) (arg8@@3 T@U) (arg9@@3 Real) ) (! (= (type (|wand#sm| arg0@@26 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@26 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3))
))))
(assert (forall ((arg1@@14 T@U) (arg2@@8 Real) (arg3@@6 T@U) (arg4@@4 Real) (arg5@@4 T@U) (arg6@@4 Real) (arg7@@4 T@U) (arg8@@4 T@U) (arg9@@4 T@U) (arg10@@1 Real) ) (!  (=> (and (and (and (and (and (= (type arg1@@14) RefType) (= (type arg3@@6) RefType)) (= (type arg5@@4) RefType)) (= (type arg7@@4) RefType)) (= (type arg8@@4) RefType)) (= (type arg9@@4) RefType)) (= (|wand#sm| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1) (WandMaskField (|wand#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1))))
 :qid |stdinbpl.539:15|
 :skolemid |86|
 :pattern ( (WandMaskField (|wand#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1)))
)))
(assert  (and (and (and (and (forall ((arg0@@27 T@T) ) (! (= (Ctor (MultiSetType arg0@@27)) 13)
 :qid |ctor:MultiSetType|
)) (forall ((arg0@@28 T@T) ) (! (= (MultiSetTypeInv0 (MultiSetType arg0@@28)) arg0@@28)
 :qid |typeInv:MultiSetTypeInv0|
 :pattern ( (MultiSetType arg0@@28))
))) (forall ((arg0@@29 T@U) (arg1@@15 T@U) ) (! (let ((T (MultiSetTypeInv0 (type arg0@@29))))
(= (type (|MultiSet#Difference| arg0@@29 arg1@@15)) (MultiSetType T)))
 :qid |funType:MultiSet#Difference|
 :pattern ( (|MultiSet#Difference| arg0@@29 arg1@@15))
))) (forall ((arg0@@30 T@U) (arg1@@16 T@U) ) (! (let ((T@@0 (MultiSetTypeInv0 (type arg0@@30))))
(= (type (|MultiSet#Intersection| arg0@@30 arg1@@16)) (MultiSetType T@@0)))
 :qid |funType:MultiSet#Intersection|
 :pattern ( (|MultiSet#Intersection| arg0@@30 arg1@@16))
))) (forall ((arg0@@31 T@U) (arg1@@17 T@U) ) (! (let ((T@@1 (MultiSetTypeInv0 (type arg0@@31))))
(= (type (|MultiSet#Union| arg0@@31 arg1@@17)) (MultiSetType T@@1)))
 :qid |funType:MultiSet#Union|
 :pattern ( (|MultiSet#Union| arg0@@31 arg1@@17))
))))
(assert (forall ((a T@U) (b T@U) ) (! (let ((T@@2 (MultiSetTypeInv0 (type a))))
 (=> (and (= (type a) (MultiSetType T@@2)) (= (type b) (MultiSetType T@@2))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a b)) (|MultiSet#Card| (|MultiSet#Difference| b a))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a b)))) (|MultiSet#Card| (|MultiSet#Union| a b))) (= (|MultiSet#Card| (|MultiSet#Difference| a b)) (- (|MultiSet#Card| a) (|MultiSet#Card| (|MultiSet#Intersection| a b)))))))
 :qid |stdinbpl.490:18|
 :skolemid |74|
 :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a b)))
)))
(assert (forall ((arg1@@18 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@5 Real) (arg5@@5 T@U) (arg6@@5 Real) (arg7@@5 T@U) (arg8@@5 T@U) (arg9@@5 T@U) (arg10@@2 Real) ) (!  (=> (and (and (and (and (and (= (type arg1@@18) RefType) (= (type arg3@@7) RefType)) (= (type arg5@@5) RefType)) (= (type arg7@@5) RefType)) (= (type arg8@@5) RefType)) (= (type arg9@@5) RefType)) (not (IsPredicateField (wand arg1@@18 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@2))))
 :qid |stdinbpl.531:15|
 :skolemid |84|
 :pattern ( (wand arg1@@18 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@2))
)))
(assert (forall ((arg1@@19 T@U) (arg2@@10 Real) (arg3@@8 T@U) (arg4@@6 Real) (arg5@@6 T@U) (arg6@@6 Real) (arg7@@6 T@U) (arg8@@6 T@U) (arg9@@6 T@U) (arg10@@3 Real) ) (!  (=> (and (and (and (and (and (= (type arg1@@19) RefType) (= (type arg3@@8) RefType)) (= (type arg5@@6) RefType)) (= (type arg7@@6) RefType)) (= (type arg8@@6) RefType)) (= (type arg9@@6) RefType)) (not (IsPredicateField (|wand#ft| arg1@@19 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@3))))
 :qid |stdinbpl.535:15|
 :skolemid |85|
 :pattern ( (|wand#ft| arg1@@19 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@3))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (Ctor PredicateType_pType) 14) (forall ((arg0@@32 T@U) (arg1@@20 T@U) (arg2@@11 T@U) ) (! (= (type (p_1 arg0@@32 arg1@@20 arg2@@11)) (FieldType PredicateType_pType FrameTypeType))
 :qid |funType:p_1|
 :pattern ( (p_1 arg0@@32 arg1@@20 arg2@@11))
))))
(assert (forall ((x@@8 T@U) (y@@1 T@U) (z@@0 T@U) ) (!  (=> (and (and (= (type x@@8) RefType) (= (type y@@1) RefType)) (= (type z@@0) RefType)) (IsPredicateField (p_1 x@@8 y@@1 z@@0)))
 :qid |stdinbpl.754:15|
 :skolemid |90|
 :pattern ( (p_1 x@@8 y@@1 z@@0))
)))
(assert (forall ((Heap@@0 T@U) (x@@9 T@U) (y@@2 T@U) (z@@1 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type x@@9) RefType)) (= (type y@@2) RefType)) (= (type z@@1) RefType)) (|p#everUsed| (p_1 x@@9 y@@2 z@@1)))
 :qid |stdinbpl.773:15|
 :skolemid |94|
 :pattern ( (|p#trigger| Heap@@0 (p_1 x@@9 y@@2 z@@1)))
)))
(assert (forall ((x@@10 T@U) (y@@3 T@U) (z@@2 T@U) ) (!  (=> (and (and (= (type x@@10) RefType) (= (type y@@3) RefType)) (= (type z@@2) RefType)) (= (getPredWandId (p_1 x@@10 y@@3 z@@2)) 0))
 :qid |stdinbpl.758:15|
 :skolemid |91|
 :pattern ( (p_1 x@@10 y@@3 z@@2))
)))
(assert (forall ((a@@0 Int) (b@@0 Int) ) (!  (or (= (|Math#min| a@@0 b@@0) a@@0) (= (|Math#min| a@@0 b@@0) b@@0))
 :qid |stdinbpl.421:15|
 :skolemid |53|
 :pattern ( (|Math#min| a@@0 b@@0))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@33 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@33))))
(= (type (PredicateMaskField arg0@@33)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@33))
))))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@1 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@2 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@4 T@U) ) (! (let ((T@@3 (type y@@4)))
 (=> (and (and (= (type a@@1) (MultiSetType T@@3)) (= (type b@@1) (MultiSetType T@@3))) (<= (|MultiSet#Select| a@@1 y@@4) (|MultiSet#Select| b@@1 y@@4))) (= (|MultiSet#Select| (|MultiSet#Difference| a@@1 b@@1) y@@4) 0)))
 :qid |stdinbpl.488:18|
 :skolemid |73|
 :pattern ( (|MultiSet#Difference| a@@1 b@@1) (|MultiSet#Select| b@@1 y@@4) (|MultiSet#Select| a@@1 y@@4))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@34 T@T) (arg1@@21 T@T) ) (! (= (Ctor (MapType2Type arg0@@34 arg1@@21)) 15)
 :qid |ctor:MapType2Type|
)) (forall ((arg0@@35 T@T) (arg1@@22 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@35 arg1@@22)) arg0@@35)
 :qid |typeInv:MapType2TypeInv0|
 :pattern ( (MapType2Type arg0@@35 arg1@@22))
))) (forall ((arg0@@36 T@T) (arg1@@23 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@36 arg1@@23)) arg1@@23)
 :qid |typeInv:MapType2TypeInv1|
 :pattern ( (MapType2Type arg0@@36 arg1@@23))
))) (forall ((arg0@@37 T@U) (arg1@@24 T@U) ) (! (let ((aVar1@@2 (MapType2TypeInv1 (type arg0@@37))))
(= (type (MapType2Select arg0@@37 arg1@@24)) aVar1@@2))
 :qid |funType:MapType2Select|
 :pattern ( (MapType2Select arg0@@37 arg1@@24))
))) (forall ((arg0@@38 T@U) (arg1@@25 T@U) (arg2@@12 T@U) ) (! (let ((aVar1@@3 (type arg2@@12)))
(let ((aVar0@@1 (type arg1@@25)))
(= (type (MapType2Store arg0@@38 arg1@@25 arg2@@12)) (MapType2Type aVar0@@1 aVar1@@3))))
 :qid |funType:MapType2Store|
 :pattern ( (MapType2Store arg0@@38 arg1@@25 arg2@@12))
))) (forall ((m@@7 T@U) (x0@@7 T@U) (val@@7 T@U) ) (! (let ((aVar1@@4 (MapType2TypeInv1 (type m@@7))))
 (=> (= (type val@@7) aVar1@@4) (= (MapType2Select (MapType2Store m@@7 x0@@7 val@@7) x0@@7) val@@7)))
 :qid |mapAx0:MapType2Select|
 :weight 0
))) (and (forall ((val@@8 T@U) (m@@8 T@U) (x0@@8 T@U) (y0@@5 T@U) ) (!  (or (= x0@@8 y0@@5) (= (MapType2Select (MapType2Store m@@8 x0@@8 val@@8) y0@@5) (MapType2Select m@@8 y0@@5)))
 :qid |mapAx1:MapType2Select:0|
 :weight 0
)) (forall ((val@@9 T@U) (m@@9 T@U) (x0@@9 T@U) (y0@@6 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@9 x0@@9 val@@9) y0@@6) (MapType2Select m@@9 y0@@6)))
 :qid |mapAx2:MapType2Select|
 :weight 0
)))) (forall ((arg0@@39 T@U) (arg1@@26 T@U) ) (! (let ((T@@4 (MapType2TypeInv0 (type arg0@@39))))
(= (type (|Set#Union| arg0@@39 arg1@@26)) (MapType2Type T@@4 boolType)))
 :qid |funType:Set#Union|
 :pattern ( (|Set#Union| arg0@@39 arg1@@26))
))))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (let ((T@@5 (MapType2TypeInv0 (type a@@2))))
 (=> (and (= (type a@@2) (MapType2Type T@@5 boolType)) (= (type b@@2) (MapType2Type T@@5 boolType))) (= (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2) (|Set#Union| a@@2 b@@2))))
 :qid |stdinbpl.373:18|
 :skolemid |38|
 :pattern ( (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2))
)))
(assert (forall ((arg0@@40 T@U) (arg1@@27 T@U) ) (! (let ((T@@6 (MapType2TypeInv0 (type arg0@@40))))
(= (type (|Set#Intersection| arg0@@40 arg1@@27)) (MapType2Type T@@6 boolType)))
 :qid |funType:Set#Intersection|
 :pattern ( (|Set#Intersection| arg0@@40 arg1@@27))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (let ((T@@7 (MapType2TypeInv0 (type a@@3))))
 (=> (and (= (type a@@3) (MapType2Type T@@7 boolType)) (= (type b@@3) (MapType2Type T@@7 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@3 b@@3) b@@3) (|Set#Intersection| a@@3 b@@3))))
 :qid |stdinbpl.377:18|
 :skolemid |40|
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@3 b@@3) b@@3))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (let ((T@@8 (MultiSetTypeInv0 (type a@@4))))
 (=> (and (= (type a@@4) (MultiSetType T@@8)) (= (type b@@4) (MultiSetType T@@8))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@4 b@@4) b@@4) (|MultiSet#Intersection| a@@4 b@@4))))
 :qid |stdinbpl.479:18|
 :skolemid |70|
 :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@4 b@@4) b@@4))
)))
(assert (forall ((arg0@@41 T@U) (arg1@@28 T@U) (arg2@@13 T@U) ) (! (= (type (|p#sm| arg0@@41 arg1@@28 arg2@@13)) (FieldType PredicateType_pType (MapType1Type RefType boolType)))
 :qid |funType:p#sm|
 :pattern ( (|p#sm| arg0@@41 arg1@@28 arg2@@13))
)))
(assert (forall ((x@@11 T@U) (y@@5 T@U) (z@@3 T@U) ) (!  (=> (and (and (= (type x@@11) RefType) (= (type y@@5) RefType)) (= (type z@@3) RefType)) (= (PredicateMaskField (p_1 x@@11 y@@5 z@@3)) (|p#sm| x@@11 y@@5 z@@3)))
 :qid |stdinbpl.750:15|
 :skolemid |89|
 :pattern ( (PredicateMaskField (p_1 x@@11 y@@5 z@@3)))
)))
(assert (forall ((arg0@@42 T@U) ) (! (let ((T@@9 (type arg0@@42)))
(= (type (|Set#Singleton| arg0@@42)) (MapType2Type T@@9 boolType)))
 :qid |funType:Set#Singleton|
 :pattern ( (|Set#Singleton| arg0@@42))
)))
(assert (forall ((r T@U) (o T@U) ) (! (let ((T@@10 (type r)))
 (=> (= (type o) T@@10) (= (U_2_bool (MapType2Select (|Set#Singleton| r) o)) (= r o))))
 :qid |stdinbpl.342:18|
 :skolemid |27|
 :pattern ( (MapType2Select (|Set#Singleton| r) o))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) ) (! (let ((T@@11 (MapType2TypeInv0 (type a@@5))))
 (=> (and (= (type a@@5) (MapType2Type T@@11 boolType)) (= (type b@@5) (MapType2Type T@@11 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@5 b@@5)) (|Set#Card| (|Set#Intersection| a@@5 b@@5))) (+ (|Set#Card| a@@5) (|Set#Card| b@@5)))))
 :qid |stdinbpl.381:18|
 :skolemid |42|
 :pattern ( (|Set#Card| (|Set#Union| a@@5 b@@5)))
 :pattern ( (|Set#Card| (|Set#Intersection| a@@5 b@@5)))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@3 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((x@@12 T@U) (y@@6 T@U) (z@@4 T@U) (x2_1 T@U) (y2 T@U) (z2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type x@@12) RefType) (= (type y@@6) RefType)) (= (type z@@4) RefType)) (= (type x2_1) RefType)) (= (type y2) RefType)) (= (type z2) RefType)) (= (p_1 x@@12 y@@6 z@@4) (p_1 x2_1 y2 z2))) (and (= x@@12 x2_1) (and (= y@@6 y2) (= z@@4 z2))))
 :qid |stdinbpl.764:15|
 :skolemid |92|
 :pattern ( (p_1 x@@12 y@@6 z@@4) (p_1 x2_1 y2 z2))
)))
(assert (forall ((x@@13 T@U) (y@@7 T@U) (z@@5 T@U) (x2_1@@0 T@U) (y2@@0 T@U) (z2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type x@@13) RefType) (= (type y@@7) RefType)) (= (type z@@5) RefType)) (= (type x2_1@@0) RefType)) (= (type y2@@0) RefType)) (= (type z2@@0) RefType)) (= (|p#sm| x@@13 y@@7 z@@5) (|p#sm| x2_1@@0 y2@@0 z2@@0))) (and (= x@@13 x2_1@@0) (and (= y@@7 y2@@0) (= z@@5 z2@@0))))
 :qid |stdinbpl.768:15|
 :skolemid |93|
 :pattern ( (|p#sm| x@@13 y@@7 z@@5) (|p#sm| x2_1@@0 y2@@0 z2@@0))
)))
(assert (forall ((a@@6 Int) ) (!  (=> (<= 0 a@@6) (= (|Math#clip| a@@6) a@@6))
 :qid |stdinbpl.424:15|
 :skolemid |54|
 :pattern ( (|Math#clip| a@@6))
)))
(assert (forall ((a@@7 T@U) (b@@6 T@U) (o@@0 T@U) ) (! (let ((T@@12 (type o@@0)))
 (=> (and (= (type a@@7) (MultiSetType T@@12)) (= (type b@@6) (MultiSetType T@@12))) (= (|MultiSet#Select| (|MultiSet#Intersection| a@@7 b@@6) o@@0) (|Math#min| (|MultiSet#Select| a@@7 o@@0) (|MultiSet#Select| b@@6 o@@0)))))
 :qid |stdinbpl.475:18|
 :skolemid |69|
 :pattern ( (|MultiSet#Select| (|MultiSet#Intersection| a@@7 b@@6) o@@0))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@4 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((arg0@@43 T@U) (arg1@@29 T@U) ) (! (let ((T@@13 (type arg1@@29)))
(= (type (|MultiSet#UnionOne| arg0@@43 arg1@@29)) (MultiSetType T@@13)))
 :qid |funType:MultiSet#UnionOne|
 :pattern ( (|MultiSet#UnionOne| arg0@@43 arg1@@29))
)))
(assert (forall ((a@@8 T@U) (x@@14 T@U) ) (! (let ((T@@14 (type x@@14)))
 (=> (= (type a@@8) (MultiSetType T@@14)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@8 x@@14)) (+ (|MultiSet#Card| a@@8) 1))))
 :qid |stdinbpl.461:18|
 :skolemid |65|
 :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@8 x@@14)))
 :pattern ( (|MultiSet#UnionOne| a@@8 x@@14) (|MultiSet#Card| a@@8))
)))
(assert (forall ((a@@9 T@U) (b@@7 T@U) ) (! (let ((T@@15 (MultiSetTypeInv0 (type a@@9))))
 (=> (and (= (type a@@9) (MultiSetType T@@15)) (= (type b@@7) (MultiSetType T@@15))) (= (|MultiSet#Disjoint| a@@9 b@@7) (forall ((o@@1 T@U) ) (!  (=> (= (type o@@1) T@@15) (or (= (|MultiSet#Select| a@@9 o@@1) 0) (= (|MultiSet#Select| b@@7 o@@1) 0)))
 :qid |stdinbpl.511:39|
 :skolemid |80|
 :pattern ( (|MultiSet#Select| a@@9 o@@1))
 :pattern ( (|MultiSet#Select| b@@7 o@@1))
)))))
 :qid |stdinbpl.510:18|
 :skolemid |81|
 :pattern ( (|MultiSet#Disjoint| a@@9 b@@7))
)))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.319:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((arg0@@44 T@U) ) (! (let ((T@@16 (type arg0@@44)))
(= (type (|MultiSet#Singleton| arg0@@44)) (MultiSetType T@@16)))
 :qid |funType:MultiSet#Singleton|
 :pattern ( (|MultiSet#Singleton| arg0@@44))
)))
(assert (forall ((r@@0 T@U) ) (!  (and (= (|MultiSet#Card| (|MultiSet#Singleton| r@@0)) 1) (= (|MultiSet#Select| (|MultiSet#Singleton| r@@0) r@@0) 1))
 :qid |stdinbpl.453:18|
 :skolemid |62|
 :pattern ( (|MultiSet#Singleton| r@@0))
)))
(assert  (not (IsPredicateField f_7)))
(assert  (not (IsWandField f_7)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@5 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((a@@10 T@U) (b@@8 T@U) ) (! (let ((T@@17 (MapType2TypeInv0 (type a@@10))))
 (=> (and (= (type a@@10) (MapType2Type T@@17 boolType)) (= (type b@@8) (MapType2Type T@@17 boolType))) (= (|Set#Equal| a@@10 b@@8) (forall ((o@@2 T@U) ) (!  (=> (= (type o@@2) T@@17) (= (U_2_bool (MapType2Select a@@10 o@@2)) (U_2_bool (MapType2Select b@@8 o@@2))))
 :qid |stdinbpl.406:31|
 :skolemid |48|
 :pattern ( (MapType2Select a@@10 o@@2))
 :pattern ( (MapType2Select b@@8 o@@2))
)))))
 :qid |stdinbpl.405:17|
 :skolemid |49|
 :pattern ( (|Set#Equal| a@@10 b@@8))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert (forall ((a@@11 T@U) (b@@9 T@U) ) (! (let ((T@@18 (MultiSetTypeInv0 (type a@@11))))
 (=> (and (= (type a@@11) (MultiSetType T@@18)) (= (type b@@9) (MultiSetType T@@18))) (= (|MultiSet#Card| (|MultiSet#Union| a@@11 b@@9)) (+ (|MultiSet#Card| a@@11) (|MultiSet#Card| b@@9)))))
 :qid |stdinbpl.471:18|
 :skolemid |68|
 :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@11 b@@9)))
 :pattern ( (|MultiSet#Card| a@@11) (|MultiSet#Union| a@@11 b@@9))
 :pattern ( (|MultiSet#Card| b@@9) (|MultiSet#Union| a@@11 b@@9))
)))
(assert  (and (forall ((arg0@@45 Real) (arg1@@30 T@U) ) (! (= (type (ConditionalFrame arg0@@45 arg1@@30)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@45 arg1@@30))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.307:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@31 T@U) (arg2@@14 Real) (arg3@@9 T@U) (arg4@@7 Real) (arg5@@7 T@U) (arg6@@7 Real) (arg7@@7 T@U) (arg8@@7 T@U) (arg9@@7 T@U) (arg10@@4 Real) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) (arg5_2 T@U) (arg6_2 Real) (arg7_2 T@U) (arg8_2 T@U) (arg9_2 T@U) (arg10_2 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@31) RefType) (= (type arg3@@9) RefType)) (= (type arg5@@7) RefType)) (= (type arg7@@7) RefType)) (= (type arg8@@7) RefType)) (= (type arg9@@7) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (type arg7_2) RefType)) (= (type arg8_2) RefType)) (= (type arg9_2) RefType)) (= (wand arg1@@31 arg2@@14 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2))) (and (= arg1@@31 arg1_2) (and (= arg2@@14 arg2_2) (and (= arg3@@9 arg3_2) (and (= arg4@@7 arg4_2) (and (= arg5@@7 arg5_2) (and (= arg6@@7 arg6_2) (and (= arg7@@7 arg7_2) (and (= arg8@@7 arg8_2) (and (= arg9@@7 arg9_2) (= arg10@@4 arg10_2)))))))))))
 :qid |stdinbpl.547:15|
 :skolemid |88|
 :pattern ( (wand arg1@@31 arg2@@14 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2))
)))
(assert (forall ((a@@12 T@U) (b@@10 T@U) (o@@3 T@U) ) (! (let ((T@@19 (type o@@3)))
 (=> (and (= (type a@@12) (MapType2Type T@@19 boolType)) (= (type b@@10) (MapType2Type T@@19 boolType))) (= (U_2_bool (MapType2Select (|Set#Intersection| a@@12 b@@10) o@@3))  (and (U_2_bool (MapType2Select a@@12 o@@3)) (U_2_bool (MapType2Select b@@10 o@@3))))))
 :qid |stdinbpl.370:18|
 :skolemid |37|
 :pattern ( (MapType2Select (|Set#Intersection| a@@12 b@@10) o@@3))
 :pattern ( (|Set#Intersection| a@@12 b@@10) (MapType2Select a@@12 o@@3))
 :pattern ( (|Set#Intersection| a@@12 b@@10) (MapType2Select b@@10 o@@3))
)))
(assert (forall ((arg0@@46 T@U) (arg1@@32 T@U) ) (! (let ((T@@20 (MapType2TypeInv0 (type arg0@@46))))
(= (type (|Set#Difference| arg0@@46 arg1@@32)) (MapType2Type T@@20 boolType)))
 :qid |funType:Set#Difference|
 :pattern ( (|Set#Difference| arg0@@46 arg1@@32))
)))
(assert (forall ((a@@13 T@U) (b@@11 T@U) (o@@4 T@U) ) (! (let ((T@@21 (type o@@4)))
 (=> (and (= (type a@@13) (MapType2Type T@@21 boolType)) (= (type b@@11) (MapType2Type T@@21 boolType))) (= (U_2_bool (MapType2Select (|Set#Difference| a@@13 b@@11) o@@4))  (and (U_2_bool (MapType2Select a@@13 o@@4)) (not (U_2_bool (MapType2Select b@@11 o@@4)))))))
 :qid |stdinbpl.385:18|
 :skolemid |43|
 :pattern ( (MapType2Select (|Set#Difference| a@@13 b@@11) o@@4))
 :pattern ( (|Set#Difference| a@@13 b@@11) (MapType2Select a@@13 o@@4))
)))
(assert (forall ((a@@14 T@U) (b@@12 T@U) ) (! (let ((T@@22 (MapType2TypeInv0 (type a@@14))))
 (=> (and (and (= (type a@@14) (MapType2Type T@@22 boolType)) (= (type b@@12) (MapType2Type T@@22 boolType))) (|Set#Equal| a@@14 b@@12)) (= a@@14 b@@12)))
 :qid |stdinbpl.407:17|
 :skolemid |50|
 :pattern ( (|Set#Equal| a@@14 b@@12))
)))
(assert (forall ((a@@15 T@U) (b@@13 T@U) ) (! (let ((T@@23 (MultiSetTypeInv0 (type a@@15))))
 (=> (and (and (= (type a@@15) (MultiSetType T@@23)) (= (type b@@13) (MultiSetType T@@23))) (|MultiSet#Equal| a@@15 b@@13)) (= a@@15 b@@13)))
 :qid |stdinbpl.506:17|
 :skolemid |79|
 :pattern ( (|MultiSet#Equal| a@@15 b@@13))
)))
(assert (forall ((arg0@@47 T@U) (arg1@@33 T@U) ) (! (let ((T@@24 (type arg1@@33)))
(= (type (|Set#UnionOne| arg0@@47 arg1@@33)) (MapType2Type T@@24 boolType)))
 :qid |funType:Set#UnionOne|
 :pattern ( (|Set#UnionOne| arg0@@47 arg1@@33))
)))
(assert (forall ((a@@16 T@U) (x@@15 T@U) (y@@8 T@U) ) (! (let ((T@@25 (type x@@15)))
 (=> (and (and (= (type a@@16) (MapType2Type T@@25 boolType)) (= (type y@@8) T@@25)) (U_2_bool (MapType2Select a@@16 y@@8))) (U_2_bool (MapType2Select (|Set#UnionOne| a@@16 x@@15) y@@8))))
 :qid |stdinbpl.350:18|
 :skolemid |31|
 :pattern ( (|Set#UnionOne| a@@16 x@@15) (MapType2Select a@@16 y@@8))
)))
(assert (forall ((a@@17 T@U) (b@@14 T@U) (y@@9 T@U) ) (! (let ((T@@26 (type y@@9)))
 (=> (and (and (= (type a@@17) (MapType2Type T@@26 boolType)) (= (type b@@14) (MapType2Type T@@26 boolType))) (U_2_bool (MapType2Select a@@17 y@@9))) (U_2_bool (MapType2Select (|Set#Union| a@@17 b@@14) y@@9))))
 :qid |stdinbpl.360:18|
 :skolemid |35|
 :pattern ( (|Set#Union| a@@17 b@@14) (MapType2Select a@@17 y@@9))
)))
(assert (forall ((a@@18 T@U) (b@@15 T@U) (y@@10 T@U) ) (! (let ((T@@27 (type y@@10)))
 (=> (and (and (= (type a@@18) (MapType2Type T@@27 boolType)) (= (type b@@15) (MapType2Type T@@27 boolType))) (U_2_bool (MapType2Select b@@15 y@@10))) (U_2_bool (MapType2Select (|Set#Union| a@@18 b@@15) y@@10))))
 :qid |stdinbpl.362:18|
 :skolemid |36|
 :pattern ( (|Set#Union| a@@18 b@@15) (MapType2Select b@@15 y@@10))
)))
(assert (forall ((ms T@U) (x@@16 T@U) ) (! (let ((T@@28 (type x@@16)))
 (=> (= (type ms) (MultiSetType T@@28)) (>= (|MultiSet#Select| ms x@@16) 0)))
 :qid |stdinbpl.437:18|
 :skolemid |56|
 :pattern ( (|MultiSet#Select| ms x@@16))
)))
(assert (forall ((a@@19 T@U) (x@@17 T@U) (o@@5 T@U) ) (! (let ((T@@29 (type x@@17)))
 (=> (and (= (type a@@19) (MapType2Type T@@29 boolType)) (= (type o@@5) T@@29)) (= (U_2_bool (MapType2Select (|Set#UnionOne| a@@19 x@@17) o@@5))  (or (= o@@5 x@@17) (U_2_bool (MapType2Select a@@19 o@@5))))))
 :qid |stdinbpl.346:18|
 :skolemid |29|
 :pattern ( (MapType2Select (|Set#UnionOne| a@@19 x@@17) o@@5))
)))
(assert (forall ((a@@20 T@U) (b@@16 T@U) (y@@11 T@U) ) (! (let ((T@@30 (type y@@11)))
 (=> (and (and (= (type a@@20) (MapType2Type T@@30 boolType)) (= (type b@@16) (MapType2Type T@@30 boolType))) (U_2_bool (MapType2Select b@@16 y@@11))) (not (U_2_bool (MapType2Select (|Set#Difference| a@@20 b@@16) y@@11)))))
 :qid |stdinbpl.387:18|
 :skolemid |44|
 :pattern ( (|Set#Difference| a@@20 b@@16) (MapType2Select b@@16 y@@11))
)))
(assert (forall ((a@@21 T@U) (b@@17 T@U) ) (! (let ((T@@31 (MapType2TypeInv0 (type a@@21))))
 (=> (and (= (type a@@21) (MapType2Type T@@31 boolType)) (= (type b@@17) (MapType2Type T@@31 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@21 b@@17)) (|Set#Card| (|Set#Difference| b@@17 a@@21))) (|Set#Card| (|Set#Intersection| a@@21 b@@17))) (|Set#Card| (|Set#Union| a@@21 b@@17))) (= (|Set#Card| (|Set#Difference| a@@21 b@@17)) (- (|Set#Card| a@@21) (|Set#Card| (|Set#Intersection| a@@21 b@@17)))))))
 :qid |stdinbpl.389:18|
 :skolemid |45|
 :pattern ( (|Set#Card| (|Set#Difference| a@@21 b@@17)))
)))
(assert (forall ((s T@U) ) (! (let ((T@@32 (MapType2TypeInv0 (type s))))
 (=> (= (type s) (MapType2Type T@@32 boolType)) (<= 0 (|Set#Card| s))))
 :qid |stdinbpl.332:18|
 :skolemid |22|
 :pattern ( (|Set#Card| s))
)))
(assert (forall ((s@@0 T@U) ) (! (let ((T@@33 (MultiSetTypeInv0 (type s@@0))))
 (=> (= (type s@@0) (MultiSetType T@@33)) (<= 0 (|MultiSet#Card| s@@0))))
 :qid |stdinbpl.440:18|
 :skolemid |57|
 :pattern ( (|MultiSet#Card| s@@0))
)))
(assert (forall ((T@@34 T@T) ) (! (= (type (|MultiSet#Empty| T@@34)) (MultiSetType T@@34))
 :qid |funType:MultiSet#Empty|
 :pattern ( (|MultiSet#Empty| T@@34))
)))
(assert (forall ((o@@6 T@U) ) (! (let ((T@@35 (type o@@6)))
(= (|MultiSet#Select| (|MultiSet#Empty| T@@35) o@@6) 0))
 :qid |stdinbpl.445:18|
 :skolemid |58|
 :pattern ( (let ((T@@35 (type o@@6)))
(|MultiSet#Select| (|MultiSet#Empty| T@@35) o@@6)))
)))
(assert (forall ((a@@22 T@U) (x@@18 T@U) ) (! (let ((T@@36 (type x@@18)))
 (=> (= (type a@@22) (MapType2Type T@@36 boolType)) (U_2_bool (MapType2Select (|Set#UnionOne| a@@22 x@@18) x@@18))))
 :qid |stdinbpl.348:18|
 :skolemid |30|
 :pattern ( (|Set#UnionOne| a@@22 x@@18))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@6 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@7 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@7 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((a@@23 T@U) (x@@19 T@U) ) (! (let ((T@@37 (type x@@19)))
 (=> (and (= (type a@@23) (MapType2Type T@@37 boolType)) (U_2_bool (MapType2Select a@@23 x@@19))) (= (|Set#Card| (|Set#UnionOne| a@@23 x@@19)) (|Set#Card| a@@23))))
 :qid |stdinbpl.352:18|
 :skolemid |32|
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@23 x@@19)))
)))
(assert (forall ((a@@24 T@U) (x@@20 T@U) ) (! (let ((T@@38 (type x@@20)))
 (=> (= (type a@@24) (MultiSetType T@@38)) (and (> (|MultiSet#Select| (|MultiSet#UnionOne| a@@24 x@@20) x@@20) 0) (> (|MultiSet#Card| (|MultiSet#UnionOne| a@@24 x@@20)) 0))))
 :qid |stdinbpl.464:18|
 :skolemid |66|
 :pattern ( (|MultiSet#UnionOne| a@@24 x@@20))
)))
(assert (forall ((r@@1 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@1)) 1)
 :qid |stdinbpl.343:18|
 :skolemid |28|
 :pattern ( (|Set#Card| (|Set#Singleton| r@@1)))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((r@@2 T@U) ) (! (U_2_bool (MapType2Select (|Set#Singleton| r@@2) r@@2))
 :qid |stdinbpl.341:18|
 :skolemid |26|
 :pattern ( (|Set#Singleton| r@@2))
)))
(assert (forall ((a@@25 T@U) (b@@18 T@U) ) (! (let ((T@@39 (MapType2TypeInv0 (type a@@25))))
 (=> (and (= (type a@@25) (MapType2Type T@@39 boolType)) (= (type b@@18) (MapType2Type T@@39 boolType))) (= (|Set#Union| a@@25 (|Set#Union| a@@25 b@@18)) (|Set#Union| a@@25 b@@18))))
 :qid |stdinbpl.375:18|
 :skolemid |39|
 :pattern ( (|Set#Union| a@@25 (|Set#Union| a@@25 b@@18)))
)))
(assert (forall ((a@@26 T@U) (b@@19 T@U) ) (! (let ((T@@40 (MapType2TypeInv0 (type a@@26))))
 (=> (and (= (type a@@26) (MapType2Type T@@40 boolType)) (= (type b@@19) (MapType2Type T@@40 boolType))) (= (|Set#Intersection| a@@26 (|Set#Intersection| a@@26 b@@19)) (|Set#Intersection| a@@26 b@@19))))
 :qid |stdinbpl.379:18|
 :skolemid |41|
 :pattern ( (|Set#Intersection| a@@26 (|Set#Intersection| a@@26 b@@19)))
)))
(assert (forall ((a@@27 T@U) (b@@20 T@U) ) (! (let ((T@@41 (MultiSetTypeInv0 (type a@@27))))
 (=> (and (= (type a@@27) (MultiSetType T@@41)) (= (type b@@20) (MultiSetType T@@41))) (= (|MultiSet#Intersection| a@@27 (|MultiSet#Intersection| a@@27 b@@20)) (|MultiSet#Intersection| a@@27 b@@20))))
 :qid |stdinbpl.481:18|
 :skolemid |71|
 :pattern ( (|MultiSet#Intersection| a@@27 (|MultiSet#Intersection| a@@27 b@@20)))
)))
(assert (forall ((s@@1 T@U) ) (! (let ((T@@42 (MultiSetTypeInv0 (type s@@1))))
 (=> (= (type s@@1) (MultiSetType T@@42)) (and (= (= (|MultiSet#Card| s@@1) 0) (= s@@1 (|MultiSet#Empty| T@@42))) (=> (not (= (|MultiSet#Card| s@@1) 0)) (exists ((x@@21 T@U) ) (!  (and (= (type x@@21) T@@42) (< 0 (|MultiSet#Select| s@@1 x@@21)))
 :qid |stdinbpl.448:38|
 :skolemid |59|
 :no-pattern (type x@@21)
 :no-pattern (U_2_int x@@21)
 :no-pattern (U_2_bool x@@21)
))))))
 :qid |stdinbpl.446:18|
 :skolemid |60|
 :pattern ( (|MultiSet#Card| s@@1))
)))
(assert (forall ((r@@3 T@U) (o@@7 T@U) ) (! (let ((T@@43 (type r@@3)))
 (=> (= (type o@@7) T@@43) (and (= (= (|MultiSet#Select| (|MultiSet#Singleton| r@@3) o@@7) 1) (= r@@3 o@@7)) (= (= (|MultiSet#Select| (|MultiSet#Singleton| r@@3) o@@7) 0) (not (= r@@3 o@@7))))))
 :qid |stdinbpl.451:18|
 :skolemid |61|
 :pattern ( (|MultiSet#Select| (|MultiSet#Singleton| r@@3) o@@7))
)))
(assert (forall ((o@@8 T@U) (f T@U) (Heap@@8 T@U) ) (!  (=> (and (and (and (= (type o@@8) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@8) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@8 o@@8 $allocated))) (U_2_bool (MapType0Select Heap@@8 (MapType0Select Heap@@8 o@@8 f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@8 o@@8 f))
)))
(assert (forall ((a@@28 T@U) (b@@21 T@U) (o@@9 T@U) ) (! (let ((T@@44 (type o@@9)))
 (=> (and (= (type a@@28) (MultiSetType T@@44)) (= (type b@@21) (MultiSetType T@@44))) (= (|MultiSet#Select| (|MultiSet#Union| a@@28 b@@21) o@@9) (+ (|MultiSet#Select| a@@28 o@@9) (|MultiSet#Select| b@@21 o@@9)))))
 :qid |stdinbpl.469:18|
 :skolemid |67|
 :pattern ( (|MultiSet#Select| (|MultiSet#Union| a@@28 b@@21) o@@9))
 :pattern ( (|MultiSet#Union| a@@28 b@@21) (|MultiSet#Select| a@@28 o@@9) (|MultiSet#Select| b@@21 o@@9))
)))
(assert (forall ((T@@45 T@T) ) (! (= (type (|Set#Empty| T@@45)) (MapType2Type T@@45 boolType))
 :qid |funType:Set#Empty|
 :pattern ( (|Set#Empty| T@@45))
)))
(assert (forall ((o@@10 T@U) ) (! (let ((T@@46 (type o@@10)))
 (not (U_2_bool (MapType2Select (|Set#Empty| T@@46) o@@10))))
 :qid |stdinbpl.335:18|
 :skolemid |23|
 :pattern ( (let ((T@@46 (type o@@10)))
(MapType2Select (|Set#Empty| T@@46) o@@10)))
)))
(assert (forall ((r@@4 T@U) ) (! (let ((T@@47 (type r@@4)))
(= (|MultiSet#Singleton| r@@4) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@47) r@@4)))
 :qid |stdinbpl.454:18|
 :skolemid |63|
 :pattern ( (|MultiSet#Singleton| r@@4))
)))
(assert (forall ((a@@29 Int) (b@@22 Int) ) (! (= (<= a@@29 b@@22) (= (|Math#min| a@@29 b@@22) a@@29))
 :qid |stdinbpl.419:15|
 :skolemid |51|
 :pattern ( (|Math#min| a@@29 b@@22))
)))
(assert (forall ((a@@30 Int) (b@@23 Int) ) (! (= (<= b@@23 a@@30) (= (|Math#min| a@@30 b@@23) b@@23))
 :qid |stdinbpl.420:15|
 :skolemid |52|
 :pattern ( (|Math#min| a@@30 b@@23))
)))
(assert (forall ((s@@2 T@U) ) (! (let ((T@@48 (MapType2TypeInv0 (type s@@2))))
 (=> (= (type s@@2) (MapType2Type T@@48 boolType)) (and (= (= (|Set#Card| s@@2) 0) (= s@@2 (|Set#Empty| T@@48))) (=> (not (= (|Set#Card| s@@2) 0)) (exists ((x@@22 T@U) ) (!  (and (= (type x@@22) T@@48) (U_2_bool (MapType2Select s@@2 x@@22)))
 :qid |stdinbpl.338:33|
 :skolemid |24|
 :no-pattern (type x@@22)
 :no-pattern (U_2_int x@@22)
 :no-pattern (U_2_bool x@@22)
))))))
 :qid |stdinbpl.336:18|
 :skolemid |25|
 :pattern ( (|Set#Card| s@@2))
)))
(assert (forall ((Heap@@9 T@U) (o@@11 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type o@@11) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@9 (MapType0Store Heap@@9 o@@11 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@9 o@@11 f_3 v))
)))
(assert (forall ((a@@31 T@U) (b@@24 T@U) ) (! (let ((T@@49 (MapType2TypeInv0 (type a@@31))))
 (=> (and (= (type a@@31) (MapType2Type T@@49 boolType)) (= (type b@@24) (MapType2Type T@@49 boolType))) (= (|Set#Subset| a@@31 b@@24) (forall ((o@@12 T@U) ) (!  (=> (and (= (type o@@12) T@@49) (U_2_bool (MapType2Select a@@31 o@@12))) (U_2_bool (MapType2Select b@@24 o@@12)))
 :qid |stdinbpl.398:32|
 :skolemid |46|
 :pattern ( (MapType2Select a@@31 o@@12))
 :pattern ( (MapType2Select b@@24 o@@12))
)))))
 :qid |stdinbpl.397:17|
 :skolemid |47|
 :pattern ( (|Set#Subset| a@@31 b@@24))
)))
(assert (forall ((a@@32 T@U) (x@@23 T@U) ) (! (let ((T@@50 (type x@@23)))
 (=> (and (= (type a@@32) (MapType2Type T@@50 boolType)) (not (U_2_bool (MapType2Select a@@32 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@32 x@@23)) (+ (|Set#Card| a@@32) 1))))
 :qid |stdinbpl.354:18|
 :skolemid |33|
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@32 x@@23)))
)))
(assert (forall ((a@@33 T@U) (b@@25 T@U) (o@@13 T@U) ) (! (let ((T@@51 (type o@@13)))
 (=> (and (= (type a@@33) (MultiSetType T@@51)) (= (type b@@25) (MultiSetType T@@51))) (= (|MultiSet#Select| (|MultiSet#Difference| a@@33 b@@25) o@@13) (|Math#clip| (- (|MultiSet#Select| a@@33 o@@13) (|MultiSet#Select| b@@25 o@@13))))))
 :qid |stdinbpl.486:18|
 :skolemid |72|
 :pattern ( (|MultiSet#Select| (|MultiSet#Difference| a@@33 b@@25) o@@13))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r@@5 T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r@@5))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r@@5) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r@@5 u))) (InsidePredicate p@@1 v_1@@0 r@@5 u)))))
 :qid |stdinbpl.314:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r@@5 u))
)))
(assert (forall ((a@@34 Int) ) (!  (=> (< a@@34 0) (= (|Math#clip| a@@34) 0))
 :qid |stdinbpl.425:15|
 :skolemid |55|
 :pattern ( (|Math#clip| a@@34))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((a@@35 T@U) (x@@24 T@U) (o@@14 T@U) ) (! (let ((T@@52 (type x@@24)))
 (=> (and (= (type a@@35) (MultiSetType T@@52)) (= (type o@@14) T@@52)) (= (|MultiSet#Select| (|MultiSet#UnionOne| a@@35 x@@24) o@@14) (ite (= x@@24 o@@14) (+ (|MultiSet#Select| a@@35 o@@14) 1) (|MultiSet#Select| a@@35 o@@14)))))
 :qid |stdinbpl.458:18|
 :skolemid |64|
 :pattern ( (|MultiSet#Select| (|MultiSet#UnionOne| a@@35 x@@24) o@@14))
 :pattern ( (|MultiSet#UnionOne| a@@35 x@@24) (|MultiSet#Select| a@@35 o@@14))
)))
(assert (forall ((a@@36 T@U) (b@@26 T@U) ) (! (let ((T@@53 (MultiSetTypeInv0 (type a@@36))))
 (=> (and (= (type a@@36) (MultiSetType T@@53)) (= (type b@@26) (MultiSetType T@@53))) (= (|MultiSet#Equal| a@@36 b@@26) (forall ((o@@15 T@U) ) (!  (=> (= (type o@@15) T@@53) (= (|MultiSet#Select| a@@36 o@@15) (|MultiSet#Select| b@@26 o@@15)))
 :qid |stdinbpl.504:36|
 :skolemid |77|
 :pattern ( (|MultiSet#Select| a@@36 o@@15))
 :pattern ( (|MultiSet#Select| b@@26 o@@15))
)))))
 :qid |stdinbpl.503:17|
 :skolemid |78|
 :pattern ( (|MultiSet#Equal| a@@36 b@@26))
)))
(assert (forall ((a@@37 T@U) (b@@27 T@U) ) (! (let ((T@@54 (MultiSetTypeInv0 (type a@@37))))
 (=> (and (= (type a@@37) (MultiSetType T@@54)) (= (type b@@27) (MultiSetType T@@54))) (= (|MultiSet#Subset| a@@37 b@@27) (forall ((o@@16 T@U) ) (!  (=> (= (type o@@16) T@@54) (<= (|MultiSet#Select| a@@37 o@@16) (|MultiSet#Select| b@@27 o@@16)))
 :qid |stdinbpl.500:37|
 :skolemid |75|
 :pattern ( (|MultiSet#Select| a@@37 o@@16))
 :pattern ( (|MultiSet#Select| b@@27 o@@16))
)))))
 :qid |stdinbpl.499:17|
 :skolemid |76|
 :pattern ( (|MultiSet#Subset| a@@37 b@@27))
)))
(assert (forall ((a@@38 T@U) (b@@28 T@U) (o@@17 T@U) ) (! (let ((T@@55 (type o@@17)))
 (=> (and (= (type a@@38) (MapType2Type T@@55 boolType)) (= (type b@@28) (MapType2Type T@@55 boolType))) (= (U_2_bool (MapType2Select (|Set#Union| a@@38 b@@28) o@@17))  (or (U_2_bool (MapType2Select a@@38 o@@17)) (U_2_bool (MapType2Select b@@28 o@@17))))))
 :qid |stdinbpl.358:18|
 :skolemid |34|
 :pattern ( (MapType2Select (|Set#Union| a@@38 b@@28) o@@17))
)))
(assert (forall ((arg1@@34 T@U) (arg2@@15 Real) (arg3@@10 T@U) (arg4@@8 Real) (arg5@@8 T@U) (arg6@@8 Real) (arg7@@8 T@U) (arg8@@8 T@U) (arg9@@8 T@U) (arg10@@5 Real) ) (!  (=> (and (and (and (and (and (= (type arg1@@34) RefType) (= (type arg3@@10) RefType)) (= (type arg5@@8) RefType)) (= (type arg7@@8) RefType)) (= (type arg8@@8) RefType)) (= (type arg9@@8) RefType)) (= (getPredWandId (wand arg1@@34 arg2@@15 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@5)) 1))
 :qid |stdinbpl.543:15|
 :skolemid |87|
 :pattern ( (wand arg1@@34 arg2@@15 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@5))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun q_1 () Real)
(declare-fun AssertMask@0 () T@U)
(declare-fun a_2 () T@U)
(declare-fun b_2 () T@U)
(declare-fun c () T@U)
(declare-fun AssertMask@1 () T@U)
(declare-fun Heap@@10 () T@U)
(declare-fun QPMask@11 () T@U)
(declare-fun WandDefLHSMask@3 () T@U)
(declare-fun WandDefLHSHeap@1 () T@U)
(declare-fun WandDefLHSMask@4 () T@U)
(declare-fun WandDefLHSMask@5 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun WandDefLHSMask@1 () T@U)
(declare-fun WandDefLHSMask@2 () T@U)
(declare-fun neverTriggered113 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs11 () T@U)
(declare-fun inv_10_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys11 () T@U)
(declare-fun inv_10_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs11 () T@U)
(declare-fun inv_10_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv104 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv105 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv106 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv107 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv108 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv109 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv110 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv111 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv112 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv113 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange113 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@10 () T@U)
(declare-fun xs1 () T@U)
(declare-fun ys1 () T@U)
(declare-fun zs1 () T@U)
(declare-fun xs2 () T@U)
(declare-fun ys2 () T@U)
(declare-fun zs2 () T@U)
(declare-fun x9_19 () Real)
(declare-fun x6_19 () T@U)
(declare-fun WandDefLHSMask@6 () T@U)
(declare-fun WandDefLHSHeap@2 () T@U)
(declare-fun x7_19 () T@U)
(declare-fun WandDefLHSMask@7 () T@U)
(declare-fun x8_19 () T@U)
(declare-fun WandDefLHSMask@8 () T@U)
(declare-fun x0_19 () T@U)
(declare-fun x1_19 () Real)
(declare-fun x2_19 () T@U)
(declare-fun x3_19 () Real)
(declare-fun x4_19 () T@U)
(declare-fun x5_19 () Real)
(declare-fun neverTriggered103 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs10 () T@U)
(declare-fun inv_9_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys10 () T@U)
(declare-fun inv_9_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs10 () T@U)
(declare-fun inv_9_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv94 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv95 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv96 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv97 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv98 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv99 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv100 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv101 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv102 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv103 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange103 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@9 () T@U)
(declare-fun x9_17 () Real)
(declare-fun x6_17 () T@U)
(declare-fun WandDefLHSMask@9 () T@U)
(declare-fun WandDefLHSHeap@3 () T@U)
(declare-fun x7_17 () T@U)
(declare-fun WandDefLHSMask@10 () T@U)
(declare-fun x8_17 () T@U)
(declare-fun WandDefLHSMask@11 () T@U)
(declare-fun x0_17 () T@U)
(declare-fun x1_17 () Real)
(declare-fun x2_17 () T@U)
(declare-fun x3_17 () Real)
(declare-fun x4_17 () T@U)
(declare-fun x5_17 () Real)
(declare-fun neverTriggered93 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs9 () T@U)
(declare-fun inv_8_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys9 () T@U)
(declare-fun inv_8_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs9 () T@U)
(declare-fun inv_8_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv84 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv85 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv86 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv87 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv88 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv89 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv90 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv91 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv92 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv93 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange93 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@8 () T@U)
(declare-fun x9_15 () Real)
(declare-fun x6_15 () T@U)
(declare-fun WandDefLHSMask@12 () T@U)
(declare-fun WandDefLHSHeap@4 () T@U)
(declare-fun x7_15 () T@U)
(declare-fun WandDefLHSMask@13 () T@U)
(declare-fun x8_15 () T@U)
(declare-fun WandDefLHSMask@14 () T@U)
(declare-fun x0_15 () T@U)
(declare-fun x1_16 () Real)
(declare-fun x2_16 () T@U)
(declare-fun x3_16 () Real)
(declare-fun x4_15 () T@U)
(declare-fun x5_15 () Real)
(declare-fun neverTriggered83 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs8 () T@U)
(declare-fun inv_7_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys8 () T@U)
(declare-fun inv_7_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs8 () T@U)
(declare-fun inv_7_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv74 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv75 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv76 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv77 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv78 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv79 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv80 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv81 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv82 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv83 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange83 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@7 () T@U)
(declare-fun x9_14 () Real)
(declare-fun x6_14 () T@U)
(declare-fun WandDefLHSMask@15 () T@U)
(declare-fun WandDefLHSHeap@5 () T@U)
(declare-fun x7_14 () T@U)
(declare-fun WandDefLHSMask@16 () T@U)
(declare-fun x8_14 () T@U)
(declare-fun WandDefLHSMask@17 () T@U)
(declare-fun x0_14 () T@U)
(declare-fun x1_14 () Real)
(declare-fun x2_14 () T@U)
(declare-fun x3_14 () Real)
(declare-fun x4_14 () T@U)
(declare-fun x5_14 () Real)
(declare-fun neverTriggered73 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs7 () T@U)
(declare-fun inv_6_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys7 () T@U)
(declare-fun inv_6_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs7 () T@U)
(declare-fun inv_6_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv64 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv65 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv66 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv67 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv68 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv69 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv70 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv71 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv72 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv73 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange73 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@6 () T@U)
(declare-fun x9_12 () Real)
(declare-fun x6_12 () T@U)
(declare-fun WandDefLHSMask@18 () T@U)
(declare-fun WandDefLHSHeap@6 () T@U)
(declare-fun x7_12 () T@U)
(declare-fun WandDefLHSMask@19 () T@U)
(declare-fun x8_12 () T@U)
(declare-fun WandDefLHSMask@20 () T@U)
(declare-fun x0_12 () T@U)
(declare-fun x1_12 () Real)
(declare-fun x2_12 () T@U)
(declare-fun x3_12 () Real)
(declare-fun x4_12 () T@U)
(declare-fun x5_12 () Real)
(declare-fun neverTriggered63 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs6 () T@U)
(declare-fun inv_5_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys6 () T@U)
(declare-fun inv_5_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs6 () T@U)
(declare-fun inv_5_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv54 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv55 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv56 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv57 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv58 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv59 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv60 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv61 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv62 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv63 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange63 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@5 () T@U)
(declare-fun x9_10 () Real)
(declare-fun x6_10 () T@U)
(declare-fun WandDefLHSMask@21 () T@U)
(declare-fun WandDefLHSHeap@7 () T@U)
(declare-fun x7_10 () T@U)
(declare-fun WandDefLHSMask@22 () T@U)
(declare-fun x8_10 () T@U)
(declare-fun WandDefLHSMask@23 () T@U)
(declare-fun x0_10 () T@U)
(declare-fun x1_11 () Real)
(declare-fun x2_11 () T@U)
(declare-fun x3_10 () Real)
(declare-fun x4_10 () T@U)
(declare-fun x5_10 () Real)
(declare-fun neverTriggered53 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs5 () T@U)
(declare-fun inv_4_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys5 () T@U)
(declare-fun inv_4_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs5 () T@U)
(declare-fun inv_4_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv44 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv45 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv46 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv47 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv48 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv49 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv50 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv51 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv52 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv53 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange53 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@4 () T@U)
(declare-fun x9_9 () Real)
(declare-fun x6_9 () T@U)
(declare-fun WandDefLHSMask@24 () T@U)
(declare-fun WandDefLHSHeap@8 () T@U)
(declare-fun x7_9 () T@U)
(declare-fun WandDefLHSMask@25 () T@U)
(declare-fun x8_9 () T@U)
(declare-fun WandDefLHSMask@26 () T@U)
(declare-fun x0_9 () T@U)
(declare-fun x1_9 () Real)
(declare-fun x2_9 () T@U)
(declare-fun x3_9 () Real)
(declare-fun x4_9 () T@U)
(declare-fun x5_9 () Real)
(declare-fun neverTriggered43 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs4 () T@U)
(declare-fun inv_3_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys4 () T@U)
(declare-fun inv_3_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs4 () T@U)
(declare-fun inv_3_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv34 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv35 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv36 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv37 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv38 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv39 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv40 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv41 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv42 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv43 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange43 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@3 () T@U)
(declare-fun x9_7 () Real)
(declare-fun x6_7 () T@U)
(declare-fun WandDefLHSMask@27 () T@U)
(declare-fun WandDefLHSHeap@9 () T@U)
(declare-fun x7_7 () T@U)
(declare-fun WandDefLHSMask@28 () T@U)
(declare-fun x8_7 () T@U)
(declare-fun WandDefLHSMask@29 () T@U)
(declare-fun x0_7 () T@U)
(declare-fun x1_7 () Real)
(declare-fun x2_7 () T@U)
(declare-fun x3_7 () Real)
(declare-fun x4_7 () T@U)
(declare-fun x5_7 () Real)
(declare-fun neverTriggered33 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun xs3 () T@U)
(declare-fun inv_2_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun ys3 () T@U)
(declare-fun inv_2_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun zs3 () T@U)
(declare-fun inv_2_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv24 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv25 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv26 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv27 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv28 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv29 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv30 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv31 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv32 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv33 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange33 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@2 () T@U)
(declare-fun x9_5 () Real)
(declare-fun x6_5 () T@U)
(declare-fun WandDefLHSMask@30 () T@U)
(declare-fun WandDefLHSHeap@10 () T@U)
(declare-fun x7_5 () T@U)
(declare-fun WandDefLHSMask@31 () T@U)
(declare-fun x8_5 () T@U)
(declare-fun WandDefLHSMask@32 () T@U)
(declare-fun x0_5 () T@U)
(declare-fun x1_6 () Real)
(declare-fun x2_5 () T@U)
(declare-fun x3_5 () Real)
(declare-fun x4_5 () T@U)
(declare-fun x5_5 () Real)
(declare-fun neverTriggered23 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun inv_1_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun inv_1_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun inv_1_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv14 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv15 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv16 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv17 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv18 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv19 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv20 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv21 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv22 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv23 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange23 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@1 () T@U)
(declare-fun x9_4 () Real)
(declare-fun x6_4 () T@U)
(declare-fun WandDefLHSMask@33 () T@U)
(declare-fun WandDefLHSHeap@11 () T@U)
(declare-fun x7_4 () T@U)
(declare-fun WandDefLHSMask@34 () T@U)
(declare-fun x8_4 () T@U)
(declare-fun WandDefLHSMask@35 () T@U)
(declare-fun x0_4 () T@U)
(declare-fun x1_4 () Real)
(declare-fun x2_4 () T@U)
(declare-fun x3_4 () Real)
(declare-fun x4_4 () T@U)
(declare-fun x5_4 () Real)
(declare-fun neverTriggered13 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun inv_0_0 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun inv_0_1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun inv_0_2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv4 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv5 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv6 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv7 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv8 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv9 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun invRecv10 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv11 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv12 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv13 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Real)
(declare-fun qpRange13 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun QPMask@0 () T@U)
(declare-fun x9_2 () Real)
(declare-fun x6_2 () T@U)
(declare-fun WandDefLHSMask@36 () T@U)
(declare-fun WandDefLHSHeap@12 () T@U)
(declare-fun x7_2 () T@U)
(declare-fun WandDefLHSMask@37 () T@U)
(declare-fun x8_2 () T@U)
(declare-fun WandDefLHSMask@38 () T@U)
(declare-fun x0_2 () T@U)
(declare-fun x1_2 () Real)
(declare-fun x2_2 () T@U)
(declare-fun x3_2 () Real)
(declare-fun x4_2 () T@U)
(declare-fun x5_2 () Real)
(declare-fun neverTriggered3 (T@U T@U T@U) Bool)
(declare-fun xs () T@U)
(declare-fun ys () T@U)
(declare-fun zs () T@U)
(declare-fun invRecv1 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv2 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun invRecv3 (T@U Real T@U Real T@U Real T@U T@U T@U Real) T@U)
(declare-fun qpRange3 (T@U Real T@U Real T@U Real T@U T@U T@U Real) Bool)
(declare-fun x_2 () T@U)
(declare-fun y_2 () T@U)
(declare-fun z_2 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type xs) (MapType2Type RefType boolType)) (= (type x_2) RefType)) (= (type ys) (MapType2Type RefType boolType))) (= (type y_2) RefType)) (= (type zs) (MapType2Type RefType boolType))) (= (type z_2) RefType)) (= (type xs1) (MapType2Type RefType boolType))) (forall ((arg0@@48 T@U) (arg1@@35 Real) (arg2@@16 T@U) (arg3@@11 Real) (arg4@@9 T@U) (arg5@@9 Real) (arg6@@9 T@U) (arg7@@9 T@U) (arg8@@9 T@U) (arg9@@9 Real) ) (! (= (type (inv_0_0 arg0@@48 arg1@@35 arg2@@16 arg3@@11 arg4@@9 arg5@@9 arg6@@9 arg7@@9 arg8@@9 arg9@@9)) RefType)
 :qid |funType:inv_0_0|
 :pattern ( (inv_0_0 arg0@@48 arg1@@35 arg2@@16 arg3@@11 arg4@@9 arg5@@9 arg6@@9 arg7@@9 arg8@@9 arg9@@9))
))) (= (type x0_2) RefType)) (= (type x2_2) RefType)) (= (type x4_2) RefType)) (= (type x6_2) RefType)) (= (type x7_2) RefType)) (= (type x8_2) RefType)) (= (type ys1) (MapType2Type RefType boolType))) (forall ((arg0@@49 T@U) (arg1@@36 Real) (arg2@@17 T@U) (arg3@@12 Real) (arg4@@10 T@U) (arg5@@10 Real) (arg6@@10 T@U) (arg7@@10 T@U) (arg8@@10 T@U) (arg9@@10 Real) ) (! (= (type (inv_0_1 arg0@@49 arg1@@36 arg2@@17 arg3@@12 arg4@@10 arg5@@10 arg6@@10 arg7@@10 arg8@@10 arg9@@10)) RefType)
 :qid |funType:inv_0_1|
 :pattern ( (inv_0_1 arg0@@49 arg1@@36 arg2@@17 arg3@@12 arg4@@10 arg5@@10 arg6@@10 arg7@@10 arg8@@10 arg9@@10))
))) (= (type zs1) (MapType2Type RefType boolType))) (forall ((arg0@@50 T@U) (arg1@@37 Real) (arg2@@18 T@U) (arg3@@13 Real) (arg4@@11 T@U) (arg5@@11 Real) (arg6@@11 T@U) (arg7@@11 T@U) (arg8@@11 T@U) (arg9@@11 Real) ) (! (= (type (inv_0_2 arg0@@50 arg1@@37 arg2@@18 arg3@@13 arg4@@11 arg5@@11 arg6@@11 arg7@@11 arg8@@11 arg9@@11)) RefType)
 :qid |funType:inv_0_2|
 :pattern ( (inv_0_2 arg0@@50 arg1@@37 arg2@@18 arg3@@13 arg4@@11 arg5@@11 arg6@@11 arg7@@11 arg8@@11 arg9@@11))
))) (= (type WandDefLHSMask@36) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@12) (MapType0Type RefType))) (= (type WandDefLHSMask@37) (MapType1Type RefType realType))) (= (type WandDefLHSMask@38) (MapType1Type RefType realType))) (= (type xs2) (MapType2Type RefType boolType))) (forall ((arg0@@51 T@U) (arg1@@38 Real) (arg2@@19 T@U) (arg3@@14 Real) (arg4@@12 T@U) (arg5@@12 Real) (arg6@@12 T@U) (arg7@@12 T@U) (arg8@@12 T@U) (arg9@@12 Real) ) (! (= (type (inv_1_0 arg0@@51 arg1@@38 arg2@@19 arg3@@14 arg4@@12 arg5@@12 arg6@@12 arg7@@12 arg8@@12 arg9@@12)) RefType)
 :qid |funType:inv_1_0|
 :pattern ( (inv_1_0 arg0@@51 arg1@@38 arg2@@19 arg3@@14 arg4@@12 arg5@@12 arg6@@12 arg7@@12 arg8@@12 arg9@@12))
))) (= (type x0_4) RefType)) (= (type x2_4) RefType)) (= (type x4_4) RefType)) (= (type x6_4) RefType)) (= (type x7_4) RefType)) (= (type x8_4) RefType)) (= (type ys2) (MapType2Type RefType boolType))) (forall ((arg0@@52 T@U) (arg1@@39 Real) (arg2@@20 T@U) (arg3@@15 Real) (arg4@@13 T@U) (arg5@@13 Real) (arg6@@13 T@U) (arg7@@13 T@U) (arg8@@13 T@U) (arg9@@13 Real) ) (! (= (type (inv_1_1 arg0@@52 arg1@@39 arg2@@20 arg3@@15 arg4@@13 arg5@@13 arg6@@13 arg7@@13 arg8@@13 arg9@@13)) RefType)
 :qid |funType:inv_1_1|
 :pattern ( (inv_1_1 arg0@@52 arg1@@39 arg2@@20 arg3@@15 arg4@@13 arg5@@13 arg6@@13 arg7@@13 arg8@@13 arg9@@13))
))) (= (type zs2) (MapType2Type RefType boolType))) (forall ((arg0@@53 T@U) (arg1@@40 Real) (arg2@@21 T@U) (arg3@@16 Real) (arg4@@14 T@U) (arg5@@14 Real) (arg6@@14 T@U) (arg7@@14 T@U) (arg8@@14 T@U) (arg9@@14 Real) ) (! (= (type (inv_1_2 arg0@@53 arg1@@40 arg2@@21 arg3@@16 arg4@@14 arg5@@14 arg6@@14 arg7@@14 arg8@@14 arg9@@14)) RefType)
 :qid |funType:inv_1_2|
 :pattern ( (inv_1_2 arg0@@53 arg1@@40 arg2@@21 arg3@@16 arg4@@14 arg5@@14 arg6@@14 arg7@@14 arg8@@14 arg9@@14))
))) (= (type WandDefLHSMask@33) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@11) (MapType0Type RefType))) (= (type WandDefLHSMask@34) (MapType1Type RefType realType))) (= (type WandDefLHSMask@35) (MapType1Type RefType realType))) (= (type xs3) (MapType2Type RefType boolType))) (forall ((arg0@@54 T@U) (arg1@@41 Real) (arg2@@22 T@U) (arg3@@17 Real) (arg4@@15 T@U) (arg5@@15 Real) (arg6@@15 T@U) (arg7@@15 T@U) (arg8@@15 T@U) (arg9@@15 Real) ) (! (= (type (inv_2_0 arg0@@54 arg1@@41 arg2@@22 arg3@@17 arg4@@15 arg5@@15 arg6@@15 arg7@@15 arg8@@15 arg9@@15)) RefType)
 :qid |funType:inv_2_0|
 :pattern ( (inv_2_0 arg0@@54 arg1@@41 arg2@@22 arg3@@17 arg4@@15 arg5@@15 arg6@@15 arg7@@15 arg8@@15 arg9@@15))
))) (= (type x0_5) RefType)) (= (type x2_5) RefType)) (= (type x4_5) RefType)) (= (type x6_5) RefType)) (= (type x7_5) RefType)) (= (type x8_5) RefType)) (= (type ys3) (MapType2Type RefType boolType))) (forall ((arg0@@55 T@U) (arg1@@42 Real) (arg2@@23 T@U) (arg3@@18 Real) (arg4@@16 T@U) (arg5@@16 Real) (arg6@@16 T@U) (arg7@@16 T@U) (arg8@@16 T@U) (arg9@@16 Real) ) (! (= (type (inv_2_1 arg0@@55 arg1@@42 arg2@@23 arg3@@18 arg4@@16 arg5@@16 arg6@@16 arg7@@16 arg8@@16 arg9@@16)) RefType)
 :qid |funType:inv_2_1|
 :pattern ( (inv_2_1 arg0@@55 arg1@@42 arg2@@23 arg3@@18 arg4@@16 arg5@@16 arg6@@16 arg7@@16 arg8@@16 arg9@@16))
))) (= (type zs3) (MapType2Type RefType boolType))) (forall ((arg0@@56 T@U) (arg1@@43 Real) (arg2@@24 T@U) (arg3@@19 Real) (arg4@@17 T@U) (arg5@@17 Real) (arg6@@17 T@U) (arg7@@17 T@U) (arg8@@17 T@U) (arg9@@17 Real) ) (! (= (type (inv_2_2 arg0@@56 arg1@@43 arg2@@24 arg3@@19 arg4@@17 arg5@@17 arg6@@17 arg7@@17 arg8@@17 arg9@@17)) RefType)
 :qid |funType:inv_2_2|
 :pattern ( (inv_2_2 arg0@@56 arg1@@43 arg2@@24 arg3@@19 arg4@@17 arg5@@17 arg6@@17 arg7@@17 arg8@@17 arg9@@17))
))) (= (type WandDefLHSMask@30) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@10) (MapType0Type RefType))) (= (type WandDefLHSMask@31) (MapType1Type RefType realType))) (= (type WandDefLHSMask@32) (MapType1Type RefType realType))) (= (type xs4) (MapType2Type RefType boolType))) (forall ((arg0@@57 T@U) (arg1@@44 Real) (arg2@@25 T@U) (arg3@@20 Real) (arg4@@18 T@U) (arg5@@18 Real) (arg6@@18 T@U) (arg7@@18 T@U) (arg8@@18 T@U) (arg9@@18 Real) ) (! (= (type (inv_3_0 arg0@@57 arg1@@44 arg2@@25 arg3@@20 arg4@@18 arg5@@18 arg6@@18 arg7@@18 arg8@@18 arg9@@18)) RefType)
 :qid |funType:inv_3_0|
 :pattern ( (inv_3_0 arg0@@57 arg1@@44 arg2@@25 arg3@@20 arg4@@18 arg5@@18 arg6@@18 arg7@@18 arg8@@18 arg9@@18))
))) (= (type x0_7) RefType)) (= (type x2_7) RefType)) (= (type x4_7) RefType)) (= (type x6_7) RefType)) (= (type x7_7) RefType)) (= (type x8_7) RefType)) (= (type ys4) (MapType2Type RefType boolType))) (forall ((arg0@@58 T@U) (arg1@@45 Real) (arg2@@26 T@U) (arg3@@21 Real) (arg4@@19 T@U) (arg5@@19 Real) (arg6@@19 T@U) (arg7@@19 T@U) (arg8@@19 T@U) (arg9@@19 Real) ) (! (= (type (inv_3_1 arg0@@58 arg1@@45 arg2@@26 arg3@@21 arg4@@19 arg5@@19 arg6@@19 arg7@@19 arg8@@19 arg9@@19)) RefType)
 :qid |funType:inv_3_1|
 :pattern ( (inv_3_1 arg0@@58 arg1@@45 arg2@@26 arg3@@21 arg4@@19 arg5@@19 arg6@@19 arg7@@19 arg8@@19 arg9@@19))
))) (= (type zs4) (MapType2Type RefType boolType))) (forall ((arg0@@59 T@U) (arg1@@46 Real) (arg2@@27 T@U) (arg3@@22 Real) (arg4@@20 T@U) (arg5@@20 Real) (arg6@@20 T@U) (arg7@@20 T@U) (arg8@@20 T@U) (arg9@@20 Real) ) (! (= (type (inv_3_2 arg0@@59 arg1@@46 arg2@@27 arg3@@22 arg4@@20 arg5@@20 arg6@@20 arg7@@20 arg8@@20 arg9@@20)) RefType)
 :qid |funType:inv_3_2|
 :pattern ( (inv_3_2 arg0@@59 arg1@@46 arg2@@27 arg3@@22 arg4@@20 arg5@@20 arg6@@20 arg7@@20 arg8@@20 arg9@@20))
))) (= (type WandDefLHSMask@27) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@9) (MapType0Type RefType))) (= (type WandDefLHSMask@28) (MapType1Type RefType realType))) (= (type WandDefLHSMask@29) (MapType1Type RefType realType))) (= (type xs5) (MapType2Type RefType boolType))) (forall ((arg0@@60 T@U) (arg1@@47 Real) (arg2@@28 T@U) (arg3@@23 Real) (arg4@@21 T@U) (arg5@@21 Real) (arg6@@21 T@U) (arg7@@21 T@U) (arg8@@21 T@U) (arg9@@21 Real) ) (! (= (type (inv_4_0 arg0@@60 arg1@@47 arg2@@28 arg3@@23 arg4@@21 arg5@@21 arg6@@21 arg7@@21 arg8@@21 arg9@@21)) RefType)
 :qid |funType:inv_4_0|
 :pattern ( (inv_4_0 arg0@@60 arg1@@47 arg2@@28 arg3@@23 arg4@@21 arg5@@21 arg6@@21 arg7@@21 arg8@@21 arg9@@21))
))) (= (type x0_9) RefType)) (= (type x2_9) RefType)) (= (type x4_9) RefType)) (= (type x6_9) RefType)) (= (type x7_9) RefType)) (= (type x8_9) RefType)) (= (type ys5) (MapType2Type RefType boolType))) (forall ((arg0@@61 T@U) (arg1@@48 Real) (arg2@@29 T@U) (arg3@@24 Real) (arg4@@22 T@U) (arg5@@22 Real) (arg6@@22 T@U) (arg7@@22 T@U) (arg8@@22 T@U) (arg9@@22 Real) ) (! (= (type (inv_4_1 arg0@@61 arg1@@48 arg2@@29 arg3@@24 arg4@@22 arg5@@22 arg6@@22 arg7@@22 arg8@@22 arg9@@22)) RefType)
 :qid |funType:inv_4_1|
 :pattern ( (inv_4_1 arg0@@61 arg1@@48 arg2@@29 arg3@@24 arg4@@22 arg5@@22 arg6@@22 arg7@@22 arg8@@22 arg9@@22))
))) (= (type zs5) (MapType2Type RefType boolType))) (forall ((arg0@@62 T@U) (arg1@@49 Real) (arg2@@30 T@U) (arg3@@25 Real) (arg4@@23 T@U) (arg5@@23 Real) (arg6@@23 T@U) (arg7@@23 T@U) (arg8@@23 T@U) (arg9@@23 Real) ) (! (= (type (inv_4_2 arg0@@62 arg1@@49 arg2@@30 arg3@@25 arg4@@23 arg5@@23 arg6@@23 arg7@@23 arg8@@23 arg9@@23)) RefType)
 :qid |funType:inv_4_2|
 :pattern ( (inv_4_2 arg0@@62 arg1@@49 arg2@@30 arg3@@25 arg4@@23 arg5@@23 arg6@@23 arg7@@23 arg8@@23 arg9@@23))
))) (= (type WandDefLHSMask@24) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@8) (MapType0Type RefType))) (= (type WandDefLHSMask@25) (MapType1Type RefType realType))) (= (type WandDefLHSMask@26) (MapType1Type RefType realType))) (= (type xs6) (MapType2Type RefType boolType))) (forall ((arg0@@63 T@U) (arg1@@50 Real) (arg2@@31 T@U) (arg3@@26 Real) (arg4@@24 T@U) (arg5@@24 Real) (arg6@@24 T@U) (arg7@@24 T@U) (arg8@@24 T@U) (arg9@@24 Real) ) (! (= (type (inv_5_0 arg0@@63 arg1@@50 arg2@@31 arg3@@26 arg4@@24 arg5@@24 arg6@@24 arg7@@24 arg8@@24 arg9@@24)) RefType)
 :qid |funType:inv_5_0|
 :pattern ( (inv_5_0 arg0@@63 arg1@@50 arg2@@31 arg3@@26 arg4@@24 arg5@@24 arg6@@24 arg7@@24 arg8@@24 arg9@@24))
))) (= (type x0_10) RefType)) (= (type x2_11) RefType)) (= (type x4_10) RefType)) (= (type x6_10) RefType)) (= (type x7_10) RefType)) (= (type x8_10) RefType)) (= (type ys6) (MapType2Type RefType boolType))) (forall ((arg0@@64 T@U) (arg1@@51 Real) (arg2@@32 T@U) (arg3@@27 Real) (arg4@@25 T@U) (arg5@@25 Real) (arg6@@25 T@U) (arg7@@25 T@U) (arg8@@25 T@U) (arg9@@25 Real) ) (! (= (type (inv_5_1 arg0@@64 arg1@@51 arg2@@32 arg3@@27 arg4@@25 arg5@@25 arg6@@25 arg7@@25 arg8@@25 arg9@@25)) RefType)
 :qid |funType:inv_5_1|
 :pattern ( (inv_5_1 arg0@@64 arg1@@51 arg2@@32 arg3@@27 arg4@@25 arg5@@25 arg6@@25 arg7@@25 arg8@@25 arg9@@25))
))) (= (type zs6) (MapType2Type RefType boolType))) (forall ((arg0@@65 T@U) (arg1@@52 Real) (arg2@@33 T@U) (arg3@@28 Real) (arg4@@26 T@U) (arg5@@26 Real) (arg6@@26 T@U) (arg7@@26 T@U) (arg8@@26 T@U) (arg9@@26 Real) ) (! (= (type (inv_5_2 arg0@@65 arg1@@52 arg2@@33 arg3@@28 arg4@@26 arg5@@26 arg6@@26 arg7@@26 arg8@@26 arg9@@26)) RefType)
 :qid |funType:inv_5_2|
 :pattern ( (inv_5_2 arg0@@65 arg1@@52 arg2@@33 arg3@@28 arg4@@26 arg5@@26 arg6@@26 arg7@@26 arg8@@26 arg9@@26))
))) (= (type WandDefLHSMask@21) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@7) (MapType0Type RefType))) (= (type WandDefLHSMask@22) (MapType1Type RefType realType))) (= (type WandDefLHSMask@23) (MapType1Type RefType realType))) (= (type xs7) (MapType2Type RefType boolType))) (forall ((arg0@@66 T@U) (arg1@@53 Real) (arg2@@34 T@U) (arg3@@29 Real) (arg4@@27 T@U) (arg5@@27 Real) (arg6@@27 T@U) (arg7@@27 T@U) (arg8@@27 T@U) (arg9@@27 Real) ) (! (= (type (inv_6_0 arg0@@66 arg1@@53 arg2@@34 arg3@@29 arg4@@27 arg5@@27 arg6@@27 arg7@@27 arg8@@27 arg9@@27)) RefType)
 :qid |funType:inv_6_0|
 :pattern ( (inv_6_0 arg0@@66 arg1@@53 arg2@@34 arg3@@29 arg4@@27 arg5@@27 arg6@@27 arg7@@27 arg8@@27 arg9@@27))
))) (= (type x0_12) RefType)) (= (type x2_12) RefType)) (= (type x4_12) RefType)) (= (type x6_12) RefType)) (= (type x7_12) RefType)) (= (type x8_12) RefType)) (= (type ys7) (MapType2Type RefType boolType))) (forall ((arg0@@67 T@U) (arg1@@54 Real) (arg2@@35 T@U) (arg3@@30 Real) (arg4@@28 T@U) (arg5@@28 Real) (arg6@@28 T@U) (arg7@@28 T@U) (arg8@@28 T@U) (arg9@@28 Real) ) (! (= (type (inv_6_1 arg0@@67 arg1@@54 arg2@@35 arg3@@30 arg4@@28 arg5@@28 arg6@@28 arg7@@28 arg8@@28 arg9@@28)) RefType)
 :qid |funType:inv_6_1|
 :pattern ( (inv_6_1 arg0@@67 arg1@@54 arg2@@35 arg3@@30 arg4@@28 arg5@@28 arg6@@28 arg7@@28 arg8@@28 arg9@@28))
))) (= (type zs7) (MapType2Type RefType boolType))) (forall ((arg0@@68 T@U) (arg1@@55 Real) (arg2@@36 T@U) (arg3@@31 Real) (arg4@@29 T@U) (arg5@@29 Real) (arg6@@29 T@U) (arg7@@29 T@U) (arg8@@29 T@U) (arg9@@29 Real) ) (! (= (type (inv_6_2 arg0@@68 arg1@@55 arg2@@36 arg3@@31 arg4@@29 arg5@@29 arg6@@29 arg7@@29 arg8@@29 arg9@@29)) RefType)
 :qid |funType:inv_6_2|
 :pattern ( (inv_6_2 arg0@@68 arg1@@55 arg2@@36 arg3@@31 arg4@@29 arg5@@29 arg6@@29 arg7@@29 arg8@@29 arg9@@29))
))) (= (type WandDefLHSMask@18) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@6) (MapType0Type RefType))) (= (type WandDefLHSMask@19) (MapType1Type RefType realType))) (= (type WandDefLHSMask@20) (MapType1Type RefType realType))) (= (type xs8) (MapType2Type RefType boolType))) (forall ((arg0@@69 T@U) (arg1@@56 Real) (arg2@@37 T@U) (arg3@@32 Real) (arg4@@30 T@U) (arg5@@30 Real) (arg6@@30 T@U) (arg7@@30 T@U) (arg8@@30 T@U) (arg9@@30 Real) ) (! (= (type (inv_7_0 arg0@@69 arg1@@56 arg2@@37 arg3@@32 arg4@@30 arg5@@30 arg6@@30 arg7@@30 arg8@@30 arg9@@30)) RefType)
 :qid |funType:inv_7_0|
 :pattern ( (inv_7_0 arg0@@69 arg1@@56 arg2@@37 arg3@@32 arg4@@30 arg5@@30 arg6@@30 arg7@@30 arg8@@30 arg9@@30))
))) (= (type x0_14) RefType)) (= (type x2_14) RefType)) (= (type x4_14) RefType)) (= (type x6_14) RefType)) (= (type x7_14) RefType)) (= (type x8_14) RefType)) (= (type ys8) (MapType2Type RefType boolType))) (forall ((arg0@@70 T@U) (arg1@@57 Real) (arg2@@38 T@U) (arg3@@33 Real) (arg4@@31 T@U) (arg5@@31 Real) (arg6@@31 T@U) (arg7@@31 T@U) (arg8@@31 T@U) (arg9@@31 Real) ) (! (= (type (inv_7_1 arg0@@70 arg1@@57 arg2@@38 arg3@@33 arg4@@31 arg5@@31 arg6@@31 arg7@@31 arg8@@31 arg9@@31)) RefType)
 :qid |funType:inv_7_1|
 :pattern ( (inv_7_1 arg0@@70 arg1@@57 arg2@@38 arg3@@33 arg4@@31 arg5@@31 arg6@@31 arg7@@31 arg8@@31 arg9@@31))
))) (= (type zs8) (MapType2Type RefType boolType))) (forall ((arg0@@71 T@U) (arg1@@58 Real) (arg2@@39 T@U) (arg3@@34 Real) (arg4@@32 T@U) (arg5@@32 Real) (arg6@@32 T@U) (arg7@@32 T@U) (arg8@@32 T@U) (arg9@@32 Real) ) (! (= (type (inv_7_2 arg0@@71 arg1@@58 arg2@@39 arg3@@34 arg4@@32 arg5@@32 arg6@@32 arg7@@32 arg8@@32 arg9@@32)) RefType)
 :qid |funType:inv_7_2|
 :pattern ( (inv_7_2 arg0@@71 arg1@@58 arg2@@39 arg3@@34 arg4@@32 arg5@@32 arg6@@32 arg7@@32 arg8@@32 arg9@@32))
))) (= (type WandDefLHSMask@15) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@5) (MapType0Type RefType))) (= (type WandDefLHSMask@16) (MapType1Type RefType realType))) (= (type WandDefLHSMask@17) (MapType1Type RefType realType))) (= (type xs9) (MapType2Type RefType boolType))) (forall ((arg0@@72 T@U) (arg1@@59 Real) (arg2@@40 T@U) (arg3@@35 Real) (arg4@@33 T@U) (arg5@@33 Real) (arg6@@33 T@U) (arg7@@33 T@U) (arg8@@33 T@U) (arg9@@33 Real) ) (! (= (type (inv_8_0 arg0@@72 arg1@@59 arg2@@40 arg3@@35 arg4@@33 arg5@@33 arg6@@33 arg7@@33 arg8@@33 arg9@@33)) RefType)
 :qid |funType:inv_8_0|
 :pattern ( (inv_8_0 arg0@@72 arg1@@59 arg2@@40 arg3@@35 arg4@@33 arg5@@33 arg6@@33 arg7@@33 arg8@@33 arg9@@33))
))) (= (type x0_15) RefType)) (= (type x2_16) RefType)) (= (type x4_15) RefType)) (= (type x6_15) RefType)) (= (type x7_15) RefType)) (= (type x8_15) RefType)) (= (type ys9) (MapType2Type RefType boolType))) (forall ((arg0@@73 T@U) (arg1@@60 Real) (arg2@@41 T@U) (arg3@@36 Real) (arg4@@34 T@U) (arg5@@34 Real) (arg6@@34 T@U) (arg7@@34 T@U) (arg8@@34 T@U) (arg9@@34 Real) ) (! (= (type (inv_8_1 arg0@@73 arg1@@60 arg2@@41 arg3@@36 arg4@@34 arg5@@34 arg6@@34 arg7@@34 arg8@@34 arg9@@34)) RefType)
 :qid |funType:inv_8_1|
 :pattern ( (inv_8_1 arg0@@73 arg1@@60 arg2@@41 arg3@@36 arg4@@34 arg5@@34 arg6@@34 arg7@@34 arg8@@34 arg9@@34))
))) (= (type zs9) (MapType2Type RefType boolType))) (forall ((arg0@@74 T@U) (arg1@@61 Real) (arg2@@42 T@U) (arg3@@37 Real) (arg4@@35 T@U) (arg5@@35 Real) (arg6@@35 T@U) (arg7@@35 T@U) (arg8@@35 T@U) (arg9@@35 Real) ) (! (= (type (inv_8_2 arg0@@74 arg1@@61 arg2@@42 arg3@@37 arg4@@35 arg5@@35 arg6@@35 arg7@@35 arg8@@35 arg9@@35)) RefType)
 :qid |funType:inv_8_2|
 :pattern ( (inv_8_2 arg0@@74 arg1@@61 arg2@@42 arg3@@37 arg4@@35 arg5@@35 arg6@@35 arg7@@35 arg8@@35 arg9@@35))
))) (= (type WandDefLHSMask@12) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@4) (MapType0Type RefType))) (= (type WandDefLHSMask@13) (MapType1Type RefType realType))) (= (type WandDefLHSMask@14) (MapType1Type RefType realType))) (= (type xs10) (MapType2Type RefType boolType))) (forall ((arg0@@75 T@U) (arg1@@62 Real) (arg2@@43 T@U) (arg3@@38 Real) (arg4@@36 T@U) (arg5@@36 Real) (arg6@@36 T@U) (arg7@@36 T@U) (arg8@@36 T@U) (arg9@@36 Real) ) (! (= (type (inv_9_0 arg0@@75 arg1@@62 arg2@@43 arg3@@38 arg4@@36 arg5@@36 arg6@@36 arg7@@36 arg8@@36 arg9@@36)) RefType)
 :qid |funType:inv_9_0|
 :pattern ( (inv_9_0 arg0@@75 arg1@@62 arg2@@43 arg3@@38 arg4@@36 arg5@@36 arg6@@36 arg7@@36 arg8@@36 arg9@@36))
))) (= (type x0_17) RefType)) (= (type x2_17) RefType)) (= (type x4_17) RefType)) (= (type x6_17) RefType)) (= (type x7_17) RefType)) (= (type x8_17) RefType)) (= (type ys10) (MapType2Type RefType boolType))) (forall ((arg0@@76 T@U) (arg1@@63 Real) (arg2@@44 T@U) (arg3@@39 Real) (arg4@@37 T@U) (arg5@@37 Real) (arg6@@37 T@U) (arg7@@37 T@U) (arg8@@37 T@U) (arg9@@37 Real) ) (! (= (type (inv_9_1 arg0@@76 arg1@@63 arg2@@44 arg3@@39 arg4@@37 arg5@@37 arg6@@37 arg7@@37 arg8@@37 arg9@@37)) RefType)
 :qid |funType:inv_9_1|
 :pattern ( (inv_9_1 arg0@@76 arg1@@63 arg2@@44 arg3@@39 arg4@@37 arg5@@37 arg6@@37 arg7@@37 arg8@@37 arg9@@37))
))) (= (type zs10) (MapType2Type RefType boolType))) (forall ((arg0@@77 T@U) (arg1@@64 Real) (arg2@@45 T@U) (arg3@@40 Real) (arg4@@38 T@U) (arg5@@38 Real) (arg6@@38 T@U) (arg7@@38 T@U) (arg8@@38 T@U) (arg9@@38 Real) ) (! (= (type (inv_9_2 arg0@@77 arg1@@64 arg2@@45 arg3@@40 arg4@@38 arg5@@38 arg6@@38 arg7@@38 arg8@@38 arg9@@38)) RefType)
 :qid |funType:inv_9_2|
 :pattern ( (inv_9_2 arg0@@77 arg1@@64 arg2@@45 arg3@@40 arg4@@38 arg5@@38 arg6@@38 arg7@@38 arg8@@38 arg9@@38))
))) (= (type WandDefLHSMask@9) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@3) (MapType0Type RefType))) (= (type WandDefLHSMask@10) (MapType1Type RefType realType))) (= (type WandDefLHSMask@11) (MapType1Type RefType realType))) (= (type xs11) (MapType2Type RefType boolType))) (forall ((arg0@@78 T@U) (arg1@@65 Real) (arg2@@46 T@U) (arg3@@41 Real) (arg4@@39 T@U) (arg5@@39 Real) (arg6@@39 T@U) (arg7@@39 T@U) (arg8@@39 T@U) (arg9@@39 Real) ) (! (= (type (inv_10_0 arg0@@78 arg1@@65 arg2@@46 arg3@@41 arg4@@39 arg5@@39 arg6@@39 arg7@@39 arg8@@39 arg9@@39)) RefType)
 :qid |funType:inv_10_0|
 :pattern ( (inv_10_0 arg0@@78 arg1@@65 arg2@@46 arg3@@41 arg4@@39 arg5@@39 arg6@@39 arg7@@39 arg8@@39 arg9@@39))
))) (= (type x0_19) RefType)) (= (type x2_19) RefType)) (= (type x4_19) RefType)) (= (type x6_19) RefType)) (= (type x7_19) RefType)) (= (type x8_19) RefType)) (= (type ys11) (MapType2Type RefType boolType))) (forall ((arg0@@79 T@U) (arg1@@66 Real) (arg2@@47 T@U) (arg3@@42 Real) (arg4@@40 T@U) (arg5@@40 Real) (arg6@@40 T@U) (arg7@@40 T@U) (arg8@@40 T@U) (arg9@@40 Real) ) (! (= (type (inv_10_1 arg0@@79 arg1@@66 arg2@@47 arg3@@42 arg4@@40 arg5@@40 arg6@@40 arg7@@40 arg8@@40 arg9@@40)) RefType)
 :qid |funType:inv_10_1|
 :pattern ( (inv_10_1 arg0@@79 arg1@@66 arg2@@47 arg3@@42 arg4@@40 arg5@@40 arg6@@40 arg7@@40 arg8@@40 arg9@@40))
))) (= (type zs11) (MapType2Type RefType boolType))) (forall ((arg0@@80 T@U) (arg1@@67 Real) (arg2@@48 T@U) (arg3@@43 Real) (arg4@@41 T@U) (arg5@@41 Real) (arg6@@41 T@U) (arg7@@41 T@U) (arg8@@41 T@U) (arg9@@41 Real) ) (! (= (type (inv_10_2 arg0@@80 arg1@@67 arg2@@48 arg3@@43 arg4@@41 arg5@@41 arg6@@41 arg7@@41 arg8@@41 arg9@@41)) RefType)
 :qid |funType:inv_10_2|
 :pattern ( (inv_10_2 arg0@@80 arg1@@67 arg2@@48 arg3@@43 arg4@@41 arg5@@41 arg6@@41 arg7@@41 arg8@@41 arg9@@41))
))) (= (type WandDefLHSMask@6) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@2) (MapType0Type RefType))) (= (type WandDefLHSMask@7) (MapType1Type RefType realType))) (= (type WandDefLHSMask@8) (MapType1Type RefType realType))) (= (type a_2) RefType)) (= (type WandDefLHSMask@0) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType0Type RefType))) (= (type b_2) RefType)) (= (type WandDefLHSMask@1) (MapType1Type RefType realType))) (= (type c) RefType)) (= (type WandDefLHSMask@2) (MapType1Type RefType realType))) (= (type WandDefLHSMask@3) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@1) (MapType0Type RefType))) (= (type WandDefLHSMask@4) (MapType1Type RefType realType))) (= (type WandDefLHSMask@5) (MapType1Type RefType realType))) (= (type AssertMask@0) (MapType1Type RefType realType))) (= (type AssertMask@1) (MapType1Type RefType realType))) (= (type Heap@@10) (MapType0Type RefType))) (= (type QPMask@11) (MapType1Type RefType realType))) (forall ((arg0@@81 T@U) (arg1@@68 Real) (arg2@@49 T@U) (arg3@@44 Real) (arg4@@42 T@U) (arg5@@42 Real) (arg6@@42 T@U) (arg7@@42 T@U) (arg8@@42 T@U) (arg9@@42 Real) ) (! (= (type (invRecv104 arg0@@81 arg1@@68 arg2@@49 arg3@@44 arg4@@42 arg5@@42 arg6@@42 arg7@@42 arg8@@42 arg9@@42)) RefType)
 :qid |funType:invRecv104|
 :pattern ( (invRecv104 arg0@@81 arg1@@68 arg2@@49 arg3@@44 arg4@@42 arg5@@42 arg6@@42 arg7@@42 arg8@@42 arg9@@42))
))) (forall ((arg0@@82 T@U) (arg1@@69 Real) (arg2@@50 T@U) (arg3@@45 Real) (arg4@@43 T@U) (arg5@@43 Real) (arg6@@43 T@U) (arg7@@43 T@U) (arg8@@43 T@U) (arg9@@43 Real) ) (! (= (type (invRecv106 arg0@@82 arg1@@69 arg2@@50 arg3@@45 arg4@@43 arg5@@43 arg6@@43 arg7@@43 arg8@@43 arg9@@43)) RefType)
 :qid |funType:invRecv106|
 :pattern ( (invRecv106 arg0@@82 arg1@@69 arg2@@50 arg3@@45 arg4@@43 arg5@@43 arg6@@43 arg7@@43 arg8@@43 arg9@@43))
))) (forall ((arg0@@83 T@U) (arg1@@70 Real) (arg2@@51 T@U) (arg3@@46 Real) (arg4@@44 T@U) (arg5@@44 Real) (arg6@@44 T@U) (arg7@@44 T@U) (arg8@@44 T@U) (arg9@@44 Real) ) (! (= (type (invRecv108 arg0@@83 arg1@@70 arg2@@51 arg3@@46 arg4@@44 arg5@@44 arg6@@44 arg7@@44 arg8@@44 arg9@@44)) RefType)
 :qid |funType:invRecv108|
 :pattern ( (invRecv108 arg0@@83 arg1@@70 arg2@@51 arg3@@46 arg4@@44 arg5@@44 arg6@@44 arg7@@44 arg8@@44 arg9@@44))
))) (forall ((arg0@@84 T@U) (arg1@@71 Real) (arg2@@52 T@U) (arg3@@47 Real) (arg4@@45 T@U) (arg5@@45 Real) (arg6@@45 T@U) (arg7@@45 T@U) (arg8@@45 T@U) (arg9@@45 Real) ) (! (= (type (invRecv110 arg0@@84 arg1@@71 arg2@@52 arg3@@47 arg4@@45 arg5@@45 arg6@@45 arg7@@45 arg8@@45 arg9@@45)) RefType)
 :qid |funType:invRecv110|
 :pattern ( (invRecv110 arg0@@84 arg1@@71 arg2@@52 arg3@@47 arg4@@45 arg5@@45 arg6@@45 arg7@@45 arg8@@45 arg9@@45))
))) (forall ((arg0@@85 T@U) (arg1@@72 Real) (arg2@@53 T@U) (arg3@@48 Real) (arg4@@46 T@U) (arg5@@46 Real) (arg6@@46 T@U) (arg7@@46 T@U) (arg8@@46 T@U) (arg9@@46 Real) ) (! (= (type (invRecv111 arg0@@85 arg1@@72 arg2@@53 arg3@@48 arg4@@46 arg5@@46 arg6@@46 arg7@@46 arg8@@46 arg9@@46)) RefType)
 :qid |funType:invRecv111|
 :pattern ( (invRecv111 arg0@@85 arg1@@72 arg2@@53 arg3@@48 arg4@@46 arg5@@46 arg6@@46 arg7@@46 arg8@@46 arg9@@46))
))) (forall ((arg0@@86 T@U) (arg1@@73 Real) (arg2@@54 T@U) (arg3@@49 Real) (arg4@@47 T@U) (arg5@@47 Real) (arg6@@47 T@U) (arg7@@47 T@U) (arg8@@47 T@U) (arg9@@47 Real) ) (! (= (type (invRecv112 arg0@@86 arg1@@73 arg2@@54 arg3@@49 arg4@@47 arg5@@47 arg6@@47 arg7@@47 arg8@@47 arg9@@47)) RefType)
 :qid |funType:invRecv112|
 :pattern ( (invRecv112 arg0@@86 arg1@@73 arg2@@54 arg3@@49 arg4@@47 arg5@@47 arg6@@47 arg7@@47 arg8@@47 arg9@@47))
))) (= (type QPMask@10) (MapType1Type RefType realType))) (forall ((arg0@@87 T@U) (arg1@@74 Real) (arg2@@55 T@U) (arg3@@50 Real) (arg4@@48 T@U) (arg5@@48 Real) (arg6@@48 T@U) (arg7@@48 T@U) (arg8@@48 T@U) (arg9@@48 Real) ) (! (= (type (invRecv94 arg0@@87 arg1@@74 arg2@@55 arg3@@50 arg4@@48 arg5@@48 arg6@@48 arg7@@48 arg8@@48 arg9@@48)) RefType)
 :qid |funType:invRecv94|
 :pattern ( (invRecv94 arg0@@87 arg1@@74 arg2@@55 arg3@@50 arg4@@48 arg5@@48 arg6@@48 arg7@@48 arg8@@48 arg9@@48))
))) (forall ((arg0@@88 T@U) (arg1@@75 Real) (arg2@@56 T@U) (arg3@@51 Real) (arg4@@49 T@U) (arg5@@49 Real) (arg6@@49 T@U) (arg7@@49 T@U) (arg8@@49 T@U) (arg9@@49 Real) ) (! (= (type (invRecv96 arg0@@88 arg1@@75 arg2@@56 arg3@@51 arg4@@49 arg5@@49 arg6@@49 arg7@@49 arg8@@49 arg9@@49)) RefType)
 :qid |funType:invRecv96|
 :pattern ( (invRecv96 arg0@@88 arg1@@75 arg2@@56 arg3@@51 arg4@@49 arg5@@49 arg6@@49 arg7@@49 arg8@@49 arg9@@49))
))) (forall ((arg0@@89 T@U) (arg1@@76 Real) (arg2@@57 T@U) (arg3@@52 Real) (arg4@@50 T@U) (arg5@@50 Real) (arg6@@50 T@U) (arg7@@50 T@U) (arg8@@50 T@U) (arg9@@50 Real) ) (! (= (type (invRecv98 arg0@@89 arg1@@76 arg2@@57 arg3@@52 arg4@@50 arg5@@50 arg6@@50 arg7@@50 arg8@@50 arg9@@50)) RefType)
 :qid |funType:invRecv98|
 :pattern ( (invRecv98 arg0@@89 arg1@@76 arg2@@57 arg3@@52 arg4@@50 arg5@@50 arg6@@50 arg7@@50 arg8@@50 arg9@@50))
))) (forall ((arg0@@90 T@U) (arg1@@77 Real) (arg2@@58 T@U) (arg3@@53 Real) (arg4@@51 T@U) (arg5@@51 Real) (arg6@@51 T@U) (arg7@@51 T@U) (arg8@@51 T@U) (arg9@@51 Real) ) (! (= (type (invRecv100 arg0@@90 arg1@@77 arg2@@58 arg3@@53 arg4@@51 arg5@@51 arg6@@51 arg7@@51 arg8@@51 arg9@@51)) RefType)
 :qid |funType:invRecv100|
 :pattern ( (invRecv100 arg0@@90 arg1@@77 arg2@@58 arg3@@53 arg4@@51 arg5@@51 arg6@@51 arg7@@51 arg8@@51 arg9@@51))
))) (forall ((arg0@@91 T@U) (arg1@@78 Real) (arg2@@59 T@U) (arg3@@54 Real) (arg4@@52 T@U) (arg5@@52 Real) (arg6@@52 T@U) (arg7@@52 T@U) (arg8@@52 T@U) (arg9@@52 Real) ) (! (= (type (invRecv101 arg0@@91 arg1@@78 arg2@@59 arg3@@54 arg4@@52 arg5@@52 arg6@@52 arg7@@52 arg8@@52 arg9@@52)) RefType)
 :qid |funType:invRecv101|
 :pattern ( (invRecv101 arg0@@91 arg1@@78 arg2@@59 arg3@@54 arg4@@52 arg5@@52 arg6@@52 arg7@@52 arg8@@52 arg9@@52))
))) (forall ((arg0@@92 T@U) (arg1@@79 Real) (arg2@@60 T@U) (arg3@@55 Real) (arg4@@53 T@U) (arg5@@53 Real) (arg6@@53 T@U) (arg7@@53 T@U) (arg8@@53 T@U) (arg9@@53 Real) ) (! (= (type (invRecv102 arg0@@92 arg1@@79 arg2@@60 arg3@@55 arg4@@53 arg5@@53 arg6@@53 arg7@@53 arg8@@53 arg9@@53)) RefType)
 :qid |funType:invRecv102|
 :pattern ( (invRecv102 arg0@@92 arg1@@79 arg2@@60 arg3@@55 arg4@@53 arg5@@53 arg6@@53 arg7@@53 arg8@@53 arg9@@53))
))) (= (type QPMask@9) (MapType1Type RefType realType))) (forall ((arg0@@93 T@U) (arg1@@80 Real) (arg2@@61 T@U) (arg3@@56 Real) (arg4@@54 T@U) (arg5@@54 Real) (arg6@@54 T@U) (arg7@@54 T@U) (arg8@@54 T@U) (arg9@@54 Real) ) (! (= (type (invRecv84 arg0@@93 arg1@@80 arg2@@61 arg3@@56 arg4@@54 arg5@@54 arg6@@54 arg7@@54 arg8@@54 arg9@@54)) RefType)
 :qid |funType:invRecv84|
 :pattern ( (invRecv84 arg0@@93 arg1@@80 arg2@@61 arg3@@56 arg4@@54 arg5@@54 arg6@@54 arg7@@54 arg8@@54 arg9@@54))
))) (forall ((arg0@@94 T@U) (arg1@@81 Real) (arg2@@62 T@U) (arg3@@57 Real) (arg4@@55 T@U) (arg5@@55 Real) (arg6@@55 T@U) (arg7@@55 T@U) (arg8@@55 T@U) (arg9@@55 Real) ) (! (= (type (invRecv86 arg0@@94 arg1@@81 arg2@@62 arg3@@57 arg4@@55 arg5@@55 arg6@@55 arg7@@55 arg8@@55 arg9@@55)) RefType)
 :qid |funType:invRecv86|
 :pattern ( (invRecv86 arg0@@94 arg1@@81 arg2@@62 arg3@@57 arg4@@55 arg5@@55 arg6@@55 arg7@@55 arg8@@55 arg9@@55))
))) (forall ((arg0@@95 T@U) (arg1@@82 Real) (arg2@@63 T@U) (arg3@@58 Real) (arg4@@56 T@U) (arg5@@56 Real) (arg6@@56 T@U) (arg7@@56 T@U) (arg8@@56 T@U) (arg9@@56 Real) ) (! (= (type (invRecv88 arg0@@95 arg1@@82 arg2@@63 arg3@@58 arg4@@56 arg5@@56 arg6@@56 arg7@@56 arg8@@56 arg9@@56)) RefType)
 :qid |funType:invRecv88|
 :pattern ( (invRecv88 arg0@@95 arg1@@82 arg2@@63 arg3@@58 arg4@@56 arg5@@56 arg6@@56 arg7@@56 arg8@@56 arg9@@56))
))) (forall ((arg0@@96 T@U) (arg1@@83 Real) (arg2@@64 T@U) (arg3@@59 Real) (arg4@@57 T@U) (arg5@@57 Real) (arg6@@57 T@U) (arg7@@57 T@U) (arg8@@57 T@U) (arg9@@57 Real) ) (! (= (type (invRecv90 arg0@@96 arg1@@83 arg2@@64 arg3@@59 arg4@@57 arg5@@57 arg6@@57 arg7@@57 arg8@@57 arg9@@57)) RefType)
 :qid |funType:invRecv90|
 :pattern ( (invRecv90 arg0@@96 arg1@@83 arg2@@64 arg3@@59 arg4@@57 arg5@@57 arg6@@57 arg7@@57 arg8@@57 arg9@@57))
))) (forall ((arg0@@97 T@U) (arg1@@84 Real) (arg2@@65 T@U) (arg3@@60 Real) (arg4@@58 T@U) (arg5@@58 Real) (arg6@@58 T@U) (arg7@@58 T@U) (arg8@@58 T@U) (arg9@@58 Real) ) (! (= (type (invRecv91 arg0@@97 arg1@@84 arg2@@65 arg3@@60 arg4@@58 arg5@@58 arg6@@58 arg7@@58 arg8@@58 arg9@@58)) RefType)
 :qid |funType:invRecv91|
 :pattern ( (invRecv91 arg0@@97 arg1@@84 arg2@@65 arg3@@60 arg4@@58 arg5@@58 arg6@@58 arg7@@58 arg8@@58 arg9@@58))
))) (forall ((arg0@@98 T@U) (arg1@@85 Real) (arg2@@66 T@U) (arg3@@61 Real) (arg4@@59 T@U) (arg5@@59 Real) (arg6@@59 T@U) (arg7@@59 T@U) (arg8@@59 T@U) (arg9@@59 Real) ) (! (= (type (invRecv92 arg0@@98 arg1@@85 arg2@@66 arg3@@61 arg4@@59 arg5@@59 arg6@@59 arg7@@59 arg8@@59 arg9@@59)) RefType)
 :qid |funType:invRecv92|
 :pattern ( (invRecv92 arg0@@98 arg1@@85 arg2@@66 arg3@@61 arg4@@59 arg5@@59 arg6@@59 arg7@@59 arg8@@59 arg9@@59))
))) (= (type QPMask@8) (MapType1Type RefType realType))) (forall ((arg0@@99 T@U) (arg1@@86 Real) (arg2@@67 T@U) (arg3@@62 Real) (arg4@@60 T@U) (arg5@@60 Real) (arg6@@60 T@U) (arg7@@60 T@U) (arg8@@60 T@U) (arg9@@60 Real) ) (! (= (type (invRecv74 arg0@@99 arg1@@86 arg2@@67 arg3@@62 arg4@@60 arg5@@60 arg6@@60 arg7@@60 arg8@@60 arg9@@60)) RefType)
 :qid |funType:invRecv74|
 :pattern ( (invRecv74 arg0@@99 arg1@@86 arg2@@67 arg3@@62 arg4@@60 arg5@@60 arg6@@60 arg7@@60 arg8@@60 arg9@@60))
))) (forall ((arg0@@100 T@U) (arg1@@87 Real) (arg2@@68 T@U) (arg3@@63 Real) (arg4@@61 T@U) (arg5@@61 Real) (arg6@@61 T@U) (arg7@@61 T@U) (arg8@@61 T@U) (arg9@@61 Real) ) (! (= (type (invRecv76 arg0@@100 arg1@@87 arg2@@68 arg3@@63 arg4@@61 arg5@@61 arg6@@61 arg7@@61 arg8@@61 arg9@@61)) RefType)
 :qid |funType:invRecv76|
 :pattern ( (invRecv76 arg0@@100 arg1@@87 arg2@@68 arg3@@63 arg4@@61 arg5@@61 arg6@@61 arg7@@61 arg8@@61 arg9@@61))
))) (forall ((arg0@@101 T@U) (arg1@@88 Real) (arg2@@69 T@U) (arg3@@64 Real) (arg4@@62 T@U) (arg5@@62 Real) (arg6@@62 T@U) (arg7@@62 T@U) (arg8@@62 T@U) (arg9@@62 Real) ) (! (= (type (invRecv78 arg0@@101 arg1@@88 arg2@@69 arg3@@64 arg4@@62 arg5@@62 arg6@@62 arg7@@62 arg8@@62 arg9@@62)) RefType)
 :qid |funType:invRecv78|
 :pattern ( (invRecv78 arg0@@101 arg1@@88 arg2@@69 arg3@@64 arg4@@62 arg5@@62 arg6@@62 arg7@@62 arg8@@62 arg9@@62))
))) (forall ((arg0@@102 T@U) (arg1@@89 Real) (arg2@@70 T@U) (arg3@@65 Real) (arg4@@63 T@U) (arg5@@63 Real) (arg6@@63 T@U) (arg7@@63 T@U) (arg8@@63 T@U) (arg9@@63 Real) ) (! (= (type (invRecv80 arg0@@102 arg1@@89 arg2@@70 arg3@@65 arg4@@63 arg5@@63 arg6@@63 arg7@@63 arg8@@63 arg9@@63)) RefType)
 :qid |funType:invRecv80|
 :pattern ( (invRecv80 arg0@@102 arg1@@89 arg2@@70 arg3@@65 arg4@@63 arg5@@63 arg6@@63 arg7@@63 arg8@@63 arg9@@63))
))) (forall ((arg0@@103 T@U) (arg1@@90 Real) (arg2@@71 T@U) (arg3@@66 Real) (arg4@@64 T@U) (arg5@@64 Real) (arg6@@64 T@U) (arg7@@64 T@U) (arg8@@64 T@U) (arg9@@64 Real) ) (! (= (type (invRecv81 arg0@@103 arg1@@90 arg2@@71 arg3@@66 arg4@@64 arg5@@64 arg6@@64 arg7@@64 arg8@@64 arg9@@64)) RefType)
 :qid |funType:invRecv81|
 :pattern ( (invRecv81 arg0@@103 arg1@@90 arg2@@71 arg3@@66 arg4@@64 arg5@@64 arg6@@64 arg7@@64 arg8@@64 arg9@@64))
))) (forall ((arg0@@104 T@U) (arg1@@91 Real) (arg2@@72 T@U) (arg3@@67 Real) (arg4@@65 T@U) (arg5@@65 Real) (arg6@@65 T@U) (arg7@@65 T@U) (arg8@@65 T@U) (arg9@@65 Real) ) (! (= (type (invRecv82 arg0@@104 arg1@@91 arg2@@72 arg3@@67 arg4@@65 arg5@@65 arg6@@65 arg7@@65 arg8@@65 arg9@@65)) RefType)
 :qid |funType:invRecv82|
 :pattern ( (invRecv82 arg0@@104 arg1@@91 arg2@@72 arg3@@67 arg4@@65 arg5@@65 arg6@@65 arg7@@65 arg8@@65 arg9@@65))
))) (= (type QPMask@7) (MapType1Type RefType realType))) (forall ((arg0@@105 T@U) (arg1@@92 Real) (arg2@@73 T@U) (arg3@@68 Real) (arg4@@66 T@U) (arg5@@66 Real) (arg6@@66 T@U) (arg7@@66 T@U) (arg8@@66 T@U) (arg9@@66 Real) ) (! (= (type (invRecv64 arg0@@105 arg1@@92 arg2@@73 arg3@@68 arg4@@66 arg5@@66 arg6@@66 arg7@@66 arg8@@66 arg9@@66)) RefType)
 :qid |funType:invRecv64|
 :pattern ( (invRecv64 arg0@@105 arg1@@92 arg2@@73 arg3@@68 arg4@@66 arg5@@66 arg6@@66 arg7@@66 arg8@@66 arg9@@66))
))) (forall ((arg0@@106 T@U) (arg1@@93 Real) (arg2@@74 T@U) (arg3@@69 Real) (arg4@@67 T@U) (arg5@@67 Real) (arg6@@67 T@U) (arg7@@67 T@U) (arg8@@67 T@U) (arg9@@67 Real) ) (! (= (type (invRecv66 arg0@@106 arg1@@93 arg2@@74 arg3@@69 arg4@@67 arg5@@67 arg6@@67 arg7@@67 arg8@@67 arg9@@67)) RefType)
 :qid |funType:invRecv66|
 :pattern ( (invRecv66 arg0@@106 arg1@@93 arg2@@74 arg3@@69 arg4@@67 arg5@@67 arg6@@67 arg7@@67 arg8@@67 arg9@@67))
))) (forall ((arg0@@107 T@U) (arg1@@94 Real) (arg2@@75 T@U) (arg3@@70 Real) (arg4@@68 T@U) (arg5@@68 Real) (arg6@@68 T@U) (arg7@@68 T@U) (arg8@@68 T@U) (arg9@@68 Real) ) (! (= (type (invRecv68 arg0@@107 arg1@@94 arg2@@75 arg3@@70 arg4@@68 arg5@@68 arg6@@68 arg7@@68 arg8@@68 arg9@@68)) RefType)
 :qid |funType:invRecv68|
 :pattern ( (invRecv68 arg0@@107 arg1@@94 arg2@@75 arg3@@70 arg4@@68 arg5@@68 arg6@@68 arg7@@68 arg8@@68 arg9@@68))
))) (forall ((arg0@@108 T@U) (arg1@@95 Real) (arg2@@76 T@U) (arg3@@71 Real) (arg4@@69 T@U) (arg5@@69 Real) (arg6@@69 T@U) (arg7@@69 T@U) (arg8@@69 T@U) (arg9@@69 Real) ) (! (= (type (invRecv70 arg0@@108 arg1@@95 arg2@@76 arg3@@71 arg4@@69 arg5@@69 arg6@@69 arg7@@69 arg8@@69 arg9@@69)) RefType)
 :qid |funType:invRecv70|
 :pattern ( (invRecv70 arg0@@108 arg1@@95 arg2@@76 arg3@@71 arg4@@69 arg5@@69 arg6@@69 arg7@@69 arg8@@69 arg9@@69))
))) (forall ((arg0@@109 T@U) (arg1@@96 Real) (arg2@@77 T@U) (arg3@@72 Real) (arg4@@70 T@U) (arg5@@70 Real) (arg6@@70 T@U) (arg7@@70 T@U) (arg8@@70 T@U) (arg9@@70 Real) ) (! (= (type (invRecv71 arg0@@109 arg1@@96 arg2@@77 arg3@@72 arg4@@70 arg5@@70 arg6@@70 arg7@@70 arg8@@70 arg9@@70)) RefType)
 :qid |funType:invRecv71|
 :pattern ( (invRecv71 arg0@@109 arg1@@96 arg2@@77 arg3@@72 arg4@@70 arg5@@70 arg6@@70 arg7@@70 arg8@@70 arg9@@70))
))) (forall ((arg0@@110 T@U) (arg1@@97 Real) (arg2@@78 T@U) (arg3@@73 Real) (arg4@@71 T@U) (arg5@@71 Real) (arg6@@71 T@U) (arg7@@71 T@U) (arg8@@71 T@U) (arg9@@71 Real) ) (! (= (type (invRecv72 arg0@@110 arg1@@97 arg2@@78 arg3@@73 arg4@@71 arg5@@71 arg6@@71 arg7@@71 arg8@@71 arg9@@71)) RefType)
 :qid |funType:invRecv72|
 :pattern ( (invRecv72 arg0@@110 arg1@@97 arg2@@78 arg3@@73 arg4@@71 arg5@@71 arg6@@71 arg7@@71 arg8@@71 arg9@@71))
))) (= (type QPMask@6) (MapType1Type RefType realType))) (forall ((arg0@@111 T@U) (arg1@@98 Real) (arg2@@79 T@U) (arg3@@74 Real) (arg4@@72 T@U) (arg5@@72 Real) (arg6@@72 T@U) (arg7@@72 T@U) (arg8@@72 T@U) (arg9@@72 Real) ) (! (= (type (invRecv54 arg0@@111 arg1@@98 arg2@@79 arg3@@74 arg4@@72 arg5@@72 arg6@@72 arg7@@72 arg8@@72 arg9@@72)) RefType)
 :qid |funType:invRecv54|
 :pattern ( (invRecv54 arg0@@111 arg1@@98 arg2@@79 arg3@@74 arg4@@72 arg5@@72 arg6@@72 arg7@@72 arg8@@72 arg9@@72))
))) (forall ((arg0@@112 T@U) (arg1@@99 Real) (arg2@@80 T@U) (arg3@@75 Real) (arg4@@73 T@U) (arg5@@73 Real) (arg6@@73 T@U) (arg7@@73 T@U) (arg8@@73 T@U) (arg9@@73 Real) ) (! (= (type (invRecv56 arg0@@112 arg1@@99 arg2@@80 arg3@@75 arg4@@73 arg5@@73 arg6@@73 arg7@@73 arg8@@73 arg9@@73)) RefType)
 :qid |funType:invRecv56|
 :pattern ( (invRecv56 arg0@@112 arg1@@99 arg2@@80 arg3@@75 arg4@@73 arg5@@73 arg6@@73 arg7@@73 arg8@@73 arg9@@73))
))) (forall ((arg0@@113 T@U) (arg1@@100 Real) (arg2@@81 T@U) (arg3@@76 Real) (arg4@@74 T@U) (arg5@@74 Real) (arg6@@74 T@U) (arg7@@74 T@U) (arg8@@74 T@U) (arg9@@74 Real) ) (! (= (type (invRecv58 arg0@@113 arg1@@100 arg2@@81 arg3@@76 arg4@@74 arg5@@74 arg6@@74 arg7@@74 arg8@@74 arg9@@74)) RefType)
 :qid |funType:invRecv58|
 :pattern ( (invRecv58 arg0@@113 arg1@@100 arg2@@81 arg3@@76 arg4@@74 arg5@@74 arg6@@74 arg7@@74 arg8@@74 arg9@@74))
))) (forall ((arg0@@114 T@U) (arg1@@101 Real) (arg2@@82 T@U) (arg3@@77 Real) (arg4@@75 T@U) (arg5@@75 Real) (arg6@@75 T@U) (arg7@@75 T@U) (arg8@@75 T@U) (arg9@@75 Real) ) (! (= (type (invRecv60 arg0@@114 arg1@@101 arg2@@82 arg3@@77 arg4@@75 arg5@@75 arg6@@75 arg7@@75 arg8@@75 arg9@@75)) RefType)
 :qid |funType:invRecv60|
 :pattern ( (invRecv60 arg0@@114 arg1@@101 arg2@@82 arg3@@77 arg4@@75 arg5@@75 arg6@@75 arg7@@75 arg8@@75 arg9@@75))
))) (forall ((arg0@@115 T@U) (arg1@@102 Real) (arg2@@83 T@U) (arg3@@78 Real) (arg4@@76 T@U) (arg5@@76 Real) (arg6@@76 T@U) (arg7@@76 T@U) (arg8@@76 T@U) (arg9@@76 Real) ) (! (= (type (invRecv61 arg0@@115 arg1@@102 arg2@@83 arg3@@78 arg4@@76 arg5@@76 arg6@@76 arg7@@76 arg8@@76 arg9@@76)) RefType)
 :qid |funType:invRecv61|
 :pattern ( (invRecv61 arg0@@115 arg1@@102 arg2@@83 arg3@@78 arg4@@76 arg5@@76 arg6@@76 arg7@@76 arg8@@76 arg9@@76))
))) (forall ((arg0@@116 T@U) (arg1@@103 Real) (arg2@@84 T@U) (arg3@@79 Real) (arg4@@77 T@U) (arg5@@77 Real) (arg6@@77 T@U) (arg7@@77 T@U) (arg8@@77 T@U) (arg9@@77 Real) ) (! (= (type (invRecv62 arg0@@116 arg1@@103 arg2@@84 arg3@@79 arg4@@77 arg5@@77 arg6@@77 arg7@@77 arg8@@77 arg9@@77)) RefType)
 :qid |funType:invRecv62|
 :pattern ( (invRecv62 arg0@@116 arg1@@103 arg2@@84 arg3@@79 arg4@@77 arg5@@77 arg6@@77 arg7@@77 arg8@@77 arg9@@77))
))) (= (type QPMask@5) (MapType1Type RefType realType))) (forall ((arg0@@117 T@U) (arg1@@104 Real) (arg2@@85 T@U) (arg3@@80 Real) (arg4@@78 T@U) (arg5@@78 Real) (arg6@@78 T@U) (arg7@@78 T@U) (arg8@@78 T@U) (arg9@@78 Real) ) (! (= (type (invRecv44 arg0@@117 arg1@@104 arg2@@85 arg3@@80 arg4@@78 arg5@@78 arg6@@78 arg7@@78 arg8@@78 arg9@@78)) RefType)
 :qid |funType:invRecv44|
 :pattern ( (invRecv44 arg0@@117 arg1@@104 arg2@@85 arg3@@80 arg4@@78 arg5@@78 arg6@@78 arg7@@78 arg8@@78 arg9@@78))
))) (forall ((arg0@@118 T@U) (arg1@@105 Real) (arg2@@86 T@U) (arg3@@81 Real) (arg4@@79 T@U) (arg5@@79 Real) (arg6@@79 T@U) (arg7@@79 T@U) (arg8@@79 T@U) (arg9@@79 Real) ) (! (= (type (invRecv46 arg0@@118 arg1@@105 arg2@@86 arg3@@81 arg4@@79 arg5@@79 arg6@@79 arg7@@79 arg8@@79 arg9@@79)) RefType)
 :qid |funType:invRecv46|
 :pattern ( (invRecv46 arg0@@118 arg1@@105 arg2@@86 arg3@@81 arg4@@79 arg5@@79 arg6@@79 arg7@@79 arg8@@79 arg9@@79))
))) (forall ((arg0@@119 T@U) (arg1@@106 Real) (arg2@@87 T@U) (arg3@@82 Real) (arg4@@80 T@U) (arg5@@80 Real) (arg6@@80 T@U) (arg7@@80 T@U) (arg8@@80 T@U) (arg9@@80 Real) ) (! (= (type (invRecv48 arg0@@119 arg1@@106 arg2@@87 arg3@@82 arg4@@80 arg5@@80 arg6@@80 arg7@@80 arg8@@80 arg9@@80)) RefType)
 :qid |funType:invRecv48|
 :pattern ( (invRecv48 arg0@@119 arg1@@106 arg2@@87 arg3@@82 arg4@@80 arg5@@80 arg6@@80 arg7@@80 arg8@@80 arg9@@80))
))) (forall ((arg0@@120 T@U) (arg1@@107 Real) (arg2@@88 T@U) (arg3@@83 Real) (arg4@@81 T@U) (arg5@@81 Real) (arg6@@81 T@U) (arg7@@81 T@U) (arg8@@81 T@U) (arg9@@81 Real) ) (! (= (type (invRecv50 arg0@@120 arg1@@107 arg2@@88 arg3@@83 arg4@@81 arg5@@81 arg6@@81 arg7@@81 arg8@@81 arg9@@81)) RefType)
 :qid |funType:invRecv50|
 :pattern ( (invRecv50 arg0@@120 arg1@@107 arg2@@88 arg3@@83 arg4@@81 arg5@@81 arg6@@81 arg7@@81 arg8@@81 arg9@@81))
))) (forall ((arg0@@121 T@U) (arg1@@108 Real) (arg2@@89 T@U) (arg3@@84 Real) (arg4@@82 T@U) (arg5@@82 Real) (arg6@@82 T@U) (arg7@@82 T@U) (arg8@@82 T@U) (arg9@@82 Real) ) (! (= (type (invRecv51 arg0@@121 arg1@@108 arg2@@89 arg3@@84 arg4@@82 arg5@@82 arg6@@82 arg7@@82 arg8@@82 arg9@@82)) RefType)
 :qid |funType:invRecv51|
 :pattern ( (invRecv51 arg0@@121 arg1@@108 arg2@@89 arg3@@84 arg4@@82 arg5@@82 arg6@@82 arg7@@82 arg8@@82 arg9@@82))
))) (forall ((arg0@@122 T@U) (arg1@@109 Real) (arg2@@90 T@U) (arg3@@85 Real) (arg4@@83 T@U) (arg5@@83 Real) (arg6@@83 T@U) (arg7@@83 T@U) (arg8@@83 T@U) (arg9@@83 Real) ) (! (= (type (invRecv52 arg0@@122 arg1@@109 arg2@@90 arg3@@85 arg4@@83 arg5@@83 arg6@@83 arg7@@83 arg8@@83 arg9@@83)) RefType)
 :qid |funType:invRecv52|
 :pattern ( (invRecv52 arg0@@122 arg1@@109 arg2@@90 arg3@@85 arg4@@83 arg5@@83 arg6@@83 arg7@@83 arg8@@83 arg9@@83))
))) (= (type QPMask@4) (MapType1Type RefType realType))) (forall ((arg0@@123 T@U) (arg1@@110 Real) (arg2@@91 T@U) (arg3@@86 Real) (arg4@@84 T@U) (arg5@@84 Real) (arg6@@84 T@U) (arg7@@84 T@U) (arg8@@84 T@U) (arg9@@84 Real) ) (! (= (type (invRecv34 arg0@@123 arg1@@110 arg2@@91 arg3@@86 arg4@@84 arg5@@84 arg6@@84 arg7@@84 arg8@@84 arg9@@84)) RefType)
 :qid |funType:invRecv34|
 :pattern ( (invRecv34 arg0@@123 arg1@@110 arg2@@91 arg3@@86 arg4@@84 arg5@@84 arg6@@84 arg7@@84 arg8@@84 arg9@@84))
))) (forall ((arg0@@124 T@U) (arg1@@111 Real) (arg2@@92 T@U) (arg3@@87 Real) (arg4@@85 T@U) (arg5@@85 Real) (arg6@@85 T@U) (arg7@@85 T@U) (arg8@@85 T@U) (arg9@@85 Real) ) (! (= (type (invRecv36 arg0@@124 arg1@@111 arg2@@92 arg3@@87 arg4@@85 arg5@@85 arg6@@85 arg7@@85 arg8@@85 arg9@@85)) RefType)
 :qid |funType:invRecv36|
 :pattern ( (invRecv36 arg0@@124 arg1@@111 arg2@@92 arg3@@87 arg4@@85 arg5@@85 arg6@@85 arg7@@85 arg8@@85 arg9@@85))
))) (forall ((arg0@@125 T@U) (arg1@@112 Real) (arg2@@93 T@U) (arg3@@88 Real) (arg4@@86 T@U) (arg5@@86 Real) (arg6@@86 T@U) (arg7@@86 T@U) (arg8@@86 T@U) (arg9@@86 Real) ) (! (= (type (invRecv38 arg0@@125 arg1@@112 arg2@@93 arg3@@88 arg4@@86 arg5@@86 arg6@@86 arg7@@86 arg8@@86 arg9@@86)) RefType)
 :qid |funType:invRecv38|
 :pattern ( (invRecv38 arg0@@125 arg1@@112 arg2@@93 arg3@@88 arg4@@86 arg5@@86 arg6@@86 arg7@@86 arg8@@86 arg9@@86))
))) (forall ((arg0@@126 T@U) (arg1@@113 Real) (arg2@@94 T@U) (arg3@@89 Real) (arg4@@87 T@U) (arg5@@87 Real) (arg6@@87 T@U) (arg7@@87 T@U) (arg8@@87 T@U) (arg9@@87 Real) ) (! (= (type (invRecv40 arg0@@126 arg1@@113 arg2@@94 arg3@@89 arg4@@87 arg5@@87 arg6@@87 arg7@@87 arg8@@87 arg9@@87)) RefType)
 :qid |funType:invRecv40|
 :pattern ( (invRecv40 arg0@@126 arg1@@113 arg2@@94 arg3@@89 arg4@@87 arg5@@87 arg6@@87 arg7@@87 arg8@@87 arg9@@87))
))) (forall ((arg0@@127 T@U) (arg1@@114 Real) (arg2@@95 T@U) (arg3@@90 Real) (arg4@@88 T@U) (arg5@@88 Real) (arg6@@88 T@U) (arg7@@88 T@U) (arg8@@88 T@U) (arg9@@88 Real) ) (! (= (type (invRecv41 arg0@@127 arg1@@114 arg2@@95 arg3@@90 arg4@@88 arg5@@88 arg6@@88 arg7@@88 arg8@@88 arg9@@88)) RefType)
 :qid |funType:invRecv41|
 :pattern ( (invRecv41 arg0@@127 arg1@@114 arg2@@95 arg3@@90 arg4@@88 arg5@@88 arg6@@88 arg7@@88 arg8@@88 arg9@@88))
))) (forall ((arg0@@128 T@U) (arg1@@115 Real) (arg2@@96 T@U) (arg3@@91 Real) (arg4@@89 T@U) (arg5@@89 Real) (arg6@@89 T@U) (arg7@@89 T@U) (arg8@@89 T@U) (arg9@@89 Real) ) (! (= (type (invRecv42 arg0@@128 arg1@@115 arg2@@96 arg3@@91 arg4@@89 arg5@@89 arg6@@89 arg7@@89 arg8@@89 arg9@@89)) RefType)
 :qid |funType:invRecv42|
 :pattern ( (invRecv42 arg0@@128 arg1@@115 arg2@@96 arg3@@91 arg4@@89 arg5@@89 arg6@@89 arg7@@89 arg8@@89 arg9@@89))
))) (= (type QPMask@3) (MapType1Type RefType realType))) (forall ((arg0@@129 T@U) (arg1@@116 Real) (arg2@@97 T@U) (arg3@@92 Real) (arg4@@90 T@U) (arg5@@90 Real) (arg6@@90 T@U) (arg7@@90 T@U) (arg8@@90 T@U) (arg9@@90 Real) ) (! (= (type (invRecv24 arg0@@129 arg1@@116 arg2@@97 arg3@@92 arg4@@90 arg5@@90 arg6@@90 arg7@@90 arg8@@90 arg9@@90)) RefType)
 :qid |funType:invRecv24|
 :pattern ( (invRecv24 arg0@@129 arg1@@116 arg2@@97 arg3@@92 arg4@@90 arg5@@90 arg6@@90 arg7@@90 arg8@@90 arg9@@90))
))) (forall ((arg0@@130 T@U) (arg1@@117 Real) (arg2@@98 T@U) (arg3@@93 Real) (arg4@@91 T@U) (arg5@@91 Real) (arg6@@91 T@U) (arg7@@91 T@U) (arg8@@91 T@U) (arg9@@91 Real) ) (! (= (type (invRecv26 arg0@@130 arg1@@117 arg2@@98 arg3@@93 arg4@@91 arg5@@91 arg6@@91 arg7@@91 arg8@@91 arg9@@91)) RefType)
 :qid |funType:invRecv26|
 :pattern ( (invRecv26 arg0@@130 arg1@@117 arg2@@98 arg3@@93 arg4@@91 arg5@@91 arg6@@91 arg7@@91 arg8@@91 arg9@@91))
))) (forall ((arg0@@131 T@U) (arg1@@118 Real) (arg2@@99 T@U) (arg3@@94 Real) (arg4@@92 T@U) (arg5@@92 Real) (arg6@@92 T@U) (arg7@@92 T@U) (arg8@@92 T@U) (arg9@@92 Real) ) (! (= (type (invRecv28 arg0@@131 arg1@@118 arg2@@99 arg3@@94 arg4@@92 arg5@@92 arg6@@92 arg7@@92 arg8@@92 arg9@@92)) RefType)
 :qid |funType:invRecv28|
 :pattern ( (invRecv28 arg0@@131 arg1@@118 arg2@@99 arg3@@94 arg4@@92 arg5@@92 arg6@@92 arg7@@92 arg8@@92 arg9@@92))
))) (forall ((arg0@@132 T@U) (arg1@@119 Real) (arg2@@100 T@U) (arg3@@95 Real) (arg4@@93 T@U) (arg5@@93 Real) (arg6@@93 T@U) (arg7@@93 T@U) (arg8@@93 T@U) (arg9@@93 Real) ) (! (= (type (invRecv30 arg0@@132 arg1@@119 arg2@@100 arg3@@95 arg4@@93 arg5@@93 arg6@@93 arg7@@93 arg8@@93 arg9@@93)) RefType)
 :qid |funType:invRecv30|
 :pattern ( (invRecv30 arg0@@132 arg1@@119 arg2@@100 arg3@@95 arg4@@93 arg5@@93 arg6@@93 arg7@@93 arg8@@93 arg9@@93))
))) (forall ((arg0@@133 T@U) (arg1@@120 Real) (arg2@@101 T@U) (arg3@@96 Real) (arg4@@94 T@U) (arg5@@94 Real) (arg6@@94 T@U) (arg7@@94 T@U) (arg8@@94 T@U) (arg9@@94 Real) ) (! (= (type (invRecv31 arg0@@133 arg1@@120 arg2@@101 arg3@@96 arg4@@94 arg5@@94 arg6@@94 arg7@@94 arg8@@94 arg9@@94)) RefType)
 :qid |funType:invRecv31|
 :pattern ( (invRecv31 arg0@@133 arg1@@120 arg2@@101 arg3@@96 arg4@@94 arg5@@94 arg6@@94 arg7@@94 arg8@@94 arg9@@94))
))) (forall ((arg0@@134 T@U) (arg1@@121 Real) (arg2@@102 T@U) (arg3@@97 Real) (arg4@@95 T@U) (arg5@@95 Real) (arg6@@95 T@U) (arg7@@95 T@U) (arg8@@95 T@U) (arg9@@95 Real) ) (! (= (type (invRecv32 arg0@@134 arg1@@121 arg2@@102 arg3@@97 arg4@@95 arg5@@95 arg6@@95 arg7@@95 arg8@@95 arg9@@95)) RefType)
 :qid |funType:invRecv32|
 :pattern ( (invRecv32 arg0@@134 arg1@@121 arg2@@102 arg3@@97 arg4@@95 arg5@@95 arg6@@95 arg7@@95 arg8@@95 arg9@@95))
))) (= (type QPMask@2) (MapType1Type RefType realType))) (forall ((arg0@@135 T@U) (arg1@@122 Real) (arg2@@103 T@U) (arg3@@98 Real) (arg4@@96 T@U) (arg5@@96 Real) (arg6@@96 T@U) (arg7@@96 T@U) (arg8@@96 T@U) (arg9@@96 Real) ) (! (= (type (invRecv14 arg0@@135 arg1@@122 arg2@@103 arg3@@98 arg4@@96 arg5@@96 arg6@@96 arg7@@96 arg8@@96 arg9@@96)) RefType)
 :qid |funType:invRecv14|
 :pattern ( (invRecv14 arg0@@135 arg1@@122 arg2@@103 arg3@@98 arg4@@96 arg5@@96 arg6@@96 arg7@@96 arg8@@96 arg9@@96))
))) (forall ((arg0@@136 T@U) (arg1@@123 Real) (arg2@@104 T@U) (arg3@@99 Real) (arg4@@97 T@U) (arg5@@97 Real) (arg6@@97 T@U) (arg7@@97 T@U) (arg8@@97 T@U) (arg9@@97 Real) ) (! (= (type (invRecv16 arg0@@136 arg1@@123 arg2@@104 arg3@@99 arg4@@97 arg5@@97 arg6@@97 arg7@@97 arg8@@97 arg9@@97)) RefType)
 :qid |funType:invRecv16|
 :pattern ( (invRecv16 arg0@@136 arg1@@123 arg2@@104 arg3@@99 arg4@@97 arg5@@97 arg6@@97 arg7@@97 arg8@@97 arg9@@97))
))) (forall ((arg0@@137 T@U) (arg1@@124 Real) (arg2@@105 T@U) (arg3@@100 Real) (arg4@@98 T@U) (arg5@@98 Real) (arg6@@98 T@U) (arg7@@98 T@U) (arg8@@98 T@U) (arg9@@98 Real) ) (! (= (type (invRecv18 arg0@@137 arg1@@124 arg2@@105 arg3@@100 arg4@@98 arg5@@98 arg6@@98 arg7@@98 arg8@@98 arg9@@98)) RefType)
 :qid |funType:invRecv18|
 :pattern ( (invRecv18 arg0@@137 arg1@@124 arg2@@105 arg3@@100 arg4@@98 arg5@@98 arg6@@98 arg7@@98 arg8@@98 arg9@@98))
))) (forall ((arg0@@138 T@U) (arg1@@125 Real) (arg2@@106 T@U) (arg3@@101 Real) (arg4@@99 T@U) (arg5@@99 Real) (arg6@@99 T@U) (arg7@@99 T@U) (arg8@@99 T@U) (arg9@@99 Real) ) (! (= (type (invRecv20 arg0@@138 arg1@@125 arg2@@106 arg3@@101 arg4@@99 arg5@@99 arg6@@99 arg7@@99 arg8@@99 arg9@@99)) RefType)
 :qid |funType:invRecv20|
 :pattern ( (invRecv20 arg0@@138 arg1@@125 arg2@@106 arg3@@101 arg4@@99 arg5@@99 arg6@@99 arg7@@99 arg8@@99 arg9@@99))
))) (forall ((arg0@@139 T@U) (arg1@@126 Real) (arg2@@107 T@U) (arg3@@102 Real) (arg4@@100 T@U) (arg5@@100 Real) (arg6@@100 T@U) (arg7@@100 T@U) (arg8@@100 T@U) (arg9@@100 Real) ) (! (= (type (invRecv21 arg0@@139 arg1@@126 arg2@@107 arg3@@102 arg4@@100 arg5@@100 arg6@@100 arg7@@100 arg8@@100 arg9@@100)) RefType)
 :qid |funType:invRecv21|
 :pattern ( (invRecv21 arg0@@139 arg1@@126 arg2@@107 arg3@@102 arg4@@100 arg5@@100 arg6@@100 arg7@@100 arg8@@100 arg9@@100))
))) (forall ((arg0@@140 T@U) (arg1@@127 Real) (arg2@@108 T@U) (arg3@@103 Real) (arg4@@101 T@U) (arg5@@101 Real) (arg6@@101 T@U) (arg7@@101 T@U) (arg8@@101 T@U) (arg9@@101 Real) ) (! (= (type (invRecv22 arg0@@140 arg1@@127 arg2@@108 arg3@@103 arg4@@101 arg5@@101 arg6@@101 arg7@@101 arg8@@101 arg9@@101)) RefType)
 :qid |funType:invRecv22|
 :pattern ( (invRecv22 arg0@@140 arg1@@127 arg2@@108 arg3@@103 arg4@@101 arg5@@101 arg6@@101 arg7@@101 arg8@@101 arg9@@101))
))) (= (type QPMask@1) (MapType1Type RefType realType))) (forall ((arg0@@141 T@U) (arg1@@128 Real) (arg2@@109 T@U) (arg3@@104 Real) (arg4@@102 T@U) (arg5@@102 Real) (arg6@@102 T@U) (arg7@@102 T@U) (arg8@@102 T@U) (arg9@@102 Real) ) (! (= (type (invRecv4 arg0@@141 arg1@@128 arg2@@109 arg3@@104 arg4@@102 arg5@@102 arg6@@102 arg7@@102 arg8@@102 arg9@@102)) RefType)
 :qid |funType:invRecv4|
 :pattern ( (invRecv4 arg0@@141 arg1@@128 arg2@@109 arg3@@104 arg4@@102 arg5@@102 arg6@@102 arg7@@102 arg8@@102 arg9@@102))
))) (forall ((arg0@@142 T@U) (arg1@@129 Real) (arg2@@110 T@U) (arg3@@105 Real) (arg4@@103 T@U) (arg5@@103 Real) (arg6@@103 T@U) (arg7@@103 T@U) (arg8@@103 T@U) (arg9@@103 Real) ) (! (= (type (invRecv6 arg0@@142 arg1@@129 arg2@@110 arg3@@105 arg4@@103 arg5@@103 arg6@@103 arg7@@103 arg8@@103 arg9@@103)) RefType)
 :qid |funType:invRecv6|
 :pattern ( (invRecv6 arg0@@142 arg1@@129 arg2@@110 arg3@@105 arg4@@103 arg5@@103 arg6@@103 arg7@@103 arg8@@103 arg9@@103))
))) (forall ((arg0@@143 T@U) (arg1@@130 Real) (arg2@@111 T@U) (arg3@@106 Real) (arg4@@104 T@U) (arg5@@104 Real) (arg6@@104 T@U) (arg7@@104 T@U) (arg8@@104 T@U) (arg9@@104 Real) ) (! (= (type (invRecv8 arg0@@143 arg1@@130 arg2@@111 arg3@@106 arg4@@104 arg5@@104 arg6@@104 arg7@@104 arg8@@104 arg9@@104)) RefType)
 :qid |funType:invRecv8|
 :pattern ( (invRecv8 arg0@@143 arg1@@130 arg2@@111 arg3@@106 arg4@@104 arg5@@104 arg6@@104 arg7@@104 arg8@@104 arg9@@104))
))) (forall ((arg0@@144 T@U) (arg1@@131 Real) (arg2@@112 T@U) (arg3@@107 Real) (arg4@@105 T@U) (arg5@@105 Real) (arg6@@105 T@U) (arg7@@105 T@U) (arg8@@105 T@U) (arg9@@105 Real) ) (! (= (type (invRecv10 arg0@@144 arg1@@131 arg2@@112 arg3@@107 arg4@@105 arg5@@105 arg6@@105 arg7@@105 arg8@@105 arg9@@105)) RefType)
 :qid |funType:invRecv10|
 :pattern ( (invRecv10 arg0@@144 arg1@@131 arg2@@112 arg3@@107 arg4@@105 arg5@@105 arg6@@105 arg7@@105 arg8@@105 arg9@@105))
))) (forall ((arg0@@145 T@U) (arg1@@132 Real) (arg2@@113 T@U) (arg3@@108 Real) (arg4@@106 T@U) (arg5@@106 Real) (arg6@@106 T@U) (arg7@@106 T@U) (arg8@@106 T@U) (arg9@@106 Real) ) (! (= (type (invRecv11 arg0@@145 arg1@@132 arg2@@113 arg3@@108 arg4@@106 arg5@@106 arg6@@106 arg7@@106 arg8@@106 arg9@@106)) RefType)
 :qid |funType:invRecv11|
 :pattern ( (invRecv11 arg0@@145 arg1@@132 arg2@@113 arg3@@108 arg4@@106 arg5@@106 arg6@@106 arg7@@106 arg8@@106 arg9@@106))
))) (forall ((arg0@@146 T@U) (arg1@@133 Real) (arg2@@114 T@U) (arg3@@109 Real) (arg4@@107 T@U) (arg5@@107 Real) (arg6@@107 T@U) (arg7@@107 T@U) (arg8@@107 T@U) (arg9@@107 Real) ) (! (= (type (invRecv12 arg0@@146 arg1@@133 arg2@@114 arg3@@109 arg4@@107 arg5@@107 arg6@@107 arg7@@107 arg8@@107 arg9@@107)) RefType)
 :qid |funType:invRecv12|
 :pattern ( (invRecv12 arg0@@146 arg1@@133 arg2@@114 arg3@@109 arg4@@107 arg5@@107 arg6@@107 arg7@@107 arg8@@107 arg9@@107))
))) (= (type QPMask@0) (MapType1Type RefType realType))) (forall ((arg0@@147 T@U) (arg1@@134 Real) (arg2@@115 T@U) (arg3@@110 Real) (arg4@@108 T@U) (arg5@@108 Real) (arg6@@108 T@U) (arg7@@108 T@U) (arg8@@108 T@U) (arg9@@108 Real) ) (! (= (type (invRecv1 arg0@@147 arg1@@134 arg2@@115 arg3@@110 arg4@@108 arg5@@108 arg6@@108 arg7@@108 arg8@@108 arg9@@108)) RefType)
 :qid |funType:invRecv1|
 :pattern ( (invRecv1 arg0@@147 arg1@@134 arg2@@115 arg3@@110 arg4@@108 arg5@@108 arg6@@108 arg7@@108 arg8@@108 arg9@@108))
))) (forall ((arg0@@148 T@U) (arg1@@135 Real) (arg2@@116 T@U) (arg3@@111 Real) (arg4@@109 T@U) (arg5@@109 Real) (arg6@@109 T@U) (arg7@@109 T@U) (arg8@@109 T@U) (arg9@@109 Real) ) (! (= (type (invRecv2 arg0@@148 arg1@@135 arg2@@116 arg3@@111 arg4@@109 arg5@@109 arg6@@109 arg7@@109 arg8@@109 arg9@@109)) RefType)
 :qid |funType:invRecv2|
 :pattern ( (invRecv2 arg0@@148 arg1@@135 arg2@@116 arg3@@111 arg4@@109 arg5@@109 arg6@@109 arg7@@109 arg8@@109 arg9@@109))
))) (forall ((arg0@@149 T@U) (arg1@@136 Real) (arg2@@117 T@U) (arg3@@112 Real) (arg4@@110 T@U) (arg5@@110 Real) (arg6@@110 T@U) (arg7@@110 T@U) (arg8@@110 T@U) (arg9@@110 Real) ) (! (= (type (invRecv3 arg0@@149 arg1@@136 arg2@@117 arg3@@112 arg4@@110 arg5@@110 arg6@@110 arg7@@110 arg8@@110 arg9@@110)) RefType)
 :qid |funType:invRecv3|
 :pattern ( (invRecv3 arg0@@149 arg1@@136 arg2@@117 arg3@@112 arg4@@110 arg5@@110 arg6@@110 arg7@@110 arg8@@110 arg9@@110))
))))
(set-info :boogie-vc-id m)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 179) (let ((anon171_Else_correct true))
(let ((anon171_Then_correct  (=> (and (= q_1 FullPerm) (= (ControlFlow 0 126) (- 0 125))) false)))
(let ((anon170_Else_correct  (and (=> (= (ControlFlow 0 128) (- 0 129)) (<= FullPerm (U_2_real (MapType1Select AssertMask@0 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1))))) (=> (<= FullPerm (U_2_real (MapType1Select AssertMask@0 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1)))) (=> (and (= AssertMask@1 (MapType1Store AssertMask@0 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1) (real_2_U (- (U_2_real (MapType1Select AssertMask@0 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1))) FullPerm)))) (state Heap@@10 QPMask@11)) (and (=> (= (ControlFlow 0 128) 126) anon171_Then_correct) (=> (= (ControlFlow 0 128) 127) anon171_Else_correct)))))))
(let ((anon170_Then_correct  (and (=> (= (ControlFlow 0 121) (- 0 124)) (>= q_1 NoPerm)) (=> (>= q_1 NoPerm) (=> (=> (> q_1 NoPerm) (not (= a_2 null))) (=> (and (= WandDefLHSMask@3 (MapType1Store ZeroMask a_2 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask a_2 f_7)) q_1)))) (state WandDefLHSHeap@1 WandDefLHSMask@3)) (and (=> (= (ControlFlow 0 121) (- 0 123)) (>= q_1 NoPerm)) (=> (>= q_1 NoPerm) (=> (=> (> q_1 NoPerm) (not (= b_2 null))) (=> (and (= WandDefLHSMask@4 (MapType1Store WandDefLHSMask@3 b_2 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@3 b_2 f_7)) q_1)))) (state WandDefLHSHeap@1 WandDefLHSMask@4)) (and (=> (= (ControlFlow 0 121) (- 0 122)) (>= q_1 NoPerm)) (=> (>= q_1 NoPerm) (=> (and (=> (> q_1 NoPerm) (not (= c null))) (= WandDefLHSMask@5 (MapType1Store WandDefLHSMask@4 c f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@4 c f_7)) q_1))))) (=> (and (and (state WandDefLHSHeap@1 WandDefLHSMask@5) (state WandDefLHSHeap@1 WandDefLHSMask@5)) (and (state WandDefLHSHeap@1 WandDefLHSMask@5) (= (ControlFlow 0 121) (- 0 120)))) (>= q_1 NoPerm)))))))))))))))
(let ((anon169_Else_correct  (and (=> (= (ControlFlow 0 130) (- 0 131)) (<= FullPerm (U_2_real (MapType1Select QPMask@11 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1))))) (=> (<= FullPerm (U_2_real (MapType1Select QPMask@11 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1)))) (=> (= AssertMask@0 (MapType1Store QPMask@11 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1) (real_2_U (- (U_2_real (MapType1Select QPMask@11 null (wand a_2 q_1 b_2 q_1 c q_1 a_2 b_2 c q_1))) FullPerm)))) (and (=> (= (ControlFlow 0 130) 121) anon170_Then_correct) (=> (= (ControlFlow 0 130) 128) anon170_Else_correct)))))))
(let ((anon169_Then_correct  (and (=> (= (ControlFlow 0 116) (- 0 119)) (>= q_1 NoPerm)) (=> (>= q_1 NoPerm) (=> (=> (> q_1 NoPerm) (not (= a_2 null))) (=> (and (= WandDefLHSMask@0 (MapType1Store ZeroMask a_2 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask a_2 f_7)) q_1)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (=> (= (ControlFlow 0 116) (- 0 118)) (>= q_1 NoPerm)) (=> (>= q_1 NoPerm) (=> (=> (> q_1 NoPerm) (not (= b_2 null))) (=> (and (= WandDefLHSMask@1 (MapType1Store WandDefLHSMask@0 b_2 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@0 b_2 f_7)) q_1)))) (state WandDefLHSHeap@0 WandDefLHSMask@1)) (and (=> (= (ControlFlow 0 116) (- 0 117)) (>= q_1 NoPerm)) (=> (>= q_1 NoPerm) (=> (and (=> (> q_1 NoPerm) (not (= c null))) (= WandDefLHSMask@2 (MapType1Store WandDefLHSMask@1 c f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@1 c f_7)) q_1))))) (=> (and (and (state WandDefLHSHeap@0 WandDefLHSMask@2) (state WandDefLHSHeap@0 WandDefLHSMask@2)) (and (state WandDefLHSHeap@0 WandDefLHSMask@2) (= (ControlFlow 0 116) (- 0 115)))) (>= q_1 NoPerm)))))))))))))))
(let ((anon166_Else_correct  (and (=> (= (ControlFlow 0 132) (- 0 133)) (forall ((x0_53 T@U) (x1_55 Real) (x2_55 T@U) (x3_55 Real) (x4_55 T@U) (x5_55 Real) (x6_55 T@U) (x7_55 T@U) (x8_55 T@U) (x9_55 Real) (x0_53_1 T@U) (x1_55_1 Real) (x2_55_1 T@U) (x3_55_1 Real) (x4_55_1 T@U) (x5_55_1 Real) (x6_55_1 T@U) (x7_55_1 T@U) (x8_55_1 T@U) (x9_55_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_53) RefType) (= (type x2_55) RefType)) (= (type x4_55) RefType)) (= (type x6_55) RefType)) (= (type x7_55) RefType)) (= (type x8_55) RefType)) (= (type x0_53_1) RefType)) (= (type x2_55_1) RefType)) (= (type x4_55_1) RefType)) (= (type x6_55_1) RefType)) (= (type x7_55_1) RefType)) (= (type x8_55_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_53 x0_53_1)) (not (= x1_55 x1_55_1))) (not (= x2_55 x2_55_1))) (not (= x3_55 x3_55_1))) (not (= x4_55 x4_55_1))) (not (= x5_55 x5_55_1))) (not (= x6_55 x6_55_1))) (not (= x7_55 x7_55_1))) (not (= x8_55 x8_55_1))) (not (= x9_55 x9_55_1))) (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_53 x1_55 x2_55 x3_55 x4_55 x5_55 x6_55 x7_55 x8_55 x9_55))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_53 x1_55 x2_55 x3_55 x4_55 x5_55 x6_55 x7_55 x8_55 x9_55))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_53 x1_55 x2_55 x3_55 x4_55 x5_55 x6_55 x7_55 x8_55 x9_55)))))) (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_53_1 x1_55_1 x2_55_1 x3_55_1 x4_55_1 x5_55_1 x6_55_1 x7_55_1 x8_55_1 x9_55_1))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_53_1 x1_55_1 x2_55_1 x3_55_1 x4_55_1 x5_55_1 x6_55_1 x7_55_1 x8_55_1 x9_55_1))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_53_1 x1_55_1 x2_55_1 x3_55_1 x4_55_1 x5_55_1 x6_55_1 x7_55_1 x8_55_1 x9_55_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_55 x6_55_1)) (not (= x9_55 x9_55_1))) (not (= x7_55 x7_55_1))) (not (= x9_55 x9_55_1))) (not (= x8_55 x8_55_1))) (not (= x9_55 x9_55_1))) (not (= x6_55 x6_55_1))) (not (= x7_55 x7_55_1))) (not (= x8_55 x8_55_1))) (not (= x9_55 x9_55_1)))))
 :qid |stdinbpl.2550:17|
 :skolemid |183|
 :pattern ( (neverTriggered113 x0_53 x1_55 x2_55 x3_55 x4_55 x5_55 x6_55 x7_55 x8_55 x9_55) (neverTriggered113 x0_53_1 x1_55_1 x2_55_1 x3_55_1 x4_55_1 x5_55_1 x6_55_1 x7_55_1 x8_55_1 x9_55_1))
))) (=> (forall ((x0_53@@0 T@U) (x1_55@@0 Real) (x2_55@@0 T@U) (x3_55@@0 Real) (x4_55@@0 T@U) (x5_55@@0 Real) (x6_55@@0 T@U) (x7_55@@0 T@U) (x8_55@@0 T@U) (x9_55@@0 Real) (x0_53_1@@0 T@U) (x1_55_1@@0 Real) (x2_55_1@@0 T@U) (x3_55_1@@0 Real) (x4_55_1@@0 T@U) (x5_55_1@@0 Real) (x6_55_1@@0 T@U) (x7_55_1@@0 T@U) (x8_55_1@@0 T@U) (x9_55_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_53@@0) RefType) (= (type x2_55@@0) RefType)) (= (type x4_55@@0) RefType)) (= (type x6_55@@0) RefType)) (= (type x7_55@@0) RefType)) (= (type x8_55@@0) RefType)) (= (type x0_53_1@@0) RefType)) (= (type x2_55_1@@0) RefType)) (= (type x4_55_1@@0) RefType)) (= (type x6_55_1@@0) RefType)) (= (type x7_55_1@@0) RefType)) (= (type x8_55_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_53@@0 x0_53_1@@0)) (not (= x1_55@@0 x1_55_1@@0))) (not (= x2_55@@0 x2_55_1@@0))) (not (= x3_55@@0 x3_55_1@@0))) (not (= x4_55@@0 x4_55_1@@0))) (not (= x5_55@@0 x5_55_1@@0))) (not (= x6_55@@0 x6_55_1@@0))) (not (= x7_55@@0 x7_55_1@@0))) (not (= x8_55@@0 x8_55_1@@0))) (not (= x9_55@@0 x9_55_1@@0))) (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_53@@0 x1_55@@0 x2_55@@0 x3_55@@0 x4_55@@0 x5_55@@0 x6_55@@0 x7_55@@0 x8_55@@0 x9_55@@0))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_53@@0 x1_55@@0 x2_55@@0 x3_55@@0 x4_55@@0 x5_55@@0 x6_55@@0 x7_55@@0 x8_55@@0 x9_55@@0))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_53@@0 x1_55@@0 x2_55@@0 x3_55@@0 x4_55@@0 x5_55@@0 x6_55@@0 x7_55@@0 x8_55@@0 x9_55@@0)))))) (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_53_1@@0 x1_55_1@@0 x2_55_1@@0 x3_55_1@@0 x4_55_1@@0 x5_55_1@@0 x6_55_1@@0 x7_55_1@@0 x8_55_1@@0 x9_55_1@@0))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_53_1@@0 x1_55_1@@0 x2_55_1@@0 x3_55_1@@0 x4_55_1@@0 x5_55_1@@0 x6_55_1@@0 x7_55_1@@0 x8_55_1@@0 x9_55_1@@0))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_53_1@@0 x1_55_1@@0 x2_55_1@@0 x3_55_1@@0 x4_55_1@@0 x5_55_1@@0 x6_55_1@@0 x7_55_1@@0 x8_55_1@@0 x9_55_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_55@@0 x6_55_1@@0)) (not (= x9_55@@0 x9_55_1@@0))) (not (= x7_55@@0 x7_55_1@@0))) (not (= x9_55@@0 x9_55_1@@0))) (not (= x8_55@@0 x8_55_1@@0))) (not (= x9_55@@0 x9_55_1@@0))) (not (= x6_55@@0 x6_55_1@@0))) (not (= x7_55@@0 x7_55_1@@0))) (not (= x8_55@@0 x8_55_1@@0))) (not (= x9_55@@0 x9_55_1@@0)))))
 :qid |stdinbpl.2550:17|
 :skolemid |183|
 :pattern ( (neverTriggered113 x0_53@@0 x1_55@@0 x2_55@@0 x3_55@@0 x4_55@@0 x5_55@@0 x6_55@@0 x7_55@@0 x8_55@@0 x9_55@@0) (neverTriggered113 x0_53_1@@0 x1_55_1@@0 x2_55_1@@0 x3_55_1@@0 x4_55_1@@0 x5_55_1@@0 x6_55_1@@0 x7_55_1@@0 x8_55_1@@0 x9_55_1@@0))
)) (=> (and (forall ((x0_53@@1 T@U) (x1_55@@1 Real) (x2_55@@1 T@U) (x3_55@@1 Real) (x4_55@@1 T@U) (x5_55@@1 Real) (x6_55@@1 T@U) (x7_55@@1 T@U) (x8_55@@1 T@U) (x9_55@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_53@@1) RefType) (= (type x2_55@@1) RefType)) (= (type x4_55@@1) RefType)) (= (type x6_55@@1) RefType)) (= (type x7_55@@1) RefType)) (= (type x8_55@@1) RefType)) (and (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_53@@1 x1_55@@1 x2_55@@1 x3_55@@1 x4_55@@1 x5_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_53@@1 x1_55@@1 x2_55@@1 x3_55@@1 x4_55@@1 x5_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_53@@1 x1_55@@1 x2_55@@1 x3_55@@1 x4_55@@1 x5_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv104 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x0_53@@1) (= (invRecv105 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x1_55@@1)) (= (invRecv106 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x2_55@@1)) (= (invRecv107 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x3_55@@1)) (= (invRecv108 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x4_55@@1)) (= (invRecv109 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x5_55@@1)) (= (invRecv110 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x6_55@@1)) (= (invRecv111 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x7_55@@1)) (= (invRecv112 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x8_55@@1)) (= (invRecv113 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) x9_55@@1)) (qpRange113 x6_55@@1 x9_55@@1 x7_55@@1 x9_55@@1 x8_55@@1 x9_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1)))
 :qid |stdinbpl.2556:22|
 :skolemid |184|
 :pattern ( (inv_10_0 x0_53@@1 x1_55@@1 x2_55@@1 x3_55@@1 x4_55@@1 x5_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) (inv_10_1 x0_53@@1 x1_55@@1 x2_55@@1 x3_55@@1 x4_55@@1 x5_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1) (inv_10_2 x0_53@@1 x1_55@@1 x2_55@@1 x3_55@@1 x4_55@@1 x5_55@@1 x6_55@@1 x7_55@@1 x8_55@@1 x9_55@@1))
)) (forall ((arg_0_11 T@U) (arg_1_11 Real) (arg_2_11 T@U) (arg_3_11 Real) (arg_4_11 T@U) (arg_5_11 Real) (arg_6_11 T@U) (arg_7_11 T@U) (arg_8_11 T@U) (arg_9_11 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_11) RefType) (= (type arg_2_11) RefType)) (= (type arg_4_11) RefType)) (= (type arg_6_11) RefType)) (= (type arg_7_11) RefType)) (= (type arg_8_11) RefType)) (and (and (and (U_2_bool (MapType2Select xs11 (inv_10_0 (invRecv104 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv105 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv106 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv107 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv108 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv109 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv110 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv111 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv112 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11)))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 (invRecv104 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv105 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv106 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv107 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv108 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv109 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv110 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv111 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv112 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11)))) (U_2_bool (MapType2Select zs11 (inv_10_2 (invRecv104 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv105 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv106 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv107 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv108 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv109 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv110 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv111 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv112 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11)))))) (< NoPerm FullPerm)) (qpRange113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11))) (and (and (and (and (and (and (and (and (and (= (invRecv110 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_0_11) (= (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_1_11)) (= (invRecv111 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_2_11)) (= (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_3_11)) (= (invRecv112 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_4_11)) (= (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_5_11)) (= (invRecv110 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_6_11)) (= (invRecv111 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_7_11)) (= (invRecv112 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_8_11)) (= (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) arg_9_11)))
 :qid |stdinbpl.2560:22|
 :skolemid |185|
 :pattern ( (invRecv104 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv105 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv106 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv107 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv108 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv109 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv110 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv111 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv112 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11) (invRecv113 arg_0_11 arg_1_11 arg_2_11 arg_3_11 arg_4_11 arg_5_11 arg_6_11 arg_7_11 arg_8_11 arg_9_11))
))) (=> (and (and (and (forall ((arg_0_11@@0 T@U) (arg_1_11@@0 Real) (arg_2_11@@0 T@U) (arg_3_11@@0 Real) (arg_4_11@@0 T@U) (arg_5_11@@0 Real) (arg_6_11@@0 T@U) (arg_7_11@@0 T@U) (arg_8_11@@0 T@U) (arg_9_11@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_11@@0) RefType) (= (type arg_2_11@@0) RefType)) (= (type arg_4_11@@0) RefType)) (= (type arg_6_11@@0) RefType)) (= (type arg_7_11@@0) RefType)) (= (type arg_8_11@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs11 (inv_10_0 (invRecv104 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv105 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv106 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv107 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv108 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv109 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv110 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv111 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv112 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0)))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 (invRecv104 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv105 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv106 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv107 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv108 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv109 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv110 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv111 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv112 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0)))) (U_2_bool (MapType2Select zs11 (inv_10_2 (invRecv104 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv105 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv106 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv107 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv108 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv109 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv110 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv111 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv112 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0)))))) (< NoPerm FullPerm)) (qpRange113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv110 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_0_11@@0) (= (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_1_11@@0)) (= (invRecv111 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_2_11@@0)) (= (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_3_11@@0)) (= (invRecv112 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_4_11@@0)) (= (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_5_11@@0)) (= (invRecv110 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_6_11@@0)) (= (invRecv111 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_7_11@@0)) (= (invRecv112 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_8_11@@0)) (= (invRecv113 arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0) arg_9_11@@0))) (= (U_2_real (MapType1Select QPMask@11 null (wand arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0))) (+ (U_2_real (MapType1Select QPMask@10 null (wand arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0))) FullPerm))))
 :qid |stdinbpl.2566:22|
 :skolemid |186|
 :pattern ( (MapType1Select QPMask@11 null (wand arg_0_11@@0 arg_1_11@@0 arg_2_11@@0 arg_3_11@@0 arg_4_11@@0 arg_5_11@@0 arg_6_11@@0 arg_7_11@@0 arg_8_11@@0 arg_9_11@@0)))
)) (forall ((o_3 T@U) (f_5 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_5))))
(let ((A@@12 (FieldTypeInv0 (type f_5))))
 (=> (and (and (= (type o_3) RefType) (= (type f_5) (FieldType A@@12 B@@11))) (or (or (not (= o_3 null)) (not (IsWandField f_5))) (not (= (getPredWandId f_5) 1)))) (= (U_2_real (MapType1Select QPMask@10 o_3 f_5)) (U_2_real (MapType1Select QPMask@11 o_3 f_5))))))
 :qid |stdinbpl.2572:29|
 :skolemid |187|
 :pattern ( (MapType1Select QPMask@10 o_3 f_5))
 :pattern ( (MapType1Select QPMask@11 o_3 f_5))
))) (and (forall ((arg_0_11@@1 T@U) (arg_1_11@@1 Real) (arg_2_11@@1 T@U) (arg_3_11@@1 Real) (arg_4_11@@1 T@U) (arg_5_11@@1 Real) (arg_6_11@@1 T@U) (arg_7_11@@1 T@U) (arg_8_11@@1 T@U) (arg_9_11@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_11@@1) RefType) (= (type arg_2_11@@1) RefType)) (= (type arg_4_11@@1) RefType)) (= (type arg_6_11@@1) RefType)) (= (type arg_7_11@@1) RefType)) (= (type arg_8_11@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs11 (inv_10_0 (invRecv104 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv105 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv106 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv107 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv108 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv109 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv110 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv111 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv112 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv113 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1)))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 (invRecv104 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv105 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv106 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv107 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv108 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv109 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv110 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv111 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv112 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv113 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1)))) (U_2_bool (MapType2Select zs11 (inv_10_2 (invRecv104 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv105 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv106 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv107 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv108 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv109 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv110 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv111 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv112 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1) (invRecv113 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1)))))) (< NoPerm FullPerm)) (qpRange113 arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1)))) (= (U_2_real (MapType1Select QPMask@11 null (wand arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1))) (U_2_real (MapType1Select QPMask@10 null (wand arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1)))))
 :qid |stdinbpl.2576:22|
 :skolemid |188|
 :pattern ( (MapType1Select QPMask@11 null (wand arg_0_11@@1 arg_1_11@@1 arg_2_11@@1 arg_3_11@@1 arg_4_11@@1 arg_5_11@@1 arg_6_11@@1 arg_7_11@@1 arg_8_11@@1 arg_9_11@@1)))
)) (state Heap@@10 QPMask@11))) (and (and (state Heap@@10 QPMask@11) (state Heap@@10 QPMask@11)) (and (U_2_bool (MapType2Select xs1 a_2)) (state Heap@@10 QPMask@11)))) (=> (and (and (and (and (state Heap@@10 QPMask@11) (U_2_bool (MapType2Select ys1 b_2))) (and (state Heap@@10 QPMask@11) (state Heap@@10 QPMask@11))) (and (and (U_2_bool (MapType2Select zs1 c)) (state Heap@@10 QPMask@11)) (and (state Heap@@10 QPMask@11) (U_2_bool (MapType2Select xs2 a_2))))) (and (and (and (state Heap@@10 QPMask@11) (state Heap@@10 QPMask@11)) (and (U_2_bool (MapType2Select ys2 b_2)) (state Heap@@10 QPMask@11))) (and (and (state Heap@@10 QPMask@11) (U_2_bool (MapType2Select zs2 c))) (and (state Heap@@10 QPMask@11) (state Heap@@10 QPMask@11))))) (and (=> (= (ControlFlow 0 132) 116) anon169_Then_correct) (=> (= (ControlFlow 0 132) 130) anon169_Else_correct)))))))))
(let ((anon168_Then_correct  (and (=> (= (ControlFlow 0 110) (- 0 113)) (>= x9_19 NoPerm)) (=> (>= x9_19 NoPerm) (=> (=> (> x9_19 NoPerm) (not (= x6_19 null))) (=> (and (= WandDefLHSMask@6 (MapType1Store ZeroMask x6_19 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_19 f_7)) x9_19)))) (state WandDefLHSHeap@2 WandDefLHSMask@6)) (and (=> (= (ControlFlow 0 110) (- 0 112)) (>= x9_19 NoPerm)) (=> (>= x9_19 NoPerm) (=> (=> (> x9_19 NoPerm) (not (= x7_19 null))) (=> (and (= WandDefLHSMask@7 (MapType1Store WandDefLHSMask@6 x7_19 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@6 x7_19 f_7)) x9_19)))) (state WandDefLHSHeap@2 WandDefLHSMask@7)) (and (=> (= (ControlFlow 0 110) (- 0 111)) (>= x9_19 NoPerm)) (=> (>= x9_19 NoPerm) (=> (and (=> (> x9_19 NoPerm) (not (= x8_19 null))) (= WandDefLHSMask@8 (MapType1Store WandDefLHSMask@7 x8_19 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@7 x8_19 f_7)) x9_19))))) (=> (and (and (state WandDefLHSHeap@2 WandDefLHSMask@8) (state WandDefLHSHeap@2 WandDefLHSMask@8)) (and (state WandDefLHSHeap@2 WandDefLHSMask@8) (= (ControlFlow 0 110) (- 0 109)))) (>= x9_19 NoPerm)))))))))))))))
(let ((anon103_correct true))
(let ((anon167_Then_correct  (=> (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_19 x1_19 x2_19 x3_19 x4_19 x5_19 x6_19 x7_19 x8_19 x9_19))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_19 x1_19 x2_19 x3_19 x4_19 x5_19 x6_19 x7_19 x8_19 x9_19))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_19 x1_19 x2_19 x3_19 x4_19 x5_19 x6_19 x7_19 x8_19 x9_19))))) (and (=> (= (ControlFlow 0 114) 110) anon168_Then_correct) (=> (= (ControlFlow 0 114) 107) anon103_correct)))))
(let ((anon167_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_19 x1_19 x2_19 x3_19 x4_19 x5_19 x6_19 x7_19 x8_19 x9_19))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_19 x1_19 x2_19 x3_19 x4_19 x5_19 x6_19 x7_19 x8_19 x9_19))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_19 x1_19 x2_19 x3_19 x4_19 x5_19 x6_19 x7_19 x8_19 x9_19)))))) (= (ControlFlow 0 108) 107)) anon103_correct)))
(let ((anon165_Else_correct  (=> (forall ((x0_51 T@U) (x1_53 Real) (x2_53 T@U) (x3_53 Real) (x4_53 T@U) (x5_53 Real) (x6_53 T@U) (x7_53 T@U) (x8_53 T@U) (x9_53 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_51) RefType) (= (type x2_53) RefType)) (= (type x4_53) RefType)) (= (type x6_53) RefType)) (= (type x7_53) RefType)) (= (type x8_53) RefType)) (and (U_2_bool (MapType2Select xs11 (inv_10_0 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53))) (and (U_2_bool (MapType2Select ys11 (inv_10_1 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53))) (U_2_bool (MapType2Select zs11 (inv_10_2 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53)))))) (and (and (and (and (and (and (and (and (and (= (inv_10_0 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) x0_51) (= q_1 x1_53)) (= (inv_10_1 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) x2_53)) (= q_1 x3_53)) (= (inv_10_2 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) x4_53)) (= q_1 x5_53)) (= (inv_10_0 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) x6_53)) (= (inv_10_1 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) x7_53)) (= (inv_10_2 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) x8_53)) (= q_1 x9_53)))
 :qid |stdinbpl.2484:20|
 :skolemid |182|
 :pattern ( (inv_10_0 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) (inv_10_1 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53) (inv_10_2 x0_51 x1_53 x2_53 x3_53 x4_53 x5_53 x6_53 x7_53 x8_53 x9_53))
)) (=> (and (state Heap@@10 QPMask@10) (state Heap@@10 QPMask@10)) (and (and (=> (= (ControlFlow 0 134) 132) anon166_Else_correct) (=> (= (ControlFlow 0 134) 114) anon167_Then_correct)) (=> (= (ControlFlow 0 134) 108) anon167_Else_correct))))))
(let ((anon165_Then_correct true))
(let ((anon164_Else_correct  (=> (forall ((x11_1 T@U) (y11_1 T@U) (z11_1 T@U) ) (!  (=> (and (and (and (= (type x11_1) RefType) (= (type y11_1) RefType)) (= (type z11_1) RefType)) (and (U_2_bool (MapType2Select xs11 x11_1)) (and (U_2_bool (MapType2Select ys11 y11_1)) (U_2_bool (MapType2Select zs11 z11_1))))) (and (and (= (inv_10_0 x11_1 q_1 y11_1 q_1 z11_1 q_1 x11_1 y11_1 z11_1 q_1) x11_1) (= (inv_10_1 x11_1 q_1 y11_1 q_1 z11_1 q_1 x11_1 y11_1 z11_1 q_1) y11_1)) (= (inv_10_2 x11_1 q_1 y11_1 q_1 z11_1 q_1 x11_1 y11_1 z11_1 q_1) z11_1)))
 :qid |stdinbpl.2455:20|
 :skolemid |181|
 :pattern ( (MapType0Select Heap@@10 null (wand x11_1 q_1 y11_1 q_1 z11_1 q_1 x11_1 y11_1 z11_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@10) (state Heap@@10 QPMask@10)) (and (=> (= (ControlFlow 0 135) 106) anon165_Then_correct) (=> (= (ControlFlow 0 135) 134) anon165_Else_correct))))))
(let ((anon164_Then_correct true))
(let ((anon161_Else_correct  (and (=> (= (ControlFlow 0 136) (- 0 137)) (forall ((x0_48 T@U) (x1_50 Real) (x2_50 T@U) (x3_50 Real) (x4_50 T@U) (x5_50 Real) (x6_50 T@U) (x7_50 T@U) (x8_50 T@U) (x9_50 Real) (x0_48_1 T@U) (x1_50_1 Real) (x2_50_1 T@U) (x3_50_1 Real) (x4_50_1 T@U) (x5_50_1 Real) (x6_50_1 T@U) (x7_50_1 T@U) (x8_50_1 T@U) (x9_50_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_48) RefType) (= (type x2_50) RefType)) (= (type x4_50) RefType)) (= (type x6_50) RefType)) (= (type x7_50) RefType)) (= (type x8_50) RefType)) (= (type x0_48_1) RefType)) (= (type x2_50_1) RefType)) (= (type x4_50_1) RefType)) (= (type x6_50_1) RefType)) (= (type x7_50_1) RefType)) (= (type x8_50_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_48 x0_48_1)) (not (= x1_50 x1_50_1))) (not (= x2_50 x2_50_1))) (not (= x3_50 x3_50_1))) (not (= x4_50 x4_50_1))) (not (= x5_50 x5_50_1))) (not (= x6_50 x6_50_1))) (not (= x7_50 x7_50_1))) (not (= x8_50 x8_50_1))) (not (= x9_50 x9_50_1))) (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_48 x1_50 x2_50 x3_50 x4_50 x5_50 x6_50 x7_50 x8_50 x9_50))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_48 x1_50 x2_50 x3_50 x4_50 x5_50 x6_50 x7_50 x8_50 x9_50))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_48 x1_50 x2_50 x3_50 x4_50 x5_50 x6_50 x7_50 x8_50 x9_50)))))) (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_48_1 x1_50_1 x2_50_1 x3_50_1 x4_50_1 x5_50_1 x6_50_1 x7_50_1 x8_50_1 x9_50_1))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_48_1 x1_50_1 x2_50_1 x3_50_1 x4_50_1 x5_50_1 x6_50_1 x7_50_1 x8_50_1 x9_50_1))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_48_1 x1_50_1 x2_50_1 x3_50_1 x4_50_1 x5_50_1 x6_50_1 x7_50_1 x8_50_1 x9_50_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_50 x6_50_1)) (not (= x9_50 x9_50_1))) (not (= x7_50 x7_50_1))) (not (= x9_50 x9_50_1))) (not (= x8_50 x8_50_1))) (not (= x9_50 x9_50_1))) (not (= x6_50 x6_50_1))) (not (= x7_50 x7_50_1))) (not (= x8_50 x8_50_1))) (not (= x9_50 x9_50_1)))))
 :qid |stdinbpl.2408:17|
 :skolemid |175|
 :pattern ( (neverTriggered103 x0_48 x1_50 x2_50 x3_50 x4_50 x5_50 x6_50 x7_50 x8_50 x9_50) (neverTriggered103 x0_48_1 x1_50_1 x2_50_1 x3_50_1 x4_50_1 x5_50_1 x6_50_1 x7_50_1 x8_50_1 x9_50_1))
))) (=> (forall ((x0_48@@0 T@U) (x1_50@@0 Real) (x2_50@@0 T@U) (x3_50@@0 Real) (x4_50@@0 T@U) (x5_50@@0 Real) (x6_50@@0 T@U) (x7_50@@0 T@U) (x8_50@@0 T@U) (x9_50@@0 Real) (x0_48_1@@0 T@U) (x1_50_1@@0 Real) (x2_50_1@@0 T@U) (x3_50_1@@0 Real) (x4_50_1@@0 T@U) (x5_50_1@@0 Real) (x6_50_1@@0 T@U) (x7_50_1@@0 T@U) (x8_50_1@@0 T@U) (x9_50_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_48@@0) RefType) (= (type x2_50@@0) RefType)) (= (type x4_50@@0) RefType)) (= (type x6_50@@0) RefType)) (= (type x7_50@@0) RefType)) (= (type x8_50@@0) RefType)) (= (type x0_48_1@@0) RefType)) (= (type x2_50_1@@0) RefType)) (= (type x4_50_1@@0) RefType)) (= (type x6_50_1@@0) RefType)) (= (type x7_50_1@@0) RefType)) (= (type x8_50_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_48@@0 x0_48_1@@0)) (not (= x1_50@@0 x1_50_1@@0))) (not (= x2_50@@0 x2_50_1@@0))) (not (= x3_50@@0 x3_50_1@@0))) (not (= x4_50@@0 x4_50_1@@0))) (not (= x5_50@@0 x5_50_1@@0))) (not (= x6_50@@0 x6_50_1@@0))) (not (= x7_50@@0 x7_50_1@@0))) (not (= x8_50@@0 x8_50_1@@0))) (not (= x9_50@@0 x9_50_1@@0))) (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_48@@0 x1_50@@0 x2_50@@0 x3_50@@0 x4_50@@0 x5_50@@0 x6_50@@0 x7_50@@0 x8_50@@0 x9_50@@0))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_48@@0 x1_50@@0 x2_50@@0 x3_50@@0 x4_50@@0 x5_50@@0 x6_50@@0 x7_50@@0 x8_50@@0 x9_50@@0))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_48@@0 x1_50@@0 x2_50@@0 x3_50@@0 x4_50@@0 x5_50@@0 x6_50@@0 x7_50@@0 x8_50@@0 x9_50@@0)))))) (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_48_1@@0 x1_50_1@@0 x2_50_1@@0 x3_50_1@@0 x4_50_1@@0 x5_50_1@@0 x6_50_1@@0 x7_50_1@@0 x8_50_1@@0 x9_50_1@@0))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_48_1@@0 x1_50_1@@0 x2_50_1@@0 x3_50_1@@0 x4_50_1@@0 x5_50_1@@0 x6_50_1@@0 x7_50_1@@0 x8_50_1@@0 x9_50_1@@0))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_48_1@@0 x1_50_1@@0 x2_50_1@@0 x3_50_1@@0 x4_50_1@@0 x5_50_1@@0 x6_50_1@@0 x7_50_1@@0 x8_50_1@@0 x9_50_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_50@@0 x6_50_1@@0)) (not (= x9_50@@0 x9_50_1@@0))) (not (= x7_50@@0 x7_50_1@@0))) (not (= x9_50@@0 x9_50_1@@0))) (not (= x8_50@@0 x8_50_1@@0))) (not (= x9_50@@0 x9_50_1@@0))) (not (= x6_50@@0 x6_50_1@@0))) (not (= x7_50@@0 x7_50_1@@0))) (not (= x8_50@@0 x8_50_1@@0))) (not (= x9_50@@0 x9_50_1@@0)))))
 :qid |stdinbpl.2408:17|
 :skolemid |175|
 :pattern ( (neverTriggered103 x0_48@@0 x1_50@@0 x2_50@@0 x3_50@@0 x4_50@@0 x5_50@@0 x6_50@@0 x7_50@@0 x8_50@@0 x9_50@@0) (neverTriggered103 x0_48_1@@0 x1_50_1@@0 x2_50_1@@0 x3_50_1@@0 x4_50_1@@0 x5_50_1@@0 x6_50_1@@0 x7_50_1@@0 x8_50_1@@0 x9_50_1@@0))
)) (=> (and (and (and (forall ((x0_48@@1 T@U) (x1_50@@1 Real) (x2_50@@1 T@U) (x3_50@@1 Real) (x4_50@@1 T@U) (x5_50@@1 Real) (x6_50@@1 T@U) (x7_50@@1 T@U) (x8_50@@1 T@U) (x9_50@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_48@@1) RefType) (= (type x2_50@@1) RefType)) (= (type x4_50@@1) RefType)) (= (type x6_50@@1) RefType)) (= (type x7_50@@1) RefType)) (= (type x8_50@@1) RefType)) (and (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_48@@1 x1_50@@1 x2_50@@1 x3_50@@1 x4_50@@1 x5_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_48@@1 x1_50@@1 x2_50@@1 x3_50@@1 x4_50@@1 x5_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_48@@1 x1_50@@1 x2_50@@1 x3_50@@1 x4_50@@1 x5_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv94 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x0_48@@1) (= (invRecv95 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x1_50@@1)) (= (invRecv96 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x2_50@@1)) (= (invRecv97 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x3_50@@1)) (= (invRecv98 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x4_50@@1)) (= (invRecv99 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x5_50@@1)) (= (invRecv100 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x6_50@@1)) (= (invRecv101 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x7_50@@1)) (= (invRecv102 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x8_50@@1)) (= (invRecv103 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) x9_50@@1)) (qpRange103 x6_50@@1 x9_50@@1 x7_50@@1 x9_50@@1 x8_50@@1 x9_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1)))
 :qid |stdinbpl.2414:22|
 :skolemid |176|
 :pattern ( (inv_9_0 x0_48@@1 x1_50@@1 x2_50@@1 x3_50@@1 x4_50@@1 x5_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) (inv_9_1 x0_48@@1 x1_50@@1 x2_50@@1 x3_50@@1 x4_50@@1 x5_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1) (inv_9_2 x0_48@@1 x1_50@@1 x2_50@@1 x3_50@@1 x4_50@@1 x5_50@@1 x6_50@@1 x7_50@@1 x8_50@@1 x9_50@@1))
)) (forall ((arg_0_10 T@U) (arg_1_10 Real) (arg_2_10 T@U) (arg_3_10 Real) (arg_4_10 T@U) (arg_5_10 Real) (arg_6_10 T@U) (arg_7_10 T@U) (arg_8_10 T@U) (arg_9_10 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_10) RefType) (= (type arg_2_10) RefType)) (= (type arg_4_10) RefType)) (= (type arg_6_10) RefType)) (= (type arg_7_10) RefType)) (= (type arg_8_10) RefType)) (and (and (and (U_2_bool (MapType2Select xs10 (inv_9_0 (invRecv94 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv95 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv96 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv97 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv98 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv99 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv100 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv101 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv102 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10)))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 (invRecv94 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv95 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv96 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv97 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv98 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv99 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv100 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv101 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv102 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10)))) (U_2_bool (MapType2Select zs10 (inv_9_2 (invRecv94 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv95 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv96 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv97 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv98 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv99 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv100 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv101 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv102 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10)))))) (< NoPerm FullPerm)) (qpRange103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10))) (and (and (and (and (and (and (and (and (and (= (invRecv100 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_0_10) (= (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_1_10)) (= (invRecv101 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_2_10)) (= (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_3_10)) (= (invRecv102 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_4_10)) (= (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_5_10)) (= (invRecv100 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_6_10)) (= (invRecv101 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_7_10)) (= (invRecv102 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_8_10)) (= (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) arg_9_10)))
 :qid |stdinbpl.2418:22|
 :skolemid |177|
 :pattern ( (invRecv94 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv95 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv96 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv97 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv98 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv99 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv100 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv101 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv102 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10) (invRecv103 arg_0_10 arg_1_10 arg_2_10 arg_3_10 arg_4_10 arg_5_10 arg_6_10 arg_7_10 arg_8_10 arg_9_10))
))) (and (forall ((arg_0_10@@0 T@U) (arg_1_10@@0 Real) (arg_2_10@@0 T@U) (arg_3_10@@0 Real) (arg_4_10@@0 T@U) (arg_5_10@@0 Real) (arg_6_10@@0 T@U) (arg_7_10@@0 T@U) (arg_8_10@@0 T@U) (arg_9_10@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_10@@0) RefType) (= (type arg_2_10@@0) RefType)) (= (type arg_4_10@@0) RefType)) (= (type arg_6_10@@0) RefType)) (= (type arg_7_10@@0) RefType)) (= (type arg_8_10@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs10 (inv_9_0 (invRecv94 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv95 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv96 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv97 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv98 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv99 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv100 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv101 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv102 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0)))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 (invRecv94 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv95 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv96 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv97 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv98 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv99 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv100 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv101 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv102 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0)))) (U_2_bool (MapType2Select zs10 (inv_9_2 (invRecv94 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv95 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv96 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv97 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv98 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv99 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv100 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv101 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv102 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0)))))) (< NoPerm FullPerm)) (qpRange103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv100 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_0_10@@0) (= (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_1_10@@0)) (= (invRecv101 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_2_10@@0)) (= (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_3_10@@0)) (= (invRecv102 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_4_10@@0)) (= (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_5_10@@0)) (= (invRecv100 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_6_10@@0)) (= (invRecv101 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_7_10@@0)) (= (invRecv102 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_8_10@@0)) (= (invRecv103 arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0) arg_9_10@@0))) (= (U_2_real (MapType1Select QPMask@10 null (wand arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0))) (+ (U_2_real (MapType1Select QPMask@9 null (wand arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0))) FullPerm))))
 :qid |stdinbpl.2424:22|
 :skolemid |178|
 :pattern ( (MapType1Select QPMask@10 null (wand arg_0_10@@0 arg_1_10@@0 arg_2_10@@0 arg_3_10@@0 arg_4_10@@0 arg_5_10@@0 arg_6_10@@0 arg_7_10@@0 arg_8_10@@0 arg_9_10@@0)))
)) (forall ((o_3@@0 T@U) (f_5@@0 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_5@@0))))
(let ((A@@13 (FieldTypeInv0 (type f_5@@0))))
 (=> (and (and (= (type o_3@@0) RefType) (= (type f_5@@0) (FieldType A@@13 B@@12))) (or (or (not (= o_3@@0 null)) (not (IsWandField f_5@@0))) (not (= (getPredWandId f_5@@0) 1)))) (= (U_2_real (MapType1Select QPMask@9 o_3@@0 f_5@@0)) (U_2_real (MapType1Select QPMask@10 o_3@@0 f_5@@0))))))
 :qid |stdinbpl.2430:29|
 :skolemid |179|
 :pattern ( (MapType1Select QPMask@9 o_3@@0 f_5@@0))
 :pattern ( (MapType1Select QPMask@10 o_3@@0 f_5@@0))
)))) (and (and (forall ((arg_0_10@@1 T@U) (arg_1_10@@1 Real) (arg_2_10@@1 T@U) (arg_3_10@@1 Real) (arg_4_10@@1 T@U) (arg_5_10@@1 Real) (arg_6_10@@1 T@U) (arg_7_10@@1 T@U) (arg_8_10@@1 T@U) (arg_9_10@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_10@@1) RefType) (= (type arg_2_10@@1) RefType)) (= (type arg_4_10@@1) RefType)) (= (type arg_6_10@@1) RefType)) (= (type arg_7_10@@1) RefType)) (= (type arg_8_10@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs10 (inv_9_0 (invRecv94 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv95 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv96 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv97 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv98 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv99 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv100 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv101 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv102 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv103 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1)))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 (invRecv94 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv95 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv96 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv97 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv98 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv99 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv100 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv101 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv102 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv103 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1)))) (U_2_bool (MapType2Select zs10 (inv_9_2 (invRecv94 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv95 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv96 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv97 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv98 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv99 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv100 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv101 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv102 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1) (invRecv103 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1)))))) (< NoPerm FullPerm)) (qpRange103 arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1)))) (= (U_2_real (MapType1Select QPMask@10 null (wand arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1))) (U_2_real (MapType1Select QPMask@9 null (wand arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1)))))
 :qid |stdinbpl.2434:22|
 :skolemid |180|
 :pattern ( (MapType1Select QPMask@10 null (wand arg_0_10@@1 arg_1_10@@1 arg_2_10@@1 arg_3_10@@1 arg_4_10@@1 arg_5_10@@1 arg_6_10@@1 arg_7_10@@1 arg_8_10@@1 arg_9_10@@1)))
)) (state Heap@@10 QPMask@10)) (and (state Heap@@10 QPMask@10) (state Heap@@10 QPMask@10)))) (and (=> (= (ControlFlow 0 136) 105) anon164_Then_correct) (=> (= (ControlFlow 0 136) 135) anon164_Else_correct)))))))
(let ((anon163_Then_correct  (and (=> (= (ControlFlow 0 100) (- 0 103)) (>= x9_17 NoPerm)) (=> (>= x9_17 NoPerm) (=> (=> (> x9_17 NoPerm) (not (= x6_17 null))) (=> (and (= WandDefLHSMask@9 (MapType1Store ZeroMask x6_17 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_17 f_7)) x9_17)))) (state WandDefLHSHeap@3 WandDefLHSMask@9)) (and (=> (= (ControlFlow 0 100) (- 0 102)) (>= x9_17 NoPerm)) (=> (>= x9_17 NoPerm) (=> (=> (> x9_17 NoPerm) (not (= x7_17 null))) (=> (and (= WandDefLHSMask@10 (MapType1Store WandDefLHSMask@9 x7_17 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@9 x7_17 f_7)) x9_17)))) (state WandDefLHSHeap@3 WandDefLHSMask@10)) (and (=> (= (ControlFlow 0 100) (- 0 101)) (>= x9_17 NoPerm)) (=> (>= x9_17 NoPerm) (=> (and (=> (> x9_17 NoPerm) (not (= x8_17 null))) (= WandDefLHSMask@11 (MapType1Store WandDefLHSMask@10 x8_17 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@10 x8_17 f_7)) x9_17))))) (=> (and (and (state WandDefLHSHeap@3 WandDefLHSMask@11) (state WandDefLHSHeap@3 WandDefLHSMask@11)) (and (state WandDefLHSHeap@3 WandDefLHSMask@11) (= (ControlFlow 0 100) (- 0 99)))) (>= x9_17 NoPerm)))))))))))))))
(let ((anon94_correct true))
(let ((anon162_Then_correct  (=> (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_17 x1_17 x2_17 x3_17 x4_17 x5_17 x6_17 x7_17 x8_17 x9_17))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_17 x1_17 x2_17 x3_17 x4_17 x5_17 x6_17 x7_17 x8_17 x9_17))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_17 x1_17 x2_17 x3_17 x4_17 x5_17 x6_17 x7_17 x8_17 x9_17))))) (and (=> (= (ControlFlow 0 104) 100) anon163_Then_correct) (=> (= (ControlFlow 0 104) 97) anon94_correct)))))
(let ((anon162_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_17 x1_17 x2_17 x3_17 x4_17 x5_17 x6_17 x7_17 x8_17 x9_17))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_17 x1_17 x2_17 x3_17 x4_17 x5_17 x6_17 x7_17 x8_17 x9_17))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_17 x1_17 x2_17 x3_17 x4_17 x5_17 x6_17 x7_17 x8_17 x9_17)))))) (= (ControlFlow 0 98) 97)) anon94_correct)))
(let ((anon160_Else_correct  (=> (forall ((x0_46 T@U) (x1_48 Real) (x2_48 T@U) (x3_48 Real) (x4_48 T@U) (x5_48 Real) (x6_48 T@U) (x7_48 T@U) (x8_48 T@U) (x9_48 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_46) RefType) (= (type x2_48) RefType)) (= (type x4_48) RefType)) (= (type x6_48) RefType)) (= (type x7_48) RefType)) (= (type x8_48) RefType)) (and (U_2_bool (MapType2Select xs10 (inv_9_0 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48))) (and (U_2_bool (MapType2Select ys10 (inv_9_1 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48))) (U_2_bool (MapType2Select zs10 (inv_9_2 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48)))))) (and (and (and (and (and (and (and (and (and (= (inv_9_0 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) x0_46) (= q_1 x1_48)) (= (inv_9_1 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) x2_48)) (= q_1 x3_48)) (= (inv_9_2 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) x4_48)) (= q_1 x5_48)) (= (inv_9_0 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) x6_48)) (= (inv_9_1 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) x7_48)) (= (inv_9_2 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) x8_48)) (= q_1 x9_48)))
 :qid |stdinbpl.2343:20|
 :skolemid |174|
 :pattern ( (inv_9_0 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) (inv_9_1 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48) (inv_9_2 x0_46 x1_48 x2_48 x3_48 x4_48 x5_48 x6_48 x7_48 x8_48 x9_48))
)) (=> (and (state Heap@@10 QPMask@9) (state Heap@@10 QPMask@9)) (and (and (=> (= (ControlFlow 0 138) 136) anon161_Else_correct) (=> (= (ControlFlow 0 138) 104) anon162_Then_correct)) (=> (= (ControlFlow 0 138) 98) anon162_Else_correct))))))
(let ((anon160_Then_correct true))
(let ((anon159_Else_correct  (=> (forall ((x10_1 T@U) (y10_1 T@U) (z10_1 T@U) ) (!  (=> (and (and (and (= (type x10_1) RefType) (= (type y10_1) RefType)) (= (type z10_1) RefType)) (and (U_2_bool (MapType2Select xs10 x10_1)) (and (U_2_bool (MapType2Select ys10 y10_1)) (U_2_bool (MapType2Select zs10 z10_1))))) (and (and (= (inv_9_0 x10_1 q_1 y10_1 q_1 z10_1 q_1 x10_1 y10_1 z10_1 q_1) x10_1) (= (inv_9_1 x10_1 q_1 y10_1 q_1 z10_1 q_1 x10_1 y10_1 z10_1 q_1) y10_1)) (= (inv_9_2 x10_1 q_1 y10_1 q_1 z10_1 q_1 x10_1 y10_1 z10_1 q_1) z10_1)))
 :qid |stdinbpl.2315:20|
 :skolemid |173|
 :pattern ( (MapType0Select Heap@@10 null (wand x10_1 q_1 y10_1 q_1 z10_1 q_1 x10_1 y10_1 z10_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@9) (state Heap@@10 QPMask@9)) (and (=> (= (ControlFlow 0 139) 96) anon160_Then_correct) (=> (= (ControlFlow 0 139) 138) anon160_Else_correct))))))
(let ((anon159_Then_correct true))
(let ((anon156_Else_correct  (and (=> (= (ControlFlow 0 140) (- 0 141)) (forall ((x0_43 T@U) (x1_45 Real) (x2_45 T@U) (x3_45 Real) (x4_45 T@U) (x5_45 Real) (x6_45 T@U) (x7_45 T@U) (x8_45 T@U) (x9_45 Real) (x0_43_1 T@U) (x1_45_1 Real) (x2_45_1 T@U) (x3_45_1 Real) (x4_45_1 T@U) (x5_45_1 Real) (x6_45_1 T@U) (x7_45_1 T@U) (x8_45_1 T@U) (x9_45_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_43) RefType) (= (type x2_45) RefType)) (= (type x4_45) RefType)) (= (type x6_45) RefType)) (= (type x7_45) RefType)) (= (type x8_45) RefType)) (= (type x0_43_1) RefType)) (= (type x2_45_1) RefType)) (= (type x4_45_1) RefType)) (= (type x6_45_1) RefType)) (= (type x7_45_1) RefType)) (= (type x8_45_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_43 x0_43_1)) (not (= x1_45 x1_45_1))) (not (= x2_45 x2_45_1))) (not (= x3_45 x3_45_1))) (not (= x4_45 x4_45_1))) (not (= x5_45 x5_45_1))) (not (= x6_45 x6_45_1))) (not (= x7_45 x7_45_1))) (not (= x8_45 x8_45_1))) (not (= x9_45 x9_45_1))) (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_43 x1_45 x2_45 x3_45 x4_45 x5_45 x6_45 x7_45 x8_45 x9_45))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_43 x1_45 x2_45 x3_45 x4_45 x5_45 x6_45 x7_45 x8_45 x9_45))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_43 x1_45 x2_45 x3_45 x4_45 x5_45 x6_45 x7_45 x8_45 x9_45)))))) (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_43_1 x1_45_1 x2_45_1 x3_45_1 x4_45_1 x5_45_1 x6_45_1 x7_45_1 x8_45_1 x9_45_1))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_43_1 x1_45_1 x2_45_1 x3_45_1 x4_45_1 x5_45_1 x6_45_1 x7_45_1 x8_45_1 x9_45_1))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_43_1 x1_45_1 x2_45_1 x3_45_1 x4_45_1 x5_45_1 x6_45_1 x7_45_1 x8_45_1 x9_45_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_45 x6_45_1)) (not (= x9_45 x9_45_1))) (not (= x7_45 x7_45_1))) (not (= x9_45 x9_45_1))) (not (= x8_45 x8_45_1))) (not (= x9_45 x9_45_1))) (not (= x6_45 x6_45_1))) (not (= x7_45 x7_45_1))) (not (= x8_45 x8_45_1))) (not (= x9_45 x9_45_1)))))
 :qid |stdinbpl.2268:17|
 :skolemid |167|
 :pattern ( (neverTriggered93 x0_43 x1_45 x2_45 x3_45 x4_45 x5_45 x6_45 x7_45 x8_45 x9_45) (neverTriggered93 x0_43_1 x1_45_1 x2_45_1 x3_45_1 x4_45_1 x5_45_1 x6_45_1 x7_45_1 x8_45_1 x9_45_1))
))) (=> (forall ((x0_43@@0 T@U) (x1_45@@0 Real) (x2_45@@0 T@U) (x3_45@@0 Real) (x4_45@@0 T@U) (x5_45@@0 Real) (x6_45@@0 T@U) (x7_45@@0 T@U) (x8_45@@0 T@U) (x9_45@@0 Real) (x0_43_1@@0 T@U) (x1_45_1@@0 Real) (x2_45_1@@0 T@U) (x3_45_1@@0 Real) (x4_45_1@@0 T@U) (x5_45_1@@0 Real) (x6_45_1@@0 T@U) (x7_45_1@@0 T@U) (x8_45_1@@0 T@U) (x9_45_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_43@@0) RefType) (= (type x2_45@@0) RefType)) (= (type x4_45@@0) RefType)) (= (type x6_45@@0) RefType)) (= (type x7_45@@0) RefType)) (= (type x8_45@@0) RefType)) (= (type x0_43_1@@0) RefType)) (= (type x2_45_1@@0) RefType)) (= (type x4_45_1@@0) RefType)) (= (type x6_45_1@@0) RefType)) (= (type x7_45_1@@0) RefType)) (= (type x8_45_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_43@@0 x0_43_1@@0)) (not (= x1_45@@0 x1_45_1@@0))) (not (= x2_45@@0 x2_45_1@@0))) (not (= x3_45@@0 x3_45_1@@0))) (not (= x4_45@@0 x4_45_1@@0))) (not (= x5_45@@0 x5_45_1@@0))) (not (= x6_45@@0 x6_45_1@@0))) (not (= x7_45@@0 x7_45_1@@0))) (not (= x8_45@@0 x8_45_1@@0))) (not (= x9_45@@0 x9_45_1@@0))) (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_43@@0 x1_45@@0 x2_45@@0 x3_45@@0 x4_45@@0 x5_45@@0 x6_45@@0 x7_45@@0 x8_45@@0 x9_45@@0))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_43@@0 x1_45@@0 x2_45@@0 x3_45@@0 x4_45@@0 x5_45@@0 x6_45@@0 x7_45@@0 x8_45@@0 x9_45@@0))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_43@@0 x1_45@@0 x2_45@@0 x3_45@@0 x4_45@@0 x5_45@@0 x6_45@@0 x7_45@@0 x8_45@@0 x9_45@@0)))))) (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_43_1@@0 x1_45_1@@0 x2_45_1@@0 x3_45_1@@0 x4_45_1@@0 x5_45_1@@0 x6_45_1@@0 x7_45_1@@0 x8_45_1@@0 x9_45_1@@0))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_43_1@@0 x1_45_1@@0 x2_45_1@@0 x3_45_1@@0 x4_45_1@@0 x5_45_1@@0 x6_45_1@@0 x7_45_1@@0 x8_45_1@@0 x9_45_1@@0))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_43_1@@0 x1_45_1@@0 x2_45_1@@0 x3_45_1@@0 x4_45_1@@0 x5_45_1@@0 x6_45_1@@0 x7_45_1@@0 x8_45_1@@0 x9_45_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_45@@0 x6_45_1@@0)) (not (= x9_45@@0 x9_45_1@@0))) (not (= x7_45@@0 x7_45_1@@0))) (not (= x9_45@@0 x9_45_1@@0))) (not (= x8_45@@0 x8_45_1@@0))) (not (= x9_45@@0 x9_45_1@@0))) (not (= x6_45@@0 x6_45_1@@0))) (not (= x7_45@@0 x7_45_1@@0))) (not (= x8_45@@0 x8_45_1@@0))) (not (= x9_45@@0 x9_45_1@@0)))))
 :qid |stdinbpl.2268:17|
 :skolemid |167|
 :pattern ( (neverTriggered93 x0_43@@0 x1_45@@0 x2_45@@0 x3_45@@0 x4_45@@0 x5_45@@0 x6_45@@0 x7_45@@0 x8_45@@0 x9_45@@0) (neverTriggered93 x0_43_1@@0 x1_45_1@@0 x2_45_1@@0 x3_45_1@@0 x4_45_1@@0 x5_45_1@@0 x6_45_1@@0 x7_45_1@@0 x8_45_1@@0 x9_45_1@@0))
)) (=> (and (and (and (forall ((x0_43@@1 T@U) (x1_45@@1 Real) (x2_45@@1 T@U) (x3_45@@1 Real) (x4_45@@1 T@U) (x5_45@@1 Real) (x6_45@@1 T@U) (x7_45@@1 T@U) (x8_45@@1 T@U) (x9_45@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_43@@1) RefType) (= (type x2_45@@1) RefType)) (= (type x4_45@@1) RefType)) (= (type x6_45@@1) RefType)) (= (type x7_45@@1) RefType)) (= (type x8_45@@1) RefType)) (and (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_43@@1 x1_45@@1 x2_45@@1 x3_45@@1 x4_45@@1 x5_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_43@@1 x1_45@@1 x2_45@@1 x3_45@@1 x4_45@@1 x5_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_43@@1 x1_45@@1 x2_45@@1 x3_45@@1 x4_45@@1 x5_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv84 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x0_43@@1) (= (invRecv85 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x1_45@@1)) (= (invRecv86 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x2_45@@1)) (= (invRecv87 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x3_45@@1)) (= (invRecv88 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x4_45@@1)) (= (invRecv89 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x5_45@@1)) (= (invRecv90 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x6_45@@1)) (= (invRecv91 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x7_45@@1)) (= (invRecv92 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x8_45@@1)) (= (invRecv93 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) x9_45@@1)) (qpRange93 x6_45@@1 x9_45@@1 x7_45@@1 x9_45@@1 x8_45@@1 x9_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1)))
 :qid |stdinbpl.2274:22|
 :skolemid |168|
 :pattern ( (inv_8_0 x0_43@@1 x1_45@@1 x2_45@@1 x3_45@@1 x4_45@@1 x5_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) (inv_8_1 x0_43@@1 x1_45@@1 x2_45@@1 x3_45@@1 x4_45@@1 x5_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1) (inv_8_2 x0_43@@1 x1_45@@1 x2_45@@1 x3_45@@1 x4_45@@1 x5_45@@1 x6_45@@1 x7_45@@1 x8_45@@1 x9_45@@1))
)) (forall ((arg_0_9 T@U) (arg_1_9 Real) (arg_2_9 T@U) (arg_3_9 Real) (arg_4_9 T@U) (arg_5_9 Real) (arg_6_9 T@U) (arg_7_9 T@U) (arg_8_9 T@U) (arg_9_9 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_9) RefType) (= (type arg_2_9) RefType)) (= (type arg_4_9) RefType)) (= (type arg_6_9) RefType)) (= (type arg_7_9) RefType)) (= (type arg_8_9) RefType)) (and (and (and (U_2_bool (MapType2Select xs9 (inv_8_0 (invRecv84 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv85 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv86 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv87 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv88 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv89 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv90 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv91 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv92 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9)))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 (invRecv84 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv85 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv86 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv87 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv88 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv89 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv90 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv91 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv92 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9)))) (U_2_bool (MapType2Select zs9 (inv_8_2 (invRecv84 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv85 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv86 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv87 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv88 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv89 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv90 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv91 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv92 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9)))))) (< NoPerm FullPerm)) (qpRange93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9))) (and (and (and (and (and (and (and (and (and (= (invRecv90 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_0_9) (= (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_1_9)) (= (invRecv91 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_2_9)) (= (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_3_9)) (= (invRecv92 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_4_9)) (= (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_5_9)) (= (invRecv90 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_6_9)) (= (invRecv91 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_7_9)) (= (invRecv92 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_8_9)) (= (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) arg_9_9)))
 :qid |stdinbpl.2278:22|
 :skolemid |169|
 :pattern ( (invRecv84 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv85 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv86 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv87 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv88 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv89 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv90 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv91 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv92 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9) (invRecv93 arg_0_9 arg_1_9 arg_2_9 arg_3_9 arg_4_9 arg_5_9 arg_6_9 arg_7_9 arg_8_9 arg_9_9))
))) (and (forall ((arg_0_9@@0 T@U) (arg_1_9@@0 Real) (arg_2_9@@0 T@U) (arg_3_9@@0 Real) (arg_4_9@@0 T@U) (arg_5_9@@0 Real) (arg_6_9@@0 T@U) (arg_7_9@@0 T@U) (arg_8_9@@0 T@U) (arg_9_9@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_9@@0) RefType) (= (type arg_2_9@@0) RefType)) (= (type arg_4_9@@0) RefType)) (= (type arg_6_9@@0) RefType)) (= (type arg_7_9@@0) RefType)) (= (type arg_8_9@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs9 (inv_8_0 (invRecv84 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv85 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv86 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv87 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv88 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv89 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv90 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv91 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv92 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0)))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 (invRecv84 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv85 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv86 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv87 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv88 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv89 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv90 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv91 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv92 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0)))) (U_2_bool (MapType2Select zs9 (inv_8_2 (invRecv84 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv85 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv86 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv87 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv88 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv89 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv90 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv91 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv92 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0)))))) (< NoPerm FullPerm)) (qpRange93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv90 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_0_9@@0) (= (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_1_9@@0)) (= (invRecv91 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_2_9@@0)) (= (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_3_9@@0)) (= (invRecv92 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_4_9@@0)) (= (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_5_9@@0)) (= (invRecv90 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_6_9@@0)) (= (invRecv91 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_7_9@@0)) (= (invRecv92 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_8_9@@0)) (= (invRecv93 arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0) arg_9_9@@0))) (= (U_2_real (MapType1Select QPMask@9 null (wand arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0))) (+ (U_2_real (MapType1Select QPMask@8 null (wand arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0))) FullPerm))))
 :qid |stdinbpl.2284:22|
 :skolemid |170|
 :pattern ( (MapType1Select QPMask@9 null (wand arg_0_9@@0 arg_1_9@@0 arg_2_9@@0 arg_3_9@@0 arg_4_9@@0 arg_5_9@@0 arg_6_9@@0 arg_7_9@@0 arg_8_9@@0 arg_9_9@@0)))
)) (forall ((o_3@@1 T@U) (f_5@@1 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_5@@1))))
(let ((A@@14 (FieldTypeInv0 (type f_5@@1))))
 (=> (and (and (= (type o_3@@1) RefType) (= (type f_5@@1) (FieldType A@@14 B@@13))) (or (or (not (= o_3@@1 null)) (not (IsWandField f_5@@1))) (not (= (getPredWandId f_5@@1) 1)))) (= (U_2_real (MapType1Select QPMask@8 o_3@@1 f_5@@1)) (U_2_real (MapType1Select QPMask@9 o_3@@1 f_5@@1))))))
 :qid |stdinbpl.2290:29|
 :skolemid |171|
 :pattern ( (MapType1Select QPMask@8 o_3@@1 f_5@@1))
 :pattern ( (MapType1Select QPMask@9 o_3@@1 f_5@@1))
)))) (and (and (forall ((arg_0_9@@1 T@U) (arg_1_9@@1 Real) (arg_2_9@@1 T@U) (arg_3_9@@1 Real) (arg_4_9@@1 T@U) (arg_5_9@@1 Real) (arg_6_9@@1 T@U) (arg_7_9@@1 T@U) (arg_8_9@@1 T@U) (arg_9_9@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_9@@1) RefType) (= (type arg_2_9@@1) RefType)) (= (type arg_4_9@@1) RefType)) (= (type arg_6_9@@1) RefType)) (= (type arg_7_9@@1) RefType)) (= (type arg_8_9@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs9 (inv_8_0 (invRecv84 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv85 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv86 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv87 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv88 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv89 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv90 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv91 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv92 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv93 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1)))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 (invRecv84 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv85 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv86 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv87 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv88 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv89 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv90 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv91 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv92 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv93 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1)))) (U_2_bool (MapType2Select zs9 (inv_8_2 (invRecv84 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv85 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv86 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv87 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv88 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv89 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv90 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv91 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv92 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1) (invRecv93 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1)))))) (< NoPerm FullPerm)) (qpRange93 arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1)))) (= (U_2_real (MapType1Select QPMask@9 null (wand arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1))) (U_2_real (MapType1Select QPMask@8 null (wand arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1)))))
 :qid |stdinbpl.2294:22|
 :skolemid |172|
 :pattern ( (MapType1Select QPMask@9 null (wand arg_0_9@@1 arg_1_9@@1 arg_2_9@@1 arg_3_9@@1 arg_4_9@@1 arg_5_9@@1 arg_6_9@@1 arg_7_9@@1 arg_8_9@@1 arg_9_9@@1)))
)) (state Heap@@10 QPMask@9)) (and (state Heap@@10 QPMask@9) (state Heap@@10 QPMask@9)))) (and (=> (= (ControlFlow 0 140) 95) anon159_Then_correct) (=> (= (ControlFlow 0 140) 139) anon159_Else_correct)))))))
(let ((anon158_Then_correct  (and (=> (= (ControlFlow 0 90) (- 0 93)) (>= x9_15 NoPerm)) (=> (>= x9_15 NoPerm) (=> (=> (> x9_15 NoPerm) (not (= x6_15 null))) (=> (and (= WandDefLHSMask@12 (MapType1Store ZeroMask x6_15 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_15 f_7)) x9_15)))) (state WandDefLHSHeap@4 WandDefLHSMask@12)) (and (=> (= (ControlFlow 0 90) (- 0 92)) (>= x9_15 NoPerm)) (=> (>= x9_15 NoPerm) (=> (=> (> x9_15 NoPerm) (not (= x7_15 null))) (=> (and (= WandDefLHSMask@13 (MapType1Store WandDefLHSMask@12 x7_15 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@12 x7_15 f_7)) x9_15)))) (state WandDefLHSHeap@4 WandDefLHSMask@13)) (and (=> (= (ControlFlow 0 90) (- 0 91)) (>= x9_15 NoPerm)) (=> (>= x9_15 NoPerm) (=> (and (=> (> x9_15 NoPerm) (not (= x8_15 null))) (= WandDefLHSMask@14 (MapType1Store WandDefLHSMask@13 x8_15 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@13 x8_15 f_7)) x9_15))))) (=> (and (and (state WandDefLHSHeap@4 WandDefLHSMask@14) (state WandDefLHSHeap@4 WandDefLHSMask@14)) (and (state WandDefLHSHeap@4 WandDefLHSMask@14) (= (ControlFlow 0 90) (- 0 89)))) (>= x9_15 NoPerm)))))))))))))))
(let ((anon85_correct true))
(let ((anon157_Then_correct  (=> (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_15 x1_16 x2_16 x3_16 x4_15 x5_15 x6_15 x7_15 x8_15 x9_15))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_15 x1_16 x2_16 x3_16 x4_15 x5_15 x6_15 x7_15 x8_15 x9_15))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_15 x1_16 x2_16 x3_16 x4_15 x5_15 x6_15 x7_15 x8_15 x9_15))))) (and (=> (= (ControlFlow 0 94) 90) anon158_Then_correct) (=> (= (ControlFlow 0 94) 87) anon85_correct)))))
(let ((anon157_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_15 x1_16 x2_16 x3_16 x4_15 x5_15 x6_15 x7_15 x8_15 x9_15))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_15 x1_16 x2_16 x3_16 x4_15 x5_15 x6_15 x7_15 x8_15 x9_15))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_15 x1_16 x2_16 x3_16 x4_15 x5_15 x6_15 x7_15 x8_15 x9_15)))))) (= (ControlFlow 0 88) 87)) anon85_correct)))
(let ((anon155_Else_correct  (=> (forall ((x0_41 T@U) (x1_43 Real) (x2_43 T@U) (x3_43 Real) (x4_43 T@U) (x5_43 Real) (x6_43 T@U) (x7_43 T@U) (x8_43 T@U) (x9_43 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_41) RefType) (= (type x2_43) RefType)) (= (type x4_43) RefType)) (= (type x6_43) RefType)) (= (type x7_43) RefType)) (= (type x8_43) RefType)) (and (U_2_bool (MapType2Select xs9 (inv_8_0 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43))) (and (U_2_bool (MapType2Select ys9 (inv_8_1 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43))) (U_2_bool (MapType2Select zs9 (inv_8_2 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43)))))) (and (and (and (and (and (and (and (and (and (= (inv_8_0 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) x0_41) (= q_1 x1_43)) (= (inv_8_1 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) x2_43)) (= q_1 x3_43)) (= (inv_8_2 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) x4_43)) (= q_1 x5_43)) (= (inv_8_0 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) x6_43)) (= (inv_8_1 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) x7_43)) (= (inv_8_2 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) x8_43)) (= q_1 x9_43)))
 :qid |stdinbpl.2203:20|
 :skolemid |166|
 :pattern ( (inv_8_0 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) (inv_8_1 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43) (inv_8_2 x0_41 x1_43 x2_43 x3_43 x4_43 x5_43 x6_43 x7_43 x8_43 x9_43))
)) (=> (and (state Heap@@10 QPMask@8) (state Heap@@10 QPMask@8)) (and (and (=> (= (ControlFlow 0 142) 140) anon156_Else_correct) (=> (= (ControlFlow 0 142) 94) anon157_Then_correct)) (=> (= (ControlFlow 0 142) 88) anon157_Else_correct))))))
(let ((anon155_Then_correct true))
(let ((anon154_Else_correct  (=> (forall ((x9_41 T@U) (y9_1 T@U) (z9_1 T@U) ) (!  (=> (and (and (and (= (type x9_41) RefType) (= (type y9_1) RefType)) (= (type z9_1) RefType)) (and (U_2_bool (MapType2Select xs9 x9_41)) (and (U_2_bool (MapType2Select ys9 y9_1)) (U_2_bool (MapType2Select zs9 z9_1))))) (and (and (= (inv_8_0 x9_41 q_1 y9_1 q_1 z9_1 q_1 x9_41 y9_1 z9_1 q_1) x9_41) (= (inv_8_1 x9_41 q_1 y9_1 q_1 z9_1 q_1 x9_41 y9_1 z9_1 q_1) y9_1)) (= (inv_8_2 x9_41 q_1 y9_1 q_1 z9_1 q_1 x9_41 y9_1 z9_1 q_1) z9_1)))
 :qid |stdinbpl.2175:20|
 :skolemid |165|
 :pattern ( (MapType0Select Heap@@10 null (wand x9_41 q_1 y9_1 q_1 z9_1 q_1 x9_41 y9_1 z9_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@8) (state Heap@@10 QPMask@8)) (and (=> (= (ControlFlow 0 143) 86) anon155_Then_correct) (=> (= (ControlFlow 0 143) 142) anon155_Else_correct))))))
(let ((anon154_Then_correct true))
(let ((anon151_Else_correct  (and (=> (= (ControlFlow 0 144) (- 0 145)) (forall ((x0_38 T@U) (x1_40 Real) (x2_40 T@U) (x3_40 Real) (x4_40 T@U) (x5_40 Real) (x6_40 T@U) (x7_40 T@U) (x8_40 T@U) (x9_38 Real) (x0_38_1 T@U) (x1_40_1 Real) (x2_40_1 T@U) (x3_40_1 Real) (x4_40_1 T@U) (x5_40_1 Real) (x6_40_1 T@U) (x7_40_1 T@U) (x8_40_1 T@U) (x9_38_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_38) RefType) (= (type x2_40) RefType)) (= (type x4_40) RefType)) (= (type x6_40) RefType)) (= (type x7_40) RefType)) (= (type x8_40) RefType)) (= (type x0_38_1) RefType)) (= (type x2_40_1) RefType)) (= (type x4_40_1) RefType)) (= (type x6_40_1) RefType)) (= (type x7_40_1) RefType)) (= (type x8_40_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_38 x0_38_1)) (not (= x1_40 x1_40_1))) (not (= x2_40 x2_40_1))) (not (= x3_40 x3_40_1))) (not (= x4_40 x4_40_1))) (not (= x5_40 x5_40_1))) (not (= x6_40 x6_40_1))) (not (= x7_40 x7_40_1))) (not (= x8_40 x8_40_1))) (not (= x9_38 x9_38_1))) (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_38 x1_40 x2_40 x3_40 x4_40 x5_40 x6_40 x7_40 x8_40 x9_38))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_38 x1_40 x2_40 x3_40 x4_40 x5_40 x6_40 x7_40 x8_40 x9_38))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_38 x1_40 x2_40 x3_40 x4_40 x5_40 x6_40 x7_40 x8_40 x9_38)))))) (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_38_1 x1_40_1 x2_40_1 x3_40_1 x4_40_1 x5_40_1 x6_40_1 x7_40_1 x8_40_1 x9_38_1))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_38_1 x1_40_1 x2_40_1 x3_40_1 x4_40_1 x5_40_1 x6_40_1 x7_40_1 x8_40_1 x9_38_1))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_38_1 x1_40_1 x2_40_1 x3_40_1 x4_40_1 x5_40_1 x6_40_1 x7_40_1 x8_40_1 x9_38_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_40 x6_40_1)) (not (= x9_38 x9_38_1))) (not (= x7_40 x7_40_1))) (not (= x9_38 x9_38_1))) (not (= x8_40 x8_40_1))) (not (= x9_38 x9_38_1))) (not (= x6_40 x6_40_1))) (not (= x7_40 x7_40_1))) (not (= x8_40 x8_40_1))) (not (= x9_38 x9_38_1)))))
 :qid |stdinbpl.2128:17|
 :skolemid |159|
 :pattern ( (neverTriggered83 x0_38 x1_40 x2_40 x3_40 x4_40 x5_40 x6_40 x7_40 x8_40 x9_38) (neverTriggered83 x0_38_1 x1_40_1 x2_40_1 x3_40_1 x4_40_1 x5_40_1 x6_40_1 x7_40_1 x8_40_1 x9_38_1))
))) (=> (forall ((x0_38@@0 T@U) (x1_40@@0 Real) (x2_40@@0 T@U) (x3_40@@0 Real) (x4_40@@0 T@U) (x5_40@@0 Real) (x6_40@@0 T@U) (x7_40@@0 T@U) (x8_40@@0 T@U) (x9_38@@0 Real) (x0_38_1@@0 T@U) (x1_40_1@@0 Real) (x2_40_1@@0 T@U) (x3_40_1@@0 Real) (x4_40_1@@0 T@U) (x5_40_1@@0 Real) (x6_40_1@@0 T@U) (x7_40_1@@0 T@U) (x8_40_1@@0 T@U) (x9_38_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_38@@0) RefType) (= (type x2_40@@0) RefType)) (= (type x4_40@@0) RefType)) (= (type x6_40@@0) RefType)) (= (type x7_40@@0) RefType)) (= (type x8_40@@0) RefType)) (= (type x0_38_1@@0) RefType)) (= (type x2_40_1@@0) RefType)) (= (type x4_40_1@@0) RefType)) (= (type x6_40_1@@0) RefType)) (= (type x7_40_1@@0) RefType)) (= (type x8_40_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_38@@0 x0_38_1@@0)) (not (= x1_40@@0 x1_40_1@@0))) (not (= x2_40@@0 x2_40_1@@0))) (not (= x3_40@@0 x3_40_1@@0))) (not (= x4_40@@0 x4_40_1@@0))) (not (= x5_40@@0 x5_40_1@@0))) (not (= x6_40@@0 x6_40_1@@0))) (not (= x7_40@@0 x7_40_1@@0))) (not (= x8_40@@0 x8_40_1@@0))) (not (= x9_38@@0 x9_38_1@@0))) (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_38@@0 x1_40@@0 x2_40@@0 x3_40@@0 x4_40@@0 x5_40@@0 x6_40@@0 x7_40@@0 x8_40@@0 x9_38@@0))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_38@@0 x1_40@@0 x2_40@@0 x3_40@@0 x4_40@@0 x5_40@@0 x6_40@@0 x7_40@@0 x8_40@@0 x9_38@@0))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_38@@0 x1_40@@0 x2_40@@0 x3_40@@0 x4_40@@0 x5_40@@0 x6_40@@0 x7_40@@0 x8_40@@0 x9_38@@0)))))) (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_38_1@@0 x1_40_1@@0 x2_40_1@@0 x3_40_1@@0 x4_40_1@@0 x5_40_1@@0 x6_40_1@@0 x7_40_1@@0 x8_40_1@@0 x9_38_1@@0))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_38_1@@0 x1_40_1@@0 x2_40_1@@0 x3_40_1@@0 x4_40_1@@0 x5_40_1@@0 x6_40_1@@0 x7_40_1@@0 x8_40_1@@0 x9_38_1@@0))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_38_1@@0 x1_40_1@@0 x2_40_1@@0 x3_40_1@@0 x4_40_1@@0 x5_40_1@@0 x6_40_1@@0 x7_40_1@@0 x8_40_1@@0 x9_38_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_40@@0 x6_40_1@@0)) (not (= x9_38@@0 x9_38_1@@0))) (not (= x7_40@@0 x7_40_1@@0))) (not (= x9_38@@0 x9_38_1@@0))) (not (= x8_40@@0 x8_40_1@@0))) (not (= x9_38@@0 x9_38_1@@0))) (not (= x6_40@@0 x6_40_1@@0))) (not (= x7_40@@0 x7_40_1@@0))) (not (= x8_40@@0 x8_40_1@@0))) (not (= x9_38@@0 x9_38_1@@0)))))
 :qid |stdinbpl.2128:17|
 :skolemid |159|
 :pattern ( (neverTriggered83 x0_38@@0 x1_40@@0 x2_40@@0 x3_40@@0 x4_40@@0 x5_40@@0 x6_40@@0 x7_40@@0 x8_40@@0 x9_38@@0) (neverTriggered83 x0_38_1@@0 x1_40_1@@0 x2_40_1@@0 x3_40_1@@0 x4_40_1@@0 x5_40_1@@0 x6_40_1@@0 x7_40_1@@0 x8_40_1@@0 x9_38_1@@0))
)) (=> (and (and (and (forall ((x0_38@@1 T@U) (x1_40@@1 Real) (x2_40@@1 T@U) (x3_40@@1 Real) (x4_40@@1 T@U) (x5_40@@1 Real) (x6_40@@1 T@U) (x7_40@@1 T@U) (x8_40@@1 T@U) (x9_38@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_38@@1) RefType) (= (type x2_40@@1) RefType)) (= (type x4_40@@1) RefType)) (= (type x6_40@@1) RefType)) (= (type x7_40@@1) RefType)) (= (type x8_40@@1) RefType)) (and (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_38@@1 x1_40@@1 x2_40@@1 x3_40@@1 x4_40@@1 x5_40@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_38@@1 x1_40@@1 x2_40@@1 x3_40@@1 x4_40@@1 x5_40@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_38@@1 x1_40@@1 x2_40@@1 x3_40@@1 x4_40@@1 x5_40@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv74 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x0_38@@1) (= (invRecv75 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x1_40@@1)) (= (invRecv76 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x2_40@@1)) (= (invRecv77 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x3_40@@1)) (= (invRecv78 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x4_40@@1)) (= (invRecv79 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x5_40@@1)) (= (invRecv80 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x6_40@@1)) (= (invRecv81 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x7_40@@1)) (= (invRecv82 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x8_40@@1)) (= (invRecv83 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) x9_38@@1)) (qpRange83 x6_40@@1 x9_38@@1 x7_40@@1 x9_38@@1 x8_40@@1 x9_38@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1)))
 :qid |stdinbpl.2134:22|
 :skolemid |160|
 :pattern ( (inv_7_0 x0_38@@1 x1_40@@1 x2_40@@1 x3_40@@1 x4_40@@1 x5_40@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) (inv_7_1 x0_38@@1 x1_40@@1 x2_40@@1 x3_40@@1 x4_40@@1 x5_40@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1) (inv_7_2 x0_38@@1 x1_40@@1 x2_40@@1 x3_40@@1 x4_40@@1 x5_40@@1 x6_40@@1 x7_40@@1 x8_40@@1 x9_38@@1))
)) (forall ((arg_0_8 T@U) (arg_1_8 Real) (arg_2_8 T@U) (arg_3_8 Real) (arg_4_8 T@U) (arg_5_8 Real) (arg_6_8 T@U) (arg_7_8 T@U) (arg_8_8 T@U) (arg_9_8 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_8) RefType) (= (type arg_2_8) RefType)) (= (type arg_4_8) RefType)) (= (type arg_6_8) RefType)) (= (type arg_7_8) RefType)) (= (type arg_8_8) RefType)) (and (and (and (U_2_bool (MapType2Select xs8 (inv_7_0 (invRecv74 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv75 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv76 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv77 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv78 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv79 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv80 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv81 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv82 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8)))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 (invRecv74 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv75 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv76 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv77 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv78 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv79 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv80 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv81 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv82 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8)))) (U_2_bool (MapType2Select zs8 (inv_7_2 (invRecv74 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv75 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv76 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv77 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv78 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv79 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv80 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv81 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv82 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8)))))) (< NoPerm FullPerm)) (qpRange83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8))) (and (and (and (and (and (and (and (and (and (= (invRecv80 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_0_8) (= (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_1_8)) (= (invRecv81 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_2_8)) (= (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_3_8)) (= (invRecv82 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_4_8)) (= (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_5_8)) (= (invRecv80 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_6_8)) (= (invRecv81 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_7_8)) (= (invRecv82 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_8_8)) (= (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) arg_9_8)))
 :qid |stdinbpl.2138:22|
 :skolemid |161|
 :pattern ( (invRecv74 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv75 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv76 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv77 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv78 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv79 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv80 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv81 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv82 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8) (invRecv83 arg_0_8 arg_1_8 arg_2_8 arg_3_8 arg_4_8 arg_5_8 arg_6_8 arg_7_8 arg_8_8 arg_9_8))
))) (and (forall ((arg_0_8@@0 T@U) (arg_1_8@@0 Real) (arg_2_8@@0 T@U) (arg_3_8@@0 Real) (arg_4_8@@0 T@U) (arg_5_8@@0 Real) (arg_6_8@@0 T@U) (arg_7_8@@0 T@U) (arg_8_8@@0 T@U) (arg_9_8@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_8@@0) RefType) (= (type arg_2_8@@0) RefType)) (= (type arg_4_8@@0) RefType)) (= (type arg_6_8@@0) RefType)) (= (type arg_7_8@@0) RefType)) (= (type arg_8_8@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs8 (inv_7_0 (invRecv74 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv75 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv76 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv77 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv78 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv79 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv80 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv81 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv82 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0)))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 (invRecv74 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv75 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv76 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv77 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv78 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv79 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv80 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv81 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv82 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0)))) (U_2_bool (MapType2Select zs8 (inv_7_2 (invRecv74 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv75 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv76 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv77 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv78 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv79 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv80 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv81 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv82 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0)))))) (< NoPerm FullPerm)) (qpRange83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv80 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_0_8@@0) (= (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_1_8@@0)) (= (invRecv81 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_2_8@@0)) (= (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_3_8@@0)) (= (invRecv82 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_4_8@@0)) (= (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_5_8@@0)) (= (invRecv80 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_6_8@@0)) (= (invRecv81 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_7_8@@0)) (= (invRecv82 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_8_8@@0)) (= (invRecv83 arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0) arg_9_8@@0))) (= (U_2_real (MapType1Select QPMask@8 null (wand arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0))) (+ (U_2_real (MapType1Select QPMask@7 null (wand arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0))) FullPerm))))
 :qid |stdinbpl.2144:22|
 :skolemid |162|
 :pattern ( (MapType1Select QPMask@8 null (wand arg_0_8@@0 arg_1_8@@0 arg_2_8@@0 arg_3_8@@0 arg_4_8@@0 arg_5_8@@0 arg_6_8@@0 arg_7_8@@0 arg_8_8@@0 arg_9_8@@0)))
)) (forall ((o_3@@2 T@U) (f_5@@2 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_5@@2))))
(let ((A@@15 (FieldTypeInv0 (type f_5@@2))))
 (=> (and (and (= (type o_3@@2) RefType) (= (type f_5@@2) (FieldType A@@15 B@@14))) (or (or (not (= o_3@@2 null)) (not (IsWandField f_5@@2))) (not (= (getPredWandId f_5@@2) 1)))) (= (U_2_real (MapType1Select QPMask@7 o_3@@2 f_5@@2)) (U_2_real (MapType1Select QPMask@8 o_3@@2 f_5@@2))))))
 :qid |stdinbpl.2150:29|
 :skolemid |163|
 :pattern ( (MapType1Select QPMask@7 o_3@@2 f_5@@2))
 :pattern ( (MapType1Select QPMask@8 o_3@@2 f_5@@2))
)))) (and (and (forall ((arg_0_8@@1 T@U) (arg_1_8@@1 Real) (arg_2_8@@1 T@U) (arg_3_8@@1 Real) (arg_4_8@@1 T@U) (arg_5_8@@1 Real) (arg_6_8@@1 T@U) (arg_7_8@@1 T@U) (arg_8_8@@1 T@U) (arg_9_8@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_8@@1) RefType) (= (type arg_2_8@@1) RefType)) (= (type arg_4_8@@1) RefType)) (= (type arg_6_8@@1) RefType)) (= (type arg_7_8@@1) RefType)) (= (type arg_8_8@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs8 (inv_7_0 (invRecv74 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv75 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv76 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv77 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv78 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv79 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv80 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv81 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv82 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv83 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1)))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 (invRecv74 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv75 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv76 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv77 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv78 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv79 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv80 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv81 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv82 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv83 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1)))) (U_2_bool (MapType2Select zs8 (inv_7_2 (invRecv74 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv75 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv76 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv77 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv78 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv79 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv80 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv81 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv82 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1) (invRecv83 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1)))))) (< NoPerm FullPerm)) (qpRange83 arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1)))) (= (U_2_real (MapType1Select QPMask@8 null (wand arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1))) (U_2_real (MapType1Select QPMask@7 null (wand arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1)))))
 :qid |stdinbpl.2154:22|
 :skolemid |164|
 :pattern ( (MapType1Select QPMask@8 null (wand arg_0_8@@1 arg_1_8@@1 arg_2_8@@1 arg_3_8@@1 arg_4_8@@1 arg_5_8@@1 arg_6_8@@1 arg_7_8@@1 arg_8_8@@1 arg_9_8@@1)))
)) (state Heap@@10 QPMask@8)) (and (state Heap@@10 QPMask@8) (state Heap@@10 QPMask@8)))) (and (=> (= (ControlFlow 0 144) 85) anon154_Then_correct) (=> (= (ControlFlow 0 144) 143) anon154_Else_correct)))))))
(let ((anon153_Then_correct  (and (=> (= (ControlFlow 0 80) (- 0 83)) (>= x9_14 NoPerm)) (=> (>= x9_14 NoPerm) (=> (=> (> x9_14 NoPerm) (not (= x6_14 null))) (=> (and (= WandDefLHSMask@15 (MapType1Store ZeroMask x6_14 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_14 f_7)) x9_14)))) (state WandDefLHSHeap@5 WandDefLHSMask@15)) (and (=> (= (ControlFlow 0 80) (- 0 82)) (>= x9_14 NoPerm)) (=> (>= x9_14 NoPerm) (=> (=> (> x9_14 NoPerm) (not (= x7_14 null))) (=> (and (= WandDefLHSMask@16 (MapType1Store WandDefLHSMask@15 x7_14 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@15 x7_14 f_7)) x9_14)))) (state WandDefLHSHeap@5 WandDefLHSMask@16)) (and (=> (= (ControlFlow 0 80) (- 0 81)) (>= x9_14 NoPerm)) (=> (>= x9_14 NoPerm) (=> (and (=> (> x9_14 NoPerm) (not (= x8_14 null))) (= WandDefLHSMask@17 (MapType1Store WandDefLHSMask@16 x8_14 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@16 x8_14 f_7)) x9_14))))) (=> (and (and (state WandDefLHSHeap@5 WandDefLHSMask@17) (state WandDefLHSHeap@5 WandDefLHSMask@17)) (and (state WandDefLHSHeap@5 WandDefLHSMask@17) (= (ControlFlow 0 80) (- 0 79)))) (>= x9_14 NoPerm)))))))))))))))
(let ((anon76_correct true))
(let ((anon152_Then_correct  (=> (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_14 x1_14 x2_14 x3_14 x4_14 x5_14 x6_14 x7_14 x8_14 x9_14))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_14 x1_14 x2_14 x3_14 x4_14 x5_14 x6_14 x7_14 x8_14 x9_14))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_14 x1_14 x2_14 x3_14 x4_14 x5_14 x6_14 x7_14 x8_14 x9_14))))) (and (=> (= (ControlFlow 0 84) 80) anon153_Then_correct) (=> (= (ControlFlow 0 84) 77) anon76_correct)))))
(let ((anon152_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_14 x1_14 x2_14 x3_14 x4_14 x5_14 x6_14 x7_14 x8_14 x9_14))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_14 x1_14 x2_14 x3_14 x4_14 x5_14 x6_14 x7_14 x8_14 x9_14))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_14 x1_14 x2_14 x3_14 x4_14 x5_14 x6_14 x7_14 x8_14 x9_14)))))) (= (ControlFlow 0 78) 77)) anon76_correct)))
(let ((anon150_Else_correct  (=> (forall ((x0_36 T@U) (x1_38 Real) (x2_38 T@U) (x3_38 Real) (x4_38 T@U) (x5_38 Real) (x6_38 T@U) (x7_38 T@U) (x8_38 T@U) (x9_36 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_36) RefType) (= (type x2_38) RefType)) (= (type x4_38) RefType)) (= (type x6_38) RefType)) (= (type x7_38) RefType)) (= (type x8_38) RefType)) (and (U_2_bool (MapType2Select xs8 (inv_7_0 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36))) (and (U_2_bool (MapType2Select ys8 (inv_7_1 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36))) (U_2_bool (MapType2Select zs8 (inv_7_2 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36)))))) (and (and (and (and (and (and (and (and (and (= (inv_7_0 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) x0_36) (= q_1 x1_38)) (= (inv_7_1 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) x2_38)) (= q_1 x3_38)) (= (inv_7_2 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) x4_38)) (= q_1 x5_38)) (= (inv_7_0 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) x6_38)) (= (inv_7_1 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) x7_38)) (= (inv_7_2 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) x8_38)) (= q_1 x9_36)))
 :qid |stdinbpl.2063:20|
 :skolemid |158|
 :pattern ( (inv_7_0 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) (inv_7_1 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36) (inv_7_2 x0_36 x1_38 x2_38 x3_38 x4_38 x5_38 x6_38 x7_38 x8_38 x9_36))
)) (=> (and (state Heap@@10 QPMask@7) (state Heap@@10 QPMask@7)) (and (and (=> (= (ControlFlow 0 146) 144) anon151_Else_correct) (=> (= (ControlFlow 0 146) 84) anon152_Then_correct)) (=> (= (ControlFlow 0 146) 78) anon152_Else_correct))))))
(let ((anon150_Then_correct true))
(let ((anon149_Else_correct  (=> (forall ((x8_36 T@U) (y8_1 T@U) (z8_1 T@U) ) (!  (=> (and (and (and (= (type x8_36) RefType) (= (type y8_1) RefType)) (= (type z8_1) RefType)) (and (U_2_bool (MapType2Select xs8 x8_36)) (and (U_2_bool (MapType2Select ys8 y8_1)) (U_2_bool (MapType2Select zs8 z8_1))))) (and (and (= (inv_7_0 x8_36 q_1 y8_1 q_1 z8_1 q_1 x8_36 y8_1 z8_1 q_1) x8_36) (= (inv_7_1 x8_36 q_1 y8_1 q_1 z8_1 q_1 x8_36 y8_1 z8_1 q_1) y8_1)) (= (inv_7_2 x8_36 q_1 y8_1 q_1 z8_1 q_1 x8_36 y8_1 z8_1 q_1) z8_1)))
 :qid |stdinbpl.2035:20|
 :skolemid |157|
 :pattern ( (MapType0Select Heap@@10 null (wand x8_36 q_1 y8_1 q_1 z8_1 q_1 x8_36 y8_1 z8_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@7) (state Heap@@10 QPMask@7)) (and (=> (= (ControlFlow 0 147) 76) anon150_Then_correct) (=> (= (ControlFlow 0 147) 146) anon150_Else_correct))))))
(let ((anon149_Then_correct true))
(let ((anon146_Else_correct  (and (=> (= (ControlFlow 0 148) (- 0 149)) (forall ((x0_33 T@U) (x1_35 Real) (x2_35 T@U) (x3_35 Real) (x4_35 T@U) (x5_35 Real) (x6_35 T@U) (x7_35 T@U) (x8_33 T@U) (x9_33 Real) (x0_33_1 T@U) (x1_35_1 Real) (x2_35_1 T@U) (x3_35_1 Real) (x4_35_1 T@U) (x5_35_1 Real) (x6_35_1 T@U) (x7_35_1 T@U) (x8_33_1 T@U) (x9_33_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_33) RefType) (= (type x2_35) RefType)) (= (type x4_35) RefType)) (= (type x6_35) RefType)) (= (type x7_35) RefType)) (= (type x8_33) RefType)) (= (type x0_33_1) RefType)) (= (type x2_35_1) RefType)) (= (type x4_35_1) RefType)) (= (type x6_35_1) RefType)) (= (type x7_35_1) RefType)) (= (type x8_33_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_33 x0_33_1)) (not (= x1_35 x1_35_1))) (not (= x2_35 x2_35_1))) (not (= x3_35 x3_35_1))) (not (= x4_35 x4_35_1))) (not (= x5_35 x5_35_1))) (not (= x6_35 x6_35_1))) (not (= x7_35 x7_35_1))) (not (= x8_33 x8_33_1))) (not (= x9_33 x9_33_1))) (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_33 x1_35 x2_35 x3_35 x4_35 x5_35 x6_35 x7_35 x8_33 x9_33))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_33 x1_35 x2_35 x3_35 x4_35 x5_35 x6_35 x7_35 x8_33 x9_33))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_33 x1_35 x2_35 x3_35 x4_35 x5_35 x6_35 x7_35 x8_33 x9_33)))))) (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_33_1 x1_35_1 x2_35_1 x3_35_1 x4_35_1 x5_35_1 x6_35_1 x7_35_1 x8_33_1 x9_33_1))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_33_1 x1_35_1 x2_35_1 x3_35_1 x4_35_1 x5_35_1 x6_35_1 x7_35_1 x8_33_1 x9_33_1))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_33_1 x1_35_1 x2_35_1 x3_35_1 x4_35_1 x5_35_1 x6_35_1 x7_35_1 x8_33_1 x9_33_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_35 x6_35_1)) (not (= x9_33 x9_33_1))) (not (= x7_35 x7_35_1))) (not (= x9_33 x9_33_1))) (not (= x8_33 x8_33_1))) (not (= x9_33 x9_33_1))) (not (= x6_35 x6_35_1))) (not (= x7_35 x7_35_1))) (not (= x8_33 x8_33_1))) (not (= x9_33 x9_33_1)))))
 :qid |stdinbpl.1988:17|
 :skolemid |151|
 :pattern ( (neverTriggered73 x0_33 x1_35 x2_35 x3_35 x4_35 x5_35 x6_35 x7_35 x8_33 x9_33) (neverTriggered73 x0_33_1 x1_35_1 x2_35_1 x3_35_1 x4_35_1 x5_35_1 x6_35_1 x7_35_1 x8_33_1 x9_33_1))
))) (=> (forall ((x0_33@@0 T@U) (x1_35@@0 Real) (x2_35@@0 T@U) (x3_35@@0 Real) (x4_35@@0 T@U) (x5_35@@0 Real) (x6_35@@0 T@U) (x7_35@@0 T@U) (x8_33@@0 T@U) (x9_33@@0 Real) (x0_33_1@@0 T@U) (x1_35_1@@0 Real) (x2_35_1@@0 T@U) (x3_35_1@@0 Real) (x4_35_1@@0 T@U) (x5_35_1@@0 Real) (x6_35_1@@0 T@U) (x7_35_1@@0 T@U) (x8_33_1@@0 T@U) (x9_33_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_33@@0) RefType) (= (type x2_35@@0) RefType)) (= (type x4_35@@0) RefType)) (= (type x6_35@@0) RefType)) (= (type x7_35@@0) RefType)) (= (type x8_33@@0) RefType)) (= (type x0_33_1@@0) RefType)) (= (type x2_35_1@@0) RefType)) (= (type x4_35_1@@0) RefType)) (= (type x6_35_1@@0) RefType)) (= (type x7_35_1@@0) RefType)) (= (type x8_33_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_33@@0 x0_33_1@@0)) (not (= x1_35@@0 x1_35_1@@0))) (not (= x2_35@@0 x2_35_1@@0))) (not (= x3_35@@0 x3_35_1@@0))) (not (= x4_35@@0 x4_35_1@@0))) (not (= x5_35@@0 x5_35_1@@0))) (not (= x6_35@@0 x6_35_1@@0))) (not (= x7_35@@0 x7_35_1@@0))) (not (= x8_33@@0 x8_33_1@@0))) (not (= x9_33@@0 x9_33_1@@0))) (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_33@@0 x1_35@@0 x2_35@@0 x3_35@@0 x4_35@@0 x5_35@@0 x6_35@@0 x7_35@@0 x8_33@@0 x9_33@@0))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_33@@0 x1_35@@0 x2_35@@0 x3_35@@0 x4_35@@0 x5_35@@0 x6_35@@0 x7_35@@0 x8_33@@0 x9_33@@0))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_33@@0 x1_35@@0 x2_35@@0 x3_35@@0 x4_35@@0 x5_35@@0 x6_35@@0 x7_35@@0 x8_33@@0 x9_33@@0)))))) (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_33_1@@0 x1_35_1@@0 x2_35_1@@0 x3_35_1@@0 x4_35_1@@0 x5_35_1@@0 x6_35_1@@0 x7_35_1@@0 x8_33_1@@0 x9_33_1@@0))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_33_1@@0 x1_35_1@@0 x2_35_1@@0 x3_35_1@@0 x4_35_1@@0 x5_35_1@@0 x6_35_1@@0 x7_35_1@@0 x8_33_1@@0 x9_33_1@@0))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_33_1@@0 x1_35_1@@0 x2_35_1@@0 x3_35_1@@0 x4_35_1@@0 x5_35_1@@0 x6_35_1@@0 x7_35_1@@0 x8_33_1@@0 x9_33_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_35@@0 x6_35_1@@0)) (not (= x9_33@@0 x9_33_1@@0))) (not (= x7_35@@0 x7_35_1@@0))) (not (= x9_33@@0 x9_33_1@@0))) (not (= x8_33@@0 x8_33_1@@0))) (not (= x9_33@@0 x9_33_1@@0))) (not (= x6_35@@0 x6_35_1@@0))) (not (= x7_35@@0 x7_35_1@@0))) (not (= x8_33@@0 x8_33_1@@0))) (not (= x9_33@@0 x9_33_1@@0)))))
 :qid |stdinbpl.1988:17|
 :skolemid |151|
 :pattern ( (neverTriggered73 x0_33@@0 x1_35@@0 x2_35@@0 x3_35@@0 x4_35@@0 x5_35@@0 x6_35@@0 x7_35@@0 x8_33@@0 x9_33@@0) (neverTriggered73 x0_33_1@@0 x1_35_1@@0 x2_35_1@@0 x3_35_1@@0 x4_35_1@@0 x5_35_1@@0 x6_35_1@@0 x7_35_1@@0 x8_33_1@@0 x9_33_1@@0))
)) (=> (and (and (and (forall ((x0_33@@1 T@U) (x1_35@@1 Real) (x2_35@@1 T@U) (x3_35@@1 Real) (x4_35@@1 T@U) (x5_35@@1 Real) (x6_35@@1 T@U) (x7_35@@1 T@U) (x8_33@@1 T@U) (x9_33@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_33@@1) RefType) (= (type x2_35@@1) RefType)) (= (type x4_35@@1) RefType)) (= (type x6_35@@1) RefType)) (= (type x7_35@@1) RefType)) (= (type x8_33@@1) RefType)) (and (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_33@@1 x1_35@@1 x2_35@@1 x3_35@@1 x4_35@@1 x5_35@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_33@@1 x1_35@@1 x2_35@@1 x3_35@@1 x4_35@@1 x5_35@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_33@@1 x1_35@@1 x2_35@@1 x3_35@@1 x4_35@@1 x5_35@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv64 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x0_33@@1) (= (invRecv65 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x1_35@@1)) (= (invRecv66 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x2_35@@1)) (= (invRecv67 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x3_35@@1)) (= (invRecv68 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x4_35@@1)) (= (invRecv69 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x5_35@@1)) (= (invRecv70 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x6_35@@1)) (= (invRecv71 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x7_35@@1)) (= (invRecv72 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x8_33@@1)) (= (invRecv73 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) x9_33@@1)) (qpRange73 x6_35@@1 x9_33@@1 x7_35@@1 x9_33@@1 x8_33@@1 x9_33@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1)))
 :qid |stdinbpl.1994:22|
 :skolemid |152|
 :pattern ( (inv_6_0 x0_33@@1 x1_35@@1 x2_35@@1 x3_35@@1 x4_35@@1 x5_35@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) (inv_6_1 x0_33@@1 x1_35@@1 x2_35@@1 x3_35@@1 x4_35@@1 x5_35@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1) (inv_6_2 x0_33@@1 x1_35@@1 x2_35@@1 x3_35@@1 x4_35@@1 x5_35@@1 x6_35@@1 x7_35@@1 x8_33@@1 x9_33@@1))
)) (forall ((arg_0_7 T@U) (arg_1_7 Real) (arg_2_7 T@U) (arg_3_7 Real) (arg_4_7 T@U) (arg_5_7 Real) (arg_6_7 T@U) (arg_7_7 T@U) (arg_8_7 T@U) (arg_9_7 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_7) RefType) (= (type arg_2_7) RefType)) (= (type arg_4_7) RefType)) (= (type arg_6_7) RefType)) (= (type arg_7_7) RefType)) (= (type arg_8_7) RefType)) (and (and (and (U_2_bool (MapType2Select xs7 (inv_6_0 (invRecv64 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv65 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv66 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv67 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv68 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv69 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv70 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv71 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv72 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7)))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 (invRecv64 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv65 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv66 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv67 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv68 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv69 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv70 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv71 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv72 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7)))) (U_2_bool (MapType2Select zs7 (inv_6_2 (invRecv64 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv65 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv66 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv67 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv68 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv69 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv70 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv71 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv72 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7)))))) (< NoPerm FullPerm)) (qpRange73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7))) (and (and (and (and (and (and (and (and (and (= (invRecv70 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_0_7) (= (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_1_7)) (= (invRecv71 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_2_7)) (= (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_3_7)) (= (invRecv72 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_4_7)) (= (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_5_7)) (= (invRecv70 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_6_7)) (= (invRecv71 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_7_7)) (= (invRecv72 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_8_7)) (= (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) arg_9_7)))
 :qid |stdinbpl.1998:22|
 :skolemid |153|
 :pattern ( (invRecv64 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv65 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv66 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv67 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv68 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv69 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv70 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv71 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv72 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7) (invRecv73 arg_0_7 arg_1_7 arg_2_7 arg_3_7 arg_4_7 arg_5_7 arg_6_7 arg_7_7 arg_8_7 arg_9_7))
))) (and (forall ((arg_0_7@@0 T@U) (arg_1_7@@0 Real) (arg_2_7@@0 T@U) (arg_3_7@@0 Real) (arg_4_7@@0 T@U) (arg_5_7@@0 Real) (arg_6_7@@0 T@U) (arg_7_7@@0 T@U) (arg_8_7@@0 T@U) (arg_9_7@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_7@@0) RefType) (= (type arg_2_7@@0) RefType)) (= (type arg_4_7@@0) RefType)) (= (type arg_6_7@@0) RefType)) (= (type arg_7_7@@0) RefType)) (= (type arg_8_7@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs7 (inv_6_0 (invRecv64 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv65 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv66 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv67 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv68 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv69 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv70 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv71 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv72 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0)))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 (invRecv64 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv65 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv66 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv67 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv68 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv69 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv70 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv71 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv72 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0)))) (U_2_bool (MapType2Select zs7 (inv_6_2 (invRecv64 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv65 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv66 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv67 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv68 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv69 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv70 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv71 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv72 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0)))))) (< NoPerm FullPerm)) (qpRange73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv70 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_0_7@@0) (= (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_1_7@@0)) (= (invRecv71 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_2_7@@0)) (= (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_3_7@@0)) (= (invRecv72 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_4_7@@0)) (= (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_5_7@@0)) (= (invRecv70 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_6_7@@0)) (= (invRecv71 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_7_7@@0)) (= (invRecv72 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_8_7@@0)) (= (invRecv73 arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0) arg_9_7@@0))) (= (U_2_real (MapType1Select QPMask@7 null (wand arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0))) (+ (U_2_real (MapType1Select QPMask@6 null (wand arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0))) FullPerm))))
 :qid |stdinbpl.2004:22|
 :skolemid |154|
 :pattern ( (MapType1Select QPMask@7 null (wand arg_0_7@@0 arg_1_7@@0 arg_2_7@@0 arg_3_7@@0 arg_4_7@@0 arg_5_7@@0 arg_6_7@@0 arg_7_7@@0 arg_8_7@@0 arg_9_7@@0)))
)) (forall ((o_3@@3 T@U) (f_5@@3 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_5@@3))))
(let ((A@@16 (FieldTypeInv0 (type f_5@@3))))
 (=> (and (and (= (type o_3@@3) RefType) (= (type f_5@@3) (FieldType A@@16 B@@15))) (or (or (not (= o_3@@3 null)) (not (IsWandField f_5@@3))) (not (= (getPredWandId f_5@@3) 1)))) (= (U_2_real (MapType1Select QPMask@6 o_3@@3 f_5@@3)) (U_2_real (MapType1Select QPMask@7 o_3@@3 f_5@@3))))))
 :qid |stdinbpl.2010:29|
 :skolemid |155|
 :pattern ( (MapType1Select QPMask@6 o_3@@3 f_5@@3))
 :pattern ( (MapType1Select QPMask@7 o_3@@3 f_5@@3))
)))) (and (and (forall ((arg_0_7@@1 T@U) (arg_1_7@@1 Real) (arg_2_7@@1 T@U) (arg_3_7@@1 Real) (arg_4_7@@1 T@U) (arg_5_7@@1 Real) (arg_6_7@@1 T@U) (arg_7_7@@1 T@U) (arg_8_7@@1 T@U) (arg_9_7@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_7@@1) RefType) (= (type arg_2_7@@1) RefType)) (= (type arg_4_7@@1) RefType)) (= (type arg_6_7@@1) RefType)) (= (type arg_7_7@@1) RefType)) (= (type arg_8_7@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs7 (inv_6_0 (invRecv64 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv65 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv66 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv67 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv68 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv69 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv70 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv71 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv72 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv73 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1)))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 (invRecv64 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv65 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv66 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv67 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv68 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv69 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv70 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv71 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv72 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv73 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1)))) (U_2_bool (MapType2Select zs7 (inv_6_2 (invRecv64 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv65 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv66 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv67 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv68 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv69 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv70 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv71 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv72 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1) (invRecv73 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1)))))) (< NoPerm FullPerm)) (qpRange73 arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1)))) (= (U_2_real (MapType1Select QPMask@7 null (wand arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1))) (U_2_real (MapType1Select QPMask@6 null (wand arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1)))))
 :qid |stdinbpl.2014:22|
 :skolemid |156|
 :pattern ( (MapType1Select QPMask@7 null (wand arg_0_7@@1 arg_1_7@@1 arg_2_7@@1 arg_3_7@@1 arg_4_7@@1 arg_5_7@@1 arg_6_7@@1 arg_7_7@@1 arg_8_7@@1 arg_9_7@@1)))
)) (state Heap@@10 QPMask@7)) (and (state Heap@@10 QPMask@7) (state Heap@@10 QPMask@7)))) (and (=> (= (ControlFlow 0 148) 75) anon149_Then_correct) (=> (= (ControlFlow 0 148) 147) anon149_Else_correct)))))))
(let ((anon148_Then_correct  (and (=> (= (ControlFlow 0 70) (- 0 73)) (>= x9_12 NoPerm)) (=> (>= x9_12 NoPerm) (=> (=> (> x9_12 NoPerm) (not (= x6_12 null))) (=> (and (= WandDefLHSMask@18 (MapType1Store ZeroMask x6_12 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_12 f_7)) x9_12)))) (state WandDefLHSHeap@6 WandDefLHSMask@18)) (and (=> (= (ControlFlow 0 70) (- 0 72)) (>= x9_12 NoPerm)) (=> (>= x9_12 NoPerm) (=> (=> (> x9_12 NoPerm) (not (= x7_12 null))) (=> (and (= WandDefLHSMask@19 (MapType1Store WandDefLHSMask@18 x7_12 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@18 x7_12 f_7)) x9_12)))) (state WandDefLHSHeap@6 WandDefLHSMask@19)) (and (=> (= (ControlFlow 0 70) (- 0 71)) (>= x9_12 NoPerm)) (=> (>= x9_12 NoPerm) (=> (and (=> (> x9_12 NoPerm) (not (= x8_12 null))) (= WandDefLHSMask@20 (MapType1Store WandDefLHSMask@19 x8_12 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@19 x8_12 f_7)) x9_12))))) (=> (and (and (state WandDefLHSHeap@6 WandDefLHSMask@20) (state WandDefLHSHeap@6 WandDefLHSMask@20)) (and (state WandDefLHSHeap@6 WandDefLHSMask@20) (= (ControlFlow 0 70) (- 0 69)))) (>= x9_12 NoPerm)))))))))))))))
(let ((anon67_correct true))
(let ((anon147_Then_correct  (=> (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_12 x1_12 x2_12 x3_12 x4_12 x5_12 x6_12 x7_12 x8_12 x9_12))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_12 x1_12 x2_12 x3_12 x4_12 x5_12 x6_12 x7_12 x8_12 x9_12))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_12 x1_12 x2_12 x3_12 x4_12 x5_12 x6_12 x7_12 x8_12 x9_12))))) (and (=> (= (ControlFlow 0 74) 70) anon148_Then_correct) (=> (= (ControlFlow 0 74) 67) anon67_correct)))))
(let ((anon147_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_12 x1_12 x2_12 x3_12 x4_12 x5_12 x6_12 x7_12 x8_12 x9_12))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_12 x1_12 x2_12 x3_12 x4_12 x5_12 x6_12 x7_12 x8_12 x9_12))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_12 x1_12 x2_12 x3_12 x4_12 x5_12 x6_12 x7_12 x8_12 x9_12)))))) (= (ControlFlow 0 68) 67)) anon67_correct)))
(let ((anon145_Else_correct  (=> (forall ((x0_31 T@U) (x1_33 Real) (x2_33 T@U) (x3_33 Real) (x4_33 T@U) (x5_33 Real) (x6_33 T@U) (x7_33 T@U) (x8_31 T@U) (x9_31 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_31) RefType) (= (type x2_33) RefType)) (= (type x4_33) RefType)) (= (type x6_33) RefType)) (= (type x7_33) RefType)) (= (type x8_31) RefType)) (and (U_2_bool (MapType2Select xs7 (inv_6_0 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31))) (and (U_2_bool (MapType2Select ys7 (inv_6_1 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31))) (U_2_bool (MapType2Select zs7 (inv_6_2 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31)))))) (and (and (and (and (and (and (and (and (and (= (inv_6_0 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) x0_31) (= q_1 x1_33)) (= (inv_6_1 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) x2_33)) (= q_1 x3_33)) (= (inv_6_2 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) x4_33)) (= q_1 x5_33)) (= (inv_6_0 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) x6_33)) (= (inv_6_1 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) x7_33)) (= (inv_6_2 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) x8_31)) (= q_1 x9_31)))
 :qid |stdinbpl.1923:20|
 :skolemid |150|
 :pattern ( (inv_6_0 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) (inv_6_1 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31) (inv_6_2 x0_31 x1_33 x2_33 x3_33 x4_33 x5_33 x6_33 x7_33 x8_31 x9_31))
)) (=> (and (state Heap@@10 QPMask@6) (state Heap@@10 QPMask@6)) (and (and (=> (= (ControlFlow 0 150) 148) anon146_Else_correct) (=> (= (ControlFlow 0 150) 74) anon147_Then_correct)) (=> (= (ControlFlow 0 150) 68) anon147_Else_correct))))))
(let ((anon145_Then_correct true))
(let ((anon144_Else_correct  (=> (forall ((x7_31 T@U) (y7_1 T@U) (z7_1 T@U) ) (!  (=> (and (and (and (= (type x7_31) RefType) (= (type y7_1) RefType)) (= (type z7_1) RefType)) (and (U_2_bool (MapType2Select xs7 x7_31)) (and (U_2_bool (MapType2Select ys7 y7_1)) (U_2_bool (MapType2Select zs7 z7_1))))) (and (and (= (inv_6_0 x7_31 q_1 y7_1 q_1 z7_1 q_1 x7_31 y7_1 z7_1 q_1) x7_31) (= (inv_6_1 x7_31 q_1 y7_1 q_1 z7_1 q_1 x7_31 y7_1 z7_1 q_1) y7_1)) (= (inv_6_2 x7_31 q_1 y7_1 q_1 z7_1 q_1 x7_31 y7_1 z7_1 q_1) z7_1)))
 :qid |stdinbpl.1895:20|
 :skolemid |149|
 :pattern ( (MapType0Select Heap@@10 null (wand x7_31 q_1 y7_1 q_1 z7_1 q_1 x7_31 y7_1 z7_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@6) (state Heap@@10 QPMask@6)) (and (=> (= (ControlFlow 0 151) 66) anon145_Then_correct) (=> (= (ControlFlow 0 151) 150) anon145_Else_correct))))))
(let ((anon144_Then_correct true))
(let ((anon141_Else_correct  (and (=> (= (ControlFlow 0 152) (- 0 153)) (forall ((x0_28 T@U) (x1_30 Real) (x2_30 T@U) (x3_30 Real) (x4_30 T@U) (x5_30 Real) (x6_30 T@U) (x7_28 T@U) (x8_28 T@U) (x9_28 Real) (x0_28_1 T@U) (x1_30_1 Real) (x2_30_1 T@U) (x3_30_1 Real) (x4_30_1 T@U) (x5_30_1 Real) (x6_30_1 T@U) (x7_28_1 T@U) (x8_28_1 T@U) (x9_28_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_28) RefType) (= (type x2_30) RefType)) (= (type x4_30) RefType)) (= (type x6_30) RefType)) (= (type x7_28) RefType)) (= (type x8_28) RefType)) (= (type x0_28_1) RefType)) (= (type x2_30_1) RefType)) (= (type x4_30_1) RefType)) (= (type x6_30_1) RefType)) (= (type x7_28_1) RefType)) (= (type x8_28_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_28 x0_28_1)) (not (= x1_30 x1_30_1))) (not (= x2_30 x2_30_1))) (not (= x3_30 x3_30_1))) (not (= x4_30 x4_30_1))) (not (= x5_30 x5_30_1))) (not (= x6_30 x6_30_1))) (not (= x7_28 x7_28_1))) (not (= x8_28 x8_28_1))) (not (= x9_28 x9_28_1))) (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_28 x1_30 x2_30 x3_30 x4_30 x5_30 x6_30 x7_28 x8_28 x9_28))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_28 x1_30 x2_30 x3_30 x4_30 x5_30 x6_30 x7_28 x8_28 x9_28))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_28 x1_30 x2_30 x3_30 x4_30 x5_30 x6_30 x7_28 x8_28 x9_28)))))) (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_28_1 x1_30_1 x2_30_1 x3_30_1 x4_30_1 x5_30_1 x6_30_1 x7_28_1 x8_28_1 x9_28_1))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_28_1 x1_30_1 x2_30_1 x3_30_1 x4_30_1 x5_30_1 x6_30_1 x7_28_1 x8_28_1 x9_28_1))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_28_1 x1_30_1 x2_30_1 x3_30_1 x4_30_1 x5_30_1 x6_30_1 x7_28_1 x8_28_1 x9_28_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_30 x6_30_1)) (not (= x9_28 x9_28_1))) (not (= x7_28 x7_28_1))) (not (= x9_28 x9_28_1))) (not (= x8_28 x8_28_1))) (not (= x9_28 x9_28_1))) (not (= x6_30 x6_30_1))) (not (= x7_28 x7_28_1))) (not (= x8_28 x8_28_1))) (not (= x9_28 x9_28_1)))))
 :qid |stdinbpl.1848:17|
 :skolemid |143|
 :pattern ( (neverTriggered63 x0_28 x1_30 x2_30 x3_30 x4_30 x5_30 x6_30 x7_28 x8_28 x9_28) (neverTriggered63 x0_28_1 x1_30_1 x2_30_1 x3_30_1 x4_30_1 x5_30_1 x6_30_1 x7_28_1 x8_28_1 x9_28_1))
))) (=> (forall ((x0_28@@0 T@U) (x1_30@@0 Real) (x2_30@@0 T@U) (x3_30@@0 Real) (x4_30@@0 T@U) (x5_30@@0 Real) (x6_30@@0 T@U) (x7_28@@0 T@U) (x8_28@@0 T@U) (x9_28@@0 Real) (x0_28_1@@0 T@U) (x1_30_1@@0 Real) (x2_30_1@@0 T@U) (x3_30_1@@0 Real) (x4_30_1@@0 T@U) (x5_30_1@@0 Real) (x6_30_1@@0 T@U) (x7_28_1@@0 T@U) (x8_28_1@@0 T@U) (x9_28_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_28@@0) RefType) (= (type x2_30@@0) RefType)) (= (type x4_30@@0) RefType)) (= (type x6_30@@0) RefType)) (= (type x7_28@@0) RefType)) (= (type x8_28@@0) RefType)) (= (type x0_28_1@@0) RefType)) (= (type x2_30_1@@0) RefType)) (= (type x4_30_1@@0) RefType)) (= (type x6_30_1@@0) RefType)) (= (type x7_28_1@@0) RefType)) (= (type x8_28_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_28@@0 x0_28_1@@0)) (not (= x1_30@@0 x1_30_1@@0))) (not (= x2_30@@0 x2_30_1@@0))) (not (= x3_30@@0 x3_30_1@@0))) (not (= x4_30@@0 x4_30_1@@0))) (not (= x5_30@@0 x5_30_1@@0))) (not (= x6_30@@0 x6_30_1@@0))) (not (= x7_28@@0 x7_28_1@@0))) (not (= x8_28@@0 x8_28_1@@0))) (not (= x9_28@@0 x9_28_1@@0))) (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_28@@0 x1_30@@0 x2_30@@0 x3_30@@0 x4_30@@0 x5_30@@0 x6_30@@0 x7_28@@0 x8_28@@0 x9_28@@0))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_28@@0 x1_30@@0 x2_30@@0 x3_30@@0 x4_30@@0 x5_30@@0 x6_30@@0 x7_28@@0 x8_28@@0 x9_28@@0))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_28@@0 x1_30@@0 x2_30@@0 x3_30@@0 x4_30@@0 x5_30@@0 x6_30@@0 x7_28@@0 x8_28@@0 x9_28@@0)))))) (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_28_1@@0 x1_30_1@@0 x2_30_1@@0 x3_30_1@@0 x4_30_1@@0 x5_30_1@@0 x6_30_1@@0 x7_28_1@@0 x8_28_1@@0 x9_28_1@@0))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_28_1@@0 x1_30_1@@0 x2_30_1@@0 x3_30_1@@0 x4_30_1@@0 x5_30_1@@0 x6_30_1@@0 x7_28_1@@0 x8_28_1@@0 x9_28_1@@0))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_28_1@@0 x1_30_1@@0 x2_30_1@@0 x3_30_1@@0 x4_30_1@@0 x5_30_1@@0 x6_30_1@@0 x7_28_1@@0 x8_28_1@@0 x9_28_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_30@@0 x6_30_1@@0)) (not (= x9_28@@0 x9_28_1@@0))) (not (= x7_28@@0 x7_28_1@@0))) (not (= x9_28@@0 x9_28_1@@0))) (not (= x8_28@@0 x8_28_1@@0))) (not (= x9_28@@0 x9_28_1@@0))) (not (= x6_30@@0 x6_30_1@@0))) (not (= x7_28@@0 x7_28_1@@0))) (not (= x8_28@@0 x8_28_1@@0))) (not (= x9_28@@0 x9_28_1@@0)))))
 :qid |stdinbpl.1848:17|
 :skolemid |143|
 :pattern ( (neverTriggered63 x0_28@@0 x1_30@@0 x2_30@@0 x3_30@@0 x4_30@@0 x5_30@@0 x6_30@@0 x7_28@@0 x8_28@@0 x9_28@@0) (neverTriggered63 x0_28_1@@0 x1_30_1@@0 x2_30_1@@0 x3_30_1@@0 x4_30_1@@0 x5_30_1@@0 x6_30_1@@0 x7_28_1@@0 x8_28_1@@0 x9_28_1@@0))
)) (=> (and (and (and (forall ((x0_28@@1 T@U) (x1_30@@1 Real) (x2_30@@1 T@U) (x3_30@@1 Real) (x4_30@@1 T@U) (x5_30@@1 Real) (x6_30@@1 T@U) (x7_28@@1 T@U) (x8_28@@1 T@U) (x9_28@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_28@@1) RefType) (= (type x2_30@@1) RefType)) (= (type x4_30@@1) RefType)) (= (type x6_30@@1) RefType)) (= (type x7_28@@1) RefType)) (= (type x8_28@@1) RefType)) (and (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_28@@1 x1_30@@1 x2_30@@1 x3_30@@1 x4_30@@1 x5_30@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_28@@1 x1_30@@1 x2_30@@1 x3_30@@1 x4_30@@1 x5_30@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_28@@1 x1_30@@1 x2_30@@1 x3_30@@1 x4_30@@1 x5_30@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv54 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x0_28@@1) (= (invRecv55 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x1_30@@1)) (= (invRecv56 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x2_30@@1)) (= (invRecv57 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x3_30@@1)) (= (invRecv58 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x4_30@@1)) (= (invRecv59 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x5_30@@1)) (= (invRecv60 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x6_30@@1)) (= (invRecv61 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x7_28@@1)) (= (invRecv62 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x8_28@@1)) (= (invRecv63 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) x9_28@@1)) (qpRange63 x6_30@@1 x9_28@@1 x7_28@@1 x9_28@@1 x8_28@@1 x9_28@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1)))
 :qid |stdinbpl.1854:22|
 :skolemid |144|
 :pattern ( (inv_5_0 x0_28@@1 x1_30@@1 x2_30@@1 x3_30@@1 x4_30@@1 x5_30@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) (inv_5_1 x0_28@@1 x1_30@@1 x2_30@@1 x3_30@@1 x4_30@@1 x5_30@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1) (inv_5_2 x0_28@@1 x1_30@@1 x2_30@@1 x3_30@@1 x4_30@@1 x5_30@@1 x6_30@@1 x7_28@@1 x8_28@@1 x9_28@@1))
)) (forall ((arg_0_6 T@U) (arg_1_6 Real) (arg_2_6 T@U) (arg_3_6 Real) (arg_4_6 T@U) (arg_5_6 Real) (arg_6_6 T@U) (arg_7_6 T@U) (arg_8_6 T@U) (arg_9_6 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_6) RefType) (= (type arg_2_6) RefType)) (= (type arg_4_6) RefType)) (= (type arg_6_6) RefType)) (= (type arg_7_6) RefType)) (= (type arg_8_6) RefType)) (and (and (and (U_2_bool (MapType2Select xs6 (inv_5_0 (invRecv54 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv55 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv56 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv57 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv58 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv59 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv60 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv61 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv62 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6)))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 (invRecv54 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv55 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv56 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv57 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv58 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv59 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv60 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv61 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv62 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6)))) (U_2_bool (MapType2Select zs6 (inv_5_2 (invRecv54 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv55 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv56 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv57 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv58 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv59 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv60 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv61 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv62 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6)))))) (< NoPerm FullPerm)) (qpRange63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6))) (and (and (and (and (and (and (and (and (and (= (invRecv60 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_0_6) (= (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_1_6)) (= (invRecv61 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_2_6)) (= (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_3_6)) (= (invRecv62 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_4_6)) (= (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_5_6)) (= (invRecv60 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_6_6)) (= (invRecv61 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_7_6)) (= (invRecv62 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_8_6)) (= (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) arg_9_6)))
 :qid |stdinbpl.1858:22|
 :skolemid |145|
 :pattern ( (invRecv54 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv55 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv56 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv57 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv58 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv59 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv60 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv61 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv62 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6) (invRecv63 arg_0_6 arg_1_6 arg_2_6 arg_3_6 arg_4_6 arg_5_6 arg_6_6 arg_7_6 arg_8_6 arg_9_6))
))) (and (forall ((arg_0_6@@0 T@U) (arg_1_6@@0 Real) (arg_2_6@@0 T@U) (arg_3_6@@0 Real) (arg_4_6@@0 T@U) (arg_5_6@@0 Real) (arg_6_6@@0 T@U) (arg_7_6@@0 T@U) (arg_8_6@@0 T@U) (arg_9_6@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_6@@0) RefType) (= (type arg_2_6@@0) RefType)) (= (type arg_4_6@@0) RefType)) (= (type arg_6_6@@0) RefType)) (= (type arg_7_6@@0) RefType)) (= (type arg_8_6@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs6 (inv_5_0 (invRecv54 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv55 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv56 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv57 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv58 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv59 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv60 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv61 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv62 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0)))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 (invRecv54 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv55 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv56 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv57 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv58 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv59 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv60 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv61 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv62 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0)))) (U_2_bool (MapType2Select zs6 (inv_5_2 (invRecv54 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv55 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv56 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv57 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv58 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv59 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv60 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv61 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv62 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0)))))) (< NoPerm FullPerm)) (qpRange63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv60 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_0_6@@0) (= (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_1_6@@0)) (= (invRecv61 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_2_6@@0)) (= (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_3_6@@0)) (= (invRecv62 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_4_6@@0)) (= (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_5_6@@0)) (= (invRecv60 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_6_6@@0)) (= (invRecv61 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_7_6@@0)) (= (invRecv62 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_8_6@@0)) (= (invRecv63 arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0) arg_9_6@@0))) (= (U_2_real (MapType1Select QPMask@6 null (wand arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0))) (+ (U_2_real (MapType1Select QPMask@5 null (wand arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0))) FullPerm))))
 :qid |stdinbpl.1864:22|
 :skolemid |146|
 :pattern ( (MapType1Select QPMask@6 null (wand arg_0_6@@0 arg_1_6@@0 arg_2_6@@0 arg_3_6@@0 arg_4_6@@0 arg_5_6@@0 arg_6_6@@0 arg_7_6@@0 arg_8_6@@0 arg_9_6@@0)))
)) (forall ((o_3@@4 T@U) (f_5@@4 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_5@@4))))
(let ((A@@17 (FieldTypeInv0 (type f_5@@4))))
 (=> (and (and (= (type o_3@@4) RefType) (= (type f_5@@4) (FieldType A@@17 B@@16))) (or (or (not (= o_3@@4 null)) (not (IsWandField f_5@@4))) (not (= (getPredWandId f_5@@4) 1)))) (= (U_2_real (MapType1Select QPMask@5 o_3@@4 f_5@@4)) (U_2_real (MapType1Select QPMask@6 o_3@@4 f_5@@4))))))
 :qid |stdinbpl.1870:29|
 :skolemid |147|
 :pattern ( (MapType1Select QPMask@5 o_3@@4 f_5@@4))
 :pattern ( (MapType1Select QPMask@6 o_3@@4 f_5@@4))
)))) (and (and (forall ((arg_0_6@@1 T@U) (arg_1_6@@1 Real) (arg_2_6@@1 T@U) (arg_3_6@@1 Real) (arg_4_6@@1 T@U) (arg_5_6@@1 Real) (arg_6_6@@1 T@U) (arg_7_6@@1 T@U) (arg_8_6@@1 T@U) (arg_9_6@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_6@@1) RefType) (= (type arg_2_6@@1) RefType)) (= (type arg_4_6@@1) RefType)) (= (type arg_6_6@@1) RefType)) (= (type arg_7_6@@1) RefType)) (= (type arg_8_6@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs6 (inv_5_0 (invRecv54 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv55 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv56 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv57 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv58 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv59 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv60 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv61 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv62 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv63 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1)))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 (invRecv54 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv55 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv56 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv57 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv58 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv59 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv60 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv61 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv62 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv63 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1)))) (U_2_bool (MapType2Select zs6 (inv_5_2 (invRecv54 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv55 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv56 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv57 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv58 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv59 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv60 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv61 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv62 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1) (invRecv63 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1)))))) (< NoPerm FullPerm)) (qpRange63 arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1)))) (= (U_2_real (MapType1Select QPMask@6 null (wand arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1))) (U_2_real (MapType1Select QPMask@5 null (wand arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1)))))
 :qid |stdinbpl.1874:22|
 :skolemid |148|
 :pattern ( (MapType1Select QPMask@6 null (wand arg_0_6@@1 arg_1_6@@1 arg_2_6@@1 arg_3_6@@1 arg_4_6@@1 arg_5_6@@1 arg_6_6@@1 arg_7_6@@1 arg_8_6@@1 arg_9_6@@1)))
)) (state Heap@@10 QPMask@6)) (and (state Heap@@10 QPMask@6) (state Heap@@10 QPMask@6)))) (and (=> (= (ControlFlow 0 152) 65) anon144_Then_correct) (=> (= (ControlFlow 0 152) 151) anon144_Else_correct)))))))
(let ((anon143_Then_correct  (and (=> (= (ControlFlow 0 60) (- 0 63)) (>= x9_10 NoPerm)) (=> (>= x9_10 NoPerm) (=> (=> (> x9_10 NoPerm) (not (= x6_10 null))) (=> (and (= WandDefLHSMask@21 (MapType1Store ZeroMask x6_10 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_10 f_7)) x9_10)))) (state WandDefLHSHeap@7 WandDefLHSMask@21)) (and (=> (= (ControlFlow 0 60) (- 0 62)) (>= x9_10 NoPerm)) (=> (>= x9_10 NoPerm) (=> (=> (> x9_10 NoPerm) (not (= x7_10 null))) (=> (and (= WandDefLHSMask@22 (MapType1Store WandDefLHSMask@21 x7_10 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@21 x7_10 f_7)) x9_10)))) (state WandDefLHSHeap@7 WandDefLHSMask@22)) (and (=> (= (ControlFlow 0 60) (- 0 61)) (>= x9_10 NoPerm)) (=> (>= x9_10 NoPerm) (=> (and (=> (> x9_10 NoPerm) (not (= x8_10 null))) (= WandDefLHSMask@23 (MapType1Store WandDefLHSMask@22 x8_10 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@22 x8_10 f_7)) x9_10))))) (=> (and (and (state WandDefLHSHeap@7 WandDefLHSMask@23) (state WandDefLHSHeap@7 WandDefLHSMask@23)) (and (state WandDefLHSHeap@7 WandDefLHSMask@23) (= (ControlFlow 0 60) (- 0 59)))) (>= x9_10 NoPerm)))))))))))))))
(let ((anon58_correct true))
(let ((anon142_Then_correct  (=> (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_10 x1_11 x2_11 x3_10 x4_10 x5_10 x6_10 x7_10 x8_10 x9_10))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_10 x1_11 x2_11 x3_10 x4_10 x5_10 x6_10 x7_10 x8_10 x9_10))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_10 x1_11 x2_11 x3_10 x4_10 x5_10 x6_10 x7_10 x8_10 x9_10))))) (and (=> (= (ControlFlow 0 64) 60) anon143_Then_correct) (=> (= (ControlFlow 0 64) 57) anon58_correct)))))
(let ((anon142_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_10 x1_11 x2_11 x3_10 x4_10 x5_10 x6_10 x7_10 x8_10 x9_10))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_10 x1_11 x2_11 x3_10 x4_10 x5_10 x6_10 x7_10 x8_10 x9_10))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_10 x1_11 x2_11 x3_10 x4_10 x5_10 x6_10 x7_10 x8_10 x9_10)))))) (= (ControlFlow 0 58) 57)) anon58_correct)))
(let ((anon140_Else_correct  (=> (forall ((x0_26 T@U) (x1_28 Real) (x2_28 T@U) (x3_28 Real) (x4_28 T@U) (x5_28 Real) (x6_28 T@U) (x7_26 T@U) (x8_26 T@U) (x9_26 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_26) RefType) (= (type x2_28) RefType)) (= (type x4_28) RefType)) (= (type x6_28) RefType)) (= (type x7_26) RefType)) (= (type x8_26) RefType)) (and (U_2_bool (MapType2Select xs6 (inv_5_0 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26))) (and (U_2_bool (MapType2Select ys6 (inv_5_1 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26))) (U_2_bool (MapType2Select zs6 (inv_5_2 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26)))))) (and (and (and (and (and (and (and (and (and (= (inv_5_0 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) x0_26) (= q_1 x1_28)) (= (inv_5_1 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) x2_28)) (= q_1 x3_28)) (= (inv_5_2 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) x4_28)) (= q_1 x5_28)) (= (inv_5_0 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) x6_28)) (= (inv_5_1 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) x7_26)) (= (inv_5_2 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) x8_26)) (= q_1 x9_26)))
 :qid |stdinbpl.1783:20|
 :skolemid |142|
 :pattern ( (inv_5_0 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) (inv_5_1 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26) (inv_5_2 x0_26 x1_28 x2_28 x3_28 x4_28 x5_28 x6_28 x7_26 x8_26 x9_26))
)) (=> (and (state Heap@@10 QPMask@5) (state Heap@@10 QPMask@5)) (and (and (=> (= (ControlFlow 0 154) 152) anon141_Else_correct) (=> (= (ControlFlow 0 154) 64) anon142_Then_correct)) (=> (= (ControlFlow 0 154) 58) anon142_Else_correct))))))
(let ((anon140_Then_correct true))
(let ((anon139_Else_correct  (=> (forall ((x6_26 T@U) (y6_1 T@U) (z6_1 T@U) ) (!  (=> (and (and (and (= (type x6_26) RefType) (= (type y6_1) RefType)) (= (type z6_1) RefType)) (and (U_2_bool (MapType2Select xs6 x6_26)) (and (U_2_bool (MapType2Select ys6 y6_1)) (U_2_bool (MapType2Select zs6 z6_1))))) (and (and (= (inv_5_0 x6_26 q_1 y6_1 q_1 z6_1 q_1 x6_26 y6_1 z6_1 q_1) x6_26) (= (inv_5_1 x6_26 q_1 y6_1 q_1 z6_1 q_1 x6_26 y6_1 z6_1 q_1) y6_1)) (= (inv_5_2 x6_26 q_1 y6_1 q_1 z6_1 q_1 x6_26 y6_1 z6_1 q_1) z6_1)))
 :qid |stdinbpl.1755:20|
 :skolemid |141|
 :pattern ( (MapType0Select Heap@@10 null (wand x6_26 q_1 y6_1 q_1 z6_1 q_1 x6_26 y6_1 z6_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@5) (state Heap@@10 QPMask@5)) (and (=> (= (ControlFlow 0 155) 56) anon140_Then_correct) (=> (= (ControlFlow 0 155) 154) anon140_Else_correct))))))
(let ((anon139_Then_correct true))
(let ((anon136_Else_correct  (and (=> (= (ControlFlow 0 156) (- 0 157)) (forall ((x0_23 T@U) (x1_25 Real) (x2_25 T@U) (x3_25 Real) (x4_25 T@U) (x5_25 Real) (x6_23 T@U) (x7_23 T@U) (x8_23 T@U) (x9_23 Real) (x0_23_1 T@U) (x1_25_1 Real) (x2_25_1 T@U) (x3_25_1 Real) (x4_25_1 T@U) (x5_25_1 Real) (x6_23_1 T@U) (x7_23_1 T@U) (x8_23_1 T@U) (x9_23_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_23) RefType) (= (type x2_25) RefType)) (= (type x4_25) RefType)) (= (type x6_23) RefType)) (= (type x7_23) RefType)) (= (type x8_23) RefType)) (= (type x0_23_1) RefType)) (= (type x2_25_1) RefType)) (= (type x4_25_1) RefType)) (= (type x6_23_1) RefType)) (= (type x7_23_1) RefType)) (= (type x8_23_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_23 x0_23_1)) (not (= x1_25 x1_25_1))) (not (= x2_25 x2_25_1))) (not (= x3_25 x3_25_1))) (not (= x4_25 x4_25_1))) (not (= x5_25 x5_25_1))) (not (= x6_23 x6_23_1))) (not (= x7_23 x7_23_1))) (not (= x8_23 x8_23_1))) (not (= x9_23 x9_23_1))) (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_23 x1_25 x2_25 x3_25 x4_25 x5_25 x6_23 x7_23 x8_23 x9_23))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_23 x1_25 x2_25 x3_25 x4_25 x5_25 x6_23 x7_23 x8_23 x9_23))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_23 x1_25 x2_25 x3_25 x4_25 x5_25 x6_23 x7_23 x8_23 x9_23)))))) (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_23_1 x1_25_1 x2_25_1 x3_25_1 x4_25_1 x5_25_1 x6_23_1 x7_23_1 x8_23_1 x9_23_1))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_23_1 x1_25_1 x2_25_1 x3_25_1 x4_25_1 x5_25_1 x6_23_1 x7_23_1 x8_23_1 x9_23_1))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_23_1 x1_25_1 x2_25_1 x3_25_1 x4_25_1 x5_25_1 x6_23_1 x7_23_1 x8_23_1 x9_23_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_23 x6_23_1)) (not (= x9_23 x9_23_1))) (not (= x7_23 x7_23_1))) (not (= x9_23 x9_23_1))) (not (= x8_23 x8_23_1))) (not (= x9_23 x9_23_1))) (not (= x6_23 x6_23_1))) (not (= x7_23 x7_23_1))) (not (= x8_23 x8_23_1))) (not (= x9_23 x9_23_1)))))
 :qid |stdinbpl.1708:17|
 :skolemid |135|
 :pattern ( (neverTriggered53 x0_23 x1_25 x2_25 x3_25 x4_25 x5_25 x6_23 x7_23 x8_23 x9_23) (neverTriggered53 x0_23_1 x1_25_1 x2_25_1 x3_25_1 x4_25_1 x5_25_1 x6_23_1 x7_23_1 x8_23_1 x9_23_1))
))) (=> (forall ((x0_23@@0 T@U) (x1_25@@0 Real) (x2_25@@0 T@U) (x3_25@@0 Real) (x4_25@@0 T@U) (x5_25@@0 Real) (x6_23@@0 T@U) (x7_23@@0 T@U) (x8_23@@0 T@U) (x9_23@@0 Real) (x0_23_1@@0 T@U) (x1_25_1@@0 Real) (x2_25_1@@0 T@U) (x3_25_1@@0 Real) (x4_25_1@@0 T@U) (x5_25_1@@0 Real) (x6_23_1@@0 T@U) (x7_23_1@@0 T@U) (x8_23_1@@0 T@U) (x9_23_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_23@@0) RefType) (= (type x2_25@@0) RefType)) (= (type x4_25@@0) RefType)) (= (type x6_23@@0) RefType)) (= (type x7_23@@0) RefType)) (= (type x8_23@@0) RefType)) (= (type x0_23_1@@0) RefType)) (= (type x2_25_1@@0) RefType)) (= (type x4_25_1@@0) RefType)) (= (type x6_23_1@@0) RefType)) (= (type x7_23_1@@0) RefType)) (= (type x8_23_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_23@@0 x0_23_1@@0)) (not (= x1_25@@0 x1_25_1@@0))) (not (= x2_25@@0 x2_25_1@@0))) (not (= x3_25@@0 x3_25_1@@0))) (not (= x4_25@@0 x4_25_1@@0))) (not (= x5_25@@0 x5_25_1@@0))) (not (= x6_23@@0 x6_23_1@@0))) (not (= x7_23@@0 x7_23_1@@0))) (not (= x8_23@@0 x8_23_1@@0))) (not (= x9_23@@0 x9_23_1@@0))) (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_23@@0 x1_25@@0 x2_25@@0 x3_25@@0 x4_25@@0 x5_25@@0 x6_23@@0 x7_23@@0 x8_23@@0 x9_23@@0))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_23@@0 x1_25@@0 x2_25@@0 x3_25@@0 x4_25@@0 x5_25@@0 x6_23@@0 x7_23@@0 x8_23@@0 x9_23@@0))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_23@@0 x1_25@@0 x2_25@@0 x3_25@@0 x4_25@@0 x5_25@@0 x6_23@@0 x7_23@@0 x8_23@@0 x9_23@@0)))))) (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_23_1@@0 x1_25_1@@0 x2_25_1@@0 x3_25_1@@0 x4_25_1@@0 x5_25_1@@0 x6_23_1@@0 x7_23_1@@0 x8_23_1@@0 x9_23_1@@0))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_23_1@@0 x1_25_1@@0 x2_25_1@@0 x3_25_1@@0 x4_25_1@@0 x5_25_1@@0 x6_23_1@@0 x7_23_1@@0 x8_23_1@@0 x9_23_1@@0))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_23_1@@0 x1_25_1@@0 x2_25_1@@0 x3_25_1@@0 x4_25_1@@0 x5_25_1@@0 x6_23_1@@0 x7_23_1@@0 x8_23_1@@0 x9_23_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_23@@0 x6_23_1@@0)) (not (= x9_23@@0 x9_23_1@@0))) (not (= x7_23@@0 x7_23_1@@0))) (not (= x9_23@@0 x9_23_1@@0))) (not (= x8_23@@0 x8_23_1@@0))) (not (= x9_23@@0 x9_23_1@@0))) (not (= x6_23@@0 x6_23_1@@0))) (not (= x7_23@@0 x7_23_1@@0))) (not (= x8_23@@0 x8_23_1@@0))) (not (= x9_23@@0 x9_23_1@@0)))))
 :qid |stdinbpl.1708:17|
 :skolemid |135|
 :pattern ( (neverTriggered53 x0_23@@0 x1_25@@0 x2_25@@0 x3_25@@0 x4_25@@0 x5_25@@0 x6_23@@0 x7_23@@0 x8_23@@0 x9_23@@0) (neverTriggered53 x0_23_1@@0 x1_25_1@@0 x2_25_1@@0 x3_25_1@@0 x4_25_1@@0 x5_25_1@@0 x6_23_1@@0 x7_23_1@@0 x8_23_1@@0 x9_23_1@@0))
)) (=> (and (and (and (forall ((x0_23@@1 T@U) (x1_25@@1 Real) (x2_25@@1 T@U) (x3_25@@1 Real) (x4_25@@1 T@U) (x5_25@@1 Real) (x6_23@@1 T@U) (x7_23@@1 T@U) (x8_23@@1 T@U) (x9_23@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_23@@1) RefType) (= (type x2_25@@1) RefType)) (= (type x4_25@@1) RefType)) (= (type x6_23@@1) RefType)) (= (type x7_23@@1) RefType)) (= (type x8_23@@1) RefType)) (and (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_23@@1 x1_25@@1 x2_25@@1 x3_25@@1 x4_25@@1 x5_25@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_23@@1 x1_25@@1 x2_25@@1 x3_25@@1 x4_25@@1 x5_25@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_23@@1 x1_25@@1 x2_25@@1 x3_25@@1 x4_25@@1 x5_25@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv44 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x0_23@@1) (= (invRecv45 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x1_25@@1)) (= (invRecv46 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x2_25@@1)) (= (invRecv47 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x3_25@@1)) (= (invRecv48 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x4_25@@1)) (= (invRecv49 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x5_25@@1)) (= (invRecv50 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x6_23@@1)) (= (invRecv51 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x7_23@@1)) (= (invRecv52 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x8_23@@1)) (= (invRecv53 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) x9_23@@1)) (qpRange53 x6_23@@1 x9_23@@1 x7_23@@1 x9_23@@1 x8_23@@1 x9_23@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1)))
 :qid |stdinbpl.1714:22|
 :skolemid |136|
 :pattern ( (inv_4_0 x0_23@@1 x1_25@@1 x2_25@@1 x3_25@@1 x4_25@@1 x5_25@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) (inv_4_1 x0_23@@1 x1_25@@1 x2_25@@1 x3_25@@1 x4_25@@1 x5_25@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1) (inv_4_2 x0_23@@1 x1_25@@1 x2_25@@1 x3_25@@1 x4_25@@1 x5_25@@1 x6_23@@1 x7_23@@1 x8_23@@1 x9_23@@1))
)) (forall ((arg_0_5 T@U) (arg_1_5 Real) (arg_2_5 T@U) (arg_3_5 Real) (arg_4_5 T@U) (arg_5_5 Real) (arg_6_5 T@U) (arg_7_5 T@U) (arg_8_5 T@U) (arg_9_5 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_5) RefType) (= (type arg_2_5) RefType)) (= (type arg_4_5) RefType)) (= (type arg_6_5) RefType)) (= (type arg_7_5) RefType)) (= (type arg_8_5) RefType)) (and (and (and (U_2_bool (MapType2Select xs5 (inv_4_0 (invRecv44 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv45 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv46 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv47 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv48 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv49 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv50 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv51 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv52 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5)))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 (invRecv44 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv45 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv46 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv47 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv48 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv49 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv50 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv51 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv52 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5)))) (U_2_bool (MapType2Select zs5 (inv_4_2 (invRecv44 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv45 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv46 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv47 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv48 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv49 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv50 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv51 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv52 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5)))))) (< NoPerm FullPerm)) (qpRange53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5))) (and (and (and (and (and (and (and (and (and (= (invRecv50 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_0_5) (= (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_1_5)) (= (invRecv51 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_2_5)) (= (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_3_5)) (= (invRecv52 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_4_5)) (= (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_5_5)) (= (invRecv50 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_6_5)) (= (invRecv51 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_7_5)) (= (invRecv52 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_8_5)) (= (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) arg_9_5)))
 :qid |stdinbpl.1718:22|
 :skolemid |137|
 :pattern ( (invRecv44 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv45 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv46 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv47 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv48 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv49 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv50 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv51 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv52 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5) (invRecv53 arg_0_5 arg_1_5 arg_2_5 arg_3_5 arg_4_5 arg_5_5 arg_6_5 arg_7_5 arg_8_5 arg_9_5))
))) (and (forall ((arg_0_5@@0 T@U) (arg_1_5@@0 Real) (arg_2_5@@0 T@U) (arg_3_5@@0 Real) (arg_4_5@@0 T@U) (arg_5_5@@0 Real) (arg_6_5@@0 T@U) (arg_7_5@@0 T@U) (arg_8_5@@0 T@U) (arg_9_5@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_5@@0) RefType) (= (type arg_2_5@@0) RefType)) (= (type arg_4_5@@0) RefType)) (= (type arg_6_5@@0) RefType)) (= (type arg_7_5@@0) RefType)) (= (type arg_8_5@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs5 (inv_4_0 (invRecv44 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv45 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv46 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv47 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv48 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv49 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv50 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv51 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv52 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0)))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 (invRecv44 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv45 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv46 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv47 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv48 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv49 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv50 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv51 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv52 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0)))) (U_2_bool (MapType2Select zs5 (inv_4_2 (invRecv44 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv45 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv46 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv47 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv48 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv49 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv50 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv51 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv52 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0)))))) (< NoPerm FullPerm)) (qpRange53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv50 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_0_5@@0) (= (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_1_5@@0)) (= (invRecv51 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_2_5@@0)) (= (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_3_5@@0)) (= (invRecv52 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_4_5@@0)) (= (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_5_5@@0)) (= (invRecv50 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_6_5@@0)) (= (invRecv51 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_7_5@@0)) (= (invRecv52 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_8_5@@0)) (= (invRecv53 arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0) arg_9_5@@0))) (= (U_2_real (MapType1Select QPMask@5 null (wand arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0))) (+ (U_2_real (MapType1Select QPMask@4 null (wand arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0))) FullPerm))))
 :qid |stdinbpl.1724:22|
 :skolemid |138|
 :pattern ( (MapType1Select QPMask@5 null (wand arg_0_5@@0 arg_1_5@@0 arg_2_5@@0 arg_3_5@@0 arg_4_5@@0 arg_5_5@@0 arg_6_5@@0 arg_7_5@@0 arg_8_5@@0 arg_9_5@@0)))
)) (forall ((o_3@@5 T@U) (f_5@@5 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_5@@5))))
(let ((A@@18 (FieldTypeInv0 (type f_5@@5))))
 (=> (and (and (= (type o_3@@5) RefType) (= (type f_5@@5) (FieldType A@@18 B@@17))) (or (or (not (= o_3@@5 null)) (not (IsWandField f_5@@5))) (not (= (getPredWandId f_5@@5) 1)))) (= (U_2_real (MapType1Select QPMask@4 o_3@@5 f_5@@5)) (U_2_real (MapType1Select QPMask@5 o_3@@5 f_5@@5))))))
 :qid |stdinbpl.1730:29|
 :skolemid |139|
 :pattern ( (MapType1Select QPMask@4 o_3@@5 f_5@@5))
 :pattern ( (MapType1Select QPMask@5 o_3@@5 f_5@@5))
)))) (and (and (forall ((arg_0_5@@1 T@U) (arg_1_5@@1 Real) (arg_2_5@@1 T@U) (arg_3_5@@1 Real) (arg_4_5@@1 T@U) (arg_5_5@@1 Real) (arg_6_5@@1 T@U) (arg_7_5@@1 T@U) (arg_8_5@@1 T@U) (arg_9_5@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_5@@1) RefType) (= (type arg_2_5@@1) RefType)) (= (type arg_4_5@@1) RefType)) (= (type arg_6_5@@1) RefType)) (= (type arg_7_5@@1) RefType)) (= (type arg_8_5@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs5 (inv_4_0 (invRecv44 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv45 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv46 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv47 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv48 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv49 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv50 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv51 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv52 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv53 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1)))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 (invRecv44 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv45 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv46 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv47 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv48 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv49 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv50 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv51 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv52 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv53 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1)))) (U_2_bool (MapType2Select zs5 (inv_4_2 (invRecv44 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv45 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv46 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv47 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv48 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv49 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv50 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv51 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv52 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1) (invRecv53 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1)))))) (< NoPerm FullPerm)) (qpRange53 arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1)))) (= (U_2_real (MapType1Select QPMask@5 null (wand arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1))) (U_2_real (MapType1Select QPMask@4 null (wand arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1)))))
 :qid |stdinbpl.1734:22|
 :skolemid |140|
 :pattern ( (MapType1Select QPMask@5 null (wand arg_0_5@@1 arg_1_5@@1 arg_2_5@@1 arg_3_5@@1 arg_4_5@@1 arg_5_5@@1 arg_6_5@@1 arg_7_5@@1 arg_8_5@@1 arg_9_5@@1)))
)) (state Heap@@10 QPMask@5)) (and (state Heap@@10 QPMask@5) (state Heap@@10 QPMask@5)))) (and (=> (= (ControlFlow 0 156) 55) anon139_Then_correct) (=> (= (ControlFlow 0 156) 155) anon139_Else_correct)))))))
(let ((anon138_Then_correct  (and (=> (= (ControlFlow 0 50) (- 0 53)) (>= x9_9 NoPerm)) (=> (>= x9_9 NoPerm) (=> (=> (> x9_9 NoPerm) (not (= x6_9 null))) (=> (and (= WandDefLHSMask@24 (MapType1Store ZeroMask x6_9 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_9 f_7)) x9_9)))) (state WandDefLHSHeap@8 WandDefLHSMask@24)) (and (=> (= (ControlFlow 0 50) (- 0 52)) (>= x9_9 NoPerm)) (=> (>= x9_9 NoPerm) (=> (=> (> x9_9 NoPerm) (not (= x7_9 null))) (=> (and (= WandDefLHSMask@25 (MapType1Store WandDefLHSMask@24 x7_9 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@24 x7_9 f_7)) x9_9)))) (state WandDefLHSHeap@8 WandDefLHSMask@25)) (and (=> (= (ControlFlow 0 50) (- 0 51)) (>= x9_9 NoPerm)) (=> (>= x9_9 NoPerm) (=> (and (=> (> x9_9 NoPerm) (not (= x8_9 null))) (= WandDefLHSMask@26 (MapType1Store WandDefLHSMask@25 x8_9 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@25 x8_9 f_7)) x9_9))))) (=> (and (and (state WandDefLHSHeap@8 WandDefLHSMask@26) (state WandDefLHSHeap@8 WandDefLHSMask@26)) (and (state WandDefLHSHeap@8 WandDefLHSMask@26) (= (ControlFlow 0 50) (- 0 49)))) (>= x9_9 NoPerm)))))))))))))))
(let ((anon49_correct true))
(let ((anon137_Then_correct  (=> (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_9 x1_9 x2_9 x3_9 x4_9 x5_9 x6_9 x7_9 x8_9 x9_9))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_9 x1_9 x2_9 x3_9 x4_9 x5_9 x6_9 x7_9 x8_9 x9_9))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_9 x1_9 x2_9 x3_9 x4_9 x5_9 x6_9 x7_9 x8_9 x9_9))))) (and (=> (= (ControlFlow 0 54) 50) anon138_Then_correct) (=> (= (ControlFlow 0 54) 47) anon49_correct)))))
(let ((anon137_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_9 x1_9 x2_9 x3_9 x4_9 x5_9 x6_9 x7_9 x8_9 x9_9))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_9 x1_9 x2_9 x3_9 x4_9 x5_9 x6_9 x7_9 x8_9 x9_9))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_9 x1_9 x2_9 x3_9 x4_9 x5_9 x6_9 x7_9 x8_9 x9_9)))))) (= (ControlFlow 0 48) 47)) anon49_correct)))
(let ((anon135_Else_correct  (=> (forall ((x0_21 T@U) (x1_23 Real) (x2_23 T@U) (x3_23 Real) (x4_23 T@U) (x5_23 Real) (x6_21 T@U) (x7_21 T@U) (x8_21 T@U) (x9_21 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_21) RefType) (= (type x2_23) RefType)) (= (type x4_23) RefType)) (= (type x6_21) RefType)) (= (type x7_21) RefType)) (= (type x8_21) RefType)) (and (U_2_bool (MapType2Select xs5 (inv_4_0 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21))) (and (U_2_bool (MapType2Select ys5 (inv_4_1 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21))) (U_2_bool (MapType2Select zs5 (inv_4_2 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21)))))) (and (and (and (and (and (and (and (and (and (= (inv_4_0 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) x0_21) (= q_1 x1_23)) (= (inv_4_1 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) x2_23)) (= q_1 x3_23)) (= (inv_4_2 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) x4_23)) (= q_1 x5_23)) (= (inv_4_0 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) x6_21)) (= (inv_4_1 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) x7_21)) (= (inv_4_2 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) x8_21)) (= q_1 x9_21)))
 :qid |stdinbpl.1643:20|
 :skolemid |134|
 :pattern ( (inv_4_0 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) (inv_4_1 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21) (inv_4_2 x0_21 x1_23 x2_23 x3_23 x4_23 x5_23 x6_21 x7_21 x8_21 x9_21))
)) (=> (and (state Heap@@10 QPMask@4) (state Heap@@10 QPMask@4)) (and (and (=> (= (ControlFlow 0 158) 156) anon136_Else_correct) (=> (= (ControlFlow 0 158) 54) anon137_Then_correct)) (=> (= (ControlFlow 0 158) 48) anon137_Else_correct))))))
(let ((anon135_Then_correct true))
(let ((anon134_Else_correct  (=> (forall ((x5_21 T@U) (y5_1 T@U) (z5_1 T@U) ) (!  (=> (and (and (and (= (type x5_21) RefType) (= (type y5_1) RefType)) (= (type z5_1) RefType)) (and (U_2_bool (MapType2Select xs5 x5_21)) (and (U_2_bool (MapType2Select ys5 y5_1)) (U_2_bool (MapType2Select zs5 z5_1))))) (and (and (= (inv_4_0 x5_21 q_1 y5_1 q_1 z5_1 q_1 x5_21 y5_1 z5_1 q_1) x5_21) (= (inv_4_1 x5_21 q_1 y5_1 q_1 z5_1 q_1 x5_21 y5_1 z5_1 q_1) y5_1)) (= (inv_4_2 x5_21 q_1 y5_1 q_1 z5_1 q_1 x5_21 y5_1 z5_1 q_1) z5_1)))
 :qid |stdinbpl.1615:20|
 :skolemid |133|
 :pattern ( (MapType0Select Heap@@10 null (wand x5_21 q_1 y5_1 q_1 z5_1 q_1 x5_21 y5_1 z5_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@4) (state Heap@@10 QPMask@4)) (and (=> (= (ControlFlow 0 159) 46) anon135_Then_correct) (=> (= (ControlFlow 0 159) 158) anon135_Else_correct))))))
(let ((anon134_Then_correct true))
(let ((anon131_Else_correct  (and (=> (= (ControlFlow 0 160) (- 0 161)) (forall ((x0_18 T@U) (x1_20 Real) (x2_20 T@U) (x3_20 Real) (x4_20 T@U) (x5_18 Real) (x6_18 T@U) (x7_18 T@U) (x8_18 T@U) (x9_18 Real) (x0_18_1 T@U) (x1_20_1 Real) (x2_20_1 T@U) (x3_20_1 Real) (x4_20_1 T@U) (x5_18_1 Real) (x6_18_1 T@U) (x7_18_1 T@U) (x8_18_1 T@U) (x9_18_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_18) RefType) (= (type x2_20) RefType)) (= (type x4_20) RefType)) (= (type x6_18) RefType)) (= (type x7_18) RefType)) (= (type x8_18) RefType)) (= (type x0_18_1) RefType)) (= (type x2_20_1) RefType)) (= (type x4_20_1) RefType)) (= (type x6_18_1) RefType)) (= (type x7_18_1) RefType)) (= (type x8_18_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_18 x0_18_1)) (not (= x1_20 x1_20_1))) (not (= x2_20 x2_20_1))) (not (= x3_20 x3_20_1))) (not (= x4_20 x4_20_1))) (not (= x5_18 x5_18_1))) (not (= x6_18 x6_18_1))) (not (= x7_18 x7_18_1))) (not (= x8_18 x8_18_1))) (not (= x9_18 x9_18_1))) (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_18 x1_20 x2_20 x3_20 x4_20 x5_18 x6_18 x7_18 x8_18 x9_18))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_18 x1_20 x2_20 x3_20 x4_20 x5_18 x6_18 x7_18 x8_18 x9_18))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_18 x1_20 x2_20 x3_20 x4_20 x5_18 x6_18 x7_18 x8_18 x9_18)))))) (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_18_1 x1_20_1 x2_20_1 x3_20_1 x4_20_1 x5_18_1 x6_18_1 x7_18_1 x8_18_1 x9_18_1))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_18_1 x1_20_1 x2_20_1 x3_20_1 x4_20_1 x5_18_1 x6_18_1 x7_18_1 x8_18_1 x9_18_1))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_18_1 x1_20_1 x2_20_1 x3_20_1 x4_20_1 x5_18_1 x6_18_1 x7_18_1 x8_18_1 x9_18_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_18 x6_18_1)) (not (= x9_18 x9_18_1))) (not (= x7_18 x7_18_1))) (not (= x9_18 x9_18_1))) (not (= x8_18 x8_18_1))) (not (= x9_18 x9_18_1))) (not (= x6_18 x6_18_1))) (not (= x7_18 x7_18_1))) (not (= x8_18 x8_18_1))) (not (= x9_18 x9_18_1)))))
 :qid |stdinbpl.1568:17|
 :skolemid |127|
 :pattern ( (neverTriggered43 x0_18 x1_20 x2_20 x3_20 x4_20 x5_18 x6_18 x7_18 x8_18 x9_18) (neverTriggered43 x0_18_1 x1_20_1 x2_20_1 x3_20_1 x4_20_1 x5_18_1 x6_18_1 x7_18_1 x8_18_1 x9_18_1))
))) (=> (forall ((x0_18@@0 T@U) (x1_20@@0 Real) (x2_20@@0 T@U) (x3_20@@0 Real) (x4_20@@0 T@U) (x5_18@@0 Real) (x6_18@@0 T@U) (x7_18@@0 T@U) (x8_18@@0 T@U) (x9_18@@0 Real) (x0_18_1@@0 T@U) (x1_20_1@@0 Real) (x2_20_1@@0 T@U) (x3_20_1@@0 Real) (x4_20_1@@0 T@U) (x5_18_1@@0 Real) (x6_18_1@@0 T@U) (x7_18_1@@0 T@U) (x8_18_1@@0 T@U) (x9_18_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_18@@0) RefType) (= (type x2_20@@0) RefType)) (= (type x4_20@@0) RefType)) (= (type x6_18@@0) RefType)) (= (type x7_18@@0) RefType)) (= (type x8_18@@0) RefType)) (= (type x0_18_1@@0) RefType)) (= (type x2_20_1@@0) RefType)) (= (type x4_20_1@@0) RefType)) (= (type x6_18_1@@0) RefType)) (= (type x7_18_1@@0) RefType)) (= (type x8_18_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_18@@0 x0_18_1@@0)) (not (= x1_20@@0 x1_20_1@@0))) (not (= x2_20@@0 x2_20_1@@0))) (not (= x3_20@@0 x3_20_1@@0))) (not (= x4_20@@0 x4_20_1@@0))) (not (= x5_18@@0 x5_18_1@@0))) (not (= x6_18@@0 x6_18_1@@0))) (not (= x7_18@@0 x7_18_1@@0))) (not (= x8_18@@0 x8_18_1@@0))) (not (= x9_18@@0 x9_18_1@@0))) (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_18@@0 x1_20@@0 x2_20@@0 x3_20@@0 x4_20@@0 x5_18@@0 x6_18@@0 x7_18@@0 x8_18@@0 x9_18@@0))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_18@@0 x1_20@@0 x2_20@@0 x3_20@@0 x4_20@@0 x5_18@@0 x6_18@@0 x7_18@@0 x8_18@@0 x9_18@@0))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_18@@0 x1_20@@0 x2_20@@0 x3_20@@0 x4_20@@0 x5_18@@0 x6_18@@0 x7_18@@0 x8_18@@0 x9_18@@0)))))) (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_18_1@@0 x1_20_1@@0 x2_20_1@@0 x3_20_1@@0 x4_20_1@@0 x5_18_1@@0 x6_18_1@@0 x7_18_1@@0 x8_18_1@@0 x9_18_1@@0))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_18_1@@0 x1_20_1@@0 x2_20_1@@0 x3_20_1@@0 x4_20_1@@0 x5_18_1@@0 x6_18_1@@0 x7_18_1@@0 x8_18_1@@0 x9_18_1@@0))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_18_1@@0 x1_20_1@@0 x2_20_1@@0 x3_20_1@@0 x4_20_1@@0 x5_18_1@@0 x6_18_1@@0 x7_18_1@@0 x8_18_1@@0 x9_18_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_18@@0 x6_18_1@@0)) (not (= x9_18@@0 x9_18_1@@0))) (not (= x7_18@@0 x7_18_1@@0))) (not (= x9_18@@0 x9_18_1@@0))) (not (= x8_18@@0 x8_18_1@@0))) (not (= x9_18@@0 x9_18_1@@0))) (not (= x6_18@@0 x6_18_1@@0))) (not (= x7_18@@0 x7_18_1@@0))) (not (= x8_18@@0 x8_18_1@@0))) (not (= x9_18@@0 x9_18_1@@0)))))
 :qid |stdinbpl.1568:17|
 :skolemid |127|
 :pattern ( (neverTriggered43 x0_18@@0 x1_20@@0 x2_20@@0 x3_20@@0 x4_20@@0 x5_18@@0 x6_18@@0 x7_18@@0 x8_18@@0 x9_18@@0) (neverTriggered43 x0_18_1@@0 x1_20_1@@0 x2_20_1@@0 x3_20_1@@0 x4_20_1@@0 x5_18_1@@0 x6_18_1@@0 x7_18_1@@0 x8_18_1@@0 x9_18_1@@0))
)) (=> (and (and (and (forall ((x0_18@@1 T@U) (x1_20@@1 Real) (x2_20@@1 T@U) (x3_20@@1 Real) (x4_20@@1 T@U) (x5_18@@1 Real) (x6_18@@1 T@U) (x7_18@@1 T@U) (x8_18@@1 T@U) (x9_18@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_18@@1) RefType) (= (type x2_20@@1) RefType)) (= (type x4_20@@1) RefType)) (= (type x6_18@@1) RefType)) (= (type x7_18@@1) RefType)) (= (type x8_18@@1) RefType)) (and (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_18@@1 x1_20@@1 x2_20@@1 x3_20@@1 x4_20@@1 x5_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_18@@1 x1_20@@1 x2_20@@1 x3_20@@1 x4_20@@1 x5_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_18@@1 x1_20@@1 x2_20@@1 x3_20@@1 x4_20@@1 x5_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv34 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x0_18@@1) (= (invRecv35 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x1_20@@1)) (= (invRecv36 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x2_20@@1)) (= (invRecv37 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x3_20@@1)) (= (invRecv38 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x4_20@@1)) (= (invRecv39 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x5_18@@1)) (= (invRecv40 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x6_18@@1)) (= (invRecv41 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x7_18@@1)) (= (invRecv42 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x8_18@@1)) (= (invRecv43 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) x9_18@@1)) (qpRange43 x6_18@@1 x9_18@@1 x7_18@@1 x9_18@@1 x8_18@@1 x9_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1)))
 :qid |stdinbpl.1574:22|
 :skolemid |128|
 :pattern ( (inv_3_0 x0_18@@1 x1_20@@1 x2_20@@1 x3_20@@1 x4_20@@1 x5_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) (inv_3_1 x0_18@@1 x1_20@@1 x2_20@@1 x3_20@@1 x4_20@@1 x5_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1) (inv_3_2 x0_18@@1 x1_20@@1 x2_20@@1 x3_20@@1 x4_20@@1 x5_18@@1 x6_18@@1 x7_18@@1 x8_18@@1 x9_18@@1))
)) (forall ((arg_0_4 T@U) (arg_1_4 Real) (arg_2_4 T@U) (arg_3_4 Real) (arg_4_4 T@U) (arg_5_4 Real) (arg_6_4 T@U) (arg_7_4 T@U) (arg_8_4 T@U) (arg_9_4 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_4) RefType) (= (type arg_2_4) RefType)) (= (type arg_4_4) RefType)) (= (type arg_6_4) RefType)) (= (type arg_7_4) RefType)) (= (type arg_8_4) RefType)) (and (and (and (U_2_bool (MapType2Select xs4 (inv_3_0 (invRecv34 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv35 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv36 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv37 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv38 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv39 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv40 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv41 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv42 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4)))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 (invRecv34 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv35 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv36 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv37 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv38 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv39 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv40 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv41 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv42 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4)))) (U_2_bool (MapType2Select zs4 (inv_3_2 (invRecv34 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv35 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv36 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv37 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv38 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv39 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv40 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv41 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv42 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4)))))) (< NoPerm FullPerm)) (qpRange43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4))) (and (and (and (and (and (and (and (and (and (= (invRecv40 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_0_4) (= (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_1_4)) (= (invRecv41 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_2_4)) (= (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_3_4)) (= (invRecv42 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_4_4)) (= (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_5_4)) (= (invRecv40 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_6_4)) (= (invRecv41 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_7_4)) (= (invRecv42 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_8_4)) (= (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) arg_9_4)))
 :qid |stdinbpl.1578:22|
 :skolemid |129|
 :pattern ( (invRecv34 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv35 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv36 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv37 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv38 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv39 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv40 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv41 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv42 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4) (invRecv43 arg_0_4 arg_1_4 arg_2_4 arg_3_4 arg_4_4 arg_5_4 arg_6_4 arg_7_4 arg_8_4 arg_9_4))
))) (and (forall ((arg_0_4@@0 T@U) (arg_1_4@@0 Real) (arg_2_4@@0 T@U) (arg_3_4@@0 Real) (arg_4_4@@0 T@U) (arg_5_4@@0 Real) (arg_6_4@@0 T@U) (arg_7_4@@0 T@U) (arg_8_4@@0 T@U) (arg_9_4@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_4@@0) RefType) (= (type arg_2_4@@0) RefType)) (= (type arg_4_4@@0) RefType)) (= (type arg_6_4@@0) RefType)) (= (type arg_7_4@@0) RefType)) (= (type arg_8_4@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs4 (inv_3_0 (invRecv34 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv35 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv36 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv37 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv38 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv39 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv40 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv41 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv42 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0)))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 (invRecv34 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv35 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv36 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv37 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv38 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv39 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv40 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv41 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv42 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0)))) (U_2_bool (MapType2Select zs4 (inv_3_2 (invRecv34 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv35 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv36 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv37 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv38 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv39 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv40 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv41 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv42 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0)))))) (< NoPerm FullPerm)) (qpRange43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv40 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_0_4@@0) (= (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_1_4@@0)) (= (invRecv41 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_2_4@@0)) (= (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_3_4@@0)) (= (invRecv42 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_4_4@@0)) (= (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_5_4@@0)) (= (invRecv40 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_6_4@@0)) (= (invRecv41 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_7_4@@0)) (= (invRecv42 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_8_4@@0)) (= (invRecv43 arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0) arg_9_4@@0))) (= (U_2_real (MapType1Select QPMask@4 null (wand arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0))) (+ (U_2_real (MapType1Select QPMask@3 null (wand arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0))) FullPerm))))
 :qid |stdinbpl.1584:22|
 :skolemid |130|
 :pattern ( (MapType1Select QPMask@4 null (wand arg_0_4@@0 arg_1_4@@0 arg_2_4@@0 arg_3_4@@0 arg_4_4@@0 arg_5_4@@0 arg_6_4@@0 arg_7_4@@0 arg_8_4@@0 arg_9_4@@0)))
)) (forall ((o_3@@6 T@U) (f_5@@6 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_5@@6))))
(let ((A@@19 (FieldTypeInv0 (type f_5@@6))))
 (=> (and (and (= (type o_3@@6) RefType) (= (type f_5@@6) (FieldType A@@19 B@@18))) (or (or (not (= o_3@@6 null)) (not (IsWandField f_5@@6))) (not (= (getPredWandId f_5@@6) 1)))) (= (U_2_real (MapType1Select QPMask@3 o_3@@6 f_5@@6)) (U_2_real (MapType1Select QPMask@4 o_3@@6 f_5@@6))))))
 :qid |stdinbpl.1590:29|
 :skolemid |131|
 :pattern ( (MapType1Select QPMask@3 o_3@@6 f_5@@6))
 :pattern ( (MapType1Select QPMask@4 o_3@@6 f_5@@6))
)))) (and (and (forall ((arg_0_4@@1 T@U) (arg_1_4@@1 Real) (arg_2_4@@1 T@U) (arg_3_4@@1 Real) (arg_4_4@@1 T@U) (arg_5_4@@1 Real) (arg_6_4@@1 T@U) (arg_7_4@@1 T@U) (arg_8_4@@1 T@U) (arg_9_4@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_4@@1) RefType) (= (type arg_2_4@@1) RefType)) (= (type arg_4_4@@1) RefType)) (= (type arg_6_4@@1) RefType)) (= (type arg_7_4@@1) RefType)) (= (type arg_8_4@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs4 (inv_3_0 (invRecv34 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv35 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv36 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv37 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv38 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv39 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv40 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv41 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv42 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv43 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1)))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 (invRecv34 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv35 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv36 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv37 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv38 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv39 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv40 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv41 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv42 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv43 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1)))) (U_2_bool (MapType2Select zs4 (inv_3_2 (invRecv34 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv35 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv36 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv37 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv38 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv39 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv40 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv41 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv42 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1) (invRecv43 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1)))))) (< NoPerm FullPerm)) (qpRange43 arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1)))) (= (U_2_real (MapType1Select QPMask@4 null (wand arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1))) (U_2_real (MapType1Select QPMask@3 null (wand arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1)))))
 :qid |stdinbpl.1594:22|
 :skolemid |132|
 :pattern ( (MapType1Select QPMask@4 null (wand arg_0_4@@1 arg_1_4@@1 arg_2_4@@1 arg_3_4@@1 arg_4_4@@1 arg_5_4@@1 arg_6_4@@1 arg_7_4@@1 arg_8_4@@1 arg_9_4@@1)))
)) (state Heap@@10 QPMask@4)) (and (state Heap@@10 QPMask@4) (state Heap@@10 QPMask@4)))) (and (=> (= (ControlFlow 0 160) 45) anon134_Then_correct) (=> (= (ControlFlow 0 160) 159) anon134_Else_correct)))))))
(let ((anon133_Then_correct  (and (=> (= (ControlFlow 0 40) (- 0 43)) (>= x9_7 NoPerm)) (=> (>= x9_7 NoPerm) (=> (=> (> x9_7 NoPerm) (not (= x6_7 null))) (=> (and (= WandDefLHSMask@27 (MapType1Store ZeroMask x6_7 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_7 f_7)) x9_7)))) (state WandDefLHSHeap@9 WandDefLHSMask@27)) (and (=> (= (ControlFlow 0 40) (- 0 42)) (>= x9_7 NoPerm)) (=> (>= x9_7 NoPerm) (=> (=> (> x9_7 NoPerm) (not (= x7_7 null))) (=> (and (= WandDefLHSMask@28 (MapType1Store WandDefLHSMask@27 x7_7 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@27 x7_7 f_7)) x9_7)))) (state WandDefLHSHeap@9 WandDefLHSMask@28)) (and (=> (= (ControlFlow 0 40) (- 0 41)) (>= x9_7 NoPerm)) (=> (>= x9_7 NoPerm) (=> (and (=> (> x9_7 NoPerm) (not (= x8_7 null))) (= WandDefLHSMask@29 (MapType1Store WandDefLHSMask@28 x8_7 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@28 x8_7 f_7)) x9_7))))) (=> (and (and (state WandDefLHSHeap@9 WandDefLHSMask@29) (state WandDefLHSHeap@9 WandDefLHSMask@29)) (and (state WandDefLHSHeap@9 WandDefLHSMask@29) (= (ControlFlow 0 40) (- 0 39)))) (>= x9_7 NoPerm)))))))))))))))
(let ((anon40_correct true))
(let ((anon132_Then_correct  (=> (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_7 x1_7 x2_7 x3_7 x4_7 x5_7 x6_7 x7_7 x8_7 x9_7))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_7 x1_7 x2_7 x3_7 x4_7 x5_7 x6_7 x7_7 x8_7 x9_7))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_7 x1_7 x2_7 x3_7 x4_7 x5_7 x6_7 x7_7 x8_7 x9_7))))) (and (=> (= (ControlFlow 0 44) 40) anon133_Then_correct) (=> (= (ControlFlow 0 44) 37) anon40_correct)))))
(let ((anon132_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_7 x1_7 x2_7 x3_7 x4_7 x5_7 x6_7 x7_7 x8_7 x9_7))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_7 x1_7 x2_7 x3_7 x4_7 x5_7 x6_7 x7_7 x8_7 x9_7))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_7 x1_7 x2_7 x3_7 x4_7 x5_7 x6_7 x7_7 x8_7 x9_7)))))) (= (ControlFlow 0 38) 37)) anon40_correct)))
(let ((anon130_Else_correct  (=> (forall ((x0_16 T@U) (x1_18 Real) (x2_18 T@U) (x3_18 Real) (x4_18 T@U) (x5_16 Real) (x6_16 T@U) (x7_16 T@U) (x8_16 T@U) (x9_16 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_16) RefType) (= (type x2_18) RefType)) (= (type x4_18) RefType)) (= (type x6_16) RefType)) (= (type x7_16) RefType)) (= (type x8_16) RefType)) (and (U_2_bool (MapType2Select xs4 (inv_3_0 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16))) (and (U_2_bool (MapType2Select ys4 (inv_3_1 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16))) (U_2_bool (MapType2Select zs4 (inv_3_2 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16)))))) (and (and (and (and (and (and (and (and (and (= (inv_3_0 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) x0_16) (= q_1 x1_18)) (= (inv_3_1 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) x2_18)) (= q_1 x3_18)) (= (inv_3_2 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) x4_18)) (= q_1 x5_16)) (= (inv_3_0 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) x6_16)) (= (inv_3_1 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) x7_16)) (= (inv_3_2 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) x8_16)) (= q_1 x9_16)))
 :qid |stdinbpl.1503:20|
 :skolemid |126|
 :pattern ( (inv_3_0 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) (inv_3_1 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16) (inv_3_2 x0_16 x1_18 x2_18 x3_18 x4_18 x5_16 x6_16 x7_16 x8_16 x9_16))
)) (=> (and (state Heap@@10 QPMask@3) (state Heap@@10 QPMask@3)) (and (and (=> (= (ControlFlow 0 162) 160) anon131_Else_correct) (=> (= (ControlFlow 0 162) 44) anon132_Then_correct)) (=> (= (ControlFlow 0 162) 38) anon132_Else_correct))))))
(let ((anon130_Then_correct true))
(let ((anon129_Else_correct  (=> (forall ((x4_16 T@U) (y4_1 T@U) (z4_1 T@U) ) (!  (=> (and (and (and (= (type x4_16) RefType) (= (type y4_1) RefType)) (= (type z4_1) RefType)) (and (U_2_bool (MapType2Select xs4 x4_16)) (and (U_2_bool (MapType2Select ys4 y4_1)) (U_2_bool (MapType2Select zs4 z4_1))))) (and (and (= (inv_3_0 x4_16 q_1 y4_1 q_1 z4_1 q_1 x4_16 y4_1 z4_1 q_1) x4_16) (= (inv_3_1 x4_16 q_1 y4_1 q_1 z4_1 q_1 x4_16 y4_1 z4_1 q_1) y4_1)) (= (inv_3_2 x4_16 q_1 y4_1 q_1 z4_1 q_1 x4_16 y4_1 z4_1 q_1) z4_1)))
 :qid |stdinbpl.1475:20|
 :skolemid |125|
 :pattern ( (MapType0Select Heap@@10 null (wand x4_16 q_1 y4_1 q_1 z4_1 q_1 x4_16 y4_1 z4_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@3) (state Heap@@10 QPMask@3)) (and (=> (= (ControlFlow 0 163) 36) anon130_Then_correct) (=> (= (ControlFlow 0 163) 162) anon130_Else_correct))))))
(let ((anon129_Then_correct true))
(let ((anon126_Else_correct  (and (=> (= (ControlFlow 0 164) (- 0 165)) (forall ((x0_13 T@U) (x1_15 Real) (x2_15 T@U) (x3_15 Real) (x4_13 T@U) (x5_13 Real) (x6_13 T@U) (x7_13 T@U) (x8_13 T@U) (x9_13 Real) (x0_13_1 T@U) (x1_15_1 Real) (x2_15_1 T@U) (x3_15_1 Real) (x4_13_1 T@U) (x5_13_1 Real) (x6_13_1 T@U) (x7_13_1 T@U) (x8_13_1 T@U) (x9_13_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_13) RefType) (= (type x2_15) RefType)) (= (type x4_13) RefType)) (= (type x6_13) RefType)) (= (type x7_13) RefType)) (= (type x8_13) RefType)) (= (type x0_13_1) RefType)) (= (type x2_15_1) RefType)) (= (type x4_13_1) RefType)) (= (type x6_13_1) RefType)) (= (type x7_13_1) RefType)) (= (type x8_13_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_13 x0_13_1)) (not (= x1_15 x1_15_1))) (not (= x2_15 x2_15_1))) (not (= x3_15 x3_15_1))) (not (= x4_13 x4_13_1))) (not (= x5_13 x5_13_1))) (not (= x6_13 x6_13_1))) (not (= x7_13 x7_13_1))) (not (= x8_13 x8_13_1))) (not (= x9_13 x9_13_1))) (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_13 x1_15 x2_15 x3_15 x4_13 x5_13 x6_13 x7_13 x8_13 x9_13))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_13 x1_15 x2_15 x3_15 x4_13 x5_13 x6_13 x7_13 x8_13 x9_13))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_13 x1_15 x2_15 x3_15 x4_13 x5_13 x6_13 x7_13 x8_13 x9_13)))))) (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_13_1 x1_15_1 x2_15_1 x3_15_1 x4_13_1 x5_13_1 x6_13_1 x7_13_1 x8_13_1 x9_13_1))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_13_1 x1_15_1 x2_15_1 x3_15_1 x4_13_1 x5_13_1 x6_13_1 x7_13_1 x8_13_1 x9_13_1))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_13_1 x1_15_1 x2_15_1 x3_15_1 x4_13_1 x5_13_1 x6_13_1 x7_13_1 x8_13_1 x9_13_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_13 x6_13_1)) (not (= x9_13 x9_13_1))) (not (= x7_13 x7_13_1))) (not (= x9_13 x9_13_1))) (not (= x8_13 x8_13_1))) (not (= x9_13 x9_13_1))) (not (= x6_13 x6_13_1))) (not (= x7_13 x7_13_1))) (not (= x8_13 x8_13_1))) (not (= x9_13 x9_13_1)))))
 :qid |stdinbpl.1428:17|
 :skolemid |119|
 :pattern ( (neverTriggered33 x0_13 x1_15 x2_15 x3_15 x4_13 x5_13 x6_13 x7_13 x8_13 x9_13) (neverTriggered33 x0_13_1 x1_15_1 x2_15_1 x3_15_1 x4_13_1 x5_13_1 x6_13_1 x7_13_1 x8_13_1 x9_13_1))
))) (=> (forall ((x0_13@@0 T@U) (x1_15@@0 Real) (x2_15@@0 T@U) (x3_15@@0 Real) (x4_13@@0 T@U) (x5_13@@0 Real) (x6_13@@0 T@U) (x7_13@@0 T@U) (x8_13@@0 T@U) (x9_13@@0 Real) (x0_13_1@@0 T@U) (x1_15_1@@0 Real) (x2_15_1@@0 T@U) (x3_15_1@@0 Real) (x4_13_1@@0 T@U) (x5_13_1@@0 Real) (x6_13_1@@0 T@U) (x7_13_1@@0 T@U) (x8_13_1@@0 T@U) (x9_13_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_13@@0) RefType) (= (type x2_15@@0) RefType)) (= (type x4_13@@0) RefType)) (= (type x6_13@@0) RefType)) (= (type x7_13@@0) RefType)) (= (type x8_13@@0) RefType)) (= (type x0_13_1@@0) RefType)) (= (type x2_15_1@@0) RefType)) (= (type x4_13_1@@0) RefType)) (= (type x6_13_1@@0) RefType)) (= (type x7_13_1@@0) RefType)) (= (type x8_13_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_13@@0 x0_13_1@@0)) (not (= x1_15@@0 x1_15_1@@0))) (not (= x2_15@@0 x2_15_1@@0))) (not (= x3_15@@0 x3_15_1@@0))) (not (= x4_13@@0 x4_13_1@@0))) (not (= x5_13@@0 x5_13_1@@0))) (not (= x6_13@@0 x6_13_1@@0))) (not (= x7_13@@0 x7_13_1@@0))) (not (= x8_13@@0 x8_13_1@@0))) (not (= x9_13@@0 x9_13_1@@0))) (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_13@@0 x1_15@@0 x2_15@@0 x3_15@@0 x4_13@@0 x5_13@@0 x6_13@@0 x7_13@@0 x8_13@@0 x9_13@@0))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_13@@0 x1_15@@0 x2_15@@0 x3_15@@0 x4_13@@0 x5_13@@0 x6_13@@0 x7_13@@0 x8_13@@0 x9_13@@0))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_13@@0 x1_15@@0 x2_15@@0 x3_15@@0 x4_13@@0 x5_13@@0 x6_13@@0 x7_13@@0 x8_13@@0 x9_13@@0)))))) (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_13_1@@0 x1_15_1@@0 x2_15_1@@0 x3_15_1@@0 x4_13_1@@0 x5_13_1@@0 x6_13_1@@0 x7_13_1@@0 x8_13_1@@0 x9_13_1@@0))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_13_1@@0 x1_15_1@@0 x2_15_1@@0 x3_15_1@@0 x4_13_1@@0 x5_13_1@@0 x6_13_1@@0 x7_13_1@@0 x8_13_1@@0 x9_13_1@@0))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_13_1@@0 x1_15_1@@0 x2_15_1@@0 x3_15_1@@0 x4_13_1@@0 x5_13_1@@0 x6_13_1@@0 x7_13_1@@0 x8_13_1@@0 x9_13_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_13@@0 x6_13_1@@0)) (not (= x9_13@@0 x9_13_1@@0))) (not (= x7_13@@0 x7_13_1@@0))) (not (= x9_13@@0 x9_13_1@@0))) (not (= x8_13@@0 x8_13_1@@0))) (not (= x9_13@@0 x9_13_1@@0))) (not (= x6_13@@0 x6_13_1@@0))) (not (= x7_13@@0 x7_13_1@@0))) (not (= x8_13@@0 x8_13_1@@0))) (not (= x9_13@@0 x9_13_1@@0)))))
 :qid |stdinbpl.1428:17|
 :skolemid |119|
 :pattern ( (neverTriggered33 x0_13@@0 x1_15@@0 x2_15@@0 x3_15@@0 x4_13@@0 x5_13@@0 x6_13@@0 x7_13@@0 x8_13@@0 x9_13@@0) (neverTriggered33 x0_13_1@@0 x1_15_1@@0 x2_15_1@@0 x3_15_1@@0 x4_13_1@@0 x5_13_1@@0 x6_13_1@@0 x7_13_1@@0 x8_13_1@@0 x9_13_1@@0))
)) (=> (and (and (and (forall ((x0_13@@1 T@U) (x1_15@@1 Real) (x2_15@@1 T@U) (x3_15@@1 Real) (x4_13@@1 T@U) (x5_13@@1 Real) (x6_13@@1 T@U) (x7_13@@1 T@U) (x8_13@@1 T@U) (x9_13@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_13@@1) RefType) (= (type x2_15@@1) RefType)) (= (type x4_13@@1) RefType)) (= (type x6_13@@1) RefType)) (= (type x7_13@@1) RefType)) (= (type x8_13@@1) RefType)) (and (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_13@@1 x1_15@@1 x2_15@@1 x3_15@@1 x4_13@@1 x5_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_13@@1 x1_15@@1 x2_15@@1 x3_15@@1 x4_13@@1 x5_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_13@@1 x1_15@@1 x2_15@@1 x3_15@@1 x4_13@@1 x5_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv24 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x0_13@@1) (= (invRecv25 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x1_15@@1)) (= (invRecv26 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x2_15@@1)) (= (invRecv27 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x3_15@@1)) (= (invRecv28 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x4_13@@1)) (= (invRecv29 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x5_13@@1)) (= (invRecv30 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x6_13@@1)) (= (invRecv31 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x7_13@@1)) (= (invRecv32 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x8_13@@1)) (= (invRecv33 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) x9_13@@1)) (qpRange33 x6_13@@1 x9_13@@1 x7_13@@1 x9_13@@1 x8_13@@1 x9_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1)))
 :qid |stdinbpl.1434:22|
 :skolemid |120|
 :pattern ( (inv_2_0 x0_13@@1 x1_15@@1 x2_15@@1 x3_15@@1 x4_13@@1 x5_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) (inv_2_1 x0_13@@1 x1_15@@1 x2_15@@1 x3_15@@1 x4_13@@1 x5_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1) (inv_2_2 x0_13@@1 x1_15@@1 x2_15@@1 x3_15@@1 x4_13@@1 x5_13@@1 x6_13@@1 x7_13@@1 x8_13@@1 x9_13@@1))
)) (forall ((arg_0_3 T@U) (arg_1_3 Real) (arg_2_3 T@U) (arg_3_3 Real) (arg_4_3 T@U) (arg_5_3 Real) (arg_6_3 T@U) (arg_7_3 T@U) (arg_8_3 T@U) (arg_9_3 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_3) RefType) (= (type arg_2_3) RefType)) (= (type arg_4_3) RefType)) (= (type arg_6_3) RefType)) (= (type arg_7_3) RefType)) (= (type arg_8_3) RefType)) (and (and (and (U_2_bool (MapType2Select xs3 (inv_2_0 (invRecv24 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv25 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv26 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv27 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv28 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv29 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv30 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv31 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv32 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3)))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 (invRecv24 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv25 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv26 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv27 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv28 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv29 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv30 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv31 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv32 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3)))) (U_2_bool (MapType2Select zs3 (inv_2_2 (invRecv24 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv25 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv26 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv27 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv28 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv29 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv30 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv31 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv32 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3)))))) (< NoPerm FullPerm)) (qpRange33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3))) (and (and (and (and (and (and (and (and (and (= (invRecv30 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_0_3) (= (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_1_3)) (= (invRecv31 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_2_3)) (= (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_3_3)) (= (invRecv32 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_4_3)) (= (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_5_3)) (= (invRecv30 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_6_3)) (= (invRecv31 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_7_3)) (= (invRecv32 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_8_3)) (= (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) arg_9_3)))
 :qid |stdinbpl.1438:22|
 :skolemid |121|
 :pattern ( (invRecv24 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv25 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv26 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv27 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv28 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv29 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv30 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv31 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv32 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3) (invRecv33 arg_0_3 arg_1_3 arg_2_3 arg_3_3 arg_4_3 arg_5_3 arg_6_3 arg_7_3 arg_8_3 arg_9_3))
))) (and (forall ((arg_0_3@@0 T@U) (arg_1_3@@0 Real) (arg_2_3@@0 T@U) (arg_3_3@@0 Real) (arg_4_3@@0 T@U) (arg_5_3@@0 Real) (arg_6_3@@0 T@U) (arg_7_3@@0 T@U) (arg_8_3@@0 T@U) (arg_9_3@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_3@@0) RefType) (= (type arg_2_3@@0) RefType)) (= (type arg_4_3@@0) RefType)) (= (type arg_6_3@@0) RefType)) (= (type arg_7_3@@0) RefType)) (= (type arg_8_3@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs3 (inv_2_0 (invRecv24 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv25 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv26 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv27 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv28 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv29 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv30 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv31 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv32 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0)))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 (invRecv24 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv25 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv26 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv27 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv28 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv29 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv30 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv31 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv32 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0)))) (U_2_bool (MapType2Select zs3 (inv_2_2 (invRecv24 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv25 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv26 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv27 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv28 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv29 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv30 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv31 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv32 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0)))))) (< NoPerm FullPerm)) (qpRange33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv30 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_0_3@@0) (= (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_1_3@@0)) (= (invRecv31 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_2_3@@0)) (= (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_3_3@@0)) (= (invRecv32 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_4_3@@0)) (= (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_5_3@@0)) (= (invRecv30 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_6_3@@0)) (= (invRecv31 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_7_3@@0)) (= (invRecv32 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_8_3@@0)) (= (invRecv33 arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0) arg_9_3@@0))) (= (U_2_real (MapType1Select QPMask@3 null (wand arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0))) (+ (U_2_real (MapType1Select QPMask@2 null (wand arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0))) FullPerm))))
 :qid |stdinbpl.1444:22|
 :skolemid |122|
 :pattern ( (MapType1Select QPMask@3 null (wand arg_0_3@@0 arg_1_3@@0 arg_2_3@@0 arg_3_3@@0 arg_4_3@@0 arg_5_3@@0 arg_6_3@@0 arg_7_3@@0 arg_8_3@@0 arg_9_3@@0)))
)) (forall ((o_3@@7 T@U) (f_5@@7 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_5@@7))))
(let ((A@@20 (FieldTypeInv0 (type f_5@@7))))
 (=> (and (and (= (type o_3@@7) RefType) (= (type f_5@@7) (FieldType A@@20 B@@19))) (or (or (not (= o_3@@7 null)) (not (IsWandField f_5@@7))) (not (= (getPredWandId f_5@@7) 1)))) (= (U_2_real (MapType1Select QPMask@2 o_3@@7 f_5@@7)) (U_2_real (MapType1Select QPMask@3 o_3@@7 f_5@@7))))))
 :qid |stdinbpl.1450:29|
 :skolemid |123|
 :pattern ( (MapType1Select QPMask@2 o_3@@7 f_5@@7))
 :pattern ( (MapType1Select QPMask@3 o_3@@7 f_5@@7))
)))) (and (and (forall ((arg_0_3@@1 T@U) (arg_1_3@@1 Real) (arg_2_3@@1 T@U) (arg_3_3@@1 Real) (arg_4_3@@1 T@U) (arg_5_3@@1 Real) (arg_6_3@@1 T@U) (arg_7_3@@1 T@U) (arg_8_3@@1 T@U) (arg_9_3@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_3@@1) RefType) (= (type arg_2_3@@1) RefType)) (= (type arg_4_3@@1) RefType)) (= (type arg_6_3@@1) RefType)) (= (type arg_7_3@@1) RefType)) (= (type arg_8_3@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs3 (inv_2_0 (invRecv24 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv25 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv26 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv27 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv28 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv29 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv30 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv31 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv32 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv33 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1)))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 (invRecv24 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv25 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv26 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv27 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv28 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv29 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv30 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv31 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv32 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv33 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1)))) (U_2_bool (MapType2Select zs3 (inv_2_2 (invRecv24 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv25 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv26 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv27 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv28 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv29 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv30 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv31 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv32 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1) (invRecv33 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1)))))) (< NoPerm FullPerm)) (qpRange33 arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1)))) (= (U_2_real (MapType1Select QPMask@3 null (wand arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1))) (U_2_real (MapType1Select QPMask@2 null (wand arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1)))))
 :qid |stdinbpl.1454:22|
 :skolemid |124|
 :pattern ( (MapType1Select QPMask@3 null (wand arg_0_3@@1 arg_1_3@@1 arg_2_3@@1 arg_3_3@@1 arg_4_3@@1 arg_5_3@@1 arg_6_3@@1 arg_7_3@@1 arg_8_3@@1 arg_9_3@@1)))
)) (state Heap@@10 QPMask@3)) (and (state Heap@@10 QPMask@3) (state Heap@@10 QPMask@3)))) (and (=> (= (ControlFlow 0 164) 35) anon129_Then_correct) (=> (= (ControlFlow 0 164) 163) anon129_Else_correct)))))))
(let ((anon128_Then_correct  (and (=> (= (ControlFlow 0 30) (- 0 33)) (>= x9_5 NoPerm)) (=> (>= x9_5 NoPerm) (=> (=> (> x9_5 NoPerm) (not (= x6_5 null))) (=> (and (= WandDefLHSMask@30 (MapType1Store ZeroMask x6_5 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_5 f_7)) x9_5)))) (state WandDefLHSHeap@10 WandDefLHSMask@30)) (and (=> (= (ControlFlow 0 30) (- 0 32)) (>= x9_5 NoPerm)) (=> (>= x9_5 NoPerm) (=> (=> (> x9_5 NoPerm) (not (= x7_5 null))) (=> (and (= WandDefLHSMask@31 (MapType1Store WandDefLHSMask@30 x7_5 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@30 x7_5 f_7)) x9_5)))) (state WandDefLHSHeap@10 WandDefLHSMask@31)) (and (=> (= (ControlFlow 0 30) (- 0 31)) (>= x9_5 NoPerm)) (=> (>= x9_5 NoPerm) (=> (and (=> (> x9_5 NoPerm) (not (= x8_5 null))) (= WandDefLHSMask@32 (MapType1Store WandDefLHSMask@31 x8_5 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@31 x8_5 f_7)) x9_5))))) (=> (and (and (state WandDefLHSHeap@10 WandDefLHSMask@32) (state WandDefLHSHeap@10 WandDefLHSMask@32)) (and (state WandDefLHSHeap@10 WandDefLHSMask@32) (= (ControlFlow 0 30) (- 0 29)))) (>= x9_5 NoPerm)))))))))))))))
(let ((anon31_correct true))
(let ((anon127_Then_correct  (=> (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_5 x1_6 x2_5 x3_5 x4_5 x5_5 x6_5 x7_5 x8_5 x9_5))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_5 x1_6 x2_5 x3_5 x4_5 x5_5 x6_5 x7_5 x8_5 x9_5))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_5 x1_6 x2_5 x3_5 x4_5 x5_5 x6_5 x7_5 x8_5 x9_5))))) (and (=> (= (ControlFlow 0 34) 30) anon128_Then_correct) (=> (= (ControlFlow 0 34) 27) anon31_correct)))))
(let ((anon127_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_5 x1_6 x2_5 x3_5 x4_5 x5_5 x6_5 x7_5 x8_5 x9_5))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_5 x1_6 x2_5 x3_5 x4_5 x5_5 x6_5 x7_5 x8_5 x9_5))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_5 x1_6 x2_5 x3_5 x4_5 x5_5 x6_5 x7_5 x8_5 x9_5)))))) (= (ControlFlow 0 28) 27)) anon31_correct)))
(let ((anon125_Else_correct  (=> (forall ((x0_11 T@U) (x1_13 Real) (x2_13 T@U) (x3_13 Real) (x4_11 T@U) (x5_11 Real) (x6_11 T@U) (x7_11 T@U) (x8_11 T@U) (x9_11 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_11) RefType) (= (type x2_13) RefType)) (= (type x4_11) RefType)) (= (type x6_11) RefType)) (= (type x7_11) RefType)) (= (type x8_11) RefType)) (and (U_2_bool (MapType2Select xs3 (inv_2_0 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11))) (and (U_2_bool (MapType2Select ys3 (inv_2_1 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11))) (U_2_bool (MapType2Select zs3 (inv_2_2 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11)))))) (and (and (and (and (and (and (and (and (and (= (inv_2_0 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) x0_11) (= q_1 x1_13)) (= (inv_2_1 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) x2_13)) (= q_1 x3_13)) (= (inv_2_2 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) x4_11)) (= q_1 x5_11)) (= (inv_2_0 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) x6_11)) (= (inv_2_1 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) x7_11)) (= (inv_2_2 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) x8_11)) (= q_1 x9_11)))
 :qid |stdinbpl.1363:20|
 :skolemid |118|
 :pattern ( (inv_2_0 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) (inv_2_1 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11) (inv_2_2 x0_11 x1_13 x2_13 x3_13 x4_11 x5_11 x6_11 x7_11 x8_11 x9_11))
)) (=> (and (state Heap@@10 QPMask@2) (state Heap@@10 QPMask@2)) (and (and (=> (= (ControlFlow 0 166) 164) anon126_Else_correct) (=> (= (ControlFlow 0 166) 34) anon127_Then_correct)) (=> (= (ControlFlow 0 166) 28) anon127_Else_correct))))))
(let ((anon125_Then_correct true))
(let ((anon124_Else_correct  (=> (forall ((x3_11 T@U) (y3_1 T@U) (z3_1 T@U) ) (!  (=> (and (and (and (= (type x3_11) RefType) (= (type y3_1) RefType)) (= (type z3_1) RefType)) (and (U_2_bool (MapType2Select xs3 x3_11)) (and (U_2_bool (MapType2Select ys3 y3_1)) (U_2_bool (MapType2Select zs3 z3_1))))) (and (and (= (inv_2_0 x3_11 q_1 y3_1 q_1 z3_1 q_1 x3_11 y3_1 z3_1 q_1) x3_11) (= (inv_2_1 x3_11 q_1 y3_1 q_1 z3_1 q_1 x3_11 y3_1 z3_1 q_1) y3_1)) (= (inv_2_2 x3_11 q_1 y3_1 q_1 z3_1 q_1 x3_11 y3_1 z3_1 q_1) z3_1)))
 :qid |stdinbpl.1335:20|
 :skolemid |117|
 :pattern ( (MapType0Select Heap@@10 null (wand x3_11 q_1 y3_1 q_1 z3_1 q_1 x3_11 y3_1 z3_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@2) (state Heap@@10 QPMask@2)) (and (=> (= (ControlFlow 0 167) 26) anon125_Then_correct) (=> (= (ControlFlow 0 167) 166) anon125_Else_correct))))))
(let ((anon124_Then_correct true))
(let ((anon121_Else_correct  (and (=> (= (ControlFlow 0 168) (- 0 169)) (forall ((x0_8 T@U) (x1_10 Real) (x2_10 T@U) (x3_8 Real) (x4_8 T@U) (x5_8 Real) (x6_8 T@U) (x7_8 T@U) (x8_8 T@U) (x9_8 Real) (x0_8_1 T@U) (x1_10_1 Real) (x2_10_1 T@U) (x3_8_1 Real) (x4_8_1 T@U) (x5_8_1 Real) (x6_8_1 T@U) (x7_8_1 T@U) (x8_8_1 T@U) (x9_8_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_8) RefType) (= (type x2_10) RefType)) (= (type x4_8) RefType)) (= (type x6_8) RefType)) (= (type x7_8) RefType)) (= (type x8_8) RefType)) (= (type x0_8_1) RefType)) (= (type x2_10_1) RefType)) (= (type x4_8_1) RefType)) (= (type x6_8_1) RefType)) (= (type x7_8_1) RefType)) (= (type x8_8_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_8 x0_8_1)) (not (= x1_10 x1_10_1))) (not (= x2_10 x2_10_1))) (not (= x3_8 x3_8_1))) (not (= x4_8 x4_8_1))) (not (= x5_8 x5_8_1))) (not (= x6_8 x6_8_1))) (not (= x7_8 x7_8_1))) (not (= x8_8 x8_8_1))) (not (= x9_8 x9_8_1))) (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_8 x1_10 x2_10 x3_8 x4_8 x5_8 x6_8 x7_8 x8_8 x9_8))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_8 x1_10 x2_10 x3_8 x4_8 x5_8 x6_8 x7_8 x8_8 x9_8))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_8 x1_10 x2_10 x3_8 x4_8 x5_8 x6_8 x7_8 x8_8 x9_8)))))) (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_8_1 x1_10_1 x2_10_1 x3_8_1 x4_8_1 x5_8_1 x6_8_1 x7_8_1 x8_8_1 x9_8_1))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_8_1 x1_10_1 x2_10_1 x3_8_1 x4_8_1 x5_8_1 x6_8_1 x7_8_1 x8_8_1 x9_8_1))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_8_1 x1_10_1 x2_10_1 x3_8_1 x4_8_1 x5_8_1 x6_8_1 x7_8_1 x8_8_1 x9_8_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_8 x6_8_1)) (not (= x9_8 x9_8_1))) (not (= x7_8 x7_8_1))) (not (= x9_8 x9_8_1))) (not (= x8_8 x8_8_1))) (not (= x9_8 x9_8_1))) (not (= x6_8 x6_8_1))) (not (= x7_8 x7_8_1))) (not (= x8_8 x8_8_1))) (not (= x9_8 x9_8_1)))))
 :qid |stdinbpl.1288:17|
 :skolemid |111|
 :pattern ( (neverTriggered23 x0_8 x1_10 x2_10 x3_8 x4_8 x5_8 x6_8 x7_8 x8_8 x9_8) (neverTriggered23 x0_8_1 x1_10_1 x2_10_1 x3_8_1 x4_8_1 x5_8_1 x6_8_1 x7_8_1 x8_8_1 x9_8_1))
))) (=> (forall ((x0_8@@0 T@U) (x1_10@@0 Real) (x2_10@@0 T@U) (x3_8@@0 Real) (x4_8@@0 T@U) (x5_8@@0 Real) (x6_8@@0 T@U) (x7_8@@0 T@U) (x8_8@@0 T@U) (x9_8@@0 Real) (x0_8_1@@0 T@U) (x1_10_1@@0 Real) (x2_10_1@@0 T@U) (x3_8_1@@0 Real) (x4_8_1@@0 T@U) (x5_8_1@@0 Real) (x6_8_1@@0 T@U) (x7_8_1@@0 T@U) (x8_8_1@@0 T@U) (x9_8_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_8@@0) RefType) (= (type x2_10@@0) RefType)) (= (type x4_8@@0) RefType)) (= (type x6_8@@0) RefType)) (= (type x7_8@@0) RefType)) (= (type x8_8@@0) RefType)) (= (type x0_8_1@@0) RefType)) (= (type x2_10_1@@0) RefType)) (= (type x4_8_1@@0) RefType)) (= (type x6_8_1@@0) RefType)) (= (type x7_8_1@@0) RefType)) (= (type x8_8_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_8@@0 x0_8_1@@0)) (not (= x1_10@@0 x1_10_1@@0))) (not (= x2_10@@0 x2_10_1@@0))) (not (= x3_8@@0 x3_8_1@@0))) (not (= x4_8@@0 x4_8_1@@0))) (not (= x5_8@@0 x5_8_1@@0))) (not (= x6_8@@0 x6_8_1@@0))) (not (= x7_8@@0 x7_8_1@@0))) (not (= x8_8@@0 x8_8_1@@0))) (not (= x9_8@@0 x9_8_1@@0))) (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_8@@0 x1_10@@0 x2_10@@0 x3_8@@0 x4_8@@0 x5_8@@0 x6_8@@0 x7_8@@0 x8_8@@0 x9_8@@0))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_8@@0 x1_10@@0 x2_10@@0 x3_8@@0 x4_8@@0 x5_8@@0 x6_8@@0 x7_8@@0 x8_8@@0 x9_8@@0))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_8@@0 x1_10@@0 x2_10@@0 x3_8@@0 x4_8@@0 x5_8@@0 x6_8@@0 x7_8@@0 x8_8@@0 x9_8@@0)))))) (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_8_1@@0 x1_10_1@@0 x2_10_1@@0 x3_8_1@@0 x4_8_1@@0 x5_8_1@@0 x6_8_1@@0 x7_8_1@@0 x8_8_1@@0 x9_8_1@@0))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_8_1@@0 x1_10_1@@0 x2_10_1@@0 x3_8_1@@0 x4_8_1@@0 x5_8_1@@0 x6_8_1@@0 x7_8_1@@0 x8_8_1@@0 x9_8_1@@0))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_8_1@@0 x1_10_1@@0 x2_10_1@@0 x3_8_1@@0 x4_8_1@@0 x5_8_1@@0 x6_8_1@@0 x7_8_1@@0 x8_8_1@@0 x9_8_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_8@@0 x6_8_1@@0)) (not (= x9_8@@0 x9_8_1@@0))) (not (= x7_8@@0 x7_8_1@@0))) (not (= x9_8@@0 x9_8_1@@0))) (not (= x8_8@@0 x8_8_1@@0))) (not (= x9_8@@0 x9_8_1@@0))) (not (= x6_8@@0 x6_8_1@@0))) (not (= x7_8@@0 x7_8_1@@0))) (not (= x8_8@@0 x8_8_1@@0))) (not (= x9_8@@0 x9_8_1@@0)))))
 :qid |stdinbpl.1288:17|
 :skolemid |111|
 :pattern ( (neverTriggered23 x0_8@@0 x1_10@@0 x2_10@@0 x3_8@@0 x4_8@@0 x5_8@@0 x6_8@@0 x7_8@@0 x8_8@@0 x9_8@@0) (neverTriggered23 x0_8_1@@0 x1_10_1@@0 x2_10_1@@0 x3_8_1@@0 x4_8_1@@0 x5_8_1@@0 x6_8_1@@0 x7_8_1@@0 x8_8_1@@0 x9_8_1@@0))
)) (=> (and (and (and (forall ((x0_8@@1 T@U) (x1_10@@1 Real) (x2_10@@1 T@U) (x3_8@@1 Real) (x4_8@@1 T@U) (x5_8@@1 Real) (x6_8@@1 T@U) (x7_8@@1 T@U) (x8_8@@1 T@U) (x9_8@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_8@@1) RefType) (= (type x2_10@@1) RefType)) (= (type x4_8@@1) RefType)) (= (type x6_8@@1) RefType)) (= (type x7_8@@1) RefType)) (= (type x8_8@@1) RefType)) (and (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_8@@1 x1_10@@1 x2_10@@1 x3_8@@1 x4_8@@1 x5_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_8@@1 x1_10@@1 x2_10@@1 x3_8@@1 x4_8@@1 x5_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_8@@1 x1_10@@1 x2_10@@1 x3_8@@1 x4_8@@1 x5_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv14 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x0_8@@1) (= (invRecv15 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x1_10@@1)) (= (invRecv16 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x2_10@@1)) (= (invRecv17 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x3_8@@1)) (= (invRecv18 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x4_8@@1)) (= (invRecv19 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x5_8@@1)) (= (invRecv20 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x6_8@@1)) (= (invRecv21 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x7_8@@1)) (= (invRecv22 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x8_8@@1)) (= (invRecv23 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) x9_8@@1)) (qpRange23 x6_8@@1 x9_8@@1 x7_8@@1 x9_8@@1 x8_8@@1 x9_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1)))
 :qid |stdinbpl.1294:22|
 :skolemid |112|
 :pattern ( (inv_1_0 x0_8@@1 x1_10@@1 x2_10@@1 x3_8@@1 x4_8@@1 x5_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) (inv_1_1 x0_8@@1 x1_10@@1 x2_10@@1 x3_8@@1 x4_8@@1 x5_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1) (inv_1_2 x0_8@@1 x1_10@@1 x2_10@@1 x3_8@@1 x4_8@@1 x5_8@@1 x6_8@@1 x7_8@@1 x8_8@@1 x9_8@@1))
)) (forall ((arg_0_2 T@U) (arg_1_2 Real) (arg_2_2 T@U) (arg_3_2 Real) (arg_4_2 T@U) (arg_5_2 Real) (arg_6_2 T@U) (arg_7_2 T@U) (arg_8_2 T@U) (arg_9_2 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_2) RefType) (= (type arg_2_2) RefType)) (= (type arg_4_2) RefType)) (= (type arg_6_2) RefType)) (= (type arg_7_2) RefType)) (= (type arg_8_2) RefType)) (and (and (and (U_2_bool (MapType2Select xs2 (inv_1_0 (invRecv14 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv15 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv16 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv17 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv18 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv19 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv20 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv21 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv22 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2)))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 (invRecv14 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv15 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv16 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv17 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv18 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv19 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv20 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv21 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv22 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2)))) (U_2_bool (MapType2Select zs2 (inv_1_2 (invRecv14 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv15 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv16 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv17 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv18 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv19 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv20 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv21 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv22 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2)))))) (< NoPerm FullPerm)) (qpRange23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2))) (and (and (and (and (and (and (and (and (and (= (invRecv20 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_0_2) (= (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_1_2)) (= (invRecv21 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_2_2)) (= (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_3_2)) (= (invRecv22 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_4_2)) (= (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_5_2)) (= (invRecv20 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_6_2)) (= (invRecv21 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_7_2)) (= (invRecv22 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_8_2)) (= (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) arg_9_2)))
 :qid |stdinbpl.1298:22|
 :skolemid |113|
 :pattern ( (invRecv14 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv15 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv16 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv17 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv18 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv19 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv20 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv21 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv22 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2) (invRecv23 arg_0_2 arg_1_2 arg_2_2 arg_3_2 arg_4_2 arg_5_2 arg_6_2 arg_7_2 arg_8_2 arg_9_2))
))) (and (forall ((arg_0_2@@0 T@U) (arg_1_2@@0 Real) (arg_2_2@@0 T@U) (arg_3_2@@0 Real) (arg_4_2@@0 T@U) (arg_5_2@@0 Real) (arg_6_2@@0 T@U) (arg_7_2@@0 T@U) (arg_8_2@@0 T@U) (arg_9_2@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_2@@0) RefType) (= (type arg_2_2@@0) RefType)) (= (type arg_4_2@@0) RefType)) (= (type arg_6_2@@0) RefType)) (= (type arg_7_2@@0) RefType)) (= (type arg_8_2@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs2 (inv_1_0 (invRecv14 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv15 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv16 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv17 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv18 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv19 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv20 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv21 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv22 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0)))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 (invRecv14 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv15 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv16 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv17 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv18 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv19 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv20 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv21 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv22 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0)))) (U_2_bool (MapType2Select zs2 (inv_1_2 (invRecv14 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv15 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv16 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv17 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv18 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv19 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv20 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv21 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv22 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0)))))) (< NoPerm FullPerm)) (qpRange23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv20 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_0_2@@0) (= (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_1_2@@0)) (= (invRecv21 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_2_2@@0)) (= (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_3_2@@0)) (= (invRecv22 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_4_2@@0)) (= (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_5_2@@0)) (= (invRecv20 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_6_2@@0)) (= (invRecv21 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_7_2@@0)) (= (invRecv22 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_8_2@@0)) (= (invRecv23 arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0) arg_9_2@@0))) (= (U_2_real (MapType1Select QPMask@2 null (wand arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0))) (+ (U_2_real (MapType1Select QPMask@1 null (wand arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0))) FullPerm))))
 :qid |stdinbpl.1304:22|
 :skolemid |114|
 :pattern ( (MapType1Select QPMask@2 null (wand arg_0_2@@0 arg_1_2@@0 arg_2_2@@0 arg_3_2@@0 arg_4_2@@0 arg_5_2@@0 arg_6_2@@0 arg_7_2@@0 arg_8_2@@0 arg_9_2@@0)))
)) (forall ((o_3@@8 T@U) (f_5@@8 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_5@@8))))
(let ((A@@21 (FieldTypeInv0 (type f_5@@8))))
 (=> (and (and (= (type o_3@@8) RefType) (= (type f_5@@8) (FieldType A@@21 B@@20))) (or (or (not (= o_3@@8 null)) (not (IsWandField f_5@@8))) (not (= (getPredWandId f_5@@8) 1)))) (= (U_2_real (MapType1Select QPMask@1 o_3@@8 f_5@@8)) (U_2_real (MapType1Select QPMask@2 o_3@@8 f_5@@8))))))
 :qid |stdinbpl.1310:29|
 :skolemid |115|
 :pattern ( (MapType1Select QPMask@1 o_3@@8 f_5@@8))
 :pattern ( (MapType1Select QPMask@2 o_3@@8 f_5@@8))
)))) (and (and (forall ((arg_0_2@@1 T@U) (arg_1_2@@1 Real) (arg_2_2@@1 T@U) (arg_3_2@@1 Real) (arg_4_2@@1 T@U) (arg_5_2@@1 Real) (arg_6_2@@1 T@U) (arg_7_2@@1 T@U) (arg_8_2@@1 T@U) (arg_9_2@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_2@@1) RefType) (= (type arg_2_2@@1) RefType)) (= (type arg_4_2@@1) RefType)) (= (type arg_6_2@@1) RefType)) (= (type arg_7_2@@1) RefType)) (= (type arg_8_2@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs2 (inv_1_0 (invRecv14 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv15 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv16 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv17 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv18 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv19 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv20 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv21 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv22 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv23 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1)))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 (invRecv14 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv15 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv16 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv17 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv18 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv19 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv20 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv21 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv22 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv23 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1)))) (U_2_bool (MapType2Select zs2 (inv_1_2 (invRecv14 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv15 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv16 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv17 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv18 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv19 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv20 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv21 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv22 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1) (invRecv23 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1)))))) (< NoPerm FullPerm)) (qpRange23 arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1)))) (= (U_2_real (MapType1Select QPMask@2 null (wand arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1))) (U_2_real (MapType1Select QPMask@1 null (wand arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1)))))
 :qid |stdinbpl.1314:22|
 :skolemid |116|
 :pattern ( (MapType1Select QPMask@2 null (wand arg_0_2@@1 arg_1_2@@1 arg_2_2@@1 arg_3_2@@1 arg_4_2@@1 arg_5_2@@1 arg_6_2@@1 arg_7_2@@1 arg_8_2@@1 arg_9_2@@1)))
)) (state Heap@@10 QPMask@2)) (and (state Heap@@10 QPMask@2) (state Heap@@10 QPMask@2)))) (and (=> (= (ControlFlow 0 168) 25) anon124_Then_correct) (=> (= (ControlFlow 0 168) 167) anon124_Else_correct)))))))
(let ((anon123_Then_correct  (and (=> (= (ControlFlow 0 20) (- 0 23)) (>= x9_4 NoPerm)) (=> (>= x9_4 NoPerm) (=> (=> (> x9_4 NoPerm) (not (= x6_4 null))) (=> (and (= WandDefLHSMask@33 (MapType1Store ZeroMask x6_4 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_4 f_7)) x9_4)))) (state WandDefLHSHeap@11 WandDefLHSMask@33)) (and (=> (= (ControlFlow 0 20) (- 0 22)) (>= x9_4 NoPerm)) (=> (>= x9_4 NoPerm) (=> (=> (> x9_4 NoPerm) (not (= x7_4 null))) (=> (and (= WandDefLHSMask@34 (MapType1Store WandDefLHSMask@33 x7_4 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@33 x7_4 f_7)) x9_4)))) (state WandDefLHSHeap@11 WandDefLHSMask@34)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (>= x9_4 NoPerm)) (=> (>= x9_4 NoPerm) (=> (and (=> (> x9_4 NoPerm) (not (= x8_4 null))) (= WandDefLHSMask@35 (MapType1Store WandDefLHSMask@34 x8_4 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@34 x8_4 f_7)) x9_4))))) (=> (and (and (state WandDefLHSHeap@11 WandDefLHSMask@35) (state WandDefLHSHeap@11 WandDefLHSMask@35)) (and (state WandDefLHSHeap@11 WandDefLHSMask@35) (= (ControlFlow 0 20) (- 0 19)))) (>= x9_4 NoPerm)))))))))))))))
(let ((anon22_correct true))
(let ((anon122_Then_correct  (=> (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_4 x1_4 x2_4 x3_4 x4_4 x5_4 x6_4 x7_4 x8_4 x9_4))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_4 x1_4 x2_4 x3_4 x4_4 x5_4 x6_4 x7_4 x8_4 x9_4))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_4 x1_4 x2_4 x3_4 x4_4 x5_4 x6_4 x7_4 x8_4 x9_4))))) (and (=> (= (ControlFlow 0 24) 20) anon123_Then_correct) (=> (= (ControlFlow 0 24) 17) anon22_correct)))))
(let ((anon122_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_4 x1_4 x2_4 x3_4 x4_4 x5_4 x6_4 x7_4 x8_4 x9_4))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_4 x1_4 x2_4 x3_4 x4_4 x5_4 x6_4 x7_4 x8_4 x9_4))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_4 x1_4 x2_4 x3_4 x4_4 x5_4 x6_4 x7_4 x8_4 x9_4)))))) (= (ControlFlow 0 18) 17)) anon22_correct)))
(let ((anon120_Else_correct  (=> (forall ((x0_6 T@U) (x1_8 Real) (x2_8 T@U) (x3_6 Real) (x4_6 T@U) (x5_6 Real) (x6_6 T@U) (x7_6 T@U) (x8_6 T@U) (x9_6 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_6) RefType) (= (type x2_8) RefType)) (= (type x4_6) RefType)) (= (type x6_6) RefType)) (= (type x7_6) RefType)) (= (type x8_6) RefType)) (and (U_2_bool (MapType2Select xs2 (inv_1_0 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6))) (and (U_2_bool (MapType2Select ys2 (inv_1_1 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6))) (U_2_bool (MapType2Select zs2 (inv_1_2 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6)))))) (and (and (and (and (and (and (and (and (and (= (inv_1_0 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) x0_6) (= q_1 x1_8)) (= (inv_1_1 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) x2_8)) (= q_1 x3_6)) (= (inv_1_2 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) x4_6)) (= q_1 x5_6)) (= (inv_1_0 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) x6_6)) (= (inv_1_1 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) x7_6)) (= (inv_1_2 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) x8_6)) (= q_1 x9_6)))
 :qid |stdinbpl.1223:20|
 :skolemid |110|
 :pattern ( (inv_1_0 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) (inv_1_1 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6) (inv_1_2 x0_6 x1_8 x2_8 x3_6 x4_6 x5_6 x6_6 x7_6 x8_6 x9_6))
)) (=> (and (state Heap@@10 QPMask@1) (state Heap@@10 QPMask@1)) (and (and (=> (= (ControlFlow 0 170) 168) anon121_Else_correct) (=> (= (ControlFlow 0 170) 24) anon122_Then_correct)) (=> (= (ControlFlow 0 170) 18) anon122_Else_correct))))))
(let ((anon120_Then_correct true))
(let ((anon119_Else_correct  (=> (forall ((x2_6 T@U) (y2_1 T@U) (z2_1 T@U) ) (!  (=> (and (and (and (= (type x2_6) RefType) (= (type y2_1) RefType)) (= (type z2_1) RefType)) (and (U_2_bool (MapType2Select xs2 x2_6)) (and (U_2_bool (MapType2Select ys2 y2_1)) (U_2_bool (MapType2Select zs2 z2_1))))) (and (and (= (inv_1_0 x2_6 q_1 y2_1 q_1 z2_1 q_1 x2_6 y2_1 z2_1 q_1) x2_6) (= (inv_1_1 x2_6 q_1 y2_1 q_1 z2_1 q_1 x2_6 y2_1 z2_1 q_1) y2_1)) (= (inv_1_2 x2_6 q_1 y2_1 q_1 z2_1 q_1 x2_6 y2_1 z2_1 q_1) z2_1)))
 :qid |stdinbpl.1195:20|
 :skolemid |109|
 :pattern ( (MapType0Select Heap@@10 null (wand x2_6 q_1 y2_1 q_1 z2_1 q_1 x2_6 y2_1 z2_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@1) (state Heap@@10 QPMask@1)) (and (=> (= (ControlFlow 0 171) 16) anon120_Then_correct) (=> (= (ControlFlow 0 171) 170) anon120_Else_correct))))))
(let ((anon119_Then_correct true))
(let ((anon116_Else_correct  (and (=> (= (ControlFlow 0 172) (- 0 173)) (forall ((x0_3 T@U) (x1_5 Real) (x2_3 T@U) (x3_3 Real) (x4_3 T@U) (x5_3 Real) (x6_3 T@U) (x7_3 T@U) (x8_3 T@U) (x9_3 Real) (x0_3_1 T@U) (x1_5_1 Real) (x2_3_1 T@U) (x3_3_1 Real) (x4_3_1 T@U) (x5_3_1 Real) (x6_3_1 T@U) (x7_3_1 T@U) (x8_3_1 T@U) (x9_3_1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_3) RefType) (= (type x2_3) RefType)) (= (type x4_3) RefType)) (= (type x6_3) RefType)) (= (type x7_3) RefType)) (= (type x8_3) RefType)) (= (type x0_3_1) RefType)) (= (type x2_3_1) RefType)) (= (type x4_3_1) RefType)) (= (type x6_3_1) RefType)) (= (type x7_3_1) RefType)) (= (type x8_3_1) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_3 x0_3_1)) (not (= x1_5 x1_5_1))) (not (= x2_3 x2_3_1))) (not (= x3_3 x3_3_1))) (not (= x4_3 x4_3_1))) (not (= x5_3 x5_3_1))) (not (= x6_3 x6_3_1))) (not (= x7_3 x7_3_1))) (not (= x8_3 x8_3_1))) (not (= x9_3 x9_3_1))) (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_3 x1_5 x2_3 x3_3 x4_3 x5_3 x6_3 x7_3 x8_3 x9_3))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_3 x1_5 x2_3 x3_3 x4_3 x5_3 x6_3 x7_3 x8_3 x9_3))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_3 x1_5 x2_3 x3_3 x4_3 x5_3 x6_3 x7_3 x8_3 x9_3)))))) (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_3_1 x1_5_1 x2_3_1 x3_3_1 x4_3_1 x5_3_1 x6_3_1 x7_3_1 x8_3_1 x9_3_1))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_3_1 x1_5_1 x2_3_1 x3_3_1 x4_3_1 x5_3_1 x6_3_1 x7_3_1 x8_3_1 x9_3_1))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_3_1 x1_5_1 x2_3_1 x3_3_1 x4_3_1 x5_3_1 x6_3_1 x7_3_1 x8_3_1 x9_3_1)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_3 x6_3_1)) (not (= x9_3 x9_3_1))) (not (= x7_3 x7_3_1))) (not (= x9_3 x9_3_1))) (not (= x8_3 x8_3_1))) (not (= x9_3 x9_3_1))) (not (= x6_3 x6_3_1))) (not (= x7_3 x7_3_1))) (not (= x8_3 x8_3_1))) (not (= x9_3 x9_3_1)))))
 :qid |stdinbpl.1148:17|
 :skolemid |103|
 :pattern ( (neverTriggered13 x0_3 x1_5 x2_3 x3_3 x4_3 x5_3 x6_3 x7_3 x8_3 x9_3) (neverTriggered13 x0_3_1 x1_5_1 x2_3_1 x3_3_1 x4_3_1 x5_3_1 x6_3_1 x7_3_1 x8_3_1 x9_3_1))
))) (=> (forall ((x0_3@@0 T@U) (x1_5@@0 Real) (x2_3@@0 T@U) (x3_3@@0 Real) (x4_3@@0 T@U) (x5_3@@0 Real) (x6_3@@0 T@U) (x7_3@@0 T@U) (x8_3@@0 T@U) (x9_3@@0 Real) (x0_3_1@@0 T@U) (x1_5_1@@0 Real) (x2_3_1@@0 T@U) (x3_3_1@@0 Real) (x4_3_1@@0 T@U) (x5_3_1@@0 Real) (x6_3_1@@0 T@U) (x7_3_1@@0 T@U) (x8_3_1@@0 T@U) (x9_3_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type x0_3@@0) RefType) (= (type x2_3@@0) RefType)) (= (type x4_3@@0) RefType)) (= (type x6_3@@0) RefType)) (= (type x7_3@@0) RefType)) (= (type x8_3@@0) RefType)) (= (type x0_3_1@@0) RefType)) (= (type x2_3_1@@0) RefType)) (= (type x4_3_1@@0) RefType)) (= (type x6_3_1@@0) RefType)) (= (type x7_3_1@@0) RefType)) (= (type x8_3_1@@0) RefType)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= x0_3@@0 x0_3_1@@0)) (not (= x1_5@@0 x1_5_1@@0))) (not (= x2_3@@0 x2_3_1@@0))) (not (= x3_3@@0 x3_3_1@@0))) (not (= x4_3@@0 x4_3_1@@0))) (not (= x5_3@@0 x5_3_1@@0))) (not (= x6_3@@0 x6_3_1@@0))) (not (= x7_3@@0 x7_3_1@@0))) (not (= x8_3@@0 x8_3_1@@0))) (not (= x9_3@@0 x9_3_1@@0))) (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_3@@0 x1_5@@0 x2_3@@0 x3_3@@0 x4_3@@0 x5_3@@0 x6_3@@0 x7_3@@0 x8_3@@0 x9_3@@0))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_3@@0 x1_5@@0 x2_3@@0 x3_3@@0 x4_3@@0 x5_3@@0 x6_3@@0 x7_3@@0 x8_3@@0 x9_3@@0))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_3@@0 x1_5@@0 x2_3@@0 x3_3@@0 x4_3@@0 x5_3@@0 x6_3@@0 x7_3@@0 x8_3@@0 x9_3@@0)))))) (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_3_1@@0 x1_5_1@@0 x2_3_1@@0 x3_3_1@@0 x4_3_1@@0 x5_3_1@@0 x6_3_1@@0 x7_3_1@@0 x8_3_1@@0 x9_3_1@@0))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_3_1@@0 x1_5_1@@0 x2_3_1@@0 x3_3_1@@0 x4_3_1@@0 x5_3_1@@0 x6_3_1@@0 x7_3_1@@0 x8_3_1@@0 x9_3_1@@0))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_3_1@@0 x1_5_1@@0 x2_3_1@@0 x3_3_1@@0 x4_3_1@@0 x5_3_1@@0 x6_3_1@@0 x7_3_1@@0 x8_3_1@@0 x9_3_1@@0)))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x6_3@@0 x6_3_1@@0)) (not (= x9_3@@0 x9_3_1@@0))) (not (= x7_3@@0 x7_3_1@@0))) (not (= x9_3@@0 x9_3_1@@0))) (not (= x8_3@@0 x8_3_1@@0))) (not (= x9_3@@0 x9_3_1@@0))) (not (= x6_3@@0 x6_3_1@@0))) (not (= x7_3@@0 x7_3_1@@0))) (not (= x8_3@@0 x8_3_1@@0))) (not (= x9_3@@0 x9_3_1@@0)))))
 :qid |stdinbpl.1148:17|
 :skolemid |103|
 :pattern ( (neverTriggered13 x0_3@@0 x1_5@@0 x2_3@@0 x3_3@@0 x4_3@@0 x5_3@@0 x6_3@@0 x7_3@@0 x8_3@@0 x9_3@@0) (neverTriggered13 x0_3_1@@0 x1_5_1@@0 x2_3_1@@0 x3_3_1@@0 x4_3_1@@0 x5_3_1@@0 x6_3_1@@0 x7_3_1@@0 x8_3_1@@0 x9_3_1@@0))
)) (=> (and (and (and (forall ((x0_3@@1 T@U) (x1_5@@1 Real) (x2_3@@1 T@U) (x3_3@@1 Real) (x4_3@@1 T@U) (x5_3@@1 Real) (x6_3@@1 T@U) (x7_3@@1 T@U) (x8_3@@1 T@U) (x9_3@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_3@@1) RefType) (= (type x2_3@@1) RefType)) (= (type x4_3@@1) RefType)) (= (type x6_3@@1) RefType)) (= (type x7_3@@1) RefType)) (= (type x8_3@@1) RefType)) (and (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_3@@1 x1_5@@1 x2_3@@1 x3_3@@1 x4_3@@1 x5_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_3@@1 x1_5@@1 x2_3@@1 x3_3@@1 x4_3@@1 x5_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_3@@1 x1_5@@1 x2_3@@1 x3_3@@1 x4_3@@1 x5_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1))))) (< NoPerm FullPerm))) (and (and (and (and (and (and (and (and (and (and (= (invRecv4 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x0_3@@1) (= (invRecv5 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x1_5@@1)) (= (invRecv6 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x2_3@@1)) (= (invRecv7 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x3_3@@1)) (= (invRecv8 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x4_3@@1)) (= (invRecv9 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x5_3@@1)) (= (invRecv10 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x6_3@@1)) (= (invRecv11 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x7_3@@1)) (= (invRecv12 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x8_3@@1)) (= (invRecv13 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) x9_3@@1)) (qpRange13 x6_3@@1 x9_3@@1 x7_3@@1 x9_3@@1 x8_3@@1 x9_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1)))
 :qid |stdinbpl.1154:22|
 :skolemid |104|
 :pattern ( (inv_0_0 x0_3@@1 x1_5@@1 x2_3@@1 x3_3@@1 x4_3@@1 x5_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) (inv_0_1 x0_3@@1 x1_5@@1 x2_3@@1 x3_3@@1 x4_3@@1 x5_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1) (inv_0_2 x0_3@@1 x1_5@@1 x2_3@@1 x3_3@@1 x4_3@@1 x5_3@@1 x6_3@@1 x7_3@@1 x8_3@@1 x9_3@@1))
)) (forall ((arg_0_1 T@U) (arg_1_1 Real) (arg_2_1 T@U) (arg_3_1 Real) (arg_4_1 T@U) (arg_5_1 Real) (arg_6_1 T@U) (arg_7_1 T@U) (arg_8_1 T@U) (arg_9_1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_1) RefType) (= (type arg_2_1) RefType)) (= (type arg_4_1) RefType)) (= (type arg_6_1) RefType)) (= (type arg_7_1) RefType)) (= (type arg_8_1) RefType)) (and (and (and (U_2_bool (MapType2Select xs1 (inv_0_0 (invRecv4 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv5 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv6 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv7 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv8 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv9 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv10 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv11 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv12 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1)))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 (invRecv4 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv5 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv6 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv7 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv8 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv9 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv10 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv11 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv12 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1)))) (U_2_bool (MapType2Select zs1 (inv_0_2 (invRecv4 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv5 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv6 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv7 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv8 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv9 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv10 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv11 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv12 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1)))))) (< NoPerm FullPerm)) (qpRange13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1))) (and (and (and (and (and (and (and (and (and (= (invRecv10 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_0_1) (= (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_1_1)) (= (invRecv11 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_2_1)) (= (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_3_1)) (= (invRecv12 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_4_1)) (= (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_5_1)) (= (invRecv10 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_6_1)) (= (invRecv11 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_7_1)) (= (invRecv12 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_8_1)) (= (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) arg_9_1)))
 :qid |stdinbpl.1158:22|
 :skolemid |105|
 :pattern ( (invRecv4 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv5 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv6 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv7 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv8 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv9 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv10 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv11 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv12 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1) (invRecv13 arg_0_1 arg_1_1 arg_2_1 arg_3_1 arg_4_1 arg_5_1 arg_6_1 arg_7_1 arg_8_1 arg_9_1))
))) (and (forall ((arg_0_1@@0 T@U) (arg_1_1@@0 Real) (arg_2_1@@0 T@U) (arg_3_1@@0 Real) (arg_4_1@@0 T@U) (arg_5_1@@0 Real) (arg_6_1@@0 T@U) (arg_7_1@@0 T@U) (arg_8_1@@0 T@U) (arg_9_1@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_1@@0) RefType) (= (type arg_2_1@@0) RefType)) (= (type arg_4_1@@0) RefType)) (= (type arg_6_1@@0) RefType)) (= (type arg_7_1@@0) RefType)) (= (type arg_8_1@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs1 (inv_0_0 (invRecv4 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv5 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv6 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv7 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv8 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv9 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv10 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv11 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv12 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0)))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 (invRecv4 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv5 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv6 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv7 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv8 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv9 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv10 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv11 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv12 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0)))) (U_2_bool (MapType2Select zs1 (inv_0_2 (invRecv4 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv5 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv6 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv7 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv8 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv9 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv10 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv11 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv12 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0)))))) (< NoPerm FullPerm)) (qpRange13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv10 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_0_1@@0) (= (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_1_1@@0)) (= (invRecv11 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_2_1@@0)) (= (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_3_1@@0)) (= (invRecv12 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_4_1@@0)) (= (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_5_1@@0)) (= (invRecv10 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_6_1@@0)) (= (invRecv11 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_7_1@@0)) (= (invRecv12 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_8_1@@0)) (= (invRecv13 arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0) arg_9_1@@0))) (= (U_2_real (MapType1Select QPMask@1 null (wand arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0))) (+ (U_2_real (MapType1Select QPMask@0 null (wand arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0))) FullPerm))))
 :qid |stdinbpl.1164:22|
 :skolemid |106|
 :pattern ( (MapType1Select QPMask@1 null (wand arg_0_1@@0 arg_1_1@@0 arg_2_1@@0 arg_3_1@@0 arg_4_1@@0 arg_5_1@@0 arg_6_1@@0 arg_7_1@@0 arg_8_1@@0 arg_9_1@@0)))
)) (forall ((o_3@@9 T@U) (f_5@@9 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_5@@9))))
(let ((A@@22 (FieldTypeInv0 (type f_5@@9))))
 (=> (and (and (= (type o_3@@9) RefType) (= (type f_5@@9) (FieldType A@@22 B@@21))) (or (or (not (= o_3@@9 null)) (not (IsWandField f_5@@9))) (not (= (getPredWandId f_5@@9) 1)))) (= (U_2_real (MapType1Select QPMask@0 o_3@@9 f_5@@9)) (U_2_real (MapType1Select QPMask@1 o_3@@9 f_5@@9))))))
 :qid |stdinbpl.1170:29|
 :skolemid |107|
 :pattern ( (MapType1Select QPMask@0 o_3@@9 f_5@@9))
 :pattern ( (MapType1Select QPMask@1 o_3@@9 f_5@@9))
)))) (and (and (forall ((arg_0_1@@1 T@U) (arg_1_1@@1 Real) (arg_2_1@@1 T@U) (arg_3_1@@1 Real) (arg_4_1@@1 T@U) (arg_5_1@@1 Real) (arg_6_1@@1 T@U) (arg_7_1@@1 T@U) (arg_8_1@@1 T@U) (arg_9_1@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0_1@@1) RefType) (= (type arg_2_1@@1) RefType)) (= (type arg_4_1@@1) RefType)) (= (type arg_6_1@@1) RefType)) (= (type arg_7_1@@1) RefType)) (= (type arg_8_1@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs1 (inv_0_0 (invRecv4 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv5 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv6 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv7 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv8 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv9 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv10 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv11 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv12 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv13 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1)))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 (invRecv4 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv5 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv6 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv7 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv8 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv9 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv10 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv11 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv12 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv13 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1)))) (U_2_bool (MapType2Select zs1 (inv_0_2 (invRecv4 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv5 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv6 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv7 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv8 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv9 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv10 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv11 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv12 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1) (invRecv13 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1)))))) (< NoPerm FullPerm)) (qpRange13 arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1)))) (= (U_2_real (MapType1Select QPMask@1 null (wand arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1))) (U_2_real (MapType1Select QPMask@0 null (wand arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1)))))
 :qid |stdinbpl.1174:22|
 :skolemid |108|
 :pattern ( (MapType1Select QPMask@1 null (wand arg_0_1@@1 arg_1_1@@1 arg_2_1@@1 arg_3_1@@1 arg_4_1@@1 arg_5_1@@1 arg_6_1@@1 arg_7_1@@1 arg_8_1@@1 arg_9_1@@1)))
)) (state Heap@@10 QPMask@1)) (and (state Heap@@10 QPMask@1) (state Heap@@10 QPMask@1)))) (and (=> (= (ControlFlow 0 172) 15) anon119_Then_correct) (=> (= (ControlFlow 0 172) 171) anon119_Else_correct)))))))
(let ((anon118_Then_correct  (and (=> (= (ControlFlow 0 10) (- 0 13)) (>= x9_2 NoPerm)) (=> (>= x9_2 NoPerm) (=> (=> (> x9_2 NoPerm) (not (= x6_2 null))) (=> (and (= WandDefLHSMask@36 (MapType1Store ZeroMask x6_2 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x6_2 f_7)) x9_2)))) (state WandDefLHSHeap@12 WandDefLHSMask@36)) (and (=> (= (ControlFlow 0 10) (- 0 12)) (>= x9_2 NoPerm)) (=> (>= x9_2 NoPerm) (=> (=> (> x9_2 NoPerm) (not (= x7_2 null))) (=> (and (= WandDefLHSMask@37 (MapType1Store WandDefLHSMask@36 x7_2 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@36 x7_2 f_7)) x9_2)))) (state WandDefLHSHeap@12 WandDefLHSMask@37)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (>= x9_2 NoPerm)) (=> (>= x9_2 NoPerm) (=> (and (=> (> x9_2 NoPerm) (not (= x8_2 null))) (= WandDefLHSMask@38 (MapType1Store WandDefLHSMask@37 x8_2 f_7 (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@37 x8_2 f_7)) x9_2))))) (=> (and (and (state WandDefLHSHeap@12 WandDefLHSMask@38) (state WandDefLHSHeap@12 WandDefLHSMask@38)) (and (state WandDefLHSHeap@12 WandDefLHSMask@38) (= (ControlFlow 0 10) (- 0 9)))) (>= x9_2 NoPerm)))))))))))))))
(let ((anon13_correct true))
(let ((anon117_Then_correct  (=> (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_2 x1_2 x2_2 x3_2 x4_2 x5_2 x6_2 x7_2 x8_2 x9_2))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_2 x1_2 x2_2 x3_2 x4_2 x5_2 x6_2 x7_2 x8_2 x9_2))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_2 x1_2 x2_2 x3_2 x4_2 x5_2 x6_2 x7_2 x8_2 x9_2))))) (and (=> (= (ControlFlow 0 14) 10) anon118_Then_correct) (=> (= (ControlFlow 0 14) 7) anon13_correct)))))
(let ((anon117_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_2 x1_2 x2_2 x3_2 x4_2 x5_2 x6_2 x7_2 x8_2 x9_2))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_2 x1_2 x2_2 x3_2 x4_2 x5_2 x6_2 x7_2 x8_2 x9_2))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_2 x1_2 x2_2 x3_2 x4_2 x5_2 x6_2 x7_2 x8_2 x9_2)))))) (= (ControlFlow 0 8) 7)) anon13_correct)))
(let ((anon115_Else_correct  (=> (forall ((x0_1 T@U) (x1_3 Real) (x2_1_1 T@U) (x3_1 Real) (x4_1 T@U) (x5_1 Real) (x6_1 T@U) (x7_1 T@U) (x8_1 T@U) (x9_1 Real) ) (!  (=> (and (and (and (and (and (and (= (type x0_1) RefType) (= (type x2_1_1) RefType)) (= (type x4_1) RefType)) (= (type x6_1) RefType)) (= (type x7_1) RefType)) (= (type x8_1) RefType)) (and (U_2_bool (MapType2Select xs1 (inv_0_0 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1))) (and (U_2_bool (MapType2Select ys1 (inv_0_1 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1))) (U_2_bool (MapType2Select zs1 (inv_0_2 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1)))))) (and (and (and (and (and (and (and (and (and (= (inv_0_0 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) x0_1) (= q_1 x1_3)) (= (inv_0_1 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) x2_1_1)) (= q_1 x3_1)) (= (inv_0_2 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) x4_1)) (= q_1 x5_1)) (= (inv_0_0 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) x6_1)) (= (inv_0_1 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) x7_1)) (= (inv_0_2 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) x8_1)) (= q_1 x9_1)))
 :qid |stdinbpl.1083:20|
 :skolemid |102|
 :pattern ( (inv_0_0 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) (inv_0_1 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1) (inv_0_2 x0_1 x1_3 x2_1_1 x3_1 x4_1 x5_1 x6_1 x7_1 x8_1 x9_1))
)) (=> (and (state Heap@@10 QPMask@0) (state Heap@@10 QPMask@0)) (and (and (=> (= (ControlFlow 0 174) 172) anon116_Else_correct) (=> (= (ControlFlow 0 174) 14) anon117_Then_correct)) (=> (= (ControlFlow 0 174) 8) anon117_Else_correct))))))
(let ((anon115_Then_correct true))
(let ((anon114_Else_correct  (=> (forall ((x1_1 T@U) (y1_1 T@U) (z1_1 T@U) ) (!  (=> (and (and (and (= (type x1_1) RefType) (= (type y1_1) RefType)) (= (type z1_1) RefType)) (and (U_2_bool (MapType2Select xs1 x1_1)) (and (U_2_bool (MapType2Select ys1 y1_1)) (U_2_bool (MapType2Select zs1 z1_1))))) (and (and (= (inv_0_0 x1_1 q_1 y1_1 q_1 z1_1 q_1 x1_1 y1_1 z1_1 q_1) x1_1) (= (inv_0_1 x1_1 q_1 y1_1 q_1 z1_1 q_1 x1_1 y1_1 z1_1 q_1) y1_1)) (= (inv_0_2 x1_1 q_1 y1_1 q_1 z1_1 q_1 x1_1 y1_1 z1_1 q_1) z1_1)))
 :qid |stdinbpl.1055:20|
 :skolemid |101|
 :pattern ( (MapType0Select Heap@@10 null (wand x1_1 q_1 y1_1 q_1 z1_1 q_1 x1_1 y1_1 z1_1 q_1)))
)) (=> (and (state Heap@@10 QPMask@0) (state Heap@@10 QPMask@0)) (and (=> (= (ControlFlow 0 175) 6) anon115_Then_correct) (=> (= (ControlFlow 0 175) 174) anon115_Else_correct))))))
(let ((anon114_Then_correct true))
(let ((anon111_Else_correct  (and (=> (= (ControlFlow 0 176) (- 0 177)) (forall ((x_1 T@U) (y_1 T@U) (z_1 T@U) (x_1_1 T@U) (y_1_1 T@U) (z_1_1 T@U) ) (!  (=> (and (and (and (and (and (= (type x_1) RefType) (= (type y_1) RefType)) (= (type z_1) RefType)) (= (type x_1_1) RefType)) (= (type y_1_1) RefType)) (= (type z_1_1) RefType)) (=> (and (and (and (and (and (and (not (= x_1 x_1_1)) (not (= y_1 y_1_1))) (not (= z_1 z_1_1))) (and (U_2_bool (MapType2Select xs x_1)) (and (U_2_bool (MapType2Select ys y_1)) (U_2_bool (MapType2Select zs z_1))))) (and (U_2_bool (MapType2Select xs x_1_1)) (and (U_2_bool (MapType2Select ys y_1_1)) (U_2_bool (MapType2Select zs z_1_1))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x_1 x_1_1)) (not (= FullPerm FullPerm))) (not (= y_1 y_1_1))) (not (= FullPerm FullPerm))) (not (= z_1 z_1_1))) (not (= FullPerm FullPerm))) (not (= x_1 x_1_1))) (not (= y_1 y_1_1))) (not (= z_1 z_1_1))) (not (= FullPerm FullPerm)))))
 :qid |stdinbpl.1008:17|
 :skolemid |95|
 :pattern ( (neverTriggered3 x_1 y_1 z_1) (neverTriggered3 x_1_1 y_1_1 z_1_1))
))) (=> (forall ((x_1@@0 T@U) (y_1@@0 T@U) (z_1@@0 T@U) (x_1_1@@0 T@U) (y_1_1@@0 T@U) (z_1_1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type x_1@@0) RefType) (= (type y_1@@0) RefType)) (= (type z_1@@0) RefType)) (= (type x_1_1@@0) RefType)) (= (type y_1_1@@0) RefType)) (= (type z_1_1@@0) RefType)) (=> (and (and (and (and (and (and (not (= x_1@@0 x_1_1@@0)) (not (= y_1@@0 y_1_1@@0))) (not (= z_1@@0 z_1_1@@0))) (and (U_2_bool (MapType2Select xs x_1@@0)) (and (U_2_bool (MapType2Select ys y_1@@0)) (U_2_bool (MapType2Select zs z_1@@0))))) (and (U_2_bool (MapType2Select xs x_1_1@@0)) (and (U_2_bool (MapType2Select ys y_1_1@@0)) (U_2_bool (MapType2Select zs z_1_1@@0))))) (< NoPerm FullPerm)) (< NoPerm FullPerm)) (or (or (or (or (or (or (or (or (or (not (= x_1@@0 x_1_1@@0)) (not (= FullPerm FullPerm))) (not (= y_1@@0 y_1_1@@0))) (not (= FullPerm FullPerm))) (not (= z_1@@0 z_1_1@@0))) (not (= FullPerm FullPerm))) (not (= x_1@@0 x_1_1@@0))) (not (= y_1@@0 y_1_1@@0))) (not (= z_1@@0 z_1_1@@0))) (not (= FullPerm FullPerm)))))
 :qid |stdinbpl.1008:17|
 :skolemid |95|
 :pattern ( (neverTriggered3 x_1@@0 y_1@@0 z_1@@0) (neverTriggered3 x_1_1@@0 y_1_1@@0 z_1_1@@0))
)) (=> (and (and (and (forall ((x_1@@1 T@U) (y_1@@1 T@U) (z_1@@1 T@U) ) (!  (=> (and (and (and (= (type x_1@@1) RefType) (= (type y_1@@1) RefType)) (= (type z_1@@1) RefType)) (and (and (U_2_bool (MapType2Select xs x_1@@1)) (and (U_2_bool (MapType2Select ys y_1@@1)) (U_2_bool (MapType2Select zs z_1@@1)))) (< NoPerm FullPerm))) (and (and (and (= (invRecv1 x_1@@1 FullPerm y_1@@1 FullPerm z_1@@1 FullPerm x_1@@1 y_1@@1 z_1@@1 FullPerm) x_1@@1) (= (invRecv2 x_1@@1 FullPerm y_1@@1 FullPerm z_1@@1 FullPerm x_1@@1 y_1@@1 z_1@@1 FullPerm) y_1@@1)) (= (invRecv3 x_1@@1 FullPerm y_1@@1 FullPerm z_1@@1 FullPerm x_1@@1 y_1@@1 z_1@@1 FullPerm) z_1@@1)) (qpRange3 x_1@@1 FullPerm y_1@@1 FullPerm z_1@@1 FullPerm x_1@@1 y_1@@1 z_1@@1 FullPerm)))
 :qid |stdinbpl.1014:22|
 :skolemid |96|
 :pattern ( (MapType0Select Heap@@10 null (wand x_1@@1 FullPerm y_1@@1 FullPerm z_1@@1 FullPerm x_1@@1 y_1@@1 z_1@@1 FullPerm)))
 :pattern ( (MapType1Select ZeroMask null (wand x_1@@1 FullPerm y_1@@1 FullPerm z_1@@1 FullPerm x_1@@1 y_1@@1 z_1@@1 FullPerm)))
 :pattern ( (MapType2Select xs x_1@@1) (MapType2Select ys y_1@@1) (MapType2Select zs z_1@@1))
)) (forall ((arg_0 T@U) (arg_1 Real) (arg_2 T@U) (arg_3 Real) (arg_4 T@U) (arg_5 Real) (arg_6 T@U) (arg_7 T@U) (arg_8 T@U) (arg_9 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0) RefType) (= (type arg_2) RefType)) (= (type arg_4) RefType)) (= (type arg_6) RefType)) (= (type arg_7) RefType)) (= (type arg_8) RefType)) (and (and (and (U_2_bool (MapType2Select xs (invRecv1 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9))) (and (U_2_bool (MapType2Select ys (invRecv2 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9))) (U_2_bool (MapType2Select zs (invRecv3 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9))))) (< NoPerm FullPerm)) (qpRange3 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9))) (and (and (and (and (and (and (and (and (and (= (invRecv1 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) arg_0) (= FullPerm arg_1)) (= (invRecv2 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) arg_2)) (= FullPerm arg_3)) (= (invRecv3 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) arg_4)) (= FullPerm arg_5)) (= (invRecv1 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) arg_6)) (= (invRecv2 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) arg_7)) (= (invRecv3 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) arg_8)) (= FullPerm arg_9)))
 :qid |stdinbpl.1018:22|
 :skolemid |97|
 :pattern ( (invRecv1 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (invRecv2 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9) (invRecv3 arg_0 arg_1 arg_2 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9))
))) (and (forall ((arg_0@@0 T@U) (arg_1@@0 Real) (arg_2@@0 T@U) (arg_3@@0 Real) (arg_4@@0 T@U) (arg_5@@0 Real) (arg_6@@0 T@U) (arg_7@@0 T@U) (arg_8@@0 T@U) (arg_9@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0@@0) RefType) (= (type arg_2@@0) RefType)) (= (type arg_4@@0) RefType)) (= (type arg_6@@0) RefType)) (= (type arg_7@@0) RefType)) (= (type arg_8@@0) RefType)) (and (and (and (U_2_bool (MapType2Select xs (invRecv1 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0))) (and (U_2_bool (MapType2Select ys (invRecv2 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0))) (U_2_bool (MapType2Select zs (invRecv3 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0))))) (< NoPerm FullPerm)) (qpRange3 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0))) (and (=> (< NoPerm FullPerm) (and (and (and (and (and (and (and (and (and (= (invRecv1 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0) arg_0@@0) (= FullPerm arg_1@@0)) (= (invRecv2 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0) arg_2@@0)) (= FullPerm arg_3@@0)) (= (invRecv3 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0) arg_4@@0)) (= FullPerm arg_5@@0)) (= (invRecv1 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0) arg_6@@0)) (= (invRecv2 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0) arg_7@@0)) (= (invRecv3 arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0) arg_8@@0)) (= FullPerm arg_9@@0))) (= (U_2_real (MapType1Select QPMask@0 null (wand arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0))) (+ (U_2_real (MapType1Select ZeroMask null (wand arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0))) FullPerm))))
 :qid |stdinbpl.1024:22|
 :skolemid |98|
 :pattern ( (MapType1Select QPMask@0 null (wand arg_0@@0 arg_1@@0 arg_2@@0 arg_3@@0 arg_4@@0 arg_5@@0 arg_6@@0 arg_7@@0 arg_8@@0 arg_9@@0)))
)) (forall ((o_3@@10 T@U) (f_5@@10 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_5@@10))))
(let ((A@@23 (FieldTypeInv0 (type f_5@@10))))
 (=> (and (and (= (type o_3@@10) RefType) (= (type f_5@@10) (FieldType A@@23 B@@22))) (or (or (not (= o_3@@10 null)) (not (IsWandField f_5@@10))) (not (= (getPredWandId f_5@@10) 1)))) (= (U_2_real (MapType1Select ZeroMask o_3@@10 f_5@@10)) (U_2_real (MapType1Select QPMask@0 o_3@@10 f_5@@10))))))
 :qid |stdinbpl.1030:29|
 :skolemid |99|
 :pattern ( (MapType1Select ZeroMask o_3@@10 f_5@@10))
 :pattern ( (MapType1Select QPMask@0 o_3@@10 f_5@@10))
)))) (and (and (forall ((arg_0@@1 T@U) (arg_1@@1 Real) (arg_2@@1 T@U) (arg_3@@1 Real) (arg_4@@1 T@U) (arg_5@@1 Real) (arg_6@@1 T@U) (arg_7@@1 T@U) (arg_8@@1 T@U) (arg_9@@1 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg_0@@1) RefType) (= (type arg_2@@1) RefType)) (= (type arg_4@@1) RefType)) (= (type arg_6@@1) RefType)) (= (type arg_7@@1) RefType)) (= (type arg_8@@1) RefType)) (not (and (and (and (U_2_bool (MapType2Select xs (invRecv1 arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1))) (and (U_2_bool (MapType2Select ys (invRecv2 arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1))) (U_2_bool (MapType2Select zs (invRecv3 arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1))))) (< NoPerm FullPerm)) (qpRange3 arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1)))) (= (U_2_real (MapType1Select QPMask@0 null (wand arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1))) (U_2_real (MapType1Select ZeroMask null (wand arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1)))))
 :qid |stdinbpl.1034:22|
 :skolemid |100|
 :pattern ( (MapType1Select QPMask@0 null (wand arg_0@@1 arg_1@@1 arg_2@@1 arg_3@@1 arg_4@@1 arg_5@@1 arg_6@@1 arg_7@@1 arg_8@@1 arg_9@@1)))
)) (state Heap@@10 QPMask@0)) (and (state Heap@@10 QPMask@0) (state Heap@@10 QPMask@0)))) (and (=> (= (ControlFlow 0 176) 5) anon114_Then_correct) (=> (= (ControlFlow 0 176) 175) anon114_Else_correct)))))))
(let ((anon113_Then_correct true))
(let ((anon4_correct true))
(let ((anon112_Then_correct  (=> (and (U_2_bool (MapType2Select xs x_2)) (and (U_2_bool (MapType2Select ys y_2)) (U_2_bool (MapType2Select zs z_2)))) (and (=> (= (ControlFlow 0 4) 3) anon113_Then_correct) (=> (= (ControlFlow 0 4) 1) anon4_correct)))))
(let ((anon112_Else_correct  (=> (and (not (and (U_2_bool (MapType2Select xs x_2)) (and (U_2_bool (MapType2Select ys y_2)) (U_2_bool (MapType2Select zs z_2))))) (= (ControlFlow 0 2) 1)) anon4_correct)))
(let ((anon0_correct  (=> (state Heap@@10 ZeroMask) (=> (and (U_2_bool (MapType0Select Heap@@10 a_2 $allocated)) (U_2_bool (MapType0Select Heap@@10 b_2 $allocated))) (=> (and (and (U_2_bool (MapType0Select Heap@@10 c $allocated)) (< NoPerm q_1)) (and (state Heap@@10 ZeroMask) (state Heap@@10 ZeroMask))) (and (and (=> (= (ControlFlow 0 178) 176) anon111_Else_correct) (=> (= (ControlFlow 0 178) 4) anon112_Then_correct)) (=> (= (ControlFlow 0 178) 2) anon112_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 179) 178) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 130) (- 131))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 128) (- 129))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 126) (- 125))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
