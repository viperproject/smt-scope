(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun data () T@U)
(declare-fun next () T@U)
(declare-fun head () T@U)
(declare-fun held () T@U)
(declare-fun changed () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun SeqType (T@T) T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun lengthNodes (T@U T@U T@U) Int)
(declare-fun |lengthNodes#triggerStateless| (T@U T@U) Int)
(declare-fun |lseg#trigger| (T@U T@U) Bool)
(declare-fun lseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |lengthNodes'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_lsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |contentNodes'| (T@U T@U T@U) T@U)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |contentNodes#triggerStateless| (T@U T@U) T@U)
(declare-fun |lseg#everUsed| (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Sub| (Int Int) Int)
(declare-fun |Seq#Add| (Int Int) Int)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun List (T@U) T@U)
(declare-fun PredicateType_ListType () T@T)
(declare-fun |content'| (T@U T@U) T@U)
(declare-fun |content#triggerStateless| (T@U) T@U)
(declare-fun |length'| (T@U T@U) Int)
(declare-fun |length#triggerStateless| (T@U) Int)
(declare-fun |peek'| (T@U T@U) Int)
(declare-fun |peek#triggerStateless| (T@U) Int)
(declare-fun |List#trigger| (T@U T@U) Bool)
(declare-fun |List#everUsed| (T@U) Bool)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun peek (T@U T@U) Int)
(declare-fun length (T@U T@U) Int)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |length#trigger| (T@U T@U) Bool)
(declare-fun content (T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Range| (Int Int) T@U)
(declare-fun |Seq#Skolem| (T@U T@U) Int)
(declare-fun contentNodes (T@U T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |lengthNodes#trigger| (T@U T@U T@U) Bool)
(declare-fun |contentNodes#trigger| (T@U T@U T@U) Bool)
(declare-fun |lseg#sm| (T@U T@U) T@U)
(declare-fun |List#sm| (T@U) T@U)
(declare-fun |contentNodes#frame| (T@U T@U T@U) T@U)
(declare-fun |lengthNodes#frame| (T@U T@U T@U) Int)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |peek#trigger| (T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#ContainsTrigger| (T@U T@U) Bool)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun |content#frame| (T@U T@U) T@U)
(declare-fun |length#frame| (T@U T@U) Int)
(declare-fun |peek#frame| (T@U T@U) Int)
(declare-fun |content#trigger| (T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun |Seq#SkolemDiff| (T@U T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type data) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))) (= (type head) (FieldType NormalFieldType RefType))) (= (type held) (FieldType NormalFieldType intType))) (= (type changed) (FieldType NormalFieldType boolType))))
(assert (distinct $allocated data next head held changed)
)
(assert  (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (SeqType arg0@@14)) 9)
 :qid |ctor:SeqType|
)) (forall ((arg0@@15 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@15)) arg0@@15)
 :qid |typeInv:SeqTypeInv0|
 :pattern ( (SeqType arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 Int) ) (! (let ((T (SeqTypeInv0 (type arg0@@16))))
(= (type (|Seq#Drop| arg0@@16 arg1@@2)) (SeqType T)))
 :qid |funType:Seq#Drop|
 :pattern ( (|Seq#Drop| arg0@@16 arg1@@2))
))))
(assert (forall ((s T@U) (n Int) ) (! (let ((T@@0 (SeqTypeInv0 (type s))))
 (=> (= (type s) (SeqType T@@0)) (and (=> (<= 0 n) (and (=> (<= n (|Seq#Length| s)) (= (|Seq#Length| (|Seq#Drop| s n)) (- (|Seq#Length| s) n))) (=> (< (|Seq#Length| s) n) (= (|Seq#Length| (|Seq#Drop| s n)) 0)))) (=> (< n 0) (= (|Seq#Length| (|Seq#Drop| s n)) (|Seq#Length| s))))))
 :qid |stdinbpl.278:18|
 :skolemid |38|
 :pattern ( (|Seq#Length| (|Seq#Drop| s n)))
 :pattern ( (|Seq#Length| s) (|Seq#Drop| s n))
)))
(assert  (and (and (and (and (and (forall ((arg0@@17 T@T) ) (! (= (Ctor (MapType0Type arg0@@17)) 10)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@18 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@18)) arg0@@18)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@18))
))) (forall ((arg0@@19 T@U) (arg1@@3 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@19 arg1@@3 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@19 arg1@@3 arg2))
))) (forall ((arg0@@20 T@U) (arg1@@4 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@4)))
(= (type (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@21 T@T) (arg1@@5 T@T) ) (! (= (Ctor (MapType1Type arg0@@21 arg1@@5)) 11)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@22 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@22 arg1@@6)) arg0@@22)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@22 arg1@@6))
))) (forall ((arg0@@23 T@T) (arg1@@7 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@23 arg1@@7)) arg1@@7)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@23 arg1@@7))
))) (forall ((arg0@@24 T@U) (arg1@@8 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@24))))
(= (type (MapType1Select arg0@@24 arg1@@8 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@24 arg1@@8 arg2@@1))
))) (forall ((arg0@@25 T@U) (arg1@@9 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@9)))
(= (type (MapType1Store arg0@@25 arg1@@9 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@25 arg1@@9 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_lsegType) 12)) (= (Ctor FrameTypeType) 13)) (forall ((arg0@@26 T@U) (arg1@@10 T@U) ) (! (= (type (lseg arg0@@26 arg1@@10)) (FieldType PredicateType_lsegType FrameTypeType))
 :qid |funType:lseg|
 :pattern ( (lseg arg0@@26 arg1@@10))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (end T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type end) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 3))) (= (lengthNodes Heap this end) (ite (= this end) 0 (+ 1 (|lengthNodes'| Heap (MapType0Select Heap this next) end)))))
 :qid |stdinbpl.967:15|
 :skolemid |77|
 :pattern ( (state Heap Mask) (lengthNodes Heap this end))
 :pattern ( (state Heap Mask) (|lengthNodes#triggerStateless| this end) (|lseg#trigger| Heap (lseg this end)))
)))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) ) (!  (=> (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (state Heap@@0 Mask@@0)) (GoodMask Mask@@0))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@0 Mask@@0))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((this@@0 T@U) (end@@0 T@U) ) (!  (=> (and (= (type this@@0) RefType) (= (type end@@0) RefType)) (IsPredicateField (lseg this@@0 end@@0)))
 :qid |stdinbpl.1775:15|
 :skolemid |108|
 :pattern ( (lseg this@@0 end@@0))
)))
(assert  (and (forall ((arg0@@27 T@U) (arg1@@11 T@U) (arg2@@3 T@U) ) (! (= (type (|contentNodes'| arg0@@27 arg1@@11 arg2@@3)) (SeqType intType))
 :qid |funType:contentNodes'|
 :pattern ( (|contentNodes'| arg0@@27 arg1@@11 arg2@@3))
)) (forall ((arg0@@28 T@U) (arg1@@12 T@U) ) (! (= (type (|contentNodes#triggerStateless| arg0@@28 arg1@@12)) (SeqType intType))
 :qid |funType:contentNodes#triggerStateless|
 :pattern ( (|contentNodes#triggerStateless| arg0@@28 arg1@@12))
))))
(assert (forall ((Heap@@1 T@U) (this@@1 T@U) (end@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type end@@1) RefType)) (dummyFunction (|contentNodes#triggerStateless| this@@1 end@@1)))
 :qid |stdinbpl.575:15|
 :skolemid |59|
 :pattern ( (|contentNodes'| Heap@@1 this@@1 end@@1))
)))
(assert (forall ((Heap@@2 T@U) (this@@2 T@U) (end@@2 T@U) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@2) RefType)) (= (type end@@2) RefType)) (dummyFunction (int_2_U (|lengthNodes#triggerStateless| this@@2 end@@2))))
 :qid |stdinbpl.961:15|
 :skolemid |76|
 :pattern ( (|lengthNodes'| Heap@@2 this@@2 end@@2))
)))
(assert (forall ((Heap@@3 T@U) (this@@3 T@U) (end@@3 T@U) ) (!  (=> (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type this@@3) RefType)) (= (type end@@3) RefType)) (|lseg#everUsed| (lseg this@@3 end@@3)))
 :qid |stdinbpl.1794:15|
 :skolemid |112|
 :pattern ( (|lseg#trigger| Heap@@3 (lseg this@@3 end@@3)))
)))
(assert (forall ((arg0@@29 T@U) (arg1@@13 Int) ) (! (let ((T@@1 (SeqTypeInv0 (type arg0@@29))))
(= (type (|Seq#Index| arg0@@29 arg1@@13)) T@@1))
 :qid |funType:Seq#Index|
 :pattern ( (|Seq#Index| arg0@@29 arg1@@13))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) (j Int) ) (! (let ((T@@2 (SeqTypeInv0 (type s@@0))))
 (=> (= (type s@@0) (SeqType T@@2)) (=> (and (and (< 0 n@@0) (<= 0 j)) (< j (- (|Seq#Length| s@@0) n@@0))) (and (= (|Seq#Sub| (|Seq#Add| j n@@0) n@@0) j) (= (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j) (|Seq#Index| s@@0 (|Seq#Add| j n@@0)))))))
 :qid |stdinbpl.299:18|
 :skolemid |39|
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@30 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@30))))
(= (type (PredicateMaskField arg0@@30)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@30))
))))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap T@U) (Mask@@1 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@4 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap Mask@@1) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@31 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@31))))
(= (type (WandMaskField arg0@@31)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@31))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@0 T@U) (Mask@@2 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@0 Mask@@2)) (and (HasDirectPerm Mask@@2 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@5 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@0 Mask@@2) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_ListType) 14) (forall ((arg0@@32 T@U) ) (! (= (type (List arg0@@32)) (FieldType PredicateType_ListType FrameTypeType))
 :qid |funType:List|
 :pattern ( (List arg0@@32))
))))
(assert (forall ((this@@4 T@U) ) (!  (=> (= (type this@@4) RefType) (IsPredicateField (List this@@4)))
 :qid |stdinbpl.2003:15|
 :skolemid |118|
 :pattern ( (List this@@4))
)))
(assert  (and (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|content'| arg0@@33 arg1@@14)) (SeqType intType))
 :qid |funType:content'|
 :pattern ( (|content'| arg0@@33 arg1@@14))
)) (forall ((arg0@@34 T@U) ) (! (= (type (|content#triggerStateless| arg0@@34)) (SeqType intType))
 :qid |funType:content#triggerStateless|
 :pattern ( (|content#triggerStateless| arg0@@34))
))))
(assert (forall ((Heap@@6 T@U) (this@@5 T@U) ) (!  (=> (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@5) RefType)) (dummyFunction (|content#triggerStateless| this@@5)))
 :qid |stdinbpl.1186:15|
 :skolemid |84|
 :pattern ( (|content'| Heap@@6 this@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@6 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@6) RefType)) (dummyFunction (int_2_U (|length#triggerStateless| this@@6))))
 :qid |stdinbpl.1348:15|
 :skolemid |92|
 :pattern ( (|length'| Heap@@7 this@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@7 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@7) RefType)) (dummyFunction (int_2_U (|peek#triggerStateless| this@@7))))
 :qid |stdinbpl.1500:15|
 :skolemid |98|
 :pattern ( (|peek'| Heap@@8 this@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@8 T@U) ) (!  (=> (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@8) RefType)) (|List#everUsed| (List this@@8)))
 :qid |stdinbpl.2022:15|
 :skolemid |122|
 :pattern ( (|List#trigger| Heap@@9 (List this@@8)))
)))
(assert (forall ((arg0@@35 T@U) (arg1@@15 Int) (arg2@@4 T@U) ) (! (let ((T@@3 (type arg2@@4)))
(= (type (|Seq#Update| arg0@@35 arg1@@15 arg2@@4)) (SeqType T@@3)))
 :qid |funType:Seq#Update|
 :pattern ( (|Seq#Update| arg0@@35 arg1@@15 arg2@@4))
)))
(assert (forall ((s@@1 T@U) (i Int) (v T@U) (n@@1 Int) ) (! (let ((T@@4 (type v)))
 (=> (= (type s@@1) (SeqType T@@4)) (=> (and (<= 0 n@@1) (< n@@1 (|Seq#Length| s@@1))) (and (=> (= i n@@1) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) v)) (=> (not (= i n@@1)) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) (|Seq#Index| s@@1 n@@1)))))))
 :qid |stdinbpl.254:18|
 :skolemid |35|
 :pattern ( (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1))
 :pattern ( (|Seq#Index| s@@1 n@@1) (|Seq#Update| s@@1 i v))
)))
(assert (forall ((Heap@@10 T@U) (Mask@@3 T@U) (this@@9 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type this@@9) RefType)) (and (state Heap@@10 Mask@@3) (< AssumeFunctionsAbove 0))) (< 0 (length Heap@@10 this@@9))) (= (peek Heap@@10 this@@9) (U_2_int (MapType0Select Heap@@10 (MapType0Select Heap@@10 this@@9 head) data))))
 :qid |stdinbpl.1506:15|
 :skolemid |99|
 :pattern ( (state Heap@@10 Mask@@3) (peek Heap@@10 this@@9))
 :pattern ( (state Heap@@10 Mask@@3) (|peek#triggerStateless| this@@9) (|List#trigger| Heap@@10 (List this@@9)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@16 Int) ) (! (let ((T@@5 (SeqTypeInv0 (type arg0@@36))))
(= (type (|Seq#Take| arg0@@36 arg1@@16)) (SeqType T@@5)))
 :qid |funType:Seq#Take|
 :pattern ( (|Seq#Take| arg0@@36 arg1@@16))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (! (let ((T@@6 (SeqTypeInv0 (type s@@2))))
 (=> (= (type s@@2) (SeqType T@@6)) (and (=> (<= 0 n@@2) (and (=> (<= n@@2 (|Seq#Length| s@@2)) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) n@@2)) (=> (< (|Seq#Length| s@@2) n@@2) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) (|Seq#Length| s@@2))))) (=> (< n@@2 0) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) 0)))))
 :qid |stdinbpl.265:18|
 :skolemid |36|
 :pattern ( (|Seq#Length| (|Seq#Take| s@@2 n@@2)))
 :pattern ( (|Seq#Take| s@@2 n@@2) (|Seq#Length| s@@2))
)))
(assert (forall ((arg0@@37 T@U) (arg1@@17 T@U) ) (! (= (type (content arg0@@37 arg1@@17)) (SeqType intType))
 :qid |funType:content|
 :pattern ( (content arg0@@37 arg1@@17))
)))
(assert (forall ((Heap@@11 T@U) (Mask@@4 T@U) (this@@10 T@U) ) (!  (=> (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type this@@10) RefType)) (and (state Heap@@11 Mask@@4) (or (< AssumeFunctionsAbove 1) (|length#trigger| (MapType0Select Heap@@11 null (List this@@10)) this@@10)))) (= (|length'| Heap@@11 this@@10) (|Seq#Length| (content Heap@@11 this@@10))))
 :qid |stdinbpl.1367:15|
 :skolemid |95|
 :pattern ( (state Heap@@11 Mask@@4) (|length'| Heap@@11 this@@10))
)))
(assert (forall ((arg0@@38 Int) (arg1@@18 Int) ) (! (= (type (|Seq#Range| arg0@@38 arg1@@18)) (SeqType intType))
 :qid |funType:Seq#Range|
 :pattern ( (|Seq#Range| arg0@@38 arg1@@18))
)))
(assert (forall ((q@min Int) (q@max Int) (v@@0 T@U) ) (!  (=> (= (type v@@0) intType) (= (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0)  (and (<= q@min (U_2_int v@@0)) (< (U_2_int v@@0) q@max))))
 :qid |stdinbpl.538:15|
 :skolemid |57|
 :pattern ( (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0))
)))
(assert (forall ((s@@3 T@U) (x@@8 T@U) ) (! (let ((T@@7 (type x@@8)))
 (=> (and (= (type s@@3) (SeqType T@@7)) (|Seq#Contains| s@@3 x@@8)) (and (and (<= 0 (|Seq#Skolem| s@@3 x@@8)) (< (|Seq#Skolem| s@@3 x@@8) (|Seq#Length| s@@3))) (= (|Seq#Index| s@@3 (|Seq#Skolem| s@@3 x@@8)) x@@8))))
 :qid |stdinbpl.396:18|
 :skolemid |47|
 :pattern ( (|Seq#Contains| s@@3 x@@8))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@1 T@U) (Mask@@5 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@1 Mask@@5)) (U_2_bool (MapType0Select Heap@@12 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@1 Mask@@5) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@13 T@U) (this@@11 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@11) RefType)) (and (= (content Heap@@13 this@@11) (|content'| Heap@@13 this@@11)) (dummyFunction (|content#triggerStateless| this@@11))))
 :qid |stdinbpl.1182:15|
 :skolemid |83|
 :pattern ( (content Heap@@13 this@@11))
)))
(assert (forall ((Heap@@14 T@U) (this@@12 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@12) RefType)) (and (= (length Heap@@14 this@@12) (|length'| Heap@@14 this@@12)) (dummyFunction (int_2_U (|length#triggerStateless| this@@12)))))
 :qid |stdinbpl.1344:15|
 :skolemid |91|
 :pattern ( (length Heap@@14 this@@12))
)))
(assert (forall ((Heap@@15 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@13) RefType)) (and (= (peek Heap@@15 this@@13) (|peek'| Heap@@15 this@@13)) (dummyFunction (int_2_U (|peek#triggerStateless| this@@13)))))
 :qid |stdinbpl.1496:15|
 :skolemid |97|
 :pattern ( (peek Heap@@15 this@@13))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (! (let ((T@@8 (SeqTypeInv0 (type s@@4))))
 (=> (and (= (type s@@4) (SeqType T@@8)) (<= n@@3 0)) (= (|Seq#Drop| s@@4 n@@3) s@@4)))
 :qid |stdinbpl.380:18|
 :skolemid |45|
 :pattern ( (|Seq#Drop| s@@4 n@@3))
)))
(assert (forall ((i@@0 Int) (j@@0 Int) ) (! (= (|Seq#Sub| i@@0 j@@0) (- i@@0 j@@0))
 :qid |stdinbpl.234:15|
 :skolemid |30|
 :pattern ( (|Seq#Sub| i@@0 j@@0))
)))
(assert (forall ((i@@1 Int) (j@@1 Int) ) (! (= (|Seq#Add| i@@1 j@@1) (+ i@@1 j@@1))
 :qid |stdinbpl.232:15|
 :skolemid |29|
 :pattern ( (|Seq#Add| i@@1 j@@1))
)))
(assert  (and (and (and (forall ((arg0@@39 T@U) (arg1@@19 T@U) (arg2@@5 T@U) ) (! (= (type (contentNodes arg0@@39 arg1@@19 arg2@@5)) (SeqType intType))
 :qid |funType:contentNodes|
 :pattern ( (contentNodes arg0@@39 arg1@@19 arg2@@5))
)) (forall ((T@@9 T@T) ) (! (= (type (|Seq#Empty| T@@9)) (SeqType T@@9))
 :qid |funType:Seq#Empty|
 :pattern ( (|Seq#Empty| T@@9))
))) (forall ((arg0@@40 T@U) (arg1@@20 T@U) ) (! (let ((T@@10 (SeqTypeInv0 (type arg0@@40))))
(= (type (|Seq#Append| arg0@@40 arg1@@20)) (SeqType T@@10)))
 :qid |funType:Seq#Append|
 :pattern ( (|Seq#Append| arg0@@40 arg1@@20))
))) (forall ((arg0@@41 T@U) ) (! (let ((T@@11 (type arg0@@41)))
(= (type (|Seq#Singleton| arg0@@41)) (SeqType T@@11)))
 :qid |funType:Seq#Singleton|
 :pattern ( (|Seq#Singleton| arg0@@41))
))))
(assert (forall ((Heap@@16 T@U) (Mask@@6 T@U) (this@@14 T@U) (end@@4 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@16) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@14) RefType)) (= (type end@@4) RefType)) (and (state Heap@@16 Mask@@6) (< AssumeFunctionsAbove 4))) (= (contentNodes Heap@@16 this@@14 end@@4) (ite (= this@@14 end@@4) (|Seq#Empty| intType) (|Seq#Append| (|Seq#Singleton| (MapType0Select Heap@@16 this@@14 data)) (|contentNodes'| Heap@@16 (MapType0Select Heap@@16 this@@14 next) end@@4)))))
 :qid |stdinbpl.581:15|
 :skolemid |60|
 :pattern ( (state Heap@@16 Mask@@6) (contentNodes Heap@@16 this@@14 end@@4))
 :pattern ( (state Heap@@16 Mask@@6) (|contentNodes#triggerStateless| this@@14 end@@4) (|lseg#trigger| Heap@@16 (lseg this@@14 end@@4)))
)))
(assert (forall ((x@@9 T@U) (y@@1 T@U) ) (! (let ((T@@12 (type x@@9)))
 (=> (= (type y@@1) T@@12) (= (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1) (= x@@9 y@@1))))
 :qid |stdinbpl.521:18|
 :skolemid |54|
 :pattern ( (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1))
)))
(assert (forall ((Heap@@17 T@U) (Mask@@7 T@U) (this@@15 T@U) (end@@5 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@17) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@15) RefType)) (= (type end@@5) RefType)) (and (state Heap@@17 Mask@@7) (or (< AssumeFunctionsAbove 3) (|lengthNodes#trigger| (MapType0Select Heap@@17 null (lseg this@@15 end@@5)) this@@15 end@@5)))) (= (|lengthNodes'| Heap@@17 this@@15 end@@5) (|Seq#Length| (contentNodes Heap@@17 this@@15 end@@5))))
 :qid |stdinbpl.980:15|
 :skolemid |79|
 :pattern ( (state Heap@@17 Mask@@7) (|lengthNodes'| Heap@@17 this@@15 end@@5))
)))
(assert (forall ((Heap@@18 T@U) (Mask@@8 T@U) (this@@16 T@U) (end@@6 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@18) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@16) RefType)) (= (type end@@6) RefType)) (and (state Heap@@18 Mask@@8) (or (< AssumeFunctionsAbove 4) (|contentNodes#trigger| (MapType0Select Heap@@18 null (lseg this@@16 end@@6)) this@@16 end@@6)))) (forall ((i@@2 Int) (j@@2 Int) ) (!  (=> (and (<= 0 i@@2) (and (< i@@2 j@@2) (< j@@2 (|Seq#Length| (|contentNodes'| Heap@@18 this@@16 end@@6))))) (<= (U_2_int (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) i@@2)) (U_2_int (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) j@@2))))
 :qid |stdinbpl.604:127|
 :skolemid |64|
 :pattern ( (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) i@@2) (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) j@@2))
)))
 :qid |stdinbpl.602:15|
 :skolemid |65|
 :pattern ( (state Heap@@18 Mask@@8) (|contentNodes'| Heap@@18 this@@16 end@@6))
)))
(assert (forall ((this@@17 T@U) (end@@7 T@U) (this2 T@U) (end2 T@U) ) (!  (=> (and (and (and (and (= (type this@@17) RefType) (= (type end@@7) RefType)) (= (type this2) RefType)) (= (type end2) RefType)) (= (lseg this@@17 end@@7) (lseg this2 end2))) (and (= this@@17 this2) (= end@@7 end2)))
 :qid |stdinbpl.1785:15|
 :skolemid |110|
 :pattern ( (lseg this@@17 end@@7) (lseg this2 end2))
)))
(assert (forall ((arg0@@42 T@U) (arg1@@21 T@U) ) (! (= (type (|lseg#sm| arg0@@42 arg1@@21)) (FieldType PredicateType_lsegType (MapType1Type RefType boolType)))
 :qid |funType:lseg#sm|
 :pattern ( (|lseg#sm| arg0@@42 arg1@@21))
)))
(assert (forall ((this@@18 T@U) (end@@8 T@U) (this2@@0 T@U) (end2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@18) RefType) (= (type end@@8) RefType)) (= (type this2@@0) RefType)) (= (type end2@@0) RefType)) (= (|lseg#sm| this@@18 end@@8) (|lseg#sm| this2@@0 end2@@0))) (and (= this@@18 this2@@0) (= end@@8 end2@@0)))
 :qid |stdinbpl.1789:15|
 :skolemid |111|
 :pattern ( (|lseg#sm| this@@18 end@@8) (|lseg#sm| this2@@0 end2@@0))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (j@@3 Int) ) (! (let ((T@@13 (SeqTypeInv0 (type s@@5))))
 (=> (= (type s@@5) (SeqType T@@13)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@4)) (< j@@3 (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@3) (|Seq#Index| s@@5 j@@3)))))
 :qid |stdinbpl.273:18|
 :skolemid |37|
 :pattern ( (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@3))
 :pattern ( (|Seq#Index| s@@5 j@@3) (|Seq#Take| s@@5 n@@4))
)))
(assert (forall ((this@@19 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@19) RefType) (= (type this2@@1) RefType)) (= (List this@@19) (List this2@@1))) (= this@@19 this2@@1))
 :qid |stdinbpl.2013:15|
 :skolemid |120|
 :pattern ( (List this@@19) (List this2@@1))
)))
(assert (forall ((arg0@@43 T@U) ) (! (= (type (|List#sm| arg0@@43)) (FieldType PredicateType_ListType (MapType1Type RefType boolType)))
 :qid |funType:List#sm|
 :pattern ( (|List#sm| arg0@@43))
)))
(assert (forall ((this@@20 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@20) RefType) (= (type this2@@2) RefType)) (= (|List#sm| this@@20) (|List#sm| this2@@2))) (= this@@20 this2@@2))
 :qid |stdinbpl.2017:15|
 :skolemid |121|
 :pattern ( (|List#sm| this@@20) (|List#sm| this2@@2))
)))
(assert (forall ((arg0@@44 T@U) (arg1@@22 T@U) (arg2@@6 T@U) ) (! (= (type (|contentNodes#frame| arg0@@44 arg1@@22 arg2@@6)) (SeqType intType))
 :qid |funType:contentNodes#frame|
 :pattern ( (|contentNodes#frame| arg0@@44 arg1@@22 arg2@@6))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@9 T@U) (this@@21 T@U) (end@@9 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type end@@9) RefType)) (state Heap@@19 Mask@@9)) (= (|contentNodes'| Heap@@19 this@@21 end@@9) (|contentNodes#frame| (MapType0Select Heap@@19 null (lseg this@@21 end@@9)) this@@21 end@@9)))
 :qid |stdinbpl.588:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@9) (|contentNodes'| Heap@@19 this@@21 end@@9))
 :pattern ( (state Heap@@19 Mask@@9) (|contentNodes#triggerStateless| this@@21 end@@9) (|lseg#trigger| Heap@@19 (lseg this@@21 end@@9)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@10 T@U) (this@@22 T@U) (end@@10 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type end@@10) RefType)) (state Heap@@20 Mask@@10)) (= (|lengthNodes'| Heap@@20 this@@22 end@@10) (|lengthNodes#frame| (MapType0Select Heap@@20 null (lseg this@@22 end@@10)) this@@22 end@@10)))
 :qid |stdinbpl.974:15|
 :skolemid |78|
 :pattern ( (state Heap@@20 Mask@@10) (|lengthNodes'| Heap@@20 this@@22 end@@10))
 :pattern ( (state Heap@@20 Mask@@10) (|lengthNodes#triggerStateless| this@@22 end@@10) (|lseg#trigger| Heap@@20 (lseg this@@22 end@@10)))
)))
(assert (forall ((Heap@@21 T@U) (ExhaleHeap@@2 T@U) (Mask@@11 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@2 Mask@@11)) (HasDirectPerm Mask@@11 o_1@@0 f_2)) (= (MapType0Select Heap@@21 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@2 Mask@@11) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((T@@14 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@14)) 0)
 :skolemid |23|
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.177:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((s0 T@U) (s1 T@U) (n@@5 Int) ) (! (let ((T@@15 (SeqTypeInv0 (type s0))))
 (=> (and (= (type s0) (SeqType T@@15)) (= (type s1) (SeqType T@@15))) (=> (and (and (and (not (= s0 (|Seq#Empty| T@@15))) (not (= s1 (|Seq#Empty| T@@15)))) (<= (|Seq#Length| s0) n@@5)) (< n@@5 (|Seq#Length| (|Seq#Append| s0 s1)))) (and (= (|Seq#Add| (|Seq#Sub| n@@5 (|Seq#Length| s0)) (|Seq#Length| s0)) n@@5) (= (|Seq#Index| (|Seq#Append| s0 s1) n@@5) (|Seq#Index| s1 (|Seq#Sub| n@@5 (|Seq#Length| s0))))))))
 :qid |stdinbpl.245:18|
 :skolemid |32|
 :pattern ( (|Seq#Index| (|Seq#Append| s0 s1) n@@5))
)))
(assert  (not (IsPredicateField data)))
(assert  (not (IsWandField data)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert  (not (IsPredicateField head)))
(assert  (not (IsWandField head)))
(assert  (not (IsPredicateField held)))
(assert  (not (IsWandField held)))
(assert  (not (IsPredicateField changed)))
(assert  (not (IsWandField changed)))
(assert (forall ((Heap@@22 T@U) (ExhaleHeap@@3 T@U) (Mask@@12 T@U) ) (!  (=> (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@12) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@22 ExhaleHeap@@3 Mask@@12)) (succHeap Heap@@22 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@22 ExhaleHeap@@3 Mask@@12))
)))
(assert (forall ((Heap@@23 T@U) (Mask@@13 T@U) (this@@23 T@U) (end@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type this@@23) RefType)) (= (type end@@11) RefType)) (and (state Heap@@23 Mask@@13) (or (< AssumeFunctionsAbove 4) (|contentNodes#trigger| (MapType0Select Heap@@23 null (lseg this@@23 end@@11)) this@@23 end@@11)))) (not (= this@@23 end@@11))) (and (< 0 (|Seq#Length| (|contentNodes'| Heap@@23 this@@23 end@@11))) (= (U_2_int (|Seq#Index| (|contentNodes'| Heap@@23 this@@23 end@@11) 0)) (U_2_int (MapType0Select Heap@@23 this@@23 data)))))
 :qid |stdinbpl.598:15|
 :skolemid |63|
 :pattern ( (state Heap@@23 Mask@@13) (|contentNodes'| Heap@@23 this@@23 end@@11))
)))
(assert (forall ((Heap@@24 T@U) (Mask@@14 T@U) (this@@24 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@24) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@24) RefType)) (and (state Heap@@24 Mask@@14) (or (< AssumeFunctionsAbove 0) (|peek#trigger| (MapType0Select Heap@@24 null (List this@@24)) this@@24)))) (< 0 (length Heap@@24 this@@24))) (= (|peek'| Heap@@24 this@@24) (U_2_int (|Seq#Index| (content Heap@@24 this@@24) 0))))
 :qid |stdinbpl.1519:15|
 :skolemid |101|
 :pattern ( (state Heap@@24 Mask@@14) (|peek'| Heap@@24 this@@24))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@45 Real) (arg1@@23 T@U) ) (! (= (type (ConditionalFrame arg0@@45 arg1@@23)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@45 arg1@@23))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.165:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((q@min@@0 Int) (q@max@@0 Int) (j@@4 Int) ) (!  (=> (and (<= 0 j@@4) (< j@@4 (- q@max@@0 q@min@@0))) (= (U_2_int (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@4)) (+ q@min@@0 j@@4)))
 :qid |stdinbpl.536:15|
 :skolemid |56|
 :pattern ( (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@4))
)))
(assert (forall ((Mask@@15 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@15) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@15 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@15 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@15 o_2@@0 f_4@@0))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (let ((T@@16 (SeqTypeInv0 (type s0@@0))))
 (=> (and (and (= (type s0@@0) (SeqType T@@16)) (= (type s1@@0) (SeqType T@@16))) (and (not (= s0@@0 (|Seq#Empty| T@@16))) (not (= s1@@0 (|Seq#Empty| T@@16))))) (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))))
 :qid |stdinbpl.214:18|
 :skolemid |26|
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((s@@6 T@U) (t T@U) (n@@6 Int) ) (! (let ((T@@17 (SeqTypeInv0 (type s@@6))))
 (=> (and (and (= (type s@@6) (SeqType T@@17)) (= (type t) (SeqType T@@17))) (and (> n@@6 0) (> n@@6 (|Seq#Length| s@@6)))) (and (= (|Seq#Add| (|Seq#Sub| n@@6 (|Seq#Length| s@@6)) (|Seq#Length| s@@6)) n@@6) (= (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6) (|Seq#Drop| t (|Seq#Sub| n@@6 (|Seq#Length| s@@6)))))))
 :qid |stdinbpl.370:18|
 :skolemid |44|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6))
)))
(assert (forall ((Heap@@25 T@U) (this@@25 T@U) (end@@12 T@U) ) (!  (=> (and (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@25) RefType)) (= (type end@@12) RefType)) (and (= (contentNodes Heap@@25 this@@25 end@@12) (|contentNodes'| Heap@@25 this@@25 end@@12)) (dummyFunction (|contentNodes#triggerStateless| this@@25 end@@12))))
 :qid |stdinbpl.571:15|
 :skolemid |58|
 :pattern ( (contentNodes Heap@@25 this@@25 end@@12))
)))
(assert (forall ((Heap@@26 T@U) (this@@26 T@U) (end@@13 T@U) ) (!  (=> (and (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@26) RefType)) (= (type end@@13) RefType)) (and (= (lengthNodes Heap@@26 this@@26 end@@13) (|lengthNodes'| Heap@@26 this@@26 end@@13)) (dummyFunction (int_2_U (|lengthNodes#triggerStateless| this@@26 end@@13)))))
 :qid |stdinbpl.957:15|
 :skolemid |75|
 :pattern ( (lengthNodes Heap@@26 this@@26 end@@13))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((s@@7 T@U) (t@@0 T@U) (n@@7 Int) ) (! (let ((T@@18 (SeqTypeInv0 (type s@@7))))
 (=> (and (and (= (type s@@7) (SeqType T@@18)) (= (type t@@0) (SeqType T@@18))) (and (> n@@7 0) (> n@@7 (|Seq#Length| s@@7)))) (and (= (|Seq#Add| (|Seq#Sub| n@@7 (|Seq#Length| s@@7)) (|Seq#Length| s@@7)) n@@7) (= (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7) (|Seq#Append| s@@7 (|Seq#Take| t@@0 (|Seq#Sub| n@@7 (|Seq#Length| s@@7))))))))
 :qid |stdinbpl.357:18|
 :skolemid |42|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7))
)))
(assert (forall ((q@min@@1 Int) (q@max@@1 Int) ) (!  (and (=> (< q@min@@1 q@max@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) (- q@max@@1 q@min@@1))) (=> (<= q@max@@1 q@min@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) 0)))
 :qid |stdinbpl.535:15|
 :skolemid |55|
 :pattern ( (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (let ((T@@19 (SeqTypeInv0 (type a))))
 (=> (and (and (= (type a) (SeqType T@@19)) (= (type b) (SeqType T@@19))) (|Seq#Equal| a b)) (= a b)))
 :qid |stdinbpl.508:18|
 :skolemid |53|
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@8 T@U) (i@@3 Int) ) (! (let ((T@@20 (SeqTypeInv0 (type s@@8))))
 (=> (= (type s@@8) (SeqType T@@20)) (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@8))) (|Seq#ContainsTrigger| s@@8 (|Seq#Index| s@@8 i@@3)))))
 :qid |stdinbpl.401:18|
 :skolemid |49|
 :pattern ( (|Seq#Index| s@@8 i@@3))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) ) (! (let ((T@@21 (SeqTypeInv0 (type s0@@1))))
 (=> (and (= (type s0@@1) (SeqType T@@21)) (= (type s1@@1) (SeqType T@@21))) (and (=> (= s0@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s1@@1)) (=> (= s1@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s0@@1)))))
 :qid |stdinbpl.220:18|
 :skolemid |27|
 :pattern ( (|Seq#Append| s0@@1 s1@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@1) 0) t@@1)
 :qid |stdinbpl.224:18|
 :skolemid |28|
 :pattern ( (|Seq#Singleton| t@@1))
)))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@22 (SeqTypeInv0 (type s@@9))))
 (=> (= (type s@@9) (SeqType T@@22)) (<= 0 (|Seq#Length| s@@9))))
 :qid |stdinbpl.203:18|
 :skolemid |22|
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((this@@27 T@U) (end@@14 T@U) ) (!  (=> (and (= (type this@@27) RefType) (= (type end@@14) RefType)) (= (getPredWandId (lseg this@@27 end@@14)) 0))
 :qid |stdinbpl.1779:15|
 :skolemid |109|
 :pattern ( (lseg this@@27 end@@14))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@23 (SeqTypeInv0 (type s0@@2))))
 (=> (and (and (= (type s0@@2) (SeqType T@@23)) (= (type s1@@2) (SeqType T@@23))) (|Seq#Equal| s0@@2 s1@@2)) (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j@@5 Int) ) (!  (=> (and (<= 0 j@@5) (< j@@5 (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j@@5) (|Seq#Index| s1@@2 j@@5)))
 :qid |stdinbpl.498:13|
 :skolemid |50|
 :pattern ( (|Seq#Index| s0@@2 j@@5))
 :pattern ( (|Seq#Index| s1@@2 j@@5))
)))))
 :qid |stdinbpl.495:18|
 :skolemid |51|
 :pattern ( (|Seq#Equal| s0@@2 s1@@2))
)))
(assert (forall ((Heap@@27 T@U) (ExhaleHeap@@4 T@U) (Mask@@16 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@27) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@27 ExhaleHeap@@4 Mask@@16)) (and (HasDirectPerm Mask@@16 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@27 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@27 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@27 ExhaleHeap@@4 Mask@@16) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@28 T@U) (ExhaleHeap@@5 T@U) (Mask@@17 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@17) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@28 ExhaleHeap@@5 Mask@@17)) (and (HasDirectPerm Mask@@17 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@28 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@28 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@28 ExhaleHeap@@5 Mask@@17) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@28 T@U) ) (!  (=> (= (type this@@28) RefType) (= (getPredWandId (List this@@28)) 1))
 :qid |stdinbpl.2007:15|
 :skolemid |119|
 :pattern ( (List this@@28))
)))
(assert (forall ((t@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@2)) 1)
 :qid |stdinbpl.211:18|
 :skolemid |25|
 :pattern ( (|Seq#Singleton| t@@2))
)))
(assert (forall ((Mask@@18 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@18) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@18)) (and (>= (U_2_real (MapType1Select Mask@@18 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@18) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@18 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@18) (MapType1Select Mask@@18 o_2@@2 f_4@@2))
)))
(assert (forall ((arg0@@46 T@U) (arg1@@24 T@U) ) (! (= (type (|content#frame| arg0@@46 arg1@@24)) (SeqType intType))
 :qid |funType:content#frame|
 :pattern ( (|content#frame| arg0@@46 arg1@@24))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@19 T@U) (this@@29 T@U) ) (!  (=> (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@29) RefType)) (state Heap@@29 Mask@@19)) (= (|content'| Heap@@29 this@@29) (|content#frame| (MapType0Select Heap@@29 null (List this@@29)) this@@29)))
 :qid |stdinbpl.1199:15|
 :skolemid |86|
 :pattern ( (state Heap@@29 Mask@@19) (|content'| Heap@@29 this@@29))
 :pattern ( (state Heap@@29 Mask@@19) (|content#triggerStateless| this@@29) (|List#trigger| Heap@@29 (List this@@29)))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@20 T@U) (this@@30 T@U) ) (!  (=> (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@30) RefType)) (state Heap@@30 Mask@@20)) (= (|length'| Heap@@30 this@@30) (|length#frame| (MapType0Select Heap@@30 null (List this@@30)) this@@30)))
 :qid |stdinbpl.1361:15|
 :skolemid |94|
 :pattern ( (state Heap@@30 Mask@@20) (|length'| Heap@@30 this@@30))
 :pattern ( (state Heap@@30 Mask@@20) (|length#triggerStateless| this@@30) (|List#trigger| Heap@@30 (List this@@30)))
)))
(assert (forall ((Heap@@31 T@U) (Mask@@21 T@U) (this@@31 T@U) ) (!  (=> (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@31) RefType)) (state Heap@@31 Mask@@21)) (= (|peek'| Heap@@31 this@@31) (|peek#frame| (MapType0Select Heap@@31 null (List this@@31)) this@@31)))
 :qid |stdinbpl.1513:15|
 :skolemid |100|
 :pattern ( (state Heap@@31 Mask@@21) (|peek'| Heap@@31 this@@31))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@32 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@32) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@32 o $allocated))) (U_2_bool (MapType0Select Heap@@32 (MapType0Select Heap@@32 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@32 o f))
)))
(assert (forall ((this@@32 T@U) (end@@15 T@U) ) (!  (=> (and (= (type this@@32) RefType) (= (type end@@15) RefType)) (= (PredicateMaskField (lseg this@@32 end@@15)) (|lseg#sm| this@@32 end@@15)))
 :qid |stdinbpl.1771:15|
 :skolemid |107|
 :pattern ( (PredicateMaskField (lseg this@@32 end@@15)))
)))
(assert (forall ((s@@10 T@U) (t@@3 T@U) (n@@8 Int) ) (! (let ((T@@24 (SeqTypeInv0 (type s@@10))))
 (=> (and (and (= (type s@@10) (SeqType T@@24)) (= (type t@@3) (SeqType T@@24))) (and (< 0 n@@8) (<= n@@8 (|Seq#Length| s@@10)))) (= (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8) (|Seq#Take| s@@10 n@@8))))
 :qid |stdinbpl.353:18|
 :skolemid |41|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8))
)))
(assert (forall ((s@@11 T@U) (i@@4 Int) (v@@1 T@U) ) (! (let ((T@@25 (type v@@1)))
 (=> (= (type s@@11) (SeqType T@@25)) (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Update| s@@11 i@@4 v@@1)) (|Seq#Length| s@@11)))))
 :qid |stdinbpl.252:18|
 :skolemid |34|
 :pattern ( (|Seq#Length| (|Seq#Update| s@@11 i@@4 v@@1)))
 :pattern ( (|Seq#Length| s@@11) (|Seq#Update| s@@11 i@@4 v@@1))
)))
(assert (forall ((this@@33 T@U) ) (!  (=> (= (type this@@33) RefType) (= (PredicateMaskField (List this@@33)) (|List#sm| this@@33)))
 :qid |stdinbpl.1999:15|
 :skolemid |117|
 :pattern ( (PredicateMaskField (List this@@33)))
)))
(assert (forall ((s@@12 T@U) (t@@4 T@U) (n@@9 Int) ) (! (let ((T@@26 (SeqTypeInv0 (type s@@12))))
 (=> (and (and (= (type s@@12) (SeqType T@@26)) (= (type t@@4) (SeqType T@@26))) (and (< 0 n@@9) (<= n@@9 (|Seq#Length| s@@12)))) (= (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9) (|Seq#Append| (|Seq#Drop| s@@12 n@@9) t@@4))))
 :qid |stdinbpl.366:18|
 :skolemid |43|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9))
)))
(assert (forall ((s@@13 T@U) (n@@10 Int) (i@@5 Int) ) (! (let ((T@@27 (SeqTypeInv0 (type s@@13))))
 (=> (= (type s@@13) (SeqType T@@27)) (=> (and (and (< 0 n@@10) (<= n@@10 i@@5)) (< i@@5 (|Seq#Length| s@@13))) (and (= (|Seq#Add| (|Seq#Sub| i@@5 n@@10) n@@10) i@@5) (= (|Seq#Index| (|Seq#Drop| s@@13 n@@10) (|Seq#Sub| i@@5 n@@10)) (|Seq#Index| s@@13 i@@5))))))
 :qid |stdinbpl.303:18|
 :skolemid |40|
 :pattern ( (|Seq#Drop| s@@13 n@@10) (|Seq#Index| s@@13 i@@5))
)))
(assert (forall ((Heap@@33 T@U) (Mask@@22 T@U) (this@@34 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (and (state Heap@@33 Mask@@22) (or (< AssumeFunctionsAbove 2) (|content#trigger| (MapType0Select Heap@@33 null (List this@@34)) this@@34)))) (forall ((i@@6 Int) (j@@6 Int) ) (!  (=> (and (<= 0 i@@6) (and (< i@@6 j@@6) (< j@@6 (|Seq#Length| (|content'| Heap@@33 this@@34))))) (<= (U_2_int (|Seq#Index| (|content'| Heap@@33 this@@34) i@@6)) (U_2_int (|Seq#Index| (|content'| Heap@@33 this@@34) j@@6))))
 :qid |stdinbpl.1207:112|
 :skolemid |87|
 :pattern ( (|Seq#Index| (|content'| Heap@@33 this@@34) i@@6) (|Seq#Index| (|content'| Heap@@33 this@@34) j@@6))
)))
 :qid |stdinbpl.1205:15|
 :skolemid |88|
 :pattern ( (state Heap@@33 Mask@@22) (|content'| Heap@@33 this@@34))
)))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@11 Int) ) (! (let ((T@@28 (SeqTypeInv0 (type s0@@3))))
 (=> (and (= (type s0@@3) (SeqType T@@28)) (= (type s1@@3) (SeqType T@@28))) (=> (and (and (and (not (= s0@@3 (|Seq#Empty| T@@28))) (not (= s1@@3 (|Seq#Empty| T@@28)))) (<= 0 n@@11)) (< n@@11 (|Seq#Length| s0@@3))) (= (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11) (|Seq#Index| s0@@3 n@@11)))))
 :qid |stdinbpl.243:18|
 :skolemid |31|
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11))
 :pattern ( (|Seq#Index| s0@@3 n@@11) (|Seq#Append| s0@@3 s1@@3))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@23 T@U) (this@@35 T@U) (end@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type end@@16) RefType)) (and (state Heap@@34 Mask@@23) (or (< AssumeFunctionsAbove 4) (|contentNodes#trigger| (MapType0Select Heap@@34 null (lseg this@@35 end@@16)) this@@35 end@@16)))) (= this@@35 end@@16)) (|Seq#Equal| (|contentNodes'| Heap@@34 this@@35 end@@16) (|Seq#Empty| intType)))
 :qid |stdinbpl.594:15|
 :skolemid |62|
 :pattern ( (state Heap@@34 Mask@@23) (|contentNodes'| Heap@@34 this@@35 end@@16))
)))
(assert (forall ((Heap@@35 T@U) (o@@0 T@U) (f_3 T@U) (v@@2 T@U) ) (! (let ((B@@8 (type v@@2)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@35 (MapType0Store Heap@@35 o@@0 f_3 v@@2)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@35 o@@0 f_3 v@@2))
)))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (m@@7 Int) ) (! (let ((T@@29 (SeqTypeInv0 (type s0@@4))))
 (=> (and (= (type s0@@4) (SeqType T@@29)) (= (type s1@@4) (SeqType T@@29))) (=> (and (and (and (not (= s0@@4 (|Seq#Empty| T@@29))) (not (= s1@@4 (|Seq#Empty| T@@29)))) (<= 0 m@@7)) (< m@@7 (|Seq#Length| s1@@4))) (and (= (|Seq#Sub| (|Seq#Add| m@@7 (|Seq#Length| s0@@4)) (|Seq#Length| s0@@4)) m@@7) (= (|Seq#Index| (|Seq#Append| s0@@4 s1@@4) (|Seq#Add| m@@7 (|Seq#Length| s0@@4))) (|Seq#Index| s1@@4 m@@7))))))
 :qid |stdinbpl.248:18|
 :skolemid |33|
 :pattern ( (|Seq#Index| s1@@4 m@@7) (|Seq#Append| s0@@4 s1@@4))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((s@@14 T@U) (x@@10 T@U) (i@@7 Int) ) (! (let ((T@@30 (type x@@10)))
 (=> (= (type s@@14) (SeqType T@@30)) (=> (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@7) x@@10)) (|Seq#Contains| s@@14 x@@10))))
 :qid |stdinbpl.399:18|
 :skolemid |48|
 :pattern ( (|Seq#Contains| s@@14 x@@10) (|Seq#Index| s@@14 i@@7))
)))
(assert (forall ((s0@@5 T@U) (s1@@5 T@U) ) (! (let ((T@@31 (SeqTypeInv0 (type s0@@5))))
 (=> (and (= (type s0@@5) (SeqType T@@31)) (= (type s1@@5) (SeqType T@@31))) (or (or (and (= s0@@5 s1@@5) (|Seq#Equal| s0@@5 s1@@5)) (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (not (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))))) (and (and (and (and (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))) (= (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#SkolemDiff| s1@@5 s0@@5))) (<= 0 (|Seq#SkolemDiff| s0@@5 s1@@5))) (< (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#Length| s0@@5))) (not (= (|Seq#Index| s0@@5 (|Seq#SkolemDiff| s0@@5 s1@@5)) (|Seq#Index| s1@@5 (|Seq#SkolemDiff| s0@@5 s1@@5))))))))
 :qid |stdinbpl.503:18|
 :skolemid |52|
 :pattern ( (|Seq#Equal| s0@@5 s1@@5))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.172:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((Heap@@36 T@U) (Mask@@24 T@U) (this@@36 T@U) ) (!  (=> (and (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type Mask@@24) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (and (state Heap@@36 Mask@@24) (< AssumeFunctionsAbove 1))) (= (length Heap@@36 this@@36) (lengthNodes Heap@@36 (MapType0Select Heap@@36 this@@36 head) null)))
 :qid |stdinbpl.1354:15|
 :skolemid |93|
 :pattern ( (state Heap@@36 Mask@@24) (length Heap@@36 this@@36))
 :pattern ( (state Heap@@36 Mask@@24) (|length#triggerStateless| this@@36) (|List#trigger| Heap@@36 (List this@@36)))
)))
(assert (forall ((Heap@@37 T@U) (Mask@@25 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@37 Mask@@25) (< AssumeFunctionsAbove 2))) (= (content Heap@@37 this@@37) (contentNodes Heap@@37 (MapType0Select Heap@@37 this@@37 head) null)))
 :qid |stdinbpl.1192:15|
 :skolemid |85|
 :pattern ( (state Heap@@37 Mask@@25) (content Heap@@37 this@@37))
 :pattern ( (state Heap@@37 Mask@@25) (|content#triggerStateless| this@@37) (|List#trigger| Heap@@37 (List this@@37)))
)))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@32 (SeqTypeInv0 (type s@@15))))
 (=> (and (= (type s@@15) (SeqType T@@32)) (= (|Seq#Length| s@@15) 0)) (= s@@15 (|Seq#Empty| T@@32))))
 :qid |stdinbpl.207:18|
 :skolemid |24|
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((s@@16 T@U) (n@@12 Int) ) (! (let ((T@@33 (SeqTypeInv0 (type s@@16))))
 (=> (and (= (type s@@16) (SeqType T@@33)) (<= n@@12 0)) (= (|Seq#Take| s@@16 n@@12) (|Seq#Empty| T@@33))))
 :qid |stdinbpl.382:18|
 :skolemid |46|
 :pattern ( (|Seq#Take| s@@16 n@@12))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@0 () T@U)
(declare-fun this@@38 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun index () Int)
(declare-fun Heap@@38 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun ptr@1 () T@U)
(declare-fun index@1 () Int)
(declare-fun i_6 () Int)
(declare-fun i_4 () Int)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun elem () Int)
(declare-fun Mask@28 () T@U)
(declare-fun i_12 () Int)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun ptrn@0 () T@U)
(declare-fun index@2 () Int)
(declare-fun i_10 () Int)
(declare-fun Mask@88 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun Mask@86 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@83 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun perm@3 () Real)
(declare-fun Mask@82 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun arg_this@0 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun Mask@78 () T@U)
(declare-fun perm@2 () Real)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun newPMask@21 () T@U)
(declare-fun Heap@82 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun freshVersion@4 () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun Heap@72 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun newPMask@20 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun UnfoldingHeap@39 () T@U)
(declare-fun UnfoldingMask@39 () T@U)
(declare-fun UnfoldingHeap@38 () T@U)
(declare-fun UnfoldingMask@38 () T@U)
(declare-fun UnfoldingHeap@35 () T@U)
(declare-fun UnfoldingHeap@36 () T@U)
(declare-fun newPMask@19 () T@U)
(declare-fun UnfoldingHeap@37 () T@U)
(declare-fun UnfoldingMask@36 () T@U)
(declare-fun UnfoldingMask@35 () T@U)
(declare-fun UnfoldingMask@37 () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun Mask@73 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun freshVersion@3 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun UnfoldingHeap@34 () T@U)
(declare-fun UnfoldingMask@34 () T@U)
(declare-fun UnfoldingHeap@33 () T@U)
(declare-fun UnfoldingMask@33 () T@U)
(declare-fun UnfoldingHeap@30 () T@U)
(declare-fun UnfoldingHeap@31 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun UnfoldingHeap@32 () T@U)
(declare-fun UnfoldingMask@31 () T@U)
(declare-fun UnfoldingMask@30 () T@U)
(declare-fun UnfoldingMask@32 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun Mask@67 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun UnfoldingHeap@29 () T@U)
(declare-fun UnfoldingMask@29 () T@U)
(declare-fun UnfoldingHeap@28 () T@U)
(declare-fun UnfoldingMask@28 () T@U)
(declare-fun UnfoldingHeap@25 () T@U)
(declare-fun UnfoldingHeap@26 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun UnfoldingHeap@27 () T@U)
(declare-fun UnfoldingMask@26 () T@U)
(declare-fun UnfoldingMask@25 () T@U)
(declare-fun UnfoldingMask@27 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun ptrn () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun UnfoldingHeap@24 () T@U)
(declare-fun UnfoldingMask@24 () T@U)
(declare-fun UnfoldingHeap@23 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun UnfoldingHeap@20 () T@U)
(declare-fun UnfoldingHeap@21 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun UnfoldingHeap@22 () T@U)
(declare-fun Unfolding1Heap@4 () T@U)
(declare-fun Unfolding1Mask@4 () T@U)
(declare-fun Unfolding1Heap@3 () T@U)
(declare-fun Unfolding1Mask@3 () T@U)
(declare-fun Unfolding1Heap@0 () T@U)
(declare-fun Unfolding1Heap@1 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Unfolding1Heap@2 () T@U)
(declare-fun Unfolding1Mask@1 () T@U)
(declare-fun Unfolding1Mask@0 () T@U)
(declare-fun Unfolding1Mask@2 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@110 () T@U)
(declare-fun Mask@109 () T@U)
(declare-fun index@3 () Int)
(declare-fun Heap@112 () T@U)
(declare-fun Heap@111 () T@U)
(declare-fun Heap@110 () T@U)
(declare-fun newPMask@28 () T@U)
(declare-fun Heap@107 () T@U)
(declare-fun Heap@108 () T@U)
(declare-fun Heap@109 () T@U)
(declare-fun freshVersion@7 () T@U)
(declare-fun Mask@108 () T@U)
(declare-fun Mask@107 () T@U)
(declare-fun Mask@106 () T@U)
(declare-fun Heap@105 () T@U)
(declare-fun Mask@105 () T@U)
(declare-fun Heap@106 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@101 () T@U)
(declare-fun Heap@102 () T@U)
(declare-fun Heap@103 () T@U)
(declare-fun newPMask@27 () T@U)
(declare-fun Heap@104 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun Heap@99 () T@U)
(declare-fun Heap@100 () T@U)
(declare-fun freshVersion@6 () T@U)
(declare-fun Mask@104 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun newPMask@26 () T@U)
(declare-fun Heap@97 () T@U)
(declare-fun Mask@103 () T@U)
(declare-fun UnfoldingHeap@49 () T@U)
(declare-fun UnfoldingMask@49 () T@U)
(declare-fun UnfoldingHeap@48 () T@U)
(declare-fun UnfoldingMask@48 () T@U)
(declare-fun UnfoldingHeap@45 () T@U)
(declare-fun UnfoldingHeap@46 () T@U)
(declare-fun newPMask@25 () T@U)
(declare-fun UnfoldingHeap@47 () T@U)
(declare-fun UnfoldingMask@46 () T@U)
(declare-fun UnfoldingMask@45 () T@U)
(declare-fun UnfoldingMask@47 () T@U)
(declare-fun Mask@100 () T@U)
(declare-fun Mask@102 () T@U)
(declare-fun Mask@101 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun newPMask@24 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun freshVersion@5 () T@U)
(declare-fun Mask@99 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun newPMask@23 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun Mask@98 () T@U)
(declare-fun UnfoldingHeap@44 () T@U)
(declare-fun UnfoldingMask@44 () T@U)
(declare-fun UnfoldingHeap@43 () T@U)
(declare-fun UnfoldingMask@43 () T@U)
(declare-fun UnfoldingHeap@40 () T@U)
(declare-fun UnfoldingHeap@41 () T@U)
(declare-fun newPMask@22 () T@U)
(declare-fun UnfoldingHeap@42 () T@U)
(declare-fun UnfoldingMask@41 () T@U)
(declare-fun UnfoldingMask@40 () T@U)
(declare-fun UnfoldingMask@42 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@97 () T@U)
(declare-fun Mask@96 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun perm@1 () Real)
(declare-fun Mask@60 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun Mask@58 () T@U)
(declare-fun arg_this_1@0 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun perm@0 () Real)
(declare-fun Mask@55 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun Mask@53 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun UnfoldingHeap@19 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun UnfoldingHeap@18 () T@U)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun UnfoldingHeap@15 () T@U)
(declare-fun UnfoldingHeap@16 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun UnfoldingHeap@17 () T@U)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun UnfoldingHeap@14 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun UnfoldingHeap@13 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun UnfoldingHeap@10 () T@U)
(declare-fun UnfoldingHeap@11 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun UnfoldingHeap@12 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun freshObj@1 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun ptr@0 () T@U)
(declare-fun index@0 () Int)
(declare-fun i_2 () Int)
(declare-fun i@@8 () Int)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun UnfoldingHeap@9 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun UnfoldingHeap@8 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun UnfoldingHeap@5 () T@U)
(declare-fun UnfoldingHeap@6 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun UnfoldingHeap@7 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun ptr () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun UnfoldingHeap@4 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingHeap@3 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingHeap@0 () T@U)
(declare-fun UnfoldingHeap@1 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun UnfoldingHeap@2 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun tmp () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Heap@23) (MapType0Type RefType)) (= (type this@@38) RefType)) (= (type ptr@0) RefType)) (= (type Mask@110) (MapType1Type RefType realType))) (= (type Mask@109) (MapType1Type RefType realType))) (= (type Heap@@38) (MapType0Type RefType))) (= (type Heap@112) (MapType0Type RefType))) (= (type Heap@111) (MapType0Type RefType))) (= (type Heap@110) (MapType0Type RefType))) (= (type newPMask@28) (MapType1Type RefType boolType))) (= (type Heap@108) (MapType0Type RefType))) (= (type Heap@107) (MapType0Type RefType))) (= (type Heap@109) (MapType0Type RefType))) (= (type freshVersion@7) FrameTypeType)) (= (type Mask@108) (MapType1Type RefType realType))) (= (type Mask@107) (MapType1Type RefType realType))) (forall ((arg0@@47 T@U) (arg1@@25 T@U) ) (! (= (type (CombineFrames arg0@@47 arg1@@25)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@47 arg1@@25))
))) (forall ((arg0@@48 T@U) ) (! (= (type (FrameFragment arg0@@48)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@48))
))) (= (type Mask@106) (MapType1Type RefType realType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Heap@49) (MapType0Type RefType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type arg_this_1@0) RefType)) (= (type ptr@1) RefType)) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Heap@46) (MapType0Type RefType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Heap@47) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@48) (MapType0Type RefType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Heap@44) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type Heap@40) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type UnfoldingHeap@19) (MapType0Type RefType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type UnfoldingHeap@18) (MapType0Type RefType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type UnfoldingHeap@15) (MapType0Type RefType))) (= (type UnfoldingHeap@16) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@17) (MapType0Type RefType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Heap@36) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Heap@33) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Heap@29) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type UnfoldingHeap@14) (MapType0Type RefType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type UnfoldingHeap@13) (MapType0Type RefType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingHeap@10) (MapType0Type RefType))) (= (type UnfoldingHeap@11) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@12) (MapType0Type RefType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type freshObj@1) RefType)) (= (type Heap@24) (MapType0Type RefType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Heap@26) (MapType0Type RefType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type ptrn@0) RefType)) (= (type Mask@88) (MapType1Type RefType realType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@86) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type Mask@82) (MapType1Type RefType realType))) (= (type Mask@81) (MapType1Type RefType realType))) (= (type Heap@83) (MapType0Type RefType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type arg_this@0) RefType)) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Heap@80) (MapType0Type RefType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@81) (MapType0Type RefType))) (= (type newPMask@21) (MapType1Type RefType boolType))) (= (type Heap@82) (MapType0Type RefType))) (= (type Heap@77) (MapType0Type RefType))) (= (type Heap@76) (MapType0Type RefType))) (= (type Heap@78) (MapType0Type RefType))) (= (type freshVersion@4) FrameTypeType)) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Heap@72) (MapType0Type RefType))) (= (type Heap@73) (MapType0Type RefType))) (= (type Heap@74) (MapType0Type RefType))) (= (type newPMask@20) (MapType1Type RefType boolType))) (= (type Heap@75) (MapType0Type RefType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type UnfoldingHeap@39) (MapType0Type RefType))) (= (type UnfoldingMask@39) (MapType1Type RefType realType))) (= (type UnfoldingMask@35) (MapType1Type RefType realType))) (= (type UnfoldingHeap@38) (MapType0Type RefType))) (= (type UnfoldingMask@38) (MapType1Type RefType realType))) (= (type UnfoldingHeap@35) (MapType0Type RefType))) (= (type UnfoldingHeap@36) (MapType0Type RefType))) (= (type newPMask@19) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@37) (MapType0Type RefType))) (= (type UnfoldingMask@36) (MapType1Type RefType realType))) (= (type UnfoldingMask@37) (MapType1Type RefType realType))) (= (type Mask@73) (MapType1Type RefType realType))) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Heap@69) (MapType0Type RefType))) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@70) (MapType0Type RefType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type Heap@71) (MapType0Type RefType))) (= (type Heap@66) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type Heap@67) (MapType0Type RefType))) (= (type freshVersion@3) FrameTypeType)) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Heap@61) (MapType0Type RefType))) (= (type Heap@62) (MapType0Type RefType))) (= (type Heap@63) (MapType0Type RefType))) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@64) (MapType0Type RefType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type UnfoldingHeap@34) (MapType0Type RefType))) (= (type UnfoldingMask@34) (MapType1Type RefType realType))) (= (type UnfoldingMask@30) (MapType1Type RefType realType))) (= (type UnfoldingHeap@33) (MapType0Type RefType))) (= (type UnfoldingMask@33) (MapType1Type RefType realType))) (= (type UnfoldingHeap@30) (MapType0Type RefType))) (= (type UnfoldingHeap@31) (MapType0Type RefType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@32) (MapType0Type RefType))) (= (type UnfoldingMask@31) (MapType1Type RefType realType))) (= (type UnfoldingMask@32) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type Heap@59) (MapType0Type RefType))) (= (type UnfoldingHeap@29) (MapType0Type RefType))) (= (type UnfoldingMask@29) (MapType1Type RefType realType))) (= (type UnfoldingMask@25) (MapType1Type RefType realType))) (= (type UnfoldingHeap@28) (MapType0Type RefType))) (= (type UnfoldingMask@28) (MapType1Type RefType realType))) (= (type UnfoldingHeap@25) (MapType0Type RefType))) (= (type UnfoldingHeap@26) (MapType0Type RefType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@27) (MapType0Type RefType))) (= (type UnfoldingMask@26) (MapType1Type RefType realType))) (= (type UnfoldingMask@27) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Mask@34) (MapType1Type RefType realType))) (= (type ptrn) RefType)) (= (type Heap@53) (MapType0Type RefType))) (= (type Heap@50) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type Heap@52) (MapType0Type RefType))) (= (type UnfoldingHeap@24) (MapType0Type RefType))) (= (type UnfoldingMask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingHeap@23) (MapType0Type RefType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type UnfoldingHeap@20) (MapType0Type RefType))) (= (type UnfoldingHeap@21) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@22) (MapType0Type RefType))) (= (type Unfolding1Heap@4) (MapType0Type RefType))) (= (type Unfolding1Mask@4) (MapType1Type RefType realType))) (= (type Unfolding1Mask@0) (MapType1Type RefType realType))) (= (type Unfolding1Heap@3) (MapType0Type RefType))) (= (type Unfolding1Mask@3) (MapType1Type RefType realType))) (= (type Unfolding1Heap@0) (MapType0Type RefType))) (= (type Unfolding1Heap@1) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@2) (MapType0Type RefType))) (= (type Unfolding1Mask@1) (MapType1Type RefType realType))) (= (type Unfolding1Mask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@22) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type UnfoldingHeap@9) (MapType0Type RefType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingHeap@8) (MapType0Type RefType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingHeap@5) (MapType0Type RefType))) (= (type UnfoldingHeap@6) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@7) (MapType0Type RefType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type ptr) RefType)) (= (type Heap@105) (MapType0Type RefType))) (= (type Mask@105) (MapType1Type RefType realType))) (= (type Heap@106) (MapType0Type RefType))) (= (type freshObj@0) RefType)) (= (type Heap@102) (MapType0Type RefType))) (= (type Heap@101) (MapType0Type RefType))) (= (type Heap@103) (MapType0Type RefType))) (= (type newPMask@27) (MapType1Type RefType boolType))) (= (type Heap@104) (MapType0Type RefType))) (= (type Heap@99) (MapType0Type RefType))) (= (type Heap@98) (MapType0Type RefType))) (= (type Heap@100) (MapType0Type RefType))) (= (type freshVersion@6) FrameTypeType)) (= (type Mask@104) (MapType1Type RefType realType))) (= (type Heap@94) (MapType0Type RefType))) (= (type Heap@95) (MapType0Type RefType))) (= (type Heap@96) (MapType0Type RefType))) (= (type newPMask@26) (MapType1Type RefType boolType))) (= (type Heap@97) (MapType0Type RefType))) (= (type Mask@100) (MapType1Type RefType realType))) (= (type Mask@103) (MapType1Type RefType realType))) (= (type UnfoldingHeap@49) (MapType0Type RefType))) (= (type UnfoldingMask@49) (MapType1Type RefType realType))) (= (type UnfoldingMask@45) (MapType1Type RefType realType))) (= (type UnfoldingHeap@48) (MapType0Type RefType))) (= (type UnfoldingMask@48) (MapType1Type RefType realType))) (= (type UnfoldingHeap@45) (MapType0Type RefType))) (= (type UnfoldingHeap@46) (MapType0Type RefType))) (= (type newPMask@25) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@47) (MapType0Type RefType))) (= (type UnfoldingMask@46) (MapType1Type RefType realType))) (= (type UnfoldingMask@47) (MapType1Type RefType realType))) (= (type Mask@102) (MapType1Type RefType realType))) (= (type Mask@101) (MapType1Type RefType realType))) (= (type Heap@90) (MapType0Type RefType))) (= (type Heap@91) (MapType0Type RefType))) (= (type Heap@92) (MapType0Type RefType))) (= (type newPMask@24) (MapType1Type RefType boolType))) (= (type Heap@93) (MapType0Type RefType))) (= (type Heap@87) (MapType0Type RefType))) (= (type Heap@88) (MapType0Type RefType))) (= (type Heap@89) (MapType0Type RefType))) (= (type freshVersion@5) FrameTypeType)) (= (type Mask@99) (MapType1Type RefType realType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@84) (MapType0Type RefType))) (= (type Heap@85) (MapType0Type RefType))) (= (type newPMask@23) (MapType1Type RefType boolType))) (= (type Heap@86) (MapType0Type RefType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@98) (MapType1Type RefType realType))) (= (type UnfoldingHeap@44) (MapType0Type RefType))) (= (type UnfoldingMask@44) (MapType1Type RefType realType))) (= (type UnfoldingMask@40) (MapType1Type RefType realType))) (= (type UnfoldingHeap@43) (MapType0Type RefType))) (= (type UnfoldingMask@43) (MapType1Type RefType realType))) (= (type UnfoldingHeap@40) (MapType0Type RefType))) (= (type UnfoldingHeap@41) (MapType0Type RefType))) (= (type newPMask@22) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@42) (MapType0Type RefType))) (= (type UnfoldingMask@41) (MapType1Type RefType realType))) (= (type UnfoldingMask@42) (MapType1Type RefType realType))) (= (type Mask@97) (MapType1Type RefType realType))) (= (type Mask@96) (MapType1Type RefType realType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@6) (MapType0Type RefType))) (= (type UnfoldingHeap@4) (MapType0Type RefType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingHeap@3) (MapType0Type RefType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingHeap@0) (MapType0Type RefType))) (= (type UnfoldingHeap@1) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@2) (MapType0Type RefType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type tmp) RefType)) (= (type PostMask@0) (MapType1Type RefType realType))) (= (type PostHeap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id insert)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 565) (let ((anon16_correct true))
(let ((anon337_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 561) 558)) anon16_correct)))
(let ((anon337_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 559) (- 0 560)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 559) 558) anon16_correct))))))
(let ((anon12_correct true))
(let ((anon335_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 557) 554)) anon12_correct)))
(let ((anon335_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 555) (- 0 556)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 555) 554) anon12_correct))))))
(let ((anon8_correct true))
(let ((anon333_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 553) 550)) anon8_correct)))
(let ((anon333_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 551) (- 0 552)) (<= FullPerm (U_2_real (MapType1Select PostMask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@0 null (List this@@38)))) (=> (= (ControlFlow 0 551) 550) anon8_correct))))))
(let ((anon336_Else_correct true))
(let ((anon330_Else_correct  (=> (<= index (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0)) (and (and (and (and (and (and (=> (= (ControlFlow 0 562) 549) anon336_Else_correct) (=> (= (ControlFlow 0 562) 559) anon337_Then_correct)) (=> (= (ControlFlow 0 562) 561) anon337_Else_correct)) (=> (= (ControlFlow 0 562) 555) anon335_Then_correct)) (=> (= (ControlFlow 0 562) 557) anon335_Else_correct)) (=> (= (ControlFlow 0 562) 551) anon333_Then_correct)) (=> (= (ControlFlow 0 562) 553) anon333_Else_correct))))))
(let ((anon4_correct true))
(let ((anon331_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 548) 545)) anon4_correct)))
(let ((anon331_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 546) (- 0 547)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 546) 545) anon4_correct))))))
(let ((anon329_Then_correct  (=> (and (state PostHeap@0 ZeroMask) (= PostMask@0 (MapType1Store ZeroMask null (List this@@38) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List this@@38))) FullPerm))))) (=> (and (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0)) (and (<= 0 index) (state PostHeap@0 PostMask@0))) (and (and (=> (= (ControlFlow 0 563) 562) anon330_Else_correct) (=> (= (ControlFlow 0 563) 546) anon331_Then_correct)) (=> (= (ControlFlow 0 563) 548) anon331_Else_correct))))))
(let ((anon163_correct true))
(let ((anon413_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 356) 353)) anon163_correct)))
(let ((anon413_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 354) (- 0 355)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (=> (= (ControlFlow 0 354) 353) anon163_correct))))))
(let ((anon412_Else_correct true))
(let ((anon410_Else_correct  (and (=> (= (ControlFlow 0 357) (- 0 359)) (HasDirectPerm Mask@29 ptr@1 data)) (=> (HasDirectPerm Mask@29 ptr@1 data) (and (=> (= (ControlFlow 0 357) (- 0 358)) (HasDirectPerm Mask@29 ptr@1 next)) (=> (HasDirectPerm Mask@29 ptr@1 next) (and (and (=> (= (ControlFlow 0 357) 352) anon412_Else_correct) (=> (= (ControlFlow 0 357) 354) anon413_Then_correct)) (=> (= (ControlFlow 0 357) 356) anon413_Else_correct))))))))
(let ((anon159_correct true))
(let ((anon411_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 351) 348)) anon159_correct)))
(let ((anon411_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 349) (- 0 350)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (=> (= (ControlFlow 0 349) 348) anon159_correct))))))
(let ((anon408_Else_correct  (and (=> (= (ControlFlow 0 360) (- 0 361)) (HasDirectPerm Mask@29 this@@38 head)) (=> (HasDirectPerm Mask@29 this@@38 head) (and (and (=> (= (ControlFlow 0 360) 357) anon410_Else_correct) (=> (= (ControlFlow 0 360) 349) anon411_Then_correct)) (=> (= (ControlFlow 0 360) 351) anon411_Else_correct))))))
(let ((anon155_correct true))
(let ((anon409_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 347) 344)) anon155_correct)))
(let ((anon409_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 345) (- 0 346)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 345) 344) anon155_correct))))))
(let ((anon406_Else_correct  (=> (= (- index@1 1) (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))) (=> (and (state ExhaleHeap@0 Mask@29) (state ExhaleHeap@0 Mask@29)) (and (and (=> (= (ControlFlow 0 362) 360) anon408_Else_correct) (=> (= (ControlFlow 0 362) 345) anon409_Then_correct)) (=> (= (ControlFlow 0 362) 347) anon409_Else_correct))))))
(let ((anon151_correct true))
(let ((anon407_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 343) 340)) anon151_correct)))
(let ((anon407_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 341) (- 0 342)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (=> (= (ControlFlow 0 341) 340) anon151_correct))))))
(let ((anon399_Else_correct  (=> (forall ((i_7 Int) ) (!  (=> (and (<= 0 i_7) (< i_7 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (<= (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data)) (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null) i_7))))
 :qid |stdinbpl.3750:28|
 :skolemid |146|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (MapType0Select ExhaleHeap@0 ptr@1 next) null) i_7))
)) (=> (and (state ExhaleHeap@0 Mask@29) (state ExhaleHeap@0 Mask@29)) (and (=> (= (ControlFlow 0 363) (- 0 364)) (HasDirectPerm Mask@29 this@@38 head)) (=> (HasDirectPerm Mask@29 this@@38 head) (and (and (=> (= (ControlFlow 0 363) 362) anon406_Else_correct) (=> (= (ControlFlow 0 363) 341) anon407_Then_correct)) (=> (= (ControlFlow 0 363) 343) anon407_Else_correct))))))))
(let ((anon140_correct true))
(let ((anon402_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 337) 334)) anon140_correct)))
(let ((anon402_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 335) (- 0 336)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (=> (= (ControlFlow 0 335) 334) anon140_correct))))))
(let ((anon145_correct true))
(let ((anon405_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 329) 326)) anon145_correct)))
(let ((anon405_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 327) (- 0 328)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (=> (= (ControlFlow 0 327) 326) anon145_correct))))))
(let ((anon147_correct true))
(let ((anon404_Else_correct  (and (=> (= (ControlFlow 0 323) (- 0 325)) (>= i_6 0)) (=> (>= i_6 0) (and (=> (= (ControlFlow 0 323) (- 0 324)) (< i_6 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (=> (< i_6 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null))) (=> (= (ControlFlow 0 323) 321) anon147_correct)))))))
(let ((anon403_Then_correct  (=> (and (<= 0 i_6) (< i_6 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (and (=> (= (ControlFlow 0 330) (- 0 332)) (HasDirectPerm Mask@29 ptr@1 data)) (=> (HasDirectPerm Mask@29 ptr@1 data) (and (=> (= (ControlFlow 0 330) (- 0 331)) (HasDirectPerm Mask@29 ptr@1 next)) (=> (HasDirectPerm Mask@29 ptr@1 next) (and (and (=> (= (ControlFlow 0 330) 323) anon404_Else_correct) (=> (= (ControlFlow 0 330) 327) anon405_Then_correct)) (=> (= (ControlFlow 0 330) 329) anon405_Else_correct)))))))))
(let ((anon403_Else_correct  (=> (and (not (and (<= 0 i_6) (< i_6 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null))))) (= (ControlFlow 0 322) 321)) anon147_correct)))
(let ((anon400_Then_correct  (=> (<= 0 i_6) (and (=> (= (ControlFlow 0 338) (- 0 339)) (HasDirectPerm Mask@29 ptr@1 next)) (=> (HasDirectPerm Mask@29 ptr@1 next) (and (and (and (=> (= (ControlFlow 0 338) 330) anon403_Then_correct) (=> (= (ControlFlow 0 338) 322) anon403_Else_correct)) (=> (= (ControlFlow 0 338) 335) anon402_Then_correct)) (=> (= (ControlFlow 0 338) 337) anon402_Else_correct)))))))
(let ((anon400_Else_correct  (=> (< i_6 0) (and (=> (= (ControlFlow 0 333) 330) anon403_Then_correct) (=> (= (ControlFlow 0 333) 322) anon403_Else_correct)))))
(let ((anon392_Else_correct  (=> (forall ((i_5 Int) ) (!  (=> (and (<= 0 i_5) (< i_5 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (<= (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) i_5)) (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data))))
 :qid |stdinbpl.3691:28|
 :skolemid |145|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)) (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) i_5))
)) (=> (and (state ExhaleHeap@0 Mask@29) (state ExhaleHeap@0 Mask@29)) (and (and (=> (= (ControlFlow 0 365) 363) anon399_Else_correct) (=> (= (ControlFlow 0 365) 338) anon400_Then_correct)) (=> (= (ControlFlow 0 365) 333) anon400_Else_correct))))))
(let ((anon127_correct true))
(let ((anon395_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 318) 315)) anon127_correct)))
(let ((anon395_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 316) (- 0 317)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (=> (= (ControlFlow 0 316) 315) anon127_correct))))))
(let ((anon132_correct true))
(let ((anon398_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 311) 308)) anon132_correct)))
(let ((anon398_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 309) (- 0 310)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (=> (= (ControlFlow 0 309) 308) anon132_correct))))))
(let ((anon134_correct true))
(let ((anon397_Else_correct  (and (=> (= (ControlFlow 0 304) (- 0 307)) (>= i_4 0)) (=> (>= i_4 0) (and (=> (= (ControlFlow 0 304) (- 0 306)) (< i_4 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (=> (< i_4 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))) (and (=> (= (ControlFlow 0 304) (- 0 305)) (HasDirectPerm Mask@29 ptr@1 data)) (=> (HasDirectPerm Mask@29 ptr@1 data) (=> (= (ControlFlow 0 304) 302) anon134_correct)))))))))
(let ((anon396_Then_correct  (=> (and (<= 0 i_4) (< i_4 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (and (=> (= (ControlFlow 0 312) (- 0 313)) (HasDirectPerm Mask@29 this@@38 head)) (=> (HasDirectPerm Mask@29 this@@38 head) (and (and (=> (= (ControlFlow 0 312) 304) anon397_Else_correct) (=> (= (ControlFlow 0 312) 309) anon398_Then_correct)) (=> (= (ControlFlow 0 312) 311) anon398_Else_correct)))))))
(let ((anon396_Else_correct  (=> (and (not (and (<= 0 i_4) (< i_4 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))))) (= (ControlFlow 0 303) 302)) anon134_correct)))
(let ((anon393_Then_correct  (=> (<= 0 i_4) (and (=> (= (ControlFlow 0 319) (- 0 320)) (HasDirectPerm Mask@29 this@@38 head)) (=> (HasDirectPerm Mask@29 this@@38 head) (and (and (and (=> (= (ControlFlow 0 319) 312) anon396_Then_correct) (=> (= (ControlFlow 0 319) 303) anon396_Else_correct)) (=> (= (ControlFlow 0 319) 316) anon395_Then_correct)) (=> (= (ControlFlow 0 319) 318) anon395_Else_correct)))))))
(let ((anon393_Else_correct  (=> (< i_4 0) (and (=> (= (ControlFlow 0 314) 312) anon396_Then_correct) (=> (= (ControlFlow 0 314) 303) anon396_Else_correct)))))
(let ((anon391_Then_correct  (=> (and (not (= this@@38 null)) (= Mask@25 (MapType1Store Mask@24 this@@38 head (real_2_U (+ (U_2_real (MapType1Select Mask@24 this@@38 head)) FullPerm))))) (=> (and (and (and (state ExhaleHeap@0 Mask@25) (state ExhaleHeap@0 Mask@25)) (and (not (= ptr@1 null)) (= Mask@26 (MapType1Store Mask@25 ptr@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@25 ptr@1 next)) FullPerm)))))) (and (and (state ExhaleHeap@0 Mask@26) (not (= ptr@1 null))) (and (= Mask@27 (MapType1Store Mask@26 ptr@1 data (real_2_U (+ (U_2_real (MapType1Select Mask@26 ptr@1 data)) FullPerm)))) (state ExhaleHeap@0 Mask@27)))) (and (=> (= (ControlFlow 0 366) (- 0 369)) (HasDirectPerm Mask@27 ptr@1 data)) (=> (HasDirectPerm Mask@27 ptr@1 data) (=> (and (<= (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data)) elem) (state ExhaleHeap@0 Mask@27)) (and (=> (= (ControlFlow 0 366) (- 0 368)) (HasDirectPerm Mask@27 ptr@1 next)) (=> (HasDirectPerm Mask@27 ptr@1 next) (=> (= Mask@28 (MapType1Store Mask@27 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@27 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))) FullPerm)))) (=> (and (state ExhaleHeap@0 Mask@28) (state ExhaleHeap@0 Mask@28)) (and (=> (= (ControlFlow 0 366) (- 0 367)) (HasDirectPerm Mask@28 this@@38 head)) (=> (HasDirectPerm Mask@28 this@@38 head) (=> (and (and (= Mask@29 (MapType1Store Mask@28 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) (real_2_U (+ (U_2_real (MapType1Select Mask@28 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))) FullPerm)))) (state ExhaleHeap@0 Mask@29)) (and (state ExhaleHeap@0 Mask@29) (state ExhaleHeap@0 Mask@29))) (and (and (=> (= (ControlFlow 0 366) 365) anon392_Else_correct) (=> (= (ControlFlow 0 366) 319) anon393_Then_correct)) (=> (= (ControlFlow 0 366) 314) anon393_Else_correct))))))))))))))))
(let ((anon263_correct true))
(let ((anon464_Else_correct  (=> (and (not (and (<= 0 i_12) (< i_12 (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null))))) (= (ControlFlow 0 138) 135)) anon263_correct)))
(let ((anon464_Then_correct  (=> (and (<= 0 i_12) (< i_12 (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null)))) (and (=> (= (ControlFlow 0 136) (- 0 137)) (<= (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data)) (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null) i_12)))) (=> (<= (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data)) (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null) i_12))) (=> (= (ControlFlow 0 136) 135) anon263_correct))))))
(let ((anon463_Else_correct  (=> (forall ((i_13_1 Int) ) (!  (=> (and (<= 0 i_13_1) (< i_13_1 (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null)))) (<= (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data)) (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null) i_13_1))))
 :qid |stdinbpl.4447:28|
 :skolemid |161|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@2 null (lseg (MapType0Select ExhaleHeap@2 ptrn@0 next) null)) (MapType0Select ExhaleHeap@2 ptrn@0 next) null) i_13_1))
)) (and (=> (= (ControlFlow 0 133) (- 0 134)) (= (- index@2 1) (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0)))) (=> (= (- index@2 1) (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0))) (=> (= (ControlFlow 0 133) (- 0 132)) (|Seq#Equal| (content Heap@@38 this@@38) (|Seq#Append| (|Seq#Append| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0) (|Seq#Singleton| (MapType0Select ExhaleHeap@2 ptrn@0 data))) (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 ptrn@0 next) null)))))))))
(let ((anon461_Else_correct  (=> (forall ((i_11_1 Int) ) (!  (=> (and (<= 0 i_11_1) (< i_11_1 (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0)))) (<= (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0) i_11_1)) (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data))))
 :qid |stdinbpl.4436:28|
 :skolemid |160|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@2 null (lseg (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0)) (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0) i_11_1))
)) (and (and (=> (= (ControlFlow 0 139) 133) anon463_Else_correct) (=> (= (ControlFlow 0 139) 136) anon464_Then_correct)) (=> (= (ControlFlow 0 139) 138) anon464_Else_correct)))))
(let ((anon259_correct true))
(let ((anon462_Else_correct  (=> (and (not (and (<= 0 i_10) (< i_10 (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0))))) (= (ControlFlow 0 131) 128)) anon259_correct)))
(let ((anon462_Then_correct  (=> (and (<= 0 i_10) (< i_10 (|Seq#Length| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0)))) (and (=> (= (ControlFlow 0 129) (- 0 130)) (<= (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0) i_10)) (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data)))) (=> (<= (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0) i_10)) (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data))) (=> (= (ControlFlow 0 129) 128) anon259_correct))))))
(let ((anon256_correct  (=> (= Mask@88 (MapType1Store Mask@87 null (lseg (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (lseg (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0))) FullPerm)))) (and (and (=> (= (ControlFlow 0 140) 139) anon461_Else_correct) (=> (= (ControlFlow 0 140) 129) anon462_Then_correct)) (=> (= (ControlFlow 0 140) 131) anon462_Else_correct)))))
(let ((anon460_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 143) 140)) anon256_correct)))
(let ((anon460_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 141) (- 0 142)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (lseg (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (lseg (MapType0Select ExhaleHeap@2 this@@38 head) ptrn@0)))) (=> (= (ControlFlow 0 141) 140) anon256_correct))))))
(let ((anon254_correct  (=> (= Mask@87 (MapType1Store Mask@86 null (lseg (MapType0Select ExhaleHeap@2 ptrn@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@86 null (lseg (MapType0Select ExhaleHeap@2 ptrn@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 144) 141) anon460_Then_correct) (=> (= (ControlFlow 0 144) 143) anon460_Else_correct)))))
(let ((anon459_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 147) 144)) anon254_correct)))
(let ((anon459_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 145) (- 0 146)) (<= FullPerm (U_2_real (MapType1Select Mask@86 null (lseg (MapType0Select ExhaleHeap@2 ptrn@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@86 null (lseg (MapType0Select ExhaleHeap@2 ptrn@0 next) null)))) (=> (= (ControlFlow 0 145) 144) anon254_correct))))))
(let ((anon252_correct  (=> (= Mask@86 (MapType1Store Mask@85 ptrn@0 data (real_2_U (- (U_2_real (MapType1Select Mask@85 ptrn@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 148) (- 0 149)) (<= (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data)) elem)) (=> (<= (U_2_int (MapType0Select ExhaleHeap@2 ptrn@0 data)) elem) (and (=> (= (ControlFlow 0 148) 145) anon459_Then_correct) (=> (= (ControlFlow 0 148) 147) anon459_Else_correct)))))))
(let ((anon458_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 152) 148)) anon252_correct)))
(let ((anon458_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 150) (- 0 151)) (<= FullPerm (U_2_real (MapType1Select Mask@85 ptrn@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@85 ptrn@0 data))) (=> (= (ControlFlow 0 150) 148) anon252_correct))))))
(let ((anon250_correct  (=> (= Mask@85 (MapType1Store Mask@84 ptrn@0 next (real_2_U (- (U_2_real (MapType1Select Mask@84 ptrn@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 153) 150) anon458_Then_correct) (=> (= (ControlFlow 0 153) 152) anon458_Else_correct)))))
(let ((anon457_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 156) 153)) anon250_correct)))
(let ((anon457_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 154) (- 0 155)) (<= FullPerm (U_2_real (MapType1Select Mask@84 ptrn@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@84 ptrn@0 next))) (=> (= (ControlFlow 0 154) 153) anon250_correct))))))
(let ((anon248_correct  (=> (= Mask@84 (MapType1Store Mask@83 this@@38 head (real_2_U (- (U_2_real (MapType1Select Mask@83 this@@38 head)) FullPerm)))) (and (=> (= (ControlFlow 0 157) 154) anon457_Then_correct) (=> (= (ControlFlow 0 157) 156) anon457_Else_correct)))))
(let ((anon456_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 160) 157)) anon248_correct)))
(let ((anon456_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 158) (- 0 159)) (<= FullPerm (U_2_real (MapType1Select Mask@83 this@@38 head)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@83 this@@38 head))) (=> (= (ControlFlow 0 158) 157) anon248_correct))))))
(let ((anon246_correct  (=> (state ExhaleHeap@2 Mask@83) (=> (and (state ExhaleHeap@2 Mask@83) (state ExhaleHeap@2 Mask@83)) (and (=> (= (ControlFlow 0 161) 158) anon456_Then_correct) (=> (= (ControlFlow 0 161) 160) anon456_Else_correct))))))
(let ((anon455_Else_correct  (=> (= ptrn@0 null) (=> (and (= Mask@83 Mask@81) (= (ControlFlow 0 164) 161)) anon246_correct))))
(let ((anon455_Then_correct  (=> (and (not (= ptrn@0 null)) (= perm@3 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 162) (- 0 163)) (>= perm@3 NoPerm)) (=> (>= perm@3 NoPerm) (=> (=> (> perm@3 NoPerm) (not (= ptrn@0 null))) (=> (and (and (= Mask@82 (MapType1Store Mask@81 ptrn@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@81 ptrn@0 next)) perm@3)))) (state ExhaleHeap@2 Mask@82)) (and (= Mask@83 Mask@82) (= (ControlFlow 0 162) 161))) anon246_correct)))))))
(let ((anon244_correct  (=> (IdenticalOnKnownLocations Heap@83 ExhaleHeap@2 Mask@80) (=> (and (and (= Mask@81 (MapType1Store Mask@80 null (lseg arg_this@0 ptrn@0) (real_2_U (+ (U_2_real (MapType1Select Mask@80 null (lseg arg_this@0 ptrn@0))) FullPerm)))) (state ExhaleHeap@2 Mask@81)) (and (state ExhaleHeap@2 Mask@81) (|Seq#Equal| (contentNodes ExhaleHeap@2 arg_this@0 ptrn@0) (|Seq#Append| (contentNodes Heap@83 arg_this@0 ptr@1) (contentNodes Heap@83 ptr@1 ptrn@0))))) (and (=> (= (ControlFlow 0 165) 162) anon455_Then_correct) (=> (= (ControlFlow 0 165) 164) anon455_Else_correct))))))
(let ((anon454_Else_correct  (=> (and (not (and (< 0 (|Seq#Length| (contentNodes Heap@83 arg_this@0 ptr@1))) (< 0 (|Seq#Length| (contentNodes Heap@83 ptr@1 ptrn@0))))) (= (ControlFlow 0 168) 165)) anon244_correct)))
(let ((anon454_Then_correct  (=> (and (< 0 (|Seq#Length| (contentNodes Heap@83 arg_this@0 ptr@1))) (< 0 (|Seq#Length| (contentNodes Heap@83 ptr@1 ptrn@0)))) (and (=> (= (ControlFlow 0 166) (- 0 167)) (<= (U_2_int (|Seq#Index| (contentNodes Heap@83 arg_this@0 ptr@1) (- (|Seq#Length| (contentNodes Heap@83 arg_this@0 ptr@1)) 1))) (U_2_int (|Seq#Index| (contentNodes Heap@83 ptr@1 ptrn@0) 0)))) (=> (<= (U_2_int (|Seq#Index| (contentNodes Heap@83 arg_this@0 ptr@1) (- (|Seq#Length| (contentNodes Heap@83 arg_this@0 ptr@1)) 1))) (U_2_int (|Seq#Index| (contentNodes Heap@83 ptr@1 ptrn@0) 0))) (=> (= (ControlFlow 0 166) 165) anon244_correct))))))
(let ((anon241_correct  (=> (and (= Mask@79 (MapType1Store Mask@78 ptrn@0 next (real_2_U (- (U_2_real (MapType1Select Mask@78 ptrn@0 next)) perm@2)))) (= Mask@80 Mask@79)) (and (=> (= (ControlFlow 0 170) 166) anon454_Then_correct) (=> (= (ControlFlow 0 170) 168) anon454_Else_correct)))))
(let ((anon453_Else_correct  (=> (and (= perm@2 NoPerm) (= (ControlFlow 0 173) 170)) anon241_correct)))
(let ((anon453_Then_correct  (=> (not (= perm@2 NoPerm)) (and (=> (= (ControlFlow 0 171) (- 0 172)) (<= perm@2 (U_2_real (MapType1Select Mask@78 ptrn@0 next)))) (=> (<= perm@2 (U_2_real (MapType1Select Mask@78 ptrn@0 next))) (=> (= (ControlFlow 0 171) 170) anon241_correct))))))
(let ((anon452_Then_correct  (=> (and (not (= ptrn@0 null)) (= perm@2 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 174) (- 0 175)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (and (=> (= (ControlFlow 0 174) 171) anon453_Then_correct) (=> (= (ControlFlow 0 174) 173) anon453_Else_correct)))))))
(let ((anon452_Else_correct  (=> (and (= ptrn@0 null) (= Mask@80 Mask@78)) (and (=> (= (ControlFlow 0 169) 166) anon454_Then_correct) (=> (= (ControlFlow 0 169) 168) anon454_Else_correct)))))
(let ((anon238_correct  (=> (= Mask@78 (MapType1Store Mask@77 null (lseg ptr@1 ptrn@0) (real_2_U (- (U_2_real (MapType1Select Mask@77 null (lseg ptr@1 ptrn@0))) FullPerm)))) (and (=> (= (ControlFlow 0 176) 174) anon452_Then_correct) (=> (= (ControlFlow 0 176) 169) anon452_Else_correct)))))
(let ((anon451_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 179) 176)) anon238_correct)))
(let ((anon451_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 177) (- 0 178)) (<= FullPerm (U_2_real (MapType1Select Mask@77 null (lseg ptr@1 ptrn@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@77 null (lseg ptr@1 ptrn@0)))) (=> (= (ControlFlow 0 177) 176) anon238_correct))))))
(let ((anon236_correct  (=> (= Mask@77 (MapType1Store Mask@76 null (lseg arg_this@0 ptr@1) (real_2_U (- (U_2_real (MapType1Select Mask@76 null (lseg arg_this@0 ptr@1))) FullPerm)))) (and (=> (= (ControlFlow 0 180) 177) anon451_Then_correct) (=> (= (ControlFlow 0 180) 179) anon451_Else_correct)))))
(let ((anon450_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 183) 180)) anon236_correct)))
(let ((anon450_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 181) (- 0 182)) (<= FullPerm (U_2_real (MapType1Select Mask@76 null (lseg arg_this@0 ptr@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@76 null (lseg arg_this@0 ptr@1)))) (=> (= (ControlFlow 0 181) 180) anon236_correct))))))
(let ((anon234_correct  (=> (and (state Heap@83 Mask@76) (state Heap@83 Mask@76)) (and (=> (= (ControlFlow 0 184) (- 0 185)) (HasDirectPerm Mask@76 this@@38 head)) (=> (HasDirectPerm Mask@76 this@@38 head) (=> (= arg_this@0 (MapType0Select Heap@83 this@@38 head)) (and (=> (= (ControlFlow 0 184) 181) anon450_Then_correct) (=> (= (ControlFlow 0 184) 183) anon450_Else_correct))))))))
(let ((anon449_Else_correct  (=> (= ptr@1 ptrn@0) (=> (and (= Heap@83 Heap@79) (= (ControlFlow 0 187) 184)) anon234_correct))))
(let ((anon449_Then_correct  (=> (not (= ptr@1 ptrn@0)) (=> (and (= Heap@80 (MapType0Store Heap@79 null (|lseg#sm| ptr@1 ptrn@0) (MapType1Store (MapType0Select Heap@79 null (|lseg#sm| ptr@1 ptrn@0)) ptr@1 data (bool_2_U true)))) (= Heap@81 (MapType0Store Heap@80 null (|lseg#sm| ptr@1 ptrn@0) (MapType1Store (MapType0Select Heap@80 null (|lseg#sm| ptr@1 ptrn@0)) ptr@1 next (bool_2_U true))))) (=> (and (and (forall ((o_55 T@U) (f_59 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_59))))
(let ((A@@12 (FieldTypeInv0 (type f_59))))
 (=> (and (and (= (type o_55) RefType) (= (type f_59) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@81 null (|lseg#sm| ptr@1 ptrn@0)) o_55 f_59)) (U_2_bool (MapType1Select (MapType0Select Heap@81 null (|lseg#sm| (MapType0Select Heap@81 ptr@1 next) ptrn@0)) o_55 f_59)))) (U_2_bool (MapType1Select newPMask@21 o_55 f_59)))))
 :qid |stdinbpl.4322:41|
 :skolemid |159|
 :pattern ( (MapType1Select newPMask@21 o_55 f_59))
)) (= Heap@82 (MapType0Store Heap@81 null (|lseg#sm| ptr@1 ptrn@0) newPMask@21))) (and (= Heap@83 Heap@82) (= (ControlFlow 0 186) 184))) anon234_correct)))))
(let ((anon448_Else_correct  (=> (and (HasDirectPerm Mask@76 null (lseg ptr@1 ptrn@0)) (= Heap@79 Heap@76)) (and (=> (= (ControlFlow 0 189) 186) anon449_Then_correct) (=> (= (ControlFlow 0 189) 187) anon449_Else_correct)))))
(let ((anon448_Then_correct  (=> (and (and (not (HasDirectPerm Mask@76 null (lseg ptr@1 ptrn@0))) (= Heap@77 (MapType0Store Heap@76 null (|lseg#sm| ptr@1 ptrn@0) ZeroPMask))) (and (= Heap@78 (MapType0Store Heap@77 null (lseg ptr@1 ptrn@0) freshVersion@4)) (= Heap@79 Heap@78))) (and (=> (= (ControlFlow 0 188) 186) anon449_Then_correct) (=> (= (ControlFlow 0 188) 187) anon449_Else_correct)))))
(let ((anon230_correct  (=> (and (state Heap@76 Mask@75) (= Mask@76 (MapType1Store Mask@75 null (lseg ptr@1 ptrn@0) (real_2_U (+ (U_2_real (MapType1Select Mask@75 null (lseg ptr@1 ptrn@0))) FullPerm))))) (=> (and (and (state Heap@76 Mask@76) (state Heap@76 Mask@76)) (and (|lseg#trigger| Heap@76 (lseg ptr@1 ptrn@0)) (= (MapType0Select Heap@76 null (lseg ptr@1 ptrn@0)) (FrameFragment (ite (not (= ptr@1 ptrn@0)) (CombineFrames (FrameFragment (MapType0Select Heap@76 ptr@1 data)) (CombineFrames (FrameFragment (MapType0Select Heap@76 ptr@1 next)) (MapType0Select Heap@76 null (lseg (MapType0Select Heap@76 ptr@1 next) ptrn@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 190) 188) anon448_Then_correct) (=> (= (ControlFlow 0 190) 189) anon448_Else_correct))))))
(let ((anon447_Else_correct  (=> (= (MapType0Select Heap@72 ptr@1 next) ptrn@0) (=> (and (= Heap@76 Heap@72) (= (ControlFlow 0 192) 190)) anon230_correct))))
(let ((anon447_Then_correct  (=> (not (= (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (=> (and (= Heap@73 (MapType0Store Heap@72 null (|lseg#sm| (MapType0Select Heap@72 ptr@1 next) ptrn@0) (MapType1Store (MapType0Select Heap@72 null (|lseg#sm| (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (MapType0Select Heap@72 ptr@1 next) data (bool_2_U true)))) (= Heap@74 (MapType0Store Heap@73 null (|lseg#sm| (MapType0Select Heap@73 ptr@1 next) ptrn@0) (MapType1Store (MapType0Select Heap@73 null (|lseg#sm| (MapType0Select Heap@73 ptr@1 next) ptrn@0)) (MapType0Select Heap@73 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_54 T@U) (f_58 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_58))))
(let ((A@@13 (FieldTypeInv0 (type f_58))))
 (=> (and (and (= (type o_54) RefType) (= (type f_58) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@74 null (|lseg#sm| (MapType0Select Heap@74 ptr@1 next) ptrn@0)) o_54 f_58)) (U_2_bool (MapType1Select (MapType0Select Heap@74 null (|lseg#sm| (MapType0Select Heap@74 (MapType0Select Heap@74 ptr@1 next) next) ptrn@0)) o_54 f_58)))) (U_2_bool (MapType1Select newPMask@20 o_54 f_58)))))
 :qid |stdinbpl.4300:43|
 :skolemid |158|
 :pattern ( (MapType1Select newPMask@20 o_54 f_58))
)) (= Heap@75 (MapType0Store Heap@74 null (|lseg#sm| (MapType0Select Heap@74 ptr@1 next) ptrn@0) newPMask@20))) (and (= Heap@76 Heap@75) (= (ControlFlow 0 191) 190))) anon230_correct)))))
(let ((anon446_Else_correct  (=> (and (= (MapType0Select Heap@72 ptr@1 next) ptrn@0) (= Mask@75 Mask@74)) (and (=> (= (ControlFlow 0 196) 191) anon447_Then_correct) (=> (= (ControlFlow 0 196) 192) anon447_Else_correct)))))
(let ((anon446_Then_correct  (=> (not (= (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (and (=> (= (ControlFlow 0 194) (- 0 195)) (<= (U_2_int (MapType0Select Heap@72 ptr@1 data)) (U_2_int (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@72 ptr@1 data)) (U_2_int (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) data))) (=> (= Mask@75 Mask@74) (and (=> (= (ControlFlow 0 194) 191) anon447_Then_correct) (=> (= (ControlFlow 0 194) 192) anon447_Else_correct))))))))
(let ((anon226_correct  (=> (state UnfoldingHeap@39 UnfoldingMask@39) (and (=> (= (ControlFlow 0 197) 194) anon446_Then_correct) (=> (= (ControlFlow 0 197) 196) anon446_Else_correct)))))
(let ((anon225_correct  (=> (and (and (state UnfoldingHeap@38 UnfoldingMask@38) (= UnfoldingHeap@39 UnfoldingHeap@38)) (and (= UnfoldingMask@39 UnfoldingMask@38) (= (ControlFlow 0 199) 197))) anon226_correct)))
(let ((anon445_Else_correct  (=> (= (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0) (=> (and (= UnfoldingHeap@38 Heap@72) (= (ControlFlow 0 201) 199)) anon225_correct))))
(let ((anon445_Then_correct  (=> (not (= (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0)) (=> (and (= UnfoldingHeap@35 (MapType0Store Heap@72 null (|lseg#sm| (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0) (MapType1Store (MapType0Select Heap@72 null (|lseg#sm| (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0)) (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) data (bool_2_U true)))) (= UnfoldingHeap@36 (MapType0Store UnfoldingHeap@35 null (|lseg#sm| (MapType0Select UnfoldingHeap@35 (MapType0Select UnfoldingHeap@35 ptr@1 next) next) ptrn@0) (MapType1Store (MapType0Select UnfoldingHeap@35 null (|lseg#sm| (MapType0Select UnfoldingHeap@35 (MapType0Select UnfoldingHeap@35 ptr@1 next) next) ptrn@0)) (MapType0Select UnfoldingHeap@35 (MapType0Select UnfoldingHeap@35 ptr@1 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_53 T@U) (f_57 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_57))))
(let ((A@@14 (FieldTypeInv0 (type f_57))))
 (=> (and (and (= (type o_53) RefType) (= (type f_57) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@36 null (|lseg#sm| (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 ptr@1 next) next) ptrn@0)) o_53 f_57)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@36 null (|lseg#sm| (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 ptr@1 next) next) next) ptrn@0)) o_53 f_57)))) (U_2_bool (MapType1Select newPMask@19 o_53 f_57)))))
 :qid |stdinbpl.4280:49|
 :skolemid |157|
 :pattern ( (MapType1Select newPMask@19 o_53 f_57))
)) (= UnfoldingHeap@37 (MapType0Store UnfoldingHeap@36 null (|lseg#sm| (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 ptr@1 next) next) ptrn@0) newPMask@19))) (and (= UnfoldingHeap@38 UnfoldingHeap@37) (= (ControlFlow 0 200) 199))) anon225_correct)))))
(let ((anon444_Then_correct  (=> (not (= (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (=> (and (not (= (MapType0Select Heap@72 ptr@1 next) null)) (= UnfoldingMask@36 (MapType1Store UnfoldingMask@35 (MapType0Select Heap@72 ptr@1 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@35 (MapType0Select Heap@72 ptr@1 next) data)) FullPerm))))) (=> (and (and (and (state Heap@72 UnfoldingMask@36) (not (= (MapType0Select Heap@72 ptr@1 next) null))) (and (= UnfoldingMask@37 (MapType1Store UnfoldingMask@36 (MapType0Select Heap@72 ptr@1 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@36 (MapType0Select Heap@72 ptr@1 next) next)) FullPerm)))) (state Heap@72 UnfoldingMask@37))) (and (and (= UnfoldingMask@38 (MapType1Store UnfoldingMask@37 null (lseg (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@37 null (lseg (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0) (MapType0Select Heap@72 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (lseg (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0) (MapType0Select Heap@72 null (lseg (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0)))) (and (state Heap@72 UnfoldingMask@38) (=> (not (= (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0)) (<= (U_2_int (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) data)) (U_2_int (MapType0Select Heap@72 (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) data))))))) (and (=> (= (ControlFlow 0 202) 200) anon445_Then_correct) (=> (= (ControlFlow 0 202) 201) anon445_Else_correct)))))))
(let ((anon444_Else_correct  (=> (and (and (= (MapType0Select Heap@72 ptr@1 next) ptrn@0) (= UnfoldingHeap@39 Heap@72)) (and (= UnfoldingMask@39 UnfoldingMask@35) (= (ControlFlow 0 198) 197))) anon226_correct)))
(let ((anon222_correct  (=> (= UnfoldingMask@35 (MapType1Store Mask@71 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0) (real_2_U (- (U_2_real (MapType1Select Mask@71 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0))) FullPerm)))) (and (=> (= (ControlFlow 0 203) 202) anon444_Then_correct) (=> (= (ControlFlow 0 203) 198) anon444_Else_correct)))))
(let ((anon443_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 206) 203)) anon222_correct)))
(let ((anon443_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 204) (- 0 205)) (<= FullPerm (U_2_real (MapType1Select Mask@71 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@71 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0)))) (=> (= (ControlFlow 0 204) 203) anon222_correct))))))
(let ((anon220_correct  (=> (and (and (= Mask@74 (MapType1Store Mask@73 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0) (real_2_U (- (U_2_real (MapType1Select Mask@73 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0))) FullPerm)))) (InsidePredicate (lseg ptr@1 ptrn@0) (MapType0Select Heap@72 null (lseg ptr@1 ptrn@0)) (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0) (MapType0Select Heap@72 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0)))) (and (|lseg#trigger| Heap@72 (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (= (MapType0Select Heap@72 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (FrameFragment (ite (not (= (MapType0Select Heap@72 ptr@1 next) ptrn@0)) (CombineFrames (FrameFragment (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next)) (MapType0Select Heap@72 null (lseg (MapType0Select Heap@72 (MapType0Select Heap@72 ptr@1 next) next) ptrn@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 207) 204) anon443_Then_correct) (=> (= (ControlFlow 0 207) 206) anon443_Else_correct)))))
(let ((anon442_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 210) 207)) anon220_correct)))
(let ((anon442_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 208) (- 0 209)) (<= FullPerm (U_2_real (MapType1Select Mask@73 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@73 null (lseg (MapType0Select Heap@72 ptr@1 next) ptrn@0)))) (=> (= (ControlFlow 0 208) 207) anon220_correct))))))
(let ((anon218_correct  (=> (= Mask@73 (MapType1Store Mask@72 ptr@1 next (real_2_U (- (U_2_real (MapType1Select Mask@72 ptr@1 next)) FullPerm)))) (and (=> (= (ControlFlow 0 211) 208) anon442_Then_correct) (=> (= (ControlFlow 0 211) 210) anon442_Else_correct)))))
(let ((anon441_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 214) 211)) anon218_correct)))
(let ((anon441_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 212) (- 0 213)) (<= FullPerm (U_2_real (MapType1Select Mask@72 ptr@1 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@72 ptr@1 next))) (=> (= (ControlFlow 0 212) 211) anon218_correct))))))
(let ((anon216_correct  (=> (= Mask@72 (MapType1Store Mask@71 ptr@1 data (real_2_U (- (U_2_real (MapType1Select Mask@71 ptr@1 data)) FullPerm)))) (and (=> (= (ControlFlow 0 215) 212) anon441_Then_correct) (=> (= (ControlFlow 0 215) 214) anon441_Else_correct)))))
(let ((anon440_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 218) 215)) anon216_correct)))
(let ((anon440_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 216) (- 0 217)) (<= FullPerm (U_2_real (MapType1Select Mask@71 ptr@1 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@71 ptr@1 data))) (=> (= (ControlFlow 0 216) 215) anon216_correct))))))
(let ((anon439_Then_correct  (=> (not (= ptr@1 ptrn@0)) (and (=> (= (ControlFlow 0 219) 216) anon440_Then_correct) (=> (= (ControlFlow 0 219) 218) anon440_Else_correct)))))
(let ((anon439_Else_correct  (=> (and (= ptr@1 ptrn@0) (= Mask@75 Mask@71)) (and (=> (= (ControlFlow 0 193) 191) anon447_Then_correct) (=> (= (ControlFlow 0 193) 192) anon447_Else_correct)))))
(let ((anon213_correct  (=> (and (state Heap@72 Mask@71) (state Heap@72 Mask@71)) (and (=> (= (ControlFlow 0 220) 219) anon439_Then_correct) (=> (= (ControlFlow 0 220) 193) anon439_Else_correct)))))
(let ((anon438_Else_correct  (=> (= ptrn@0 ptrn@0) (=> (and (= Heap@72 Heap@68) (= (ControlFlow 0 222) 220)) anon213_correct))))
(let ((anon438_Then_correct  (=> (not (= ptrn@0 ptrn@0)) (=> (and (= Heap@69 (MapType0Store Heap@68 null (|lseg#sm| ptrn@0 ptrn@0) (MapType1Store (MapType0Select Heap@68 null (|lseg#sm| ptrn@0 ptrn@0)) ptrn@0 data (bool_2_U true)))) (= Heap@70 (MapType0Store Heap@69 null (|lseg#sm| ptrn@0 ptrn@0) (MapType1Store (MapType0Select Heap@69 null (|lseg#sm| ptrn@0 ptrn@0)) ptrn@0 next (bool_2_U true))))) (=> (and (and (forall ((o_52 T@U) (f_56 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_56))))
(let ((A@@15 (FieldTypeInv0 (type f_56))))
 (=> (and (and (= (type o_52) RefType) (= (type f_56) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@70 null (|lseg#sm| ptrn@0 ptrn@0)) o_52 f_56)) (U_2_bool (MapType1Select (MapType0Select Heap@70 null (|lseg#sm| (MapType0Select Heap@70 ptrn@0 next) ptrn@0)) o_52 f_56)))) (U_2_bool (MapType1Select newPMask@18 o_52 f_56)))))
 :qid |stdinbpl.4210:41|
 :skolemid |156|
 :pattern ( (MapType1Select newPMask@18 o_52 f_56))
)) (= Heap@71 (MapType0Store Heap@70 null (|lseg#sm| ptrn@0 ptrn@0) newPMask@18))) (and (= Heap@72 Heap@71) (= (ControlFlow 0 221) 220))) anon213_correct)))))
(let ((anon437_Else_correct  (=> (and (HasDirectPerm Mask@71 null (lseg ptrn@0 ptrn@0)) (= Heap@68 Heap@65)) (and (=> (= (ControlFlow 0 224) 221) anon438_Then_correct) (=> (= (ControlFlow 0 224) 222) anon438_Else_correct)))))
(let ((anon437_Then_correct  (=> (and (and (not (HasDirectPerm Mask@71 null (lseg ptrn@0 ptrn@0))) (= Heap@66 (MapType0Store Heap@65 null (|lseg#sm| ptrn@0 ptrn@0) ZeroPMask))) (and (= Heap@67 (MapType0Store Heap@66 null (lseg ptrn@0 ptrn@0) freshVersion@3)) (= Heap@68 Heap@67))) (and (=> (= (ControlFlow 0 223) 221) anon438_Then_correct) (=> (= (ControlFlow 0 223) 222) anon438_Else_correct)))))
(let ((anon209_correct  (=> (and (state Heap@65 Mask@70) (= Mask@71 (MapType1Store Mask@70 null (lseg ptrn@0 ptrn@0) (real_2_U (+ (U_2_real (MapType1Select Mask@70 null (lseg ptrn@0 ptrn@0))) FullPerm))))) (=> (and (and (state Heap@65 Mask@71) (state Heap@65 Mask@71)) (and (|lseg#trigger| Heap@65 (lseg ptrn@0 ptrn@0)) (= (MapType0Select Heap@65 null (lseg ptrn@0 ptrn@0)) (FrameFragment (ite (not (= ptrn@0 ptrn@0)) (CombineFrames (FrameFragment (MapType0Select Heap@65 ptrn@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@65 ptrn@0 next)) (MapType0Select Heap@65 null (lseg (MapType0Select Heap@65 ptrn@0 next) ptrn@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 225) 223) anon437_Then_correct) (=> (= (ControlFlow 0 225) 224) anon437_Else_correct))))))
(let ((anon436_Else_correct  (=> (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (=> (and (= Heap@65 Heap@61) (= (ControlFlow 0 227) 225)) anon209_correct))))
(let ((anon436_Then_correct  (=> (not (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (=> (and (= Heap@62 (MapType0Store Heap@61 null (|lseg#sm| (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (MapType1Store (MapType0Select Heap@61 null (|lseg#sm| (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (MapType0Select Heap@61 ptrn@0 next) data (bool_2_U true)))) (= Heap@63 (MapType0Store Heap@62 null (|lseg#sm| (MapType0Select Heap@62 ptrn@0 next) ptrn@0) (MapType1Store (MapType0Select Heap@62 null (|lseg#sm| (MapType0Select Heap@62 ptrn@0 next) ptrn@0)) (MapType0Select Heap@62 ptrn@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_51 T@U) (f_55 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_55))))
(let ((A@@16 (FieldTypeInv0 (type f_55))))
 (=> (and (and (= (type o_51) RefType) (= (type f_55) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@63 null (|lseg#sm| (MapType0Select Heap@63 ptrn@0 next) ptrn@0)) o_51 f_55)) (U_2_bool (MapType1Select (MapType0Select Heap@63 null (|lseg#sm| (MapType0Select Heap@63 (MapType0Select Heap@63 ptrn@0 next) next) ptrn@0)) o_51 f_55)))) (U_2_bool (MapType1Select newPMask@17 o_51 f_55)))))
 :qid |stdinbpl.4188:43|
 :skolemid |155|
 :pattern ( (MapType1Select newPMask@17 o_51 f_55))
)) (= Heap@64 (MapType0Store Heap@63 null (|lseg#sm| (MapType0Select Heap@63 ptrn@0 next) ptrn@0) newPMask@17))) (and (= Heap@65 Heap@64) (= (ControlFlow 0 226) 225))) anon209_correct)))))
(let ((anon435_Else_correct  (=> (and (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (= Mask@70 Mask@69)) (and (=> (= (ControlFlow 0 231) 226) anon436_Then_correct) (=> (= (ControlFlow 0 231) 227) anon436_Else_correct)))))
(let ((anon435_Then_correct  (=> (not (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (and (=> (= (ControlFlow 0 229) (- 0 230)) (<= (U_2_int (MapType0Select Heap@61 ptrn@0 data)) (U_2_int (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@61 ptrn@0 data)) (U_2_int (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) data))) (=> (= Mask@70 Mask@69) (and (=> (= (ControlFlow 0 229) 226) anon436_Then_correct) (=> (= (ControlFlow 0 229) 227) anon436_Else_correct))))))))
(let ((anon205_correct  (=> (state UnfoldingHeap@34 UnfoldingMask@34) (and (=> (= (ControlFlow 0 232) 229) anon435_Then_correct) (=> (= (ControlFlow 0 232) 231) anon435_Else_correct)))))
(let ((anon204_correct  (=> (and (and (state UnfoldingHeap@33 UnfoldingMask@33) (= UnfoldingHeap@34 UnfoldingHeap@33)) (and (= UnfoldingMask@34 UnfoldingMask@33) (= (ControlFlow 0 234) 232))) anon205_correct)))
(let ((anon434_Else_correct  (=> (= (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0) (=> (and (= UnfoldingHeap@33 Heap@61) (= (ControlFlow 0 236) 234)) anon204_correct))))
(let ((anon434_Then_correct  (=> (not (= (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0)) (=> (and (= UnfoldingHeap@30 (MapType0Store Heap@61 null (|lseg#sm| (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0) (MapType1Store (MapType0Select Heap@61 null (|lseg#sm| (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0)) (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@31 (MapType0Store UnfoldingHeap@30 null (|lseg#sm| (MapType0Select UnfoldingHeap@30 (MapType0Select UnfoldingHeap@30 ptrn@0 next) next) ptrn@0) (MapType1Store (MapType0Select UnfoldingHeap@30 null (|lseg#sm| (MapType0Select UnfoldingHeap@30 (MapType0Select UnfoldingHeap@30 ptrn@0 next) next) ptrn@0)) (MapType0Select UnfoldingHeap@30 (MapType0Select UnfoldingHeap@30 ptrn@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_50 T@U) (f_54 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_54))))
(let ((A@@17 (FieldTypeInv0 (type f_54))))
 (=> (and (and (= (type o_50) RefType) (= (type f_54) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@31 null (|lseg#sm| (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 ptrn@0 next) next) ptrn@0)) o_50 f_54)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@31 null (|lseg#sm| (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 ptrn@0 next) next) next) ptrn@0)) o_50 f_54)))) (U_2_bool (MapType1Select newPMask@16 o_50 f_54)))))
 :qid |stdinbpl.4168:49|
 :skolemid |154|
 :pattern ( (MapType1Select newPMask@16 o_50 f_54))
)) (= UnfoldingHeap@32 (MapType0Store UnfoldingHeap@31 null (|lseg#sm| (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 ptrn@0 next) next) ptrn@0) newPMask@16))) (and (= UnfoldingHeap@33 UnfoldingHeap@32) (= (ControlFlow 0 235) 234))) anon204_correct)))))
(let ((anon433_Then_correct  (=> (not (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (=> (and (not (= (MapType0Select Heap@61 ptrn@0 next) null)) (= UnfoldingMask@31 (MapType1Store UnfoldingMask@30 (MapType0Select Heap@61 ptrn@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@30 (MapType0Select Heap@61 ptrn@0 next) data)) FullPerm))))) (=> (and (and (and (state Heap@61 UnfoldingMask@31) (not (= (MapType0Select Heap@61 ptrn@0 next) null))) (and (= UnfoldingMask@32 (MapType1Store UnfoldingMask@31 (MapType0Select Heap@61 ptrn@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@31 (MapType0Select Heap@61 ptrn@0 next) next)) FullPerm)))) (state Heap@61 UnfoldingMask@32))) (and (and (= UnfoldingMask@33 (MapType1Store UnfoldingMask@32 null (lseg (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@32 null (lseg (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (MapType0Select Heap@61 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (lseg (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0) (MapType0Select Heap@61 null (lseg (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0)))) (and (state Heap@61 UnfoldingMask@33) (=> (not (= (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0)) (<= (U_2_int (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) data)) (U_2_int (MapType0Select Heap@61 (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) data))))))) (and (=> (= (ControlFlow 0 237) 235) anon434_Then_correct) (=> (= (ControlFlow 0 237) 236) anon434_Else_correct)))))))
(let ((anon433_Else_correct  (=> (and (and (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (= UnfoldingHeap@34 Heap@61)) (and (= UnfoldingMask@34 UnfoldingMask@30) (= (ControlFlow 0 233) 232))) anon205_correct)))
(let ((anon201_correct  (=> (= UnfoldingMask@30 (MapType1Store Mask@66 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (real_2_U (- (U_2_real (MapType1Select Mask@66 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0))) FullPerm)))) (and (=> (= (ControlFlow 0 238) 237) anon433_Then_correct) (=> (= (ControlFlow 0 238) 233) anon433_Else_correct)))))
(let ((anon432_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 241) 238)) anon201_correct)))
(let ((anon432_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 239) (- 0 240)) (<= FullPerm (U_2_real (MapType1Select Mask@66 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@66 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0)))) (=> (= (ControlFlow 0 239) 238) anon201_correct))))))
(let ((anon199_correct  (=> (and (and (= Mask@69 (MapType1Store Mask@68 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (real_2_U (- (U_2_real (MapType1Select Mask@68 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0))) FullPerm)))) (InsidePredicate (lseg ptrn@0 ptrn@0) (MapType0Select Heap@61 null (lseg ptrn@0 ptrn@0)) (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0) (MapType0Select Heap@61 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0)))) (and (|lseg#trigger| Heap@61 (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (= (MapType0Select Heap@61 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (FrameFragment (ite (not (= (MapType0Select Heap@61 ptrn@0 next) ptrn@0)) (CombineFrames (FrameFragment (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next)) (MapType0Select Heap@61 null (lseg (MapType0Select Heap@61 (MapType0Select Heap@61 ptrn@0 next) next) ptrn@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 242) 239) anon432_Then_correct) (=> (= (ControlFlow 0 242) 241) anon432_Else_correct)))))
(let ((anon431_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 245) 242)) anon199_correct)))
(let ((anon431_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 243) (- 0 244)) (<= FullPerm (U_2_real (MapType1Select Mask@68 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@68 null (lseg (MapType0Select Heap@61 ptrn@0 next) ptrn@0)))) (=> (= (ControlFlow 0 243) 242) anon199_correct))))))
(let ((anon197_correct  (=> (= Mask@68 (MapType1Store Mask@67 ptrn@0 next (real_2_U (- (U_2_real (MapType1Select Mask@67 ptrn@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 246) 243) anon431_Then_correct) (=> (= (ControlFlow 0 246) 245) anon431_Else_correct)))))
(let ((anon430_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 249) 246)) anon197_correct)))
(let ((anon430_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 247) (- 0 248)) (<= FullPerm (U_2_real (MapType1Select Mask@67 ptrn@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@67 ptrn@0 next))) (=> (= (ControlFlow 0 247) 246) anon197_correct))))))
(let ((anon195_correct  (=> (= Mask@67 (MapType1Store Mask@66 ptrn@0 data (real_2_U (- (U_2_real (MapType1Select Mask@66 ptrn@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 250) 247) anon430_Then_correct) (=> (= (ControlFlow 0 250) 249) anon430_Else_correct)))))
(let ((anon429_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 253) 250)) anon195_correct)))
(let ((anon429_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 251) (- 0 252)) (<= FullPerm (U_2_real (MapType1Select Mask@66 ptrn@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@66 ptrn@0 data))) (=> (= (ControlFlow 0 251) 250) anon195_correct))))))
(let ((anon428_Then_correct  (=> (not (= ptrn@0 ptrn@0)) (and (=> (= (ControlFlow 0 254) 251) anon429_Then_correct) (=> (= (ControlFlow 0 254) 253) anon429_Else_correct)))))
(let ((anon428_Else_correct  (=> (and (= ptrn@0 ptrn@0) (= Mask@70 Mask@66)) (and (=> (= (ControlFlow 0 228) 226) anon436_Then_correct) (=> (= (ControlFlow 0 228) 227) anon436_Else_correct)))))
(let ((anon192_correct  (=> (and (and (state Heap@61 Mask@66) (state Heap@61 Mask@66)) (and (= index@2 (+ index@1 1)) (state Heap@61 Mask@66))) (and (=> (= (ControlFlow 0 255) (- 0 256)) (HasDirectPerm Mask@66 ptr@1 next)) (=> (HasDirectPerm Mask@66 ptr@1 next) (=> (and (= ptrn@0 (MapType0Select Heap@61 ptr@1 next)) (state Heap@61 Mask@66)) (and (=> (= (ControlFlow 0 255) 254) anon428_Then_correct) (=> (= (ControlFlow 0 255) 228) anon428_Else_correct))))))))
(let ((anon191_correct  (=> (and (and (state Heap@60 Mask@65) (= Mask@66 Mask@65)) (and (= Heap@61 Heap@60) (= (ControlFlow 0 258) 255))) anon192_correct)))
(let ((anon427_Else_correct  (=> (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (=> (and (= Heap@60 Heap@56) (= (ControlFlow 0 260) 258)) anon191_correct))))
(let ((anon427_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (=> (and (= Heap@57 (MapType0Store Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (MapType1Store (MapType0Select Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) data (bool_2_U true)))) (= Heap@58 (MapType0Store Heap@57 null (|lseg#sm| (MapType0Select Heap@57 (MapType0Select Heap@57 ptr@1 next) next) null) (MapType1Store (MapType0Select Heap@57 null (|lseg#sm| (MapType0Select Heap@57 (MapType0Select Heap@57 ptr@1 next) next) null)) (MapType0Select Heap@57 (MapType0Select Heap@57 ptr@1 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_49 T@U) (f_53 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_53))))
(let ((A@@18 (FieldTypeInv0 (type f_53))))
 (=> (and (and (= (type o_49) RefType) (= (type f_53) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|lseg#sm| (MapType0Select Heap@58 (MapType0Select Heap@58 ptr@1 next) next) null)) o_49 f_53)) (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|lseg#sm| (MapType0Select Heap@58 (MapType0Select Heap@58 (MapType0Select Heap@58 ptr@1 next) next) next) null)) o_49 f_53)))) (U_2_bool (MapType1Select newPMask@15 o_49 f_53)))))
 :qid |stdinbpl.4084:45|
 :skolemid |153|
 :pattern ( (MapType1Select newPMask@15 o_49 f_53))
)) (= Heap@59 (MapType0Store Heap@58 null (|lseg#sm| (MapType0Select Heap@58 (MapType0Select Heap@58 ptr@1 next) next) null) newPMask@15))) (and (= Heap@60 Heap@59) (= (ControlFlow 0 259) 258))) anon191_correct)))))
(let ((anon189_correct  (=> (and (state UnfoldingHeap@29 UnfoldingMask@29) (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (<= (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) data)) (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) data))))) (and (=> (= (ControlFlow 0 261) 259) anon427_Then_correct) (=> (= (ControlFlow 0 261) 260) anon427_Else_correct)))))
(let ((anon188_correct  (=> (and (and (state UnfoldingHeap@28 UnfoldingMask@28) (= UnfoldingHeap@29 UnfoldingHeap@28)) (and (= UnfoldingMask@29 UnfoldingMask@28) (= (ControlFlow 0 263) 261))) anon189_correct)))
(let ((anon426_Else_correct  (=> (= (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null) (=> (and (= UnfoldingHeap@28 Heap@56) (= (ControlFlow 0 265) 263)) anon188_correct))))
(let ((anon426_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null)) (=> (and (= UnfoldingHeap@25 (MapType0Store Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null) (MapType1Store (MapType0Select Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null)) (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) data (bool_2_U true)))) (= UnfoldingHeap@26 (MapType0Store UnfoldingHeap@25 null (|lseg#sm| (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 ptr@1 next) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@25 null (|lseg#sm| (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 ptr@1 next) next) next) null)) (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 ptr@1 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_48 T@U) (f_52 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_52))))
(let ((A@@19 (FieldTypeInv0 (type f_52))))
 (=> (and (and (= (type o_48) RefType) (= (type f_52) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@26 null (|lseg#sm| (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 ptr@1 next) next) next) null)) o_48 f_52)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@26 null (|lseg#sm| (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 ptr@1 next) next) next) next) null)) o_48 f_52)))) (U_2_bool (MapType1Select newPMask@14 o_48 f_52)))))
 :qid |stdinbpl.4068:49|
 :skolemid |152|
 :pattern ( (MapType1Select newPMask@14 o_48 f_52))
)) (= UnfoldingHeap@27 (MapType0Store UnfoldingHeap@26 null (|lseg#sm| (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 ptr@1 next) next) next) null) newPMask@14))) (and (= UnfoldingHeap@28 UnfoldingHeap@27) (= (ControlFlow 0 264) 263))) anon188_correct)))))
(let ((anon425_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (=> (and (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (= UnfoldingMask@26 (MapType1Store UnfoldingMask@25 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@25 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@56 UnfoldingMask@26) (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null))) (and (= UnfoldingMask@27 (MapType1Store UnfoldingMask@26 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@26 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next)) FullPerm)))) (state Heap@56 UnfoldingMask@27))) (and (and (= UnfoldingMask@28 (MapType1Store UnfoldingMask@27 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@27 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null)))) (and (state Heap@56 UnfoldingMask@28) (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) data)) (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) data))))))) (and (=> (= (ControlFlow 0 266) 264) anon426_Then_correct) (=> (= (ControlFlow 0 266) 265) anon426_Else_correct)))))))
(let ((anon425_Else_correct  (=> (and (and (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (= UnfoldingHeap@29 Heap@56)) (and (= UnfoldingMask@29 UnfoldingMask@25) (= (ControlFlow 0 262) 261))) anon189_correct)))
(let ((anon424_Then_correct  (=> (not (= (MapType0Select Heap@56 ptr@1 next) null)) (=> (and (and (not (= (MapType0Select Heap@56 ptr@1 next) null)) (= Mask@63 (MapType1Store Mask@62 (MapType0Select Heap@56 ptr@1 next) data (real_2_U (+ (U_2_real (MapType1Select Mask@62 (MapType0Select Heap@56 ptr@1 next) data)) FullPerm))))) (and (state Heap@56 Mask@63) (not (= (MapType0Select Heap@56 ptr@1 next) null)))) (=> (and (and (and (= Mask@64 (MapType1Store Mask@63 (MapType0Select Heap@56 ptr@1 next) next (real_2_U (+ (U_2_real (MapType1Select Mask@63 (MapType0Select Heap@56 ptr@1 next) next)) FullPerm)))) (state Heap@56 Mask@64)) (and (= Mask@65 (MapType1Store Mask@64 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@64 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@56 ptr@1 next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 ptr@1 next) null)) (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null))))) (and (and (state Heap@56 Mask@65) (|lseg#trigger| Heap@56 (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null))) (and (= (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next)) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) next) null)))) EmptyFrame))) (= UnfoldingMask@25 (MapType1Store Mask@65 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@65 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@1 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 267) 266) anon425_Then_correct) (=> (= (ControlFlow 0 267) 262) anon425_Else_correct)))))))
(let ((anon424_Else_correct  (=> (and (and (= (MapType0Select Heap@56 ptr@1 next) null) (= Mask@66 Mask@62)) (and (= Heap@61 Heap@56) (= (ControlFlow 0 257) 255))) anon192_correct)))
(let ((anon423_Else_correct  (=> (and (HasDirectPerm Mask@62 null (lseg (MapType0Select Heap@54 ptr@1 next) null)) (= Heap@56 Heap@54)) (and (=> (= (ControlFlow 0 269) 267) anon424_Then_correct) (=> (= (ControlFlow 0 269) 257) anon424_Else_correct)))))
(let ((anon423_Then_correct  (=> (not (HasDirectPerm Mask@62 null (lseg (MapType0Select Heap@54 ptr@1 next) null))) (=> (and (= Heap@55 (MapType0Store Heap@54 null (lseg (MapType0Select Heap@54 ptr@1 next) null) newVersion@2)) (= Heap@56 Heap@55)) (and (=> (= (ControlFlow 0 268) 267) anon424_Then_correct) (=> (= (ControlFlow 0 268) 257) anon424_Else_correct))))))
(let ((anon182_correct  (=> (= Mask@62 (MapType1Store Mask@34 null (lseg (MapType0Select Heap@54 ptr@1 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select Heap@54 ptr@1 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 270) 268) anon423_Then_correct) (=> (= (ControlFlow 0 270) 269) anon423_Else_correct)))))
(let ((anon422_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 273) 270)) anon182_correct)))
(let ((anon422_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 271) (- 0 272)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select Heap@54 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select Heap@54 ptr@1 next) null)))) (=> (= (ControlFlow 0 271) 270) anon182_correct))))))
(let ((anon180_correct  (=> (and (and (not (= (MapType0Select Heap@54 ptr@1 next) null)) (< (U_2_int (MapType0Select Heap@54 (MapType0Select Heap@54 ptr@1 next) data)) elem)) (and (state Heap@54 Mask@34) (U_2_bool (MapType0Select Heap@54 ptrn $allocated)))) (and (=> (= (ControlFlow 0 274) (- 0 275)) (HasDirectPerm Mask@34 ptr@1 next)) (=> (HasDirectPerm Mask@34 ptr@1 next) (=> (and (|lseg#trigger| Heap@54 (lseg (MapType0Select Heap@54 ptr@1 next) null)) (= (MapType0Select Heap@54 null (lseg (MapType0Select Heap@54 ptr@1 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@54 ptr@1 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@54 (MapType0Select Heap@54 ptr@1 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@54 (MapType0Select Heap@54 ptr@1 next) next)) (MapType0Select Heap@54 null (lseg (MapType0Select Heap@54 (MapType0Select Heap@54 ptr@1 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 274) 271) anon422_Then_correct) (=> (= (ControlFlow 0 274) 273) anon422_Else_correct))))))))
(let ((anon179_correct  (=> (state Heap@53 Mask@34) (=> (and (= Heap@54 Heap@53) (= (ControlFlow 0 277) 274)) anon180_correct))))
(let ((anon421_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 ptr@1 next) null) (=> (and (= Heap@53 ExhaleHeap@0) (= (ControlFlow 0 279) 277)) anon179_correct))))
(let ((anon421_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (=> (and (= Heap@50 (MapType0Store ExhaleHeap@0 null (|lseg#sm| (MapType0Select ExhaleHeap@0 ptr@1 next) null) (MapType1Store (MapType0Select ExhaleHeap@0 null (|lseg#sm| (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (MapType0Select ExhaleHeap@0 ptr@1 next) data (bool_2_U true)))) (= Heap@51 (MapType0Store Heap@50 null (|lseg#sm| (MapType0Select Heap@50 ptr@1 next) null) (MapType1Store (MapType0Select Heap@50 null (|lseg#sm| (MapType0Select Heap@50 ptr@1 next) null)) (MapType0Select Heap@50 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_47 T@U) (f_51 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_51))))
(let ((A@@20 (FieldTypeInv0 (type f_51))))
 (=> (and (and (= (type o_47) RefType) (= (type f_51) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@51 null (|lseg#sm| (MapType0Select Heap@51 ptr@1 next) null)) o_47 f_51)) (U_2_bool (MapType1Select (MapType0Select Heap@51 null (|lseg#sm| (MapType0Select Heap@51 (MapType0Select Heap@51 ptr@1 next) next) null)) o_47 f_51)))) (U_2_bool (MapType1Select newPMask@13 o_47 f_51)))))
 :qid |stdinbpl.3984:43|
 :skolemid |151|
 :pattern ( (MapType1Select newPMask@13 o_47 f_51))
)) (= Heap@52 (MapType0Store Heap@51 null (|lseg#sm| (MapType0Select Heap@51 ptr@1 next) null) newPMask@13))) (and (= Heap@53 Heap@52) (= (ControlFlow 0 278) 277))) anon179_correct)))))
(let ((anon177_correct  (=> (state UnfoldingHeap@24 UnfoldingMask@24) (and (=> (= (ControlFlow 0 280) (- 0 283)) (HasDirectPerm UnfoldingMask@24 ptr@1 next)) (=> (HasDirectPerm UnfoldingMask@24 ptr@1 next) (and (=> (= (ControlFlow 0 280) (- 0 282)) (HasDirectPerm UnfoldingMask@24 ptr@1 next)) (=> (HasDirectPerm UnfoldingMask@24 ptr@1 next) (and (=> (= (ControlFlow 0 280) (- 0 281)) (HasDirectPerm UnfoldingMask@24 (MapType0Select UnfoldingHeap@24 ptr@1 next) data)) (=> (HasDirectPerm UnfoldingMask@24 (MapType0Select UnfoldingHeap@24 ptr@1 next) data) (and (=> (= (ControlFlow 0 280) 278) anon421_Then_correct) (=> (= (ControlFlow 0 280) 279) anon421_Else_correct)))))))))))
(let ((anon176_correct  (=> (and (and (state UnfoldingHeap@23 UnfoldingMask@23) (= UnfoldingHeap@24 UnfoldingHeap@23)) (and (= UnfoldingMask@24 UnfoldingMask@23) (= (ControlFlow 0 285) 280))) anon177_correct)))
(let ((anon420_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (=> (and (= UnfoldingHeap@23 ExhaleHeap@0) (= (ControlFlow 0 287) 285)) anon176_correct))))
(let ((anon420_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (=> (and (= UnfoldingHeap@20 (MapType0Store ExhaleHeap@0 null (|lseg#sm| (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (MapType1Store (MapType0Select ExhaleHeap@0 null (|lseg#sm| (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) data (bool_2_U true)))) (= UnfoldingHeap@21 (MapType0Store UnfoldingHeap@20 null (|lseg#sm| (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 ptr@1 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@20 null (|lseg#sm| (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 ptr@1 next) next) null)) (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 ptr@1 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_46 T@U) (f_50 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_50))))
(let ((A@@21 (FieldTypeInv0 (type f_50))))
 (=> (and (and (= (type o_46) RefType) (= (type f_50) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@21 null (|lseg#sm| (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 ptr@1 next) next) null)) o_46 f_50)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@21 null (|lseg#sm| (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 ptr@1 next) next) next) null)) o_46 f_50)))) (U_2_bool (MapType1Select newPMask@12 o_46 f_50)))))
 :qid |stdinbpl.3963:45|
 :skolemid |150|
 :pattern ( (MapType1Select newPMask@12 o_46 f_50))
)) (= UnfoldingHeap@22 (MapType0Store UnfoldingHeap@21 null (|lseg#sm| (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 ptr@1 next) next) null) newPMask@12))) (and (= UnfoldingHeap@23 UnfoldingHeap@22) (= (ControlFlow 0 286) 285))) anon176_correct)))))
(let ((anon174_correct  (=> (and (state Unfolding1Heap@4 Unfolding1Mask@4) (=> (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (<= (U_2_int (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) data)) (U_2_int (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) data))))) (and (=> (= (ControlFlow 0 288) 286) anon420_Then_correct) (=> (= (ControlFlow 0 288) 287) anon420_Else_correct)))))
(let ((anon173_correct  (=> (and (and (state Unfolding1Heap@3 Unfolding1Mask@3) (= Unfolding1Heap@4 Unfolding1Heap@3)) (and (= Unfolding1Mask@4 Unfolding1Mask@3) (= (ControlFlow 0 290) 288))) anon174_correct)))
(let ((anon419_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null) (=> (and (= Unfolding1Heap@3 ExhaleHeap@0) (= (ControlFlow 0 292) 290)) anon173_correct))))
(let ((anon419_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null)) (=> (and (= Unfolding1Heap@0 (MapType0Store ExhaleHeap@0 null (|lseg#sm| (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null) (MapType1Store (MapType0Select ExhaleHeap@0 null (|lseg#sm| (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null)) (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@1 (MapType0Store Unfolding1Heap@0 null (|lseg#sm| (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 ptr@1 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@0 null (|lseg#sm| (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 ptr@1 next) next) next) null)) (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 ptr@1 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_45 T@U) (f_49 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_49))))
(let ((A@@22 (FieldTypeInv0 (type f_49))))
 (=> (and (and (= (type o_45) RefType) (= (type f_49) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@1 null (|lseg#sm| (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 ptr@1 next) next) next) null)) o_45 f_49)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@1 null (|lseg#sm| (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 ptr@1 next) next) next) next) null)) o_45 f_49)))) (U_2_bool (MapType1Select newPMask@11 o_45 f_49)))))
 :qid |stdinbpl.3947:49|
 :skolemid |149|
 :pattern ( (MapType1Select newPMask@11 o_45 f_49))
)) (= Unfolding1Heap@2 (MapType0Store Unfolding1Heap@1 null (|lseg#sm| (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 ptr@1 next) next) next) null) newPMask@11))) (and (= Unfolding1Heap@3 Unfolding1Heap@2) (= (ControlFlow 0 291) 290))) anon173_correct)))))
(let ((anon418_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (=> (and (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (= Unfolding1Mask@1 (MapType1Store Unfolding1Mask@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) data)) FullPerm))))) (=> (and (and (and (state ExhaleHeap@0 Unfolding1Mask@1) (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null))) (and (= Unfolding1Mask@2 (MapType1Store Unfolding1Mask@1 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@1 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next)) FullPerm)))) (state ExhaleHeap@0 Unfolding1Mask@2))) (and (and (= Unfolding1Mask@3 (MapType1Store Unfolding1Mask@2 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@2 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null) (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null)))) (and (state ExhaleHeap@0 Unfolding1Mask@3) (=> (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null)) (<= (U_2_int (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) data)) (U_2_int (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) data))))))) (and (=> (= (ControlFlow 0 293) 291) anon419_Then_correct) (=> (= (ControlFlow 0 293) 292) anon419_Else_correct)))))))
(let ((anon418_Else_correct  (=> (and (and (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (= Unfolding1Heap@4 ExhaleHeap@0)) (and (= Unfolding1Mask@4 Unfolding1Mask@0) (= (ControlFlow 0 289) 288))) anon174_correct)))
(let ((anon417_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (=> (and (and (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (= UnfoldingMask@21 (MapType1Store UnfoldingMask@20 (MapType0Select ExhaleHeap@0 ptr@1 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@20 (MapType0Select ExhaleHeap@0 ptr@1 next) data)) FullPerm))))) (and (state ExhaleHeap@0 UnfoldingMask@21) (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (=> (and (and (and (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 (MapType0Select ExhaleHeap@0 ptr@1 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 (MapType0Select ExhaleHeap@0 ptr@1 next) next)) FullPerm)))) (state ExhaleHeap@0 UnfoldingMask@22)) (and (= UnfoldingMask@23 (MapType1Store UnfoldingMask@22 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@22 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null) (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null))))) (and (and (state ExhaleHeap@0 UnfoldingMask@23) (|lseg#trigger| ExhaleHeap@0 (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null))) (and (= (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) data)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next)) (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@0 (MapType1Store UnfoldingMask@23 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@23 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 294) 293) anon418_Then_correct) (=> (= (ControlFlow 0 294) 289) anon418_Else_correct)))))))
(let ((anon417_Else_correct  (=> (and (and (= (MapType0Select ExhaleHeap@0 ptr@1 next) null) (= UnfoldingHeap@24 ExhaleHeap@0)) (and (= UnfoldingMask@24 UnfoldingMask@20) (= (ControlFlow 0 284) 280))) anon177_correct)))
(let ((anon169_correct  (=> (= UnfoldingMask@20 (MapType1Store Mask@34 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 295) 294) anon417_Then_correct) (=> (= (ControlFlow 0 295) 284) anon417_Else_correct)))))
(let ((anon416_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 298) 295)) anon169_correct)))
(let ((anon416_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 296) (- 0 297)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (=> (= (ControlFlow 0 296) 295) anon169_correct))))))
(let ((anon415_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (=> (and (|lseg#trigger| ExhaleHeap@0 (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (= (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) data)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next)) (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 299) 296) anon416_Then_correct) (=> (= (ControlFlow 0 299) 298) anon416_Else_correct))))))
(let ((anon415_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 ptr@1 next) null) (=> (and (= Heap@54 ExhaleHeap@0) (= (ControlFlow 0 276) 274)) anon180_correct))))
(let ((anon414_Then_correct  (=> (and (and (and (state ExhaleHeap@0 ZeroMask) (not (= this@@38 null))) (and (= Mask@30 (MapType1Store ZeroMask this@@38 head (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@38 head)) FullPerm)))) (state ExhaleHeap@0 Mask@30))) (and (and (not (= ptr@1 null)) (= Mask@31 (MapType1Store Mask@30 ptr@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@30 ptr@1 next)) FullPerm))))) (and (state ExhaleHeap@0 Mask@31) (not (= ptr@1 null))))) (=> (and (and (and (and (= Mask@32 (MapType1Store Mask@31 ptr@1 data (real_2_U (+ (U_2_real (MapType1Select Mask@31 ptr@1 data)) FullPerm)))) (state ExhaleHeap@0 Mask@32)) (and (<= (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data)) elem) (= Mask@33 (MapType1Store Mask@32 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@32 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))) FullPerm)))))) (and (and (state ExhaleHeap@0 Mask@33) (= Mask@34 (MapType1Store Mask@33 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) (real_2_U (+ (U_2_real (MapType1Select Mask@33 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))) FullPerm))))) (and (state ExhaleHeap@0 Mask@34) (state ExhaleHeap@0 Mask@34)))) (and (and (and (forall ((i_8 Int) ) (!  (=> (and (<= 0 i_8) (< i_8 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (<= (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) i_8)) (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data))))
 :qid |stdinbpl.3868:28|
 :skolemid |147|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)) (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) i_8))
)) (state ExhaleHeap@0 Mask@34)) (and (forall ((i_9 Int) ) (!  (=> (and (<= 0 i_9) (< i_9 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (<= (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data)) (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null) i_9))))
 :qid |stdinbpl.3873:28|
 :skolemid |148|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (MapType0Select ExhaleHeap@0 ptr@1 next) null) i_9))
)) (state ExhaleHeap@0 Mask@34))) (and (and (= (- index@1 1) (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))) (state ExhaleHeap@0 Mask@34)) (and (|Seq#Equal| (content Heap@@38 this@@38) (|Seq#Append| (|Seq#Append| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) (|Seq#Singleton| (MapType0Select ExhaleHeap@0 ptr@1 data))) (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null))) (state ExhaleHeap@0 Mask@34))))) (and (=> (= (ControlFlow 0 300) (- 0 301)) (HasDirectPerm Mask@34 ptr@1 next)) (=> (HasDirectPerm Mask@34 ptr@1 next) (and (=> (= (ControlFlow 0 300) 299) anon415_Then_correct) (=> (= (ControlFlow 0 300) 276) anon415_Else_correct))))))))
(let ((anon328_correct  (=> (= Mask@110 (MapType1Store Mask@109 null (List this@@38) (real_2_U (- (U_2_real (MapType1Select Mask@109 null (List this@@38))) FullPerm)))) (and (=> (= (ControlFlow 0 10) (- 0 12)) (<= 0 index@3)) (=> (<= 0 index@3) (and (=> (= (ControlFlow 0 10) (- 0 11)) (<= index@3 (|Seq#Length| (content Heap@@38 this@@38)))) (=> (<= index@3 (|Seq#Length| (content Heap@@38 this@@38))) (=> (= (ControlFlow 0 10) (- 0 9)) (|Seq#Equal| (content Heap@112 this@@38) (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) index@3) 0) (|Seq#Singleton| (int_2_U elem))) (|Seq#Drop| (content Heap@@38 this@@38) index@3)))))))))))
(let ((anon496_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 15) 10)) anon328_correct)))
(let ((anon496_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (<= FullPerm (U_2_real (MapType1Select Mask@109 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@109 null (List this@@38)))) (=> (= (ControlFlow 0 13) 10) anon328_correct))))))
(let ((anon326_correct  (=> (= Heap@111 (MapType0Store Heap@110 null (|List#sm| this@@38) (MapType1Store (MapType0Select Heap@110 null (|List#sm| this@@38)) this@@38 head (bool_2_U true)))) (=> (and (and (forall ((o_62 T@U) (f_66 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_66))))
(let ((A@@23 (FieldTypeInv0 (type f_66))))
 (=> (and (and (= (type o_62) RefType) (= (type f_66) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@111 null (|List#sm| this@@38)) o_62 f_66)) (U_2_bool (MapType1Select (MapType0Select Heap@111 null (|lseg#sm| (MapType0Select Heap@111 this@@38 head) null)) o_62 f_66)))) (U_2_bool (MapType1Select newPMask@28 o_62 f_66)))))
 :qid |stdinbpl.4857:27|
 :skolemid |170|
 :pattern ( (MapType1Select newPMask@28 o_62 f_66))
)) (= Heap@112 (MapType0Store Heap@111 null (|List#sm| this@@38) newPMask@28))) (and (state Heap@112 Mask@109) (state Heap@112 Mask@109))) (and (=> (= (ControlFlow 0 16) 13) anon496_Then_correct) (=> (= (ControlFlow 0 16) 15) anon496_Else_correct))))))
(let ((anon495_Else_correct  (=> (HasDirectPerm Mask@109 null (List this@@38)) (=> (and (= Heap@110 Heap@107) (= (ControlFlow 0 18) 16)) anon326_correct))))
(let ((anon495_Then_correct  (=> (not (HasDirectPerm Mask@109 null (List this@@38))) (=> (and (and (= Heap@108 (MapType0Store Heap@107 null (|List#sm| this@@38) ZeroPMask)) (= Heap@109 (MapType0Store Heap@108 null (List this@@38) freshVersion@7))) (and (= Heap@110 Heap@109) (= (ControlFlow 0 17) 16))) anon326_correct))))
(let ((anon324_correct  (=> (= Mask@108 (MapType1Store Mask@107 null (lseg (MapType0Select Heap@107 this@@38 head) null) (real_2_U (- (U_2_real (MapType1Select Mask@107 null (lseg (MapType0Select Heap@107 this@@38 head) null))) FullPerm)))) (=> (and (InsidePredicate (List this@@38) (MapType0Select Heap@107 null (List this@@38)) (lseg (MapType0Select Heap@107 this@@38 head) null) (MapType0Select Heap@107 null (lseg (MapType0Select Heap@107 this@@38 head) null))) (= Mask@109 (MapType1Store Mask@108 null (List this@@38) (real_2_U (+ (U_2_real (MapType1Select Mask@108 null (List this@@38))) FullPerm))))) (=> (and (and (state Heap@107 Mask@109) (state Heap@107 Mask@109)) (and (|List#trigger| Heap@107 (List this@@38)) (= (MapType0Select Heap@107 null (List this@@38)) (CombineFrames (FrameFragment (MapType0Select Heap@107 this@@38 head)) (MapType0Select Heap@107 null (lseg (MapType0Select Heap@107 this@@38 head) null)))))) (and (=> (= (ControlFlow 0 19) 17) anon495_Then_correct) (=> (= (ControlFlow 0 19) 18) anon495_Else_correct)))))))
(let ((anon494_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 22) 19)) anon324_correct)))
(let ((anon494_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (<= FullPerm (U_2_real (MapType1Select Mask@107 null (lseg (MapType0Select Heap@107 this@@38 head) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@107 null (lseg (MapType0Select Heap@107 this@@38 head) null)))) (=> (= (ControlFlow 0 20) 19) anon324_correct))))))
(let ((anon322_correct  (=> (= Mask@107 (MapType1Store Mask@106 this@@38 head (real_2_U (- (U_2_real (MapType1Select Mask@106 this@@38 head)) FullPerm)))) (and (=> (= (ControlFlow 0 23) 20) anon494_Then_correct) (=> (= (ControlFlow 0 23) 22) anon494_Else_correct)))))
(let ((anon493_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 26) 23)) anon322_correct)))
(let ((anon493_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (<= FullPerm (U_2_real (MapType1Select Mask@106 this@@38 head)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@106 this@@38 head))) (=> (= (ControlFlow 0 24) 23) anon322_correct))))))
(let ((anon320_correct  (=> (state Heap@107 Mask@106) (and (=> (= (ControlFlow 0 27) 24) anon493_Then_correct) (=> (= (ControlFlow 0 27) 26) anon493_Else_correct)))))
(let ((anon81_correct  (=> (and (state Heap@105 Mask@105) (state Heap@105 Mask@105)) (and (=> (= (ControlFlow 0 433) (- 0 434)) (= FullPerm (U_2_real (MapType1Select Mask@105 this@@38 head)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@105 this@@38 head))) (=> (and (= Heap@106 (MapType0Store Heap@105 this@@38 head freshObj@0)) (state Heap@106 Mask@105)) (=> (and (and (= Heap@107 Heap@106) (= index@3 0)) (and (= Mask@106 Mask@105) (= (ControlFlow 0 433) 27))) anon320_correct)))))))
(let ((anon370_Else_correct  (=> (= freshObj@0 null) (=> (and (= Heap@105 Heap@101) (= (ControlFlow 0 436) 433)) anon81_correct))))
(let ((anon370_Then_correct  (=> (not (= freshObj@0 null)) (=> (and (= Heap@102 (MapType0Store Heap@101 null (|lseg#sm| freshObj@0 null) (MapType1Store (MapType0Select Heap@101 null (|lseg#sm| freshObj@0 null)) freshObj@0 data (bool_2_U true)))) (= Heap@103 (MapType0Store Heap@102 null (|lseg#sm| freshObj@0 null) (MapType1Store (MapType0Select Heap@102 null (|lseg#sm| freshObj@0 null)) freshObj@0 next (bool_2_U true))))) (=> (and (and (forall ((o_41 T@U) (f_45 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_45))))
(let ((A@@24 (FieldTypeInv0 (type f_45))))
 (=> (and (and (= (type o_41) RefType) (= (type f_45) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@103 null (|lseg#sm| freshObj@0 null)) o_41 f_45)) (U_2_bool (MapType1Select (MapType0Select Heap@103 null (|lseg#sm| (MapType0Select Heap@103 freshObj@0 next) null)) o_41 f_45)))) (U_2_bool (MapType1Select newPMask@27 o_41 f_45)))))
 :qid |stdinbpl.3379:33|
 :skolemid |139|
 :pattern ( (MapType1Select newPMask@27 o_41 f_45))
)) (= Heap@104 (MapType0Store Heap@103 null (|lseg#sm| freshObj@0 null) newPMask@27))) (and (= Heap@105 Heap@104) (= (ControlFlow 0 435) 433))) anon81_correct)))))
(let ((anon369_Else_correct  (=> (and (HasDirectPerm Mask@105 null (lseg freshObj@0 null)) (= Heap@101 Heap@98)) (and (=> (= (ControlFlow 0 438) 435) anon370_Then_correct) (=> (= (ControlFlow 0 438) 436) anon370_Else_correct)))))
(let ((anon369_Then_correct  (=> (and (and (not (HasDirectPerm Mask@105 null (lseg freshObj@0 null))) (= Heap@99 (MapType0Store Heap@98 null (|lseg#sm| freshObj@0 null) ZeroPMask))) (and (= Heap@100 (MapType0Store Heap@99 null (lseg freshObj@0 null) freshVersion@6)) (= Heap@101 Heap@100))) (and (=> (= (ControlFlow 0 437) 435) anon370_Then_correct) (=> (= (ControlFlow 0 437) 436) anon370_Else_correct)))))
(let ((anon77_correct  (=> (and (state Heap@98 Mask@104) (= Mask@105 (MapType1Store Mask@104 null (lseg freshObj@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@104 null (lseg freshObj@0 null))) FullPerm))))) (=> (and (and (state Heap@98 Mask@105) (state Heap@98 Mask@105)) (and (|lseg#trigger| Heap@98 (lseg freshObj@0 null)) (= (MapType0Select Heap@98 null (lseg freshObj@0 null)) (FrameFragment (ite (not (= freshObj@0 null)) (CombineFrames (FrameFragment (MapType0Select Heap@98 freshObj@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@98 freshObj@0 next)) (MapType0Select Heap@98 null (lseg (MapType0Select Heap@98 freshObj@0 next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 439) 437) anon369_Then_correct) (=> (= (ControlFlow 0 439) 438) anon369_Else_correct))))))
(let ((anon368_Else_correct  (=> (= (MapType0Select Heap@94 freshObj@0 next) null) (=> (and (= Heap@98 Heap@94) (= (ControlFlow 0 441) 439)) anon77_correct))))
(let ((anon368_Then_correct  (=> (not (= (MapType0Select Heap@94 freshObj@0 next) null)) (=> (and (= Heap@95 (MapType0Store Heap@94 null (|lseg#sm| (MapType0Select Heap@94 freshObj@0 next) null) (MapType1Store (MapType0Select Heap@94 null (|lseg#sm| (MapType0Select Heap@94 freshObj@0 next) null)) (MapType0Select Heap@94 freshObj@0 next) data (bool_2_U true)))) (= Heap@96 (MapType0Store Heap@95 null (|lseg#sm| (MapType0Select Heap@95 freshObj@0 next) null) (MapType1Store (MapType0Select Heap@95 null (|lseg#sm| (MapType0Select Heap@95 freshObj@0 next) null)) (MapType0Select Heap@95 freshObj@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_40 T@U) (f_44 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_44))))
(let ((A@@25 (FieldTypeInv0 (type f_44))))
 (=> (and (and (= (type o_40) RefType) (= (type f_44) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Heap@96 null (|lseg#sm| (MapType0Select Heap@96 freshObj@0 next) null)) o_40 f_44)) (U_2_bool (MapType1Select (MapType0Select Heap@96 null (|lseg#sm| (MapType0Select Heap@96 (MapType0Select Heap@96 freshObj@0 next) next) null)) o_40 f_44)))) (U_2_bool (MapType1Select newPMask@26 o_40 f_44)))))
 :qid |stdinbpl.3357:35|
 :skolemid |138|
 :pattern ( (MapType1Select newPMask@26 o_40 f_44))
)) (= Heap@97 (MapType0Store Heap@96 null (|lseg#sm| (MapType0Select Heap@96 freshObj@0 next) null) newPMask@26))) (and (= Heap@98 Heap@97) (= (ControlFlow 0 440) 439))) anon77_correct)))))
(let ((anon367_Else_correct  (=> (and (= (MapType0Select Heap@94 freshObj@0 next) null) (= Mask@104 Mask@103)) (and (=> (= (ControlFlow 0 445) 440) anon368_Then_correct) (=> (= (ControlFlow 0 445) 441) anon368_Else_correct)))))
(let ((anon367_Then_correct  (=> (not (= (MapType0Select Heap@94 freshObj@0 next) null)) (and (=> (= (ControlFlow 0 443) (- 0 444)) (<= (U_2_int (MapType0Select Heap@94 freshObj@0 data)) (U_2_int (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@94 freshObj@0 data)) (U_2_int (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) data))) (=> (= Mask@104 Mask@103) (and (=> (= (ControlFlow 0 443) 440) anon368_Then_correct) (=> (= (ControlFlow 0 443) 441) anon368_Else_correct))))))))
(let ((anon73_correct  (=> (state UnfoldingHeap@49 UnfoldingMask@49) (and (=> (= (ControlFlow 0 446) 443) anon367_Then_correct) (=> (= (ControlFlow 0 446) 445) anon367_Else_correct)))))
(let ((anon72_correct  (=> (and (and (state UnfoldingHeap@48 UnfoldingMask@48) (= UnfoldingHeap@49 UnfoldingHeap@48)) (and (= UnfoldingMask@49 UnfoldingMask@48) (= (ControlFlow 0 448) 446))) anon73_correct)))
(let ((anon366_Else_correct  (=> (= (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null) (=> (and (= UnfoldingHeap@48 Heap@94) (= (ControlFlow 0 450) 448)) anon72_correct))))
(let ((anon366_Then_correct  (=> (not (= (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null)) (=> (and (= UnfoldingHeap@45 (MapType0Store Heap@94 null (|lseg#sm| (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null) (MapType1Store (MapType0Select Heap@94 null (|lseg#sm| (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null)) (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@46 (MapType0Store UnfoldingHeap@45 null (|lseg#sm| (MapType0Select UnfoldingHeap@45 (MapType0Select UnfoldingHeap@45 freshObj@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@45 null (|lseg#sm| (MapType0Select UnfoldingHeap@45 (MapType0Select UnfoldingHeap@45 freshObj@0 next) next) null)) (MapType0Select UnfoldingHeap@45 (MapType0Select UnfoldingHeap@45 freshObj@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_39 T@U) (f_43 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_43))))
(let ((A@@26 (FieldTypeInv0 (type f_43))))
 (=> (and (and (= (type o_39) RefType) (= (type f_43) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@46 null (|lseg#sm| (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 freshObj@0 next) next) null)) o_39 f_43)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@46 null (|lseg#sm| (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 freshObj@0 next) next) next) null)) o_39 f_43)))) (U_2_bool (MapType1Select newPMask@25 o_39 f_43)))))
 :qid |stdinbpl.3337:41|
 :skolemid |137|
 :pattern ( (MapType1Select newPMask@25 o_39 f_43))
)) (= UnfoldingHeap@47 (MapType0Store UnfoldingHeap@46 null (|lseg#sm| (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 freshObj@0 next) next) null) newPMask@25))) (and (= UnfoldingHeap@48 UnfoldingHeap@47) (= (ControlFlow 0 449) 448))) anon72_correct)))))
(let ((anon365_Then_correct  (=> (not (= (MapType0Select Heap@94 freshObj@0 next) null)) (=> (and (not (= (MapType0Select Heap@94 freshObj@0 next) null)) (= UnfoldingMask@46 (MapType1Store UnfoldingMask@45 (MapType0Select Heap@94 freshObj@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@45 (MapType0Select Heap@94 freshObj@0 next) data)) FullPerm))))) (=> (and (and (and (state Heap@94 UnfoldingMask@46) (not (= (MapType0Select Heap@94 freshObj@0 next) null))) (and (= UnfoldingMask@47 (MapType1Store UnfoldingMask@46 (MapType0Select Heap@94 freshObj@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@46 (MapType0Select Heap@94 freshObj@0 next) next)) FullPerm)))) (state Heap@94 UnfoldingMask@47))) (and (and (= UnfoldingMask@48 (MapType1Store UnfoldingMask@47 null (lseg (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@47 null (lseg (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@94 freshObj@0 next) null) (MapType0Select Heap@94 null (lseg (MapType0Select Heap@94 freshObj@0 next) null)) (lseg (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null) (MapType0Select Heap@94 null (lseg (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null)))) (and (state Heap@94 UnfoldingMask@48) (=> (not (= (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) data)) (U_2_int (MapType0Select Heap@94 (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) data))))))) (and (=> (= (ControlFlow 0 451) 449) anon366_Then_correct) (=> (= (ControlFlow 0 451) 450) anon366_Else_correct)))))))
(let ((anon365_Else_correct  (=> (and (and (= (MapType0Select Heap@94 freshObj@0 next) null) (= UnfoldingHeap@49 Heap@94)) (and (= UnfoldingMask@49 UnfoldingMask@45) (= (ControlFlow 0 447) 446))) anon73_correct)))
(let ((anon69_correct  (=> (= UnfoldingMask@45 (MapType1Store Mask@100 null (lseg (MapType0Select Heap@94 freshObj@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@100 null (lseg (MapType0Select Heap@94 freshObj@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 452) 451) anon365_Then_correct) (=> (= (ControlFlow 0 452) 447) anon365_Else_correct)))))
(let ((anon364_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 455) 452)) anon69_correct)))
(let ((anon364_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 453) (- 0 454)) (<= FullPerm (U_2_real (MapType1Select Mask@100 null (lseg (MapType0Select Heap@94 freshObj@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@100 null (lseg (MapType0Select Heap@94 freshObj@0 next) null)))) (=> (= (ControlFlow 0 453) 452) anon69_correct))))))
(let ((anon67_correct  (=> (and (and (= Mask@103 (MapType1Store Mask@102 null (lseg (MapType0Select Heap@94 freshObj@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@102 null (lseg (MapType0Select Heap@94 freshObj@0 next) null))) FullPerm)))) (InsidePredicate (lseg freshObj@0 null) (MapType0Select Heap@94 null (lseg freshObj@0 null)) (lseg (MapType0Select Heap@94 freshObj@0 next) null) (MapType0Select Heap@94 null (lseg (MapType0Select Heap@94 freshObj@0 next) null)))) (and (|lseg#trigger| Heap@94 (lseg (MapType0Select Heap@94 freshObj@0 next) null)) (= (MapType0Select Heap@94 null (lseg (MapType0Select Heap@94 freshObj@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@94 freshObj@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next)) (MapType0Select Heap@94 null (lseg (MapType0Select Heap@94 (MapType0Select Heap@94 freshObj@0 next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 456) 453) anon364_Then_correct) (=> (= (ControlFlow 0 456) 455) anon364_Else_correct)))))
(let ((anon363_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 459) 456)) anon67_correct)))
(let ((anon363_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 457) (- 0 458)) (<= FullPerm (U_2_real (MapType1Select Mask@102 null (lseg (MapType0Select Heap@94 freshObj@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@102 null (lseg (MapType0Select Heap@94 freshObj@0 next) null)))) (=> (= (ControlFlow 0 457) 456) anon67_correct))))))
(let ((anon65_correct  (=> (= Mask@102 (MapType1Store Mask@101 freshObj@0 next (real_2_U (- (U_2_real (MapType1Select Mask@101 freshObj@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 460) 457) anon363_Then_correct) (=> (= (ControlFlow 0 460) 459) anon363_Else_correct)))))
(let ((anon362_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 463) 460)) anon65_correct)))
(let ((anon362_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 461) (- 0 462)) (<= FullPerm (U_2_real (MapType1Select Mask@101 freshObj@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@101 freshObj@0 next))) (=> (= (ControlFlow 0 461) 460) anon65_correct))))))
(let ((anon63_correct  (=> (= Mask@101 (MapType1Store Mask@100 freshObj@0 data (real_2_U (- (U_2_real (MapType1Select Mask@100 freshObj@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 464) 461) anon362_Then_correct) (=> (= (ControlFlow 0 464) 463) anon362_Else_correct)))))
(let ((anon361_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 467) 464)) anon63_correct)))
(let ((anon361_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 465) (- 0 466)) (<= FullPerm (U_2_real (MapType1Select Mask@100 freshObj@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@100 freshObj@0 data))) (=> (= (ControlFlow 0 465) 464) anon63_correct))))))
(let ((anon360_Then_correct  (=> (not (= freshObj@0 null)) (and (=> (= (ControlFlow 0 468) 465) anon361_Then_correct) (=> (= (ControlFlow 0 468) 467) anon361_Else_correct)))))
(let ((anon360_Else_correct  (=> (and (= freshObj@0 null) (= Mask@104 Mask@100)) (and (=> (= (ControlFlow 0 442) 440) anon368_Then_correct) (=> (= (ControlFlow 0 442) 441) anon368_Else_correct)))))
(let ((anon60_correct  (=> (and (state Heap@94 Mask@100) (state Heap@94 Mask@100)) (and (=> (= (ControlFlow 0 469) 468) anon360_Then_correct) (=> (= (ControlFlow 0 469) 442) anon360_Else_correct)))))
(let ((anon359_Else_correct  (=> (= (MapType0Select Heap@90 this@@38 head) null) (=> (and (= Heap@94 Heap@90) (= (ControlFlow 0 471) 469)) anon60_correct))))
(let ((anon359_Then_correct  (=> (not (= (MapType0Select Heap@90 this@@38 head) null)) (=> (and (= Heap@91 (MapType0Store Heap@90 null (|lseg#sm| (MapType0Select Heap@90 this@@38 head) null) (MapType1Store (MapType0Select Heap@90 null (|lseg#sm| (MapType0Select Heap@90 this@@38 head) null)) (MapType0Select Heap@90 this@@38 head) data (bool_2_U true)))) (= Heap@92 (MapType0Store Heap@91 null (|lseg#sm| (MapType0Select Heap@91 this@@38 head) null) (MapType1Store (MapType0Select Heap@91 null (|lseg#sm| (MapType0Select Heap@91 this@@38 head) null)) (MapType0Select Heap@91 this@@38 head) next (bool_2_U true))))) (=> (and (and (forall ((o_38 T@U) (f_42 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_42))))
(let ((A@@27 (FieldTypeInv0 (type f_42))))
 (=> (and (and (= (type o_38) RefType) (= (type f_42) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Heap@92 null (|lseg#sm| (MapType0Select Heap@92 this@@38 head) null)) o_38 f_42)) (U_2_bool (MapType1Select (MapType0Select Heap@92 null (|lseg#sm| (MapType0Select Heap@92 (MapType0Select Heap@92 this@@38 head) next) null)) o_38 f_42)))) (U_2_bool (MapType1Select newPMask@24 o_38 f_42)))))
 :qid |stdinbpl.3267:33|
 :skolemid |136|
 :pattern ( (MapType1Select newPMask@24 o_38 f_42))
)) (= Heap@93 (MapType0Store Heap@92 null (|lseg#sm| (MapType0Select Heap@92 this@@38 head) null) newPMask@24))) (and (= Heap@94 Heap@93) (= (ControlFlow 0 470) 469))) anon60_correct)))))
(let ((anon358_Else_correct  (=> (and (HasDirectPerm Mask@100 null (lseg (MapType0Select Heap@87 this@@38 head) null)) (= Heap@90 Heap@87)) (and (=> (= (ControlFlow 0 473) 470) anon359_Then_correct) (=> (= (ControlFlow 0 473) 471) anon359_Else_correct)))))
(let ((anon358_Then_correct  (=> (and (and (not (HasDirectPerm Mask@100 null (lseg (MapType0Select Heap@87 this@@38 head) null))) (= Heap@88 (MapType0Store Heap@87 null (|lseg#sm| (MapType0Select Heap@87 this@@38 head) null) ZeroPMask))) (and (= Heap@89 (MapType0Store Heap@88 null (lseg (MapType0Select Heap@88 this@@38 head) null) freshVersion@5)) (= Heap@90 Heap@89))) (and (=> (= (ControlFlow 0 472) 470) anon359_Then_correct) (=> (= (ControlFlow 0 472) 471) anon359_Else_correct)))))
(let ((anon56_correct  (=> (and (state Heap@87 Mask@99) (= Mask@100 (MapType1Store Mask@99 null (lseg (MapType0Select Heap@87 this@@38 head) null) (real_2_U (+ (U_2_real (MapType1Select Mask@99 null (lseg (MapType0Select Heap@87 this@@38 head) null))) FullPerm))))) (=> (and (and (state Heap@87 Mask@100) (state Heap@87 Mask@100)) (and (|lseg#trigger| Heap@87 (lseg (MapType0Select Heap@87 this@@38 head) null)) (= (MapType0Select Heap@87 null (lseg (MapType0Select Heap@87 this@@38 head) null)) (FrameFragment (ite (not (= (MapType0Select Heap@87 this@@38 head) null)) (CombineFrames (FrameFragment (MapType0Select Heap@87 (MapType0Select Heap@87 this@@38 head) data)) (CombineFrames (FrameFragment (MapType0Select Heap@87 (MapType0Select Heap@87 this@@38 head) next)) (MapType0Select Heap@87 null (lseg (MapType0Select Heap@87 (MapType0Select Heap@87 this@@38 head) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 474) 472) anon358_Then_correct) (=> (= (ControlFlow 0 474) 473) anon358_Else_correct))))))
(let ((anon357_Else_correct  (=> (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (=> (and (= Heap@87 Heap@12) (= (ControlFlow 0 476) 474)) anon56_correct))))
(let ((anon357_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (=> (and (= Heap@84 (MapType0Store Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data (bool_2_U true)))) (= Heap@85 (MapType0Store Heap@84 null (|lseg#sm| (MapType0Select Heap@84 (MapType0Select Heap@84 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@84 null (|lseg#sm| (MapType0Select Heap@84 (MapType0Select Heap@84 this@@38 head) next) null)) (MapType0Select Heap@84 (MapType0Select Heap@84 this@@38 head) next) next (bool_2_U true))))) (=> (and (and (forall ((o_37 T@U) (f_41 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_41))))
(let ((A@@28 (FieldTypeInv0 (type f_41))))
 (=> (and (and (= (type o_37) RefType) (= (type f_41) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@85 null (|lseg#sm| (MapType0Select Heap@85 (MapType0Select Heap@85 this@@38 head) next) null)) o_37 f_41)) (U_2_bool (MapType1Select (MapType0Select Heap@85 null (|lseg#sm| (MapType0Select Heap@85 (MapType0Select Heap@85 (MapType0Select Heap@85 this@@38 head) next) next) null)) o_37 f_41)))) (U_2_bool (MapType1Select newPMask@23 o_37 f_41)))))
 :qid |stdinbpl.3245:35|
 :skolemid |135|
 :pattern ( (MapType1Select newPMask@23 o_37 f_41))
)) (= Heap@86 (MapType0Store Heap@85 null (|lseg#sm| (MapType0Select Heap@85 (MapType0Select Heap@85 this@@38 head) next) null) newPMask@23))) (and (= Heap@87 Heap@86) (= (ControlFlow 0 475) 474))) anon56_correct)))))
(let ((anon356_Else_correct  (=> (and (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (= Mask@99 Mask@98)) (and (=> (= (ControlFlow 0 480) 475) anon357_Then_correct) (=> (= (ControlFlow 0 480) 476) anon357_Else_correct)))))
(let ((anon356_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (and (=> (= (ControlFlow 0 478) (- 0 479)) (<= (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) data)) (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)))) (=> (<= (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) data)) (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data))) (=> (= Mask@99 Mask@98) (and (=> (= (ControlFlow 0 478) 475) anon357_Then_correct) (=> (= (ControlFlow 0 478) 476) anon357_Else_correct))))))))
(let ((anon52_correct  (=> (state UnfoldingHeap@44 UnfoldingMask@44) (and (=> (= (ControlFlow 0 481) 478) anon356_Then_correct) (=> (= (ControlFlow 0 481) 480) anon356_Else_correct)))))
(let ((anon51_correct  (=> (and (and (state UnfoldingHeap@43 UnfoldingMask@43) (= UnfoldingHeap@44 UnfoldingHeap@43)) (and (= UnfoldingMask@44 UnfoldingMask@43) (= (ControlFlow 0 483) 481))) anon52_correct)))
(let ((anon355_Else_correct  (=> (= (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (=> (and (= UnfoldingHeap@43 Heap@12) (= (ControlFlow 0 485) 483)) anon51_correct))))
(let ((anon355_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)) (=> (and (= UnfoldingHeap@40 (MapType0Store Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (MapType1Store (MapType0Select Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)) (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) data (bool_2_U true)))) (= UnfoldingHeap@41 (MapType0Store UnfoldingHeap@40 null (|lseg#sm| (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 this@@38 head) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@40 null (|lseg#sm| (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 this@@38 head) next) next) null)) (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 this@@38 head) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_36 T@U) (f_40 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_40))))
(let ((A@@29 (FieldTypeInv0 (type f_40))))
 (=> (and (and (= (type o_36) RefType) (= (type f_40) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@41 null (|lseg#sm| (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 this@@38 head) next) next) null)) o_36 f_40)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@41 null (|lseg#sm| (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 this@@38 head) next) next) next) null)) o_36 f_40)))) (U_2_bool (MapType1Select newPMask@22 o_36 f_40)))))
 :qid |stdinbpl.3225:41|
 :skolemid |134|
 :pattern ( (MapType1Select newPMask@22 o_36 f_40))
)) (= UnfoldingHeap@42 (MapType0Store UnfoldingHeap@41 null (|lseg#sm| (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 this@@38 head) next) next) null) newPMask@22))) (and (= UnfoldingHeap@43 UnfoldingHeap@42) (= (ControlFlow 0 484) 483))) anon51_correct)))))
(let ((anon354_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (=> (and (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (= UnfoldingMask@41 (MapType1Store UnfoldingMask@40 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@40 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)) FullPerm))))) (=> (and (and (and (state Heap@12 UnfoldingMask@41) (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))) (and (= UnfoldingMask@42 (MapType1Store UnfoldingMask@41 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@41 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next)) FullPerm)))) (state Heap@12 UnfoldingMask@42))) (and (and (= UnfoldingMask@43 (MapType1Store UnfoldingMask@42 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@42 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)))) (and (state Heap@12 UnfoldingMask@43) (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)) (<= (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)) (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) data))))))) (and (=> (= (ControlFlow 0 486) 484) anon355_Then_correct) (=> (= (ControlFlow 0 486) 485) anon355_Else_correct)))))))
(let ((anon354_Else_correct  (=> (and (and (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (= UnfoldingHeap@44 Heap@12)) (and (= UnfoldingMask@44 UnfoldingMask@40) (= (ControlFlow 0 482) 481))) anon52_correct)))
(let ((anon48_correct  (=> (= UnfoldingMask@40 (MapType1Store Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 487) 486) anon354_Then_correct) (=> (= (ControlFlow 0 487) 482) anon354_Else_correct)))))
(let ((anon353_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 490) 487)) anon48_correct)))
(let ((anon353_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 488) (- 0 489)) (<= FullPerm (U_2_real (MapType1Select Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)))) (=> (= (ControlFlow 0 488) 487) anon48_correct))))))
(let ((anon46_correct  (=> (and (and (= Mask@98 (MapType1Store Mask@97 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@12 this@@38 head) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 this@@38 head) null)) (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)))) (and (|lseg#trigger| Heap@12 (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (= (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next)) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 491) 488) anon353_Then_correct) (=> (= (ControlFlow 0 491) 490) anon353_Else_correct)))))
(let ((anon352_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 494) 491)) anon46_correct)))
(let ((anon352_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 492) (- 0 493)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)))) (=> (= (ControlFlow 0 492) 491) anon46_correct))))))
(let ((anon44_correct  (=> (= Mask@97 (MapType1Store Mask@96 (MapType0Select Heap@12 this@@38 head) next (real_2_U (- (U_2_real (MapType1Select Mask@96 (MapType0Select Heap@12 this@@38 head) next)) FullPerm)))) (and (=> (= (ControlFlow 0 495) 492) anon352_Then_correct) (=> (= (ControlFlow 0 495) 494) anon352_Else_correct)))))
(let ((anon351_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 498) 495)) anon44_correct)))
(let ((anon351_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 496) (- 0 497)) (<= FullPerm (U_2_real (MapType1Select Mask@96 (MapType0Select Heap@12 this@@38 head) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@96 (MapType0Select Heap@12 this@@38 head) next))) (=> (= (ControlFlow 0 496) 495) anon44_correct))))))
(let ((anon42_correct  (=> (= Mask@96 (MapType1Store Mask@14 (MapType0Select Heap@12 this@@38 head) data (real_2_U (- (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@12 this@@38 head) data)) FullPerm)))) (and (=> (= (ControlFlow 0 499) 496) anon351_Then_correct) (=> (= (ControlFlow 0 499) 498) anon351_Else_correct)))))
(let ((anon350_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 502) 499)) anon42_correct)))
(let ((anon350_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 500) (- 0 501)) (<= FullPerm (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@12 this@@38 head) data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@12 this@@38 head) data))) (=> (= (ControlFlow 0 500) 499) anon42_correct))))))
(let ((anon349_Then_correct  (=> (not (= (MapType0Select Heap@12 this@@38 head) null)) (and (=> (= (ControlFlow 0 503) 500) anon350_Then_correct) (=> (= (ControlFlow 0 503) 502) anon350_Else_correct)))))
(let ((anon349_Else_correct  (=> (and (= (MapType0Select Heap@12 this@@38 head) null) (= Mask@99 Mask@14)) (and (=> (= (ControlFlow 0 477) 475) anon357_Then_correct) (=> (= (ControlFlow 0 477) 476) anon357_Else_correct)))))
(let ((anon348_Then_correct  (=> (or (= (MapType0Select Heap@9 this@@38 head) null) (<= elem (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data)))) (=> (and (and (and (and (not (= freshObj@0 null)) (not (U_2_bool (MapType0Select Heap@9 freshObj@0 $allocated)))) (= Heap@10 (MapType0Store Heap@9 freshObj@0 $allocated (bool_2_U true)))) (and (= Mask@10 (MapType1Store Mask@9 freshObj@0 data (real_2_U (+ (U_2_real (MapType1Select Mask@9 freshObj@0 data)) FullPerm)))) (= Mask@11 (MapType1Store Mask@10 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@10 freshObj@0 next)) FullPerm)))))) (and (and (= Mask@12 (MapType1Store Mask@11 freshObj@0 head (real_2_U (+ (U_2_real (MapType1Select Mask@11 freshObj@0 head)) FullPerm)))) (= Mask@13 (MapType1Store Mask@12 freshObj@0 held (real_2_U (+ (U_2_real (MapType1Select Mask@12 freshObj@0 held)) FullPerm))))) (and (= Mask@14 (MapType1Store Mask@13 freshObj@0 changed (real_2_U (+ (U_2_real (MapType1Select Mask@13 freshObj@0 changed)) FullPerm)))) (state Heap@10 Mask@14)))) (and (=> (= (ControlFlow 0 504) (- 0 508)) (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 data)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 data))) (=> (and (= Heap@11 (MapType0Store Heap@10 freshObj@0 data (int_2_U elem))) (state Heap@11 Mask@14)) (and (=> (= (ControlFlow 0 504) (- 0 507)) (HasDirectPerm Mask@14 this@@38 head)) (=> (HasDirectPerm Mask@14 this@@38 head) (and (=> (= (ControlFlow 0 504) (- 0 506)) (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 next))) (=> (and (= Heap@12 (MapType0Store Heap@11 freshObj@0 next (MapType0Select Heap@11 this@@38 head))) (state Heap@12 Mask@14)) (and (=> (= (ControlFlow 0 504) (- 0 505)) (HasDirectPerm Mask@14 this@@38 head)) (=> (HasDirectPerm Mask@14 this@@38 head) (and (=> (= (ControlFlow 0 504) 503) anon349_Then_correct) (=> (= (ControlFlow 0 504) 477) anon349_Else_correct))))))))))))))))
(let ((anon319_correct  (=> (and (state ExhaleHeap@1 Mask@61) (state ExhaleHeap@1 Mask@61)) (=> (and (and (= Heap@107 ExhaleHeap@1) (= index@3 index@1)) (and (= Mask@106 Mask@61) (= (ControlFlow 0 28) 27))) anon320_correct))))
(let ((anon492_Else_correct  (=> (= null null) (=> (and (= Mask@61 Mask@59) (= (ControlFlow 0 31) 28)) anon319_correct))))
(let ((anon492_Then_correct  (=> (and (not (= null null)) (= perm@1 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 29) (- 0 30)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (=> (=> (> perm@1 NoPerm) (not (= null null))) (=> (and (and (= Mask@60 (MapType1Store Mask@59 null next (real_2_U (+ (U_2_real (MapType1Select Mask@59 null next)) perm@1)))) (state ExhaleHeap@1 Mask@60)) (and (= Mask@61 Mask@60) (= (ControlFlow 0 29) 28))) anon319_correct)))))))
(let ((anon317_correct  (=> (IdenticalOnKnownLocations Heap@49 ExhaleHeap@1 Mask@58) (=> (and (and (= Mask@59 (MapType1Store Mask@58 null (lseg arg_this_1@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@58 null (lseg arg_this_1@0 null))) FullPerm)))) (state ExhaleHeap@1 Mask@59)) (and (state ExhaleHeap@1 Mask@59) (|Seq#Equal| (contentNodes ExhaleHeap@1 arg_this_1@0 null) (|Seq#Append| (contentNodes Heap@49 arg_this_1@0 ptr@1) (contentNodes Heap@49 ptr@1 null))))) (and (=> (= (ControlFlow 0 32) 29) anon492_Then_correct) (=> (= (ControlFlow 0 32) 31) anon492_Else_correct))))))
(let ((anon491_Else_correct  (=> (and (not (and (< 0 (|Seq#Length| (contentNodes Heap@49 arg_this_1@0 ptr@1))) (< 0 (|Seq#Length| (contentNodes Heap@49 ptr@1 null))))) (= (ControlFlow 0 35) 32)) anon317_correct)))
(let ((anon491_Then_correct  (=> (and (< 0 (|Seq#Length| (contentNodes Heap@49 arg_this_1@0 ptr@1))) (< 0 (|Seq#Length| (contentNodes Heap@49 ptr@1 null)))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (<= (U_2_int (|Seq#Index| (contentNodes Heap@49 arg_this_1@0 ptr@1) (- (|Seq#Length| (contentNodes Heap@49 arg_this_1@0 ptr@1)) 1))) (U_2_int (|Seq#Index| (contentNodes Heap@49 ptr@1 null) 0)))) (=> (<= (U_2_int (|Seq#Index| (contentNodes Heap@49 arg_this_1@0 ptr@1) (- (|Seq#Length| (contentNodes Heap@49 arg_this_1@0 ptr@1)) 1))) (U_2_int (|Seq#Index| (contentNodes Heap@49 ptr@1 null) 0))) (=> (= (ControlFlow 0 33) 32) anon317_correct))))))
(let ((anon314_correct  (=> (and (= Mask@57 (MapType1Store Mask@56 null next (real_2_U (- (U_2_real (MapType1Select Mask@56 null next)) perm@0)))) (= Mask@58 Mask@57)) (and (=> (= (ControlFlow 0 37) 33) anon491_Then_correct) (=> (= (ControlFlow 0 37) 35) anon491_Else_correct)))))
(let ((anon490_Else_correct  (=> (and (= perm@0 NoPerm) (= (ControlFlow 0 40) 37)) anon314_correct)))
(let ((anon490_Then_correct  (=> (not (= perm@0 NoPerm)) (and (=> (= (ControlFlow 0 38) (- 0 39)) (<= perm@0 (U_2_real (MapType1Select Mask@56 null next)))) (=> (<= perm@0 (U_2_real (MapType1Select Mask@56 null next))) (=> (= (ControlFlow 0 38) 37) anon314_correct))))))
(let ((anon489_Then_correct  (=> (and (not (= null null)) (= perm@0 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 41) (- 0 42)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (and (=> (= (ControlFlow 0 41) 38) anon490_Then_correct) (=> (= (ControlFlow 0 41) 40) anon490_Else_correct)))))))
(let ((anon489_Else_correct  (=> (and (= null null) (= Mask@58 Mask@56)) (and (=> (= (ControlFlow 0 36) 33) anon491_Then_correct) (=> (= (ControlFlow 0 36) 35) anon491_Else_correct)))))
(let ((anon311_correct  (=> (= Mask@56 (MapType1Store Mask@55 null (lseg ptr@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (lseg ptr@1 null))) FullPerm)))) (and (=> (= (ControlFlow 0 43) 41) anon489_Then_correct) (=> (= (ControlFlow 0 43) 36) anon489_Else_correct)))))
(let ((anon488_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 46) 43)) anon311_correct)))
(let ((anon488_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 44) (- 0 45)) (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg ptr@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg ptr@1 null)))) (=> (= (ControlFlow 0 44) 43) anon311_correct))))))
(let ((anon309_correct  (=> (= Mask@55 (MapType1Store Mask@54 null (lseg arg_this_1@0 ptr@1) (real_2_U (- (U_2_real (MapType1Select Mask@54 null (lseg arg_this_1@0 ptr@1))) FullPerm)))) (and (=> (= (ControlFlow 0 47) 44) anon488_Then_correct) (=> (= (ControlFlow 0 47) 46) anon488_Else_correct)))))
(let ((anon487_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 50) 47)) anon309_correct)))
(let ((anon487_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 48) (- 0 49)) (<= FullPerm (U_2_real (MapType1Select Mask@54 null (lseg arg_this_1@0 ptr@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@54 null (lseg arg_this_1@0 ptr@1)))) (=> (= (ControlFlow 0 48) 47) anon309_correct))))))
(let ((anon307_correct  (=> (and (state Heap@49 Mask@54) (state Heap@49 Mask@54)) (and (=> (= (ControlFlow 0 51) (- 0 52)) (HasDirectPerm Mask@54 this@@38 head)) (=> (HasDirectPerm Mask@54 this@@38 head) (=> (= arg_this_1@0 (MapType0Select Heap@49 this@@38 head)) (and (=> (= (ControlFlow 0 51) 48) anon487_Then_correct) (=> (= (ControlFlow 0 51) 50) anon487_Else_correct))))))))
(let ((anon486_Else_correct  (=> (= ptr@1 null) (=> (and (= Heap@49 Heap@45) (= (ControlFlow 0 54) 51)) anon307_correct))))
(let ((anon486_Then_correct  (=> (not (= ptr@1 null)) (=> (and (= Heap@46 (MapType0Store Heap@45 null (|lseg#sm| ptr@1 null) (MapType1Store (MapType0Select Heap@45 null (|lseg#sm| ptr@1 null)) ptr@1 data (bool_2_U true)))) (= Heap@47 (MapType0Store Heap@46 null (|lseg#sm| ptr@1 null) (MapType1Store (MapType0Select Heap@46 null (|lseg#sm| ptr@1 null)) ptr@1 next (bool_2_U true))))) (=> (and (and (forall ((o_61 T@U) (f_65 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_65))))
(let ((A@@30 (FieldTypeInv0 (type f_65))))
 (=> (and (and (= (type o_61) RefType) (= (type f_65) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|lseg#sm| ptr@1 null)) o_61 f_65)) (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|lseg#sm| (MapType0Select Heap@47 ptr@1 next) null)) o_61 f_65)))) (U_2_bool (MapType1Select newPMask@10 o_61 f_65)))))
 :qid |stdinbpl.4755:33|
 :skolemid |169|
 :pattern ( (MapType1Select newPMask@10 o_61 f_65))
)) (= Heap@48 (MapType0Store Heap@47 null (|lseg#sm| ptr@1 null) newPMask@10))) (and (= Heap@49 Heap@48) (= (ControlFlow 0 53) 51))) anon307_correct)))))
(let ((anon485_Else_correct  (=> (and (HasDirectPerm Mask@54 null (lseg ptr@1 null)) (= Heap@45 Heap@42)) (and (=> (= (ControlFlow 0 56) 53) anon486_Then_correct) (=> (= (ControlFlow 0 56) 54) anon486_Else_correct)))))
(let ((anon485_Then_correct  (=> (and (and (not (HasDirectPerm Mask@54 null (lseg ptr@1 null))) (= Heap@43 (MapType0Store Heap@42 null (|lseg#sm| ptr@1 null) ZeroPMask))) (and (= Heap@44 (MapType0Store Heap@43 null (lseg ptr@1 null) freshVersion@2)) (= Heap@45 Heap@44))) (and (=> (= (ControlFlow 0 55) 53) anon486_Then_correct) (=> (= (ControlFlow 0 55) 54) anon486_Else_correct)))))
(let ((anon303_correct  (=> (and (state Heap@42 Mask@53) (= Mask@54 (MapType1Store Mask@53 null (lseg ptr@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@53 null (lseg ptr@1 null))) FullPerm))))) (=> (and (and (state Heap@42 Mask@54) (state Heap@42 Mask@54)) (and (|lseg#trigger| Heap@42 (lseg ptr@1 null)) (= (MapType0Select Heap@42 null (lseg ptr@1 null)) (FrameFragment (ite (not (= ptr@1 null)) (CombineFrames (FrameFragment (MapType0Select Heap@42 ptr@1 data)) (CombineFrames (FrameFragment (MapType0Select Heap@42 ptr@1 next)) (MapType0Select Heap@42 null (lseg (MapType0Select Heap@42 ptr@1 next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 57) 55) anon485_Then_correct) (=> (= (ControlFlow 0 57) 56) anon485_Else_correct))))))
(let ((anon484_Else_correct  (=> (= (MapType0Select Heap@38 ptr@1 next) null) (=> (and (= Heap@42 Heap@38) (= (ControlFlow 0 59) 57)) anon303_correct))))
(let ((anon484_Then_correct  (=> (not (= (MapType0Select Heap@38 ptr@1 next) null)) (=> (and (= Heap@39 (MapType0Store Heap@38 null (|lseg#sm| (MapType0Select Heap@38 ptr@1 next) null) (MapType1Store (MapType0Select Heap@38 null (|lseg#sm| (MapType0Select Heap@38 ptr@1 next) null)) (MapType0Select Heap@38 ptr@1 next) data (bool_2_U true)))) (= Heap@40 (MapType0Store Heap@39 null (|lseg#sm| (MapType0Select Heap@39 ptr@1 next) null) (MapType1Store (MapType0Select Heap@39 null (|lseg#sm| (MapType0Select Heap@39 ptr@1 next) null)) (MapType0Select Heap@39 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_60 T@U) (f_64 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_64))))
(let ((A@@31 (FieldTypeInv0 (type f_64))))
 (=> (and (and (= (type o_60) RefType) (= (type f_64) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select Heap@40 null (|lseg#sm| (MapType0Select Heap@40 ptr@1 next) null)) o_60 f_64)) (U_2_bool (MapType1Select (MapType0Select Heap@40 null (|lseg#sm| (MapType0Select Heap@40 (MapType0Select Heap@40 ptr@1 next) next) null)) o_60 f_64)))) (U_2_bool (MapType1Select newPMask@9 o_60 f_64)))))
 :qid |stdinbpl.4733:35|
 :skolemid |168|
 :pattern ( (MapType1Select newPMask@9 o_60 f_64))
)) (= Heap@41 (MapType0Store Heap@40 null (|lseg#sm| (MapType0Select Heap@40 ptr@1 next) null) newPMask@9))) (and (= Heap@42 Heap@41) (= (ControlFlow 0 58) 57))) anon303_correct)))))
(let ((anon483_Else_correct  (=> (and (= (MapType0Select Heap@38 ptr@1 next) null) (= Mask@53 Mask@52)) (and (=> (= (ControlFlow 0 63) 58) anon484_Then_correct) (=> (= (ControlFlow 0 63) 59) anon484_Else_correct)))))
(let ((anon483_Then_correct  (=> (not (= (MapType0Select Heap@38 ptr@1 next) null)) (and (=> (= (ControlFlow 0 61) (- 0 62)) (<= (U_2_int (MapType0Select Heap@38 ptr@1 data)) (U_2_int (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@38 ptr@1 data)) (U_2_int (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) data))) (=> (= Mask@53 Mask@52) (and (=> (= (ControlFlow 0 61) 58) anon484_Then_correct) (=> (= (ControlFlow 0 61) 59) anon484_Else_correct))))))))
(let ((anon299_correct  (=> (state UnfoldingHeap@19 UnfoldingMask@19) (and (=> (= (ControlFlow 0 64) 61) anon483_Then_correct) (=> (= (ControlFlow 0 64) 63) anon483_Else_correct)))))
(let ((anon298_correct  (=> (and (and (state UnfoldingHeap@18 UnfoldingMask@18) (= UnfoldingHeap@19 UnfoldingHeap@18)) (and (= UnfoldingMask@19 UnfoldingMask@18) (= (ControlFlow 0 66) 64))) anon299_correct)))
(let ((anon482_Else_correct  (=> (= (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null) (=> (and (= UnfoldingHeap@18 Heap@38) (= (ControlFlow 0 68) 66)) anon298_correct))))
(let ((anon482_Then_correct  (=> (not (= (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null)) (=> (and (= UnfoldingHeap@15 (MapType0Store Heap@38 null (|lseg#sm| (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null) (MapType1Store (MapType0Select Heap@38 null (|lseg#sm| (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null)) (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) data (bool_2_U true)))) (= UnfoldingHeap@16 (MapType0Store UnfoldingHeap@15 null (|lseg#sm| (MapType0Select UnfoldingHeap@15 (MapType0Select UnfoldingHeap@15 ptr@1 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@15 null (|lseg#sm| (MapType0Select UnfoldingHeap@15 (MapType0Select UnfoldingHeap@15 ptr@1 next) next) null)) (MapType0Select UnfoldingHeap@15 (MapType0Select UnfoldingHeap@15 ptr@1 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_59 T@U) (f_63 T@U) ) (! (let ((B@@31 (FieldTypeInv1 (type f_63))))
(let ((A@@32 (FieldTypeInv0 (type f_63))))
 (=> (and (and (= (type o_59) RefType) (= (type f_63) (FieldType A@@32 B@@31))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@16 null (|lseg#sm| (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 ptr@1 next) next) null)) o_59 f_63)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@16 null (|lseg#sm| (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 ptr@1 next) next) next) null)) o_59 f_63)))) (U_2_bool (MapType1Select newPMask@8 o_59 f_63)))))
 :qid |stdinbpl.4713:41|
 :skolemid |167|
 :pattern ( (MapType1Select newPMask@8 o_59 f_63))
)) (= UnfoldingHeap@17 (MapType0Store UnfoldingHeap@16 null (|lseg#sm| (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 ptr@1 next) next) null) newPMask@8))) (and (= UnfoldingHeap@18 UnfoldingHeap@17) (= (ControlFlow 0 67) 66))) anon298_correct)))))
(let ((anon481_Then_correct  (=> (not (= (MapType0Select Heap@38 ptr@1 next) null)) (=> (and (not (= (MapType0Select Heap@38 ptr@1 next) null)) (= UnfoldingMask@16 (MapType1Store UnfoldingMask@15 (MapType0Select Heap@38 ptr@1 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@15 (MapType0Select Heap@38 ptr@1 next) data)) FullPerm))))) (=> (and (and (and (state Heap@38 UnfoldingMask@16) (not (= (MapType0Select Heap@38 ptr@1 next) null))) (and (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 (MapType0Select Heap@38 ptr@1 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 (MapType0Select Heap@38 ptr@1 next) next)) FullPerm)))) (state Heap@38 UnfoldingMask@17))) (and (and (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 null (lseg (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 null (lseg (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@38 ptr@1 next) null) (MapType0Select Heap@38 null (lseg (MapType0Select Heap@38 ptr@1 next) null)) (lseg (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null) (MapType0Select Heap@38 null (lseg (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null)))) (and (state Heap@38 UnfoldingMask@18) (=> (not (= (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null)) (<= (U_2_int (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) data)) (U_2_int (MapType0Select Heap@38 (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) data))))))) (and (=> (= (ControlFlow 0 69) 67) anon482_Then_correct) (=> (= (ControlFlow 0 69) 68) anon482_Else_correct)))))))
(let ((anon481_Else_correct  (=> (and (and (= (MapType0Select Heap@38 ptr@1 next) null) (= UnfoldingHeap@19 Heap@38)) (and (= UnfoldingMask@19 UnfoldingMask@15) (= (ControlFlow 0 65) 64))) anon299_correct)))
(let ((anon295_correct  (=> (= UnfoldingMask@15 (MapType1Store Mask@49 null (lseg (MapType0Select Heap@38 ptr@1 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@49 null (lseg (MapType0Select Heap@38 ptr@1 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 70) 69) anon481_Then_correct) (=> (= (ControlFlow 0 70) 65) anon481_Else_correct)))))
(let ((anon480_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 73) 70)) anon295_correct)))
(let ((anon480_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 71) (- 0 72)) (<= FullPerm (U_2_real (MapType1Select Mask@49 null (lseg (MapType0Select Heap@38 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@49 null (lseg (MapType0Select Heap@38 ptr@1 next) null)))) (=> (= (ControlFlow 0 71) 70) anon295_correct))))))
(let ((anon293_correct  (=> (and (and (= Mask@52 (MapType1Store Mask@51 null (lseg (MapType0Select Heap@38 ptr@1 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (lseg (MapType0Select Heap@38 ptr@1 next) null))) FullPerm)))) (InsidePredicate (lseg ptr@1 null) (MapType0Select Heap@38 null (lseg ptr@1 null)) (lseg (MapType0Select Heap@38 ptr@1 next) null) (MapType0Select Heap@38 null (lseg (MapType0Select Heap@38 ptr@1 next) null)))) (and (|lseg#trigger| Heap@38 (lseg (MapType0Select Heap@38 ptr@1 next) null)) (= (MapType0Select Heap@38 null (lseg (MapType0Select Heap@38 ptr@1 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@38 ptr@1 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next)) (MapType0Select Heap@38 null (lseg (MapType0Select Heap@38 (MapType0Select Heap@38 ptr@1 next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 74) 71) anon480_Then_correct) (=> (= (ControlFlow 0 74) 73) anon480_Else_correct)))))
(let ((anon479_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 77) 74)) anon293_correct)))
(let ((anon479_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 75) (- 0 76)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (lseg (MapType0Select Heap@38 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (lseg (MapType0Select Heap@38 ptr@1 next) null)))) (=> (= (ControlFlow 0 75) 74) anon293_correct))))))
(let ((anon291_correct  (=> (= Mask@51 (MapType1Store Mask@50 ptr@1 next (real_2_U (- (U_2_real (MapType1Select Mask@50 ptr@1 next)) FullPerm)))) (and (=> (= (ControlFlow 0 78) 75) anon479_Then_correct) (=> (= (ControlFlow 0 78) 77) anon479_Else_correct)))))
(let ((anon478_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 81) 78)) anon291_correct)))
(let ((anon478_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 79) (- 0 80)) (<= FullPerm (U_2_real (MapType1Select Mask@50 ptr@1 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@50 ptr@1 next))) (=> (= (ControlFlow 0 79) 78) anon291_correct))))))
(let ((anon289_correct  (=> (= Mask@50 (MapType1Store Mask@49 ptr@1 data (real_2_U (- (U_2_real (MapType1Select Mask@49 ptr@1 data)) FullPerm)))) (and (=> (= (ControlFlow 0 82) 79) anon478_Then_correct) (=> (= (ControlFlow 0 82) 81) anon478_Else_correct)))))
(let ((anon477_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 85) 82)) anon289_correct)))
(let ((anon477_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 83) (- 0 84)) (<= FullPerm (U_2_real (MapType1Select Mask@49 ptr@1 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@49 ptr@1 data))) (=> (= (ControlFlow 0 83) 82) anon289_correct))))))
(let ((anon476_Then_correct  (=> (not (= ptr@1 null)) (and (=> (= (ControlFlow 0 86) 83) anon477_Then_correct) (=> (= (ControlFlow 0 86) 85) anon477_Else_correct)))))
(let ((anon476_Else_correct  (=> (and (= ptr@1 null) (= Mask@53 Mask@49)) (and (=> (= (ControlFlow 0 60) 58) anon484_Then_correct) (=> (= (ControlFlow 0 60) 59) anon484_Else_correct)))))
(let ((anon286_correct  (=> (and (state Heap@38 Mask@49) (state Heap@38 Mask@49)) (and (=> (= (ControlFlow 0 87) 86) anon476_Then_correct) (=> (= (ControlFlow 0 87) 60) anon476_Else_correct)))))
(let ((anon475_Else_correct  (=> (= (MapType0Select Heap@34 ptr@1 next) null) (=> (and (= Heap@38 Heap@34) (= (ControlFlow 0 89) 87)) anon286_correct))))
(let ((anon475_Then_correct  (=> (not (= (MapType0Select Heap@34 ptr@1 next) null)) (=> (and (= Heap@35 (MapType0Store Heap@34 null (|lseg#sm| (MapType0Select Heap@34 ptr@1 next) null) (MapType1Store (MapType0Select Heap@34 null (|lseg#sm| (MapType0Select Heap@34 ptr@1 next) null)) (MapType0Select Heap@34 ptr@1 next) data (bool_2_U true)))) (= Heap@36 (MapType0Store Heap@35 null (|lseg#sm| (MapType0Select Heap@35 ptr@1 next) null) (MapType1Store (MapType0Select Heap@35 null (|lseg#sm| (MapType0Select Heap@35 ptr@1 next) null)) (MapType0Select Heap@35 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_58 T@U) (f_62 T@U) ) (! (let ((B@@32 (FieldTypeInv1 (type f_62))))
(let ((A@@33 (FieldTypeInv0 (type f_62))))
 (=> (and (and (= (type o_58) RefType) (= (type f_62) (FieldType A@@33 B@@32))) (or (U_2_bool (MapType1Select (MapType0Select Heap@36 null (|lseg#sm| (MapType0Select Heap@36 ptr@1 next) null)) o_58 f_62)) (U_2_bool (MapType1Select (MapType0Select Heap@36 null (|lseg#sm| (MapType0Select Heap@36 (MapType0Select Heap@36 ptr@1 next) next) null)) o_58 f_62)))) (U_2_bool (MapType1Select newPMask@7 o_58 f_62)))))
 :qid |stdinbpl.4643:33|
 :skolemid |166|
 :pattern ( (MapType1Select newPMask@7 o_58 f_62))
)) (= Heap@37 (MapType0Store Heap@36 null (|lseg#sm| (MapType0Select Heap@36 ptr@1 next) null) newPMask@7))) (and (= Heap@38 Heap@37) (= (ControlFlow 0 88) 87))) anon286_correct)))))
(let ((anon474_Else_correct  (=> (and (HasDirectPerm Mask@49 null (lseg (MapType0Select Heap@31 ptr@1 next) null)) (= Heap@34 Heap@31)) (and (=> (= (ControlFlow 0 91) 88) anon475_Then_correct) (=> (= (ControlFlow 0 91) 89) anon475_Else_correct)))))
(let ((anon474_Then_correct  (=> (and (and (not (HasDirectPerm Mask@49 null (lseg (MapType0Select Heap@31 ptr@1 next) null))) (= Heap@32 (MapType0Store Heap@31 null (|lseg#sm| (MapType0Select Heap@31 ptr@1 next) null) ZeroPMask))) (and (= Heap@33 (MapType0Store Heap@32 null (lseg (MapType0Select Heap@32 ptr@1 next) null) freshVersion@1)) (= Heap@34 Heap@33))) (and (=> (= (ControlFlow 0 90) 88) anon475_Then_correct) (=> (= (ControlFlow 0 90) 89) anon475_Else_correct)))))
(let ((anon282_correct  (=> (and (state Heap@31 Mask@48) (= Mask@49 (MapType1Store Mask@48 null (lseg (MapType0Select Heap@31 ptr@1 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@48 null (lseg (MapType0Select Heap@31 ptr@1 next) null))) FullPerm))))) (=> (and (and (state Heap@31 Mask@49) (state Heap@31 Mask@49)) (and (|lseg#trigger| Heap@31 (lseg (MapType0Select Heap@31 ptr@1 next) null)) (= (MapType0Select Heap@31 null (lseg (MapType0Select Heap@31 ptr@1 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@31 ptr@1 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@31 (MapType0Select Heap@31 ptr@1 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@31 (MapType0Select Heap@31 ptr@1 next) next)) (MapType0Select Heap@31 null (lseg (MapType0Select Heap@31 (MapType0Select Heap@31 ptr@1 next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 92) 90) anon474_Then_correct) (=> (= (ControlFlow 0 92) 91) anon474_Else_correct))))))
(let ((anon473_Else_correct  (=> (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (=> (and (= Heap@31 Heap@27) (= (ControlFlow 0 94) 92)) anon282_correct))))
(let ((anon473_Then_correct  (=> (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (=> (and (= Heap@28 (MapType0Store Heap@27 null (|lseg#sm| (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (MapType1Store (MapType0Select Heap@27 null (|lseg#sm| (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data (bool_2_U true)))) (= Heap@29 (MapType0Store Heap@28 null (|lseg#sm| (MapType0Select Heap@28 (MapType0Select Heap@28 ptr@1 next) next) null) (MapType1Store (MapType0Select Heap@28 null (|lseg#sm| (MapType0Select Heap@28 (MapType0Select Heap@28 ptr@1 next) next) null)) (MapType0Select Heap@28 (MapType0Select Heap@28 ptr@1 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_57 T@U) (f_61 T@U) ) (! (let ((B@@33 (FieldTypeInv1 (type f_61))))
(let ((A@@34 (FieldTypeInv0 (type f_61))))
 (=> (and (and (= (type o_57) RefType) (= (type f_61) (FieldType A@@34 B@@33))) (or (U_2_bool (MapType1Select (MapType0Select Heap@29 null (|lseg#sm| (MapType0Select Heap@29 (MapType0Select Heap@29 ptr@1 next) next) null)) o_57 f_61)) (U_2_bool (MapType1Select (MapType0Select Heap@29 null (|lseg#sm| (MapType0Select Heap@29 (MapType0Select Heap@29 (MapType0Select Heap@29 ptr@1 next) next) next) null)) o_57 f_61)))) (U_2_bool (MapType1Select newPMask@6 o_57 f_61)))))
 :qid |stdinbpl.4621:35|
 :skolemid |165|
 :pattern ( (MapType1Select newPMask@6 o_57 f_61))
)) (= Heap@30 (MapType0Store Heap@29 null (|lseg#sm| (MapType0Select Heap@29 (MapType0Select Heap@29 ptr@1 next) next) null) newPMask@6))) (and (= Heap@31 Heap@30) (= (ControlFlow 0 93) 92))) anon282_correct)))))
(let ((anon472_Else_correct  (=> (and (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (= Mask@48 Mask@47)) (and (=> (= (ControlFlow 0 98) 93) anon473_Then_correct) (=> (= (ControlFlow 0 98) 94) anon473_Else_correct)))))
(let ((anon472_Then_correct  (=> (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (and (=> (= (ControlFlow 0 96) (- 0 97)) (<= (U_2_int (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) data)) (U_2_int (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data)))) (=> (<= (U_2_int (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) data)) (U_2_int (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data))) (=> (= Mask@48 Mask@47) (and (=> (= (ControlFlow 0 96) 93) anon473_Then_correct) (=> (= (ControlFlow 0 96) 94) anon473_Else_correct))))))))
(let ((anon278_correct  (=> (state UnfoldingHeap@14 UnfoldingMask@14) (and (=> (= (ControlFlow 0 99) 96) anon472_Then_correct) (=> (= (ControlFlow 0 99) 98) anon472_Else_correct)))))
(let ((anon277_correct  (=> (and (and (state UnfoldingHeap@13 UnfoldingMask@13) (= UnfoldingHeap@14 UnfoldingHeap@13)) (and (= UnfoldingMask@14 UnfoldingMask@13) (= (ControlFlow 0 101) 99))) anon278_correct)))
(let ((anon471_Else_correct  (=> (= (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null) (=> (and (= UnfoldingHeap@13 Heap@27) (= (ControlFlow 0 103) 101)) anon277_correct))))
(let ((anon471_Then_correct  (=> (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null)) (=> (and (= UnfoldingHeap@10 (MapType0Store Heap@27 null (|lseg#sm| (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null) (MapType1Store (MapType0Select Heap@27 null (|lseg#sm| (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null)) (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) data (bool_2_U true)))) (= UnfoldingHeap@11 (MapType0Store UnfoldingHeap@10 null (|lseg#sm| (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 ptr@1 next) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@10 null (|lseg#sm| (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 ptr@1 next) next) next) null)) (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 ptr@1 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_56 T@U) (f_60 T@U) ) (! (let ((B@@34 (FieldTypeInv1 (type f_60))))
(let ((A@@35 (FieldTypeInv0 (type f_60))))
 (=> (and (and (= (type o_56) RefType) (= (type f_60) (FieldType A@@35 B@@34))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@11 null (|lseg#sm| (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 ptr@1 next) next) next) null)) o_56 f_60)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@11 null (|lseg#sm| (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 ptr@1 next) next) next) next) null)) o_56 f_60)))) (U_2_bool (MapType1Select newPMask@5 o_56 f_60)))))
 :qid |stdinbpl.4601:41|
 :skolemid |164|
 :pattern ( (MapType1Select newPMask@5 o_56 f_60))
)) (= UnfoldingHeap@12 (MapType0Store UnfoldingHeap@11 null (|lseg#sm| (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 ptr@1 next) next) next) null) newPMask@5))) (and (= UnfoldingHeap@13 UnfoldingHeap@12) (= (ControlFlow 0 102) 101))) anon277_correct)))))
(let ((anon470_Then_correct  (=> (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (=> (and (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@27 UnfoldingMask@11) (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null))) (and (= UnfoldingMask@12 (MapType1Store UnfoldingMask@11 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@11 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next)) FullPerm)))) (state Heap@27 UnfoldingMask@12))) (and (and (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (MapType0Select Heap@27 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null) (MapType0Select Heap@27 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null)))) (and (state Heap@27 UnfoldingMask@13) (=> (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data)) (U_2_int (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) data))))))) (and (=> (= (ControlFlow 0 104) 102) anon471_Then_correct) (=> (= (ControlFlow 0 104) 103) anon471_Else_correct)))))))
(let ((anon470_Else_correct  (=> (and (and (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (= UnfoldingHeap@14 Heap@27)) (and (= UnfoldingMask@14 UnfoldingMask@10) (= (ControlFlow 0 100) 99))) anon278_correct)))
(let ((anon274_correct  (=> (= UnfoldingMask@10 (MapType1Store Mask@44 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@44 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 105) 104) anon470_Then_correct) (=> (= (ControlFlow 0 105) 100) anon470_Else_correct)))))
(let ((anon469_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 108) 105)) anon274_correct)))
(let ((anon469_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 106) (- 0 107)) (<= FullPerm (U_2_real (MapType1Select Mask@44 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@44 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)))) (=> (= (ControlFlow 0 106) 105) anon274_correct))))))
(let ((anon272_correct  (=> (and (and (= Mask@47 (MapType1Store Mask@46 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@46 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@27 ptr@1 next) null) (MapType0Select Heap@27 null (lseg (MapType0Select Heap@27 ptr@1 next) null)) (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null) (MapType0Select Heap@27 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)))) (and (|lseg#trigger| Heap@27 (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (= (MapType0Select Heap@27 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next)) (MapType0Select Heap@27 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 109) 106) anon469_Then_correct) (=> (= (ControlFlow 0 109) 108) anon469_Else_correct)))))
(let ((anon468_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 112) 109)) anon272_correct)))
(let ((anon468_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 110) (- 0 111)) (<= FullPerm (U_2_real (MapType1Select Mask@46 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@46 null (lseg (MapType0Select Heap@27 (MapType0Select Heap@27 ptr@1 next) next) null)))) (=> (= (ControlFlow 0 110) 109) anon272_correct))))))
(let ((anon270_correct  (=> (= Mask@46 (MapType1Store Mask@45 (MapType0Select Heap@27 ptr@1 next) next (real_2_U (- (U_2_real (MapType1Select Mask@45 (MapType0Select Heap@27 ptr@1 next) next)) FullPerm)))) (and (=> (= (ControlFlow 0 113) 110) anon468_Then_correct) (=> (= (ControlFlow 0 113) 112) anon468_Else_correct)))))
(let ((anon467_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 116) 113)) anon270_correct)))
(let ((anon467_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 114) (- 0 115)) (<= FullPerm (U_2_real (MapType1Select Mask@45 (MapType0Select Heap@27 ptr@1 next) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@45 (MapType0Select Heap@27 ptr@1 next) next))) (=> (= (ControlFlow 0 114) 113) anon270_correct))))))
(let ((anon268_correct  (=> (= Mask@45 (MapType1Store Mask@44 (MapType0Select Heap@27 ptr@1 next) data (real_2_U (- (U_2_real (MapType1Select Mask@44 (MapType0Select Heap@27 ptr@1 next) data)) FullPerm)))) (and (=> (= (ControlFlow 0 117) 114) anon467_Then_correct) (=> (= (ControlFlow 0 117) 116) anon467_Else_correct)))))
(let ((anon466_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 120) 117)) anon268_correct)))
(let ((anon466_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 118) (- 0 119)) (<= FullPerm (U_2_real (MapType1Select Mask@44 (MapType0Select Heap@27 ptr@1 next) data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@44 (MapType0Select Heap@27 ptr@1 next) data))) (=> (= (ControlFlow 0 118) 117) anon268_correct))))))
(let ((anon465_Then_correct  (=> (not (= (MapType0Select Heap@27 ptr@1 next) null)) (and (=> (= (ControlFlow 0 121) 118) anon466_Then_correct) (=> (= (ControlFlow 0 121) 120) anon466_Else_correct)))))
(let ((anon465_Else_correct  (=> (and (= (MapType0Select Heap@27 ptr@1 next) null) (= Mask@48 Mask@44)) (and (=> (= (ControlFlow 0 95) 93) anon473_Then_correct) (=> (= (ControlFlow 0 95) 94) anon473_Else_correct)))))
(let ((anon414_Else_correct  (=> (and (not (and (not (= (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (< (U_2_int (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) data)) elem))) (state ExhaleHeap@0 Mask@24)) (=> (and (and (and (not (= this@@38 null)) (= Mask@35 (MapType1Store Mask@24 this@@38 head (real_2_U (+ (U_2_real (MapType1Select Mask@24 this@@38 head)) FullPerm))))) (and (state ExhaleHeap@0 Mask@35) (not (= ptr@1 null)))) (and (and (= Mask@36 (MapType1Store Mask@35 ptr@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@35 ptr@1 next)) FullPerm)))) (state ExhaleHeap@0 Mask@36)) (and (not (= ptr@1 null)) (= Mask@37 (MapType1Store Mask@36 ptr@1 data (real_2_U (+ (U_2_real (MapType1Select Mask@36 ptr@1 data)) FullPerm))))))) (=> (and (and (and (and (and (state ExhaleHeap@0 Mask@37) (<= (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data)) elem)) (and (= Mask@38 (MapType1Store Mask@37 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@37 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null))) FullPerm)))) (state ExhaleHeap@0 Mask@38))) (and (and (= Mask@39 (MapType1Store Mask@38 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) (real_2_U (+ (U_2_real (MapType1Select Mask@38 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))) FullPerm)))) (state ExhaleHeap@0 Mask@39)) (and (state ExhaleHeap@0 Mask@39) (forall ((i_14 Int) ) (!  (=> (and (<= 0 i_14) (< i_14 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)))) (<= (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) i_14)) (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data))))
 :qid |stdinbpl.4486:26|
 :skolemid |162|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1)) (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) i_14))
))))) (and (and (and (state ExhaleHeap@0 Mask@39) (forall ((i_15 Int) ) (!  (=> (and (<= 0 i_15) (< i_15 (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (<= (U_2_int (MapType0Select ExhaleHeap@0 ptr@1 data)) (U_2_int (|Seq#Index| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null) i_15))))
 :qid |stdinbpl.4491:26|
 :skolemid |163|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select ExhaleHeap@0 null (lseg (MapType0Select ExhaleHeap@0 ptr@1 next) null)) (MapType0Select ExhaleHeap@0 ptr@1 next) null) i_15))
))) (and (state ExhaleHeap@0 Mask@39) (= (- index@1 1) (|Seq#Length| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1))))) (and (and (state ExhaleHeap@0 Mask@39) (|Seq#Equal| (content Heap@@38 this@@38) (|Seq#Append| (|Seq#Append| (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@38 head) ptr@1) (|Seq#Singleton| (MapType0Select ExhaleHeap@0 ptr@1 data))) (contentNodes ExhaleHeap@0 (MapType0Select ExhaleHeap@0 ptr@1 next) null)))) (and (state ExhaleHeap@0 Mask@39) (state ExhaleHeap@0 Mask@39))))) (and (and (and (and (not (= freshObj@1 null)) (not (U_2_bool (MapType0Select ExhaleHeap@0 freshObj@1 $allocated)))) (= Heap@24 (MapType0Store ExhaleHeap@0 freshObj@1 $allocated (bool_2_U true)))) (and (= Mask@40 (MapType1Store Mask@39 freshObj@1 data (real_2_U (+ (U_2_real (MapType1Select Mask@39 freshObj@1 data)) FullPerm)))) (= Mask@41 (MapType1Store Mask@40 freshObj@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@40 freshObj@1 next)) FullPerm)))))) (and (and (= Mask@42 (MapType1Store Mask@41 freshObj@1 head (real_2_U (+ (U_2_real (MapType1Select Mask@41 freshObj@1 head)) FullPerm)))) (= Mask@43 (MapType1Store Mask@42 freshObj@1 held (real_2_U (+ (U_2_real (MapType1Select Mask@42 freshObj@1 held)) FullPerm))))) (and (= Mask@44 (MapType1Store Mask@43 freshObj@1 changed (real_2_U (+ (U_2_real (MapType1Select Mask@43 freshObj@1 changed)) FullPerm)))) (state Heap@24 Mask@44))))) (and (=> (= (ControlFlow 0 122) (- 0 127)) (= FullPerm (U_2_real (MapType1Select Mask@44 freshObj@1 data)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@44 freshObj@1 data))) (=> (and (= Heap@25 (MapType0Store Heap@24 freshObj@1 data (int_2_U elem))) (state Heap@25 Mask@44)) (and (=> (= (ControlFlow 0 122) (- 0 126)) (HasDirectPerm Mask@44 ptr@1 next)) (=> (HasDirectPerm Mask@44 ptr@1 next) (and (=> (= (ControlFlow 0 122) (- 0 125)) (= FullPerm (U_2_real (MapType1Select Mask@44 freshObj@1 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@44 freshObj@1 next))) (=> (and (= Heap@26 (MapType0Store Heap@25 freshObj@1 next (MapType0Select Heap@25 ptr@1 next))) (state Heap@26 Mask@44)) (and (=> (= (ControlFlow 0 122) (- 0 124)) (= FullPerm (U_2_real (MapType1Select Mask@44 ptr@1 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@44 ptr@1 next))) (=> (and (= Heap@27 (MapType0Store Heap@26 ptr@1 next freshObj@1)) (state Heap@27 Mask@44)) (and (=> (= (ControlFlow 0 122) (- 0 123)) (HasDirectPerm Mask@44 ptr@1 next)) (=> (HasDirectPerm Mask@44 ptr@1 next) (and (=> (= (ControlFlow 0 122) 121) anon465_Then_correct) (=> (= (ControlFlow 0 122) 95) anon465_Else_correct))))))))))))))))))))
(let ((anon389_Else_correct  (=> (forall ((i_3_1 Int) ) (!  (=> (and (<= 0 i_3_1) (< i_3_1 (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null)))) (<= (U_2_int (MapType0Select Heap@23 ptr@0 data)) (U_2_int (|Seq#Index| (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null) i_3_1))))
 :qid |stdinbpl.3583:28|
 :skolemid |144|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select Heap@23 null (lseg (MapType0Select Heap@23 ptr@0 next) null)) (MapType0Select Heap@23 ptr@0 next) null) i_3_1))
)) (and (=> (= (ControlFlow 0 370) (- 0 372)) (= (- index@0 1) (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0)))) (=> (= (- index@0 1) (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0))) (and (=> (= (ControlFlow 0 370) (- 0 371)) (|Seq#Equal| (content Heap@@38 this@@38) (|Seq#Append| (|Seq#Append| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0) (|Seq#Singleton| (MapType0Select Heap@23 ptr@0 data))) (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null)))) (=> (|Seq#Equal| (content Heap@@38 this@@38) (|Seq#Append| (|Seq#Append| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0) (|Seq#Singleton| (MapType0Select Heap@23 ptr@0 data))) (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null))) (=> (and (IdenticalOnKnownLocations Heap@23 ExhaleHeap@0 Mask@24) (U_2_bool (MapType0Select ExhaleHeap@0 ptr@1 $allocated))) (and (and (=> (= (ControlFlow 0 370) 366) anon391_Then_correct) (=> (= (ControlFlow 0 370) 300) anon414_Then_correct)) (=> (= (ControlFlow 0 370) 122) anon414_Else_correct))))))))))
(let ((anon120_correct true))
(let ((anon390_Else_correct  (=> (and (not (and (<= 0 i_2) (< i_2 (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null))))) (= (ControlFlow 0 8) 5)) anon120_correct)))
(let ((anon390_Then_correct  (=> (and (<= 0 i_2) (< i_2 (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= (U_2_int (MapType0Select Heap@23 ptr@0 data)) (U_2_int (|Seq#Index| (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null) i_2)))) (=> (<= (U_2_int (MapType0Select Heap@23 ptr@0 data)) (U_2_int (|Seq#Index| (contentNodes Heap@23 (MapType0Select Heap@23 ptr@0 next) null) i_2))) (=> (= (ControlFlow 0 6) 5) anon120_correct))))))
(let ((anon387_Else_correct  (=> (forall ((i_1_1 Int) ) (!  (=> (and (<= 0 i_1_1) (< i_1_1 (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0)))) (<= (U_2_int (|Seq#Index| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0) i_1_1)) (U_2_int (MapType0Select Heap@23 ptr@0 data))))
 :qid |stdinbpl.3572:28|
 :skolemid |143|
 :pattern ( (|Seq#Index| (|contentNodes#frame| (MapType0Select Heap@23 null (lseg (MapType0Select Heap@23 this@@38 head) ptr@0)) (MapType0Select Heap@23 this@@38 head) ptr@0) i_1_1))
)) (and (and (=> (= (ControlFlow 0 373) 370) anon389_Else_correct) (=> (= (ControlFlow 0 373) 6) anon390_Then_correct)) (=> (= (ControlFlow 0 373) 8) anon390_Else_correct)))))
(let ((anon116_correct true))
(let ((anon388_Else_correct  (=> (and (not (and (<= 0 i@@8) (< i@@8 (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0))))) (= (ControlFlow 0 4) 1)) anon116_correct)))
(let ((anon388_Then_correct  (=> (and (<= 0 i@@8) (< i@@8 (|Seq#Length| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= (U_2_int (|Seq#Index| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0) i@@8)) (U_2_int (MapType0Select Heap@23 ptr@0 data)))) (=> (<= (U_2_int (|Seq#Index| (contentNodes Heap@23 (MapType0Select Heap@23 this@@38 head) ptr@0) i@@8)) (U_2_int (MapType0Select Heap@23 ptr@0 data))) (=> (= (ControlFlow 0 2) 1) anon116_correct))))))
(let ((anon113_correct  (=> (= Mask@24 (MapType1Store Mask@23 null (lseg (MapType0Select Heap@23 this@@38 head) ptr@0) (real_2_U (- (U_2_real (MapType1Select Mask@23 null (lseg (MapType0Select Heap@23 this@@38 head) ptr@0))) FullPerm)))) (and (and (=> (= (ControlFlow 0 374) 373) anon387_Else_correct) (=> (= (ControlFlow 0 374) 2) anon388_Then_correct)) (=> (= (ControlFlow 0 374) 4) anon388_Else_correct)))))
(let ((anon386_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 377) 374)) anon113_correct)))
(let ((anon386_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 375) (- 0 376)) (<= FullPerm (U_2_real (MapType1Select Mask@23 null (lseg (MapType0Select Heap@23 this@@38 head) ptr@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@23 null (lseg (MapType0Select Heap@23 this@@38 head) ptr@0)))) (=> (= (ControlFlow 0 375) 374) anon113_correct))))))
(let ((anon111_correct  (=> (= Mask@23 (MapType1Store Mask@22 null (lseg (MapType0Select Heap@23 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@22 null (lseg (MapType0Select Heap@23 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 378) 375) anon386_Then_correct) (=> (= (ControlFlow 0 378) 377) anon386_Else_correct)))))
(let ((anon385_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 381) 378)) anon111_correct)))
(let ((anon385_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 379) (- 0 380)) (<= FullPerm (U_2_real (MapType1Select Mask@22 null (lseg (MapType0Select Heap@23 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@22 null (lseg (MapType0Select Heap@23 ptr@0 next) null)))) (=> (= (ControlFlow 0 379) 378) anon111_correct))))))
(let ((anon109_correct  (=> (= Mask@22 (MapType1Store Mask@21 ptr@0 data (real_2_U (- (U_2_real (MapType1Select Mask@21 ptr@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 382) (- 0 383)) (<= (U_2_int (MapType0Select Heap@23 ptr@0 data)) elem)) (=> (<= (U_2_int (MapType0Select Heap@23 ptr@0 data)) elem) (and (=> (= (ControlFlow 0 382) 379) anon385_Then_correct) (=> (= (ControlFlow 0 382) 381) anon385_Else_correct)))))))
(let ((anon384_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 386) 382)) anon109_correct)))
(let ((anon384_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 384) (- 0 385)) (<= FullPerm (U_2_real (MapType1Select Mask@21 ptr@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@21 ptr@0 data))) (=> (= (ControlFlow 0 384) 382) anon109_correct))))))
(let ((anon107_correct  (=> (= Mask@21 (MapType1Store Mask@20 ptr@0 next (real_2_U (- (U_2_real (MapType1Select Mask@20 ptr@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 387) 384) anon384_Then_correct) (=> (= (ControlFlow 0 387) 386) anon384_Else_correct)))))
(let ((anon383_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 390) 387)) anon107_correct)))
(let ((anon383_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 388) (- 0 389)) (<= FullPerm (U_2_real (MapType1Select Mask@20 ptr@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@20 ptr@0 next))) (=> (= (ControlFlow 0 388) 387) anon107_correct))))))
(let ((anon105_correct  (=> (= Mask@20 (MapType1Store Mask@19 this@@38 head (real_2_U (- (U_2_real (MapType1Select Mask@19 this@@38 head)) FullPerm)))) (and (=> (= (ControlFlow 0 391) 388) anon383_Then_correct) (=> (= (ControlFlow 0 391) 390) anon383_Else_correct)))))
(let ((anon382_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 394) 391)) anon105_correct)))
(let ((anon382_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 392) (- 0 393)) (<= FullPerm (U_2_real (MapType1Select Mask@19 this@@38 head)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@19 this@@38 head))) (=> (= (ControlFlow 0 392) 391) anon105_correct))))))
(let ((anon103_correct  (=> (and (and (state Heap@23 Mask@19) (state Heap@23 Mask@19)) (and (= index@0 (+ 0 1)) (state Heap@23 Mask@19))) (and (=> (= (ControlFlow 0 395) 392) anon382_Then_correct) (=> (= (ControlFlow 0 395) 394) anon382_Else_correct)))))
(let ((anon381_Else_correct  (=> (= (MapType0Select Heap@19 this@@38 head) ptr@0) (=> (and (= Heap@23 Heap@19) (= (ControlFlow 0 397) 395)) anon103_correct))))
(let ((anon381_Then_correct  (=> (not (= (MapType0Select Heap@19 this@@38 head) ptr@0)) (=> (and (= Heap@20 (MapType0Store Heap@19 null (|lseg#sm| (MapType0Select Heap@19 this@@38 head) ptr@0) (MapType1Store (MapType0Select Heap@19 null (|lseg#sm| (MapType0Select Heap@19 this@@38 head) ptr@0)) (MapType0Select Heap@19 this@@38 head) data (bool_2_U true)))) (= Heap@21 (MapType0Store Heap@20 null (|lseg#sm| (MapType0Select Heap@20 this@@38 head) ptr@0) (MapType1Store (MapType0Select Heap@20 null (|lseg#sm| (MapType0Select Heap@20 this@@38 head) ptr@0)) (MapType0Select Heap@20 this@@38 head) next (bool_2_U true))))) (=> (and (and (forall ((o_44 T@U) (f_48 T@U) ) (! (let ((B@@35 (FieldTypeInv1 (type f_48))))
(let ((A@@36 (FieldTypeInv0 (type f_48))))
 (=> (and (and (= (type o_44) RefType) (= (type f_48) (FieldType A@@36 B@@35))) (or (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|lseg#sm| (MapType0Select Heap@21 this@@38 head) ptr@0)) o_44 f_48)) (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|lseg#sm| (MapType0Select Heap@21 (MapType0Select Heap@21 this@@38 head) next) ptr@0)) o_44 f_48)))) (U_2_bool (MapType1Select newPMask@4 o_44 f_48)))))
 :qid |stdinbpl.3513:33|
 :skolemid |142|
 :pattern ( (MapType1Select newPMask@4 o_44 f_48))
)) (= Heap@22 (MapType0Store Heap@21 null (|lseg#sm| (MapType0Select Heap@21 this@@38 head) ptr@0) newPMask@4))) (and (= Heap@23 Heap@22) (= (ControlFlow 0 396) 395))) anon103_correct)))))
(let ((anon380_Else_correct  (=> (and (HasDirectPerm Mask@19 null (lseg (MapType0Select Heap@16 this@@38 head) ptr@0)) (= Heap@19 Heap@16)) (and (=> (= (ControlFlow 0 399) 396) anon381_Then_correct) (=> (= (ControlFlow 0 399) 397) anon381_Else_correct)))))
(let ((anon380_Then_correct  (=> (and (and (not (HasDirectPerm Mask@19 null (lseg (MapType0Select Heap@16 this@@38 head) ptr@0))) (= Heap@17 (MapType0Store Heap@16 null (|lseg#sm| (MapType0Select Heap@16 this@@38 head) ptr@0) ZeroPMask))) (and (= Heap@18 (MapType0Store Heap@17 null (lseg (MapType0Select Heap@17 this@@38 head) ptr@0) freshVersion@0)) (= Heap@19 Heap@18))) (and (=> (= (ControlFlow 0 398) 396) anon381_Then_correct) (=> (= (ControlFlow 0 398) 397) anon381_Else_correct)))))
(let ((anon99_correct  (=> (and (state Heap@16 Mask@18) (= Mask@19 (MapType1Store Mask@18 null (lseg (MapType0Select Heap@16 this@@38 head) ptr@0) (real_2_U (+ (U_2_real (MapType1Select Mask@18 null (lseg (MapType0Select Heap@16 this@@38 head) ptr@0))) FullPerm))))) (=> (and (and (state Heap@16 Mask@19) (state Heap@16 Mask@19)) (and (|lseg#trigger| Heap@16 (lseg (MapType0Select Heap@16 this@@38 head) ptr@0)) (= (MapType0Select Heap@16 null (lseg (MapType0Select Heap@16 this@@38 head) ptr@0)) (FrameFragment (ite (not (= (MapType0Select Heap@16 this@@38 head) ptr@0)) (CombineFrames (FrameFragment (MapType0Select Heap@16 (MapType0Select Heap@16 this@@38 head) data)) (CombineFrames (FrameFragment (MapType0Select Heap@16 (MapType0Select Heap@16 this@@38 head) next)) (MapType0Select Heap@16 null (lseg (MapType0Select Heap@16 (MapType0Select Heap@16 this@@38 head) next) ptr@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 400) 398) anon380_Then_correct) (=> (= (ControlFlow 0 400) 399) anon380_Else_correct))))))
(let ((anon379_Else_correct  (=> (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (=> (and (= Heap@16 Heap@9) (= (ControlFlow 0 402) 400)) anon99_correct))))
(let ((anon379_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (=> (and (= Heap@13 (MapType0Store Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (MapType1Store (MapType0Select Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data (bool_2_U true)))) (= Heap@14 (MapType0Store Heap@13 null (|lseg#sm| (MapType0Select Heap@13 (MapType0Select Heap@13 this@@38 head) next) ptr@0) (MapType1Store (MapType0Select Heap@13 null (|lseg#sm| (MapType0Select Heap@13 (MapType0Select Heap@13 this@@38 head) next) ptr@0)) (MapType0Select Heap@13 (MapType0Select Heap@13 this@@38 head) next) next (bool_2_U true))))) (=> (and (and (forall ((o_43 T@U) (f_47 T@U) ) (! (let ((B@@36 (FieldTypeInv1 (type f_47))))
(let ((A@@37 (FieldTypeInv0 (type f_47))))
 (=> (and (and (= (type o_43) RefType) (= (type f_47) (FieldType A@@37 B@@36))) (or (U_2_bool (MapType1Select (MapType0Select Heap@14 null (|lseg#sm| (MapType0Select Heap@14 (MapType0Select Heap@14 this@@38 head) next) ptr@0)) o_43 f_47)) (U_2_bool (MapType1Select (MapType0Select Heap@14 null (|lseg#sm| (MapType0Select Heap@14 (MapType0Select Heap@14 (MapType0Select Heap@14 this@@38 head) next) next) ptr@0)) o_43 f_47)))) (U_2_bool (MapType1Select newPMask@3 o_43 f_47)))))
 :qid |stdinbpl.3491:35|
 :skolemid |141|
 :pattern ( (MapType1Select newPMask@3 o_43 f_47))
)) (= Heap@15 (MapType0Store Heap@14 null (|lseg#sm| (MapType0Select Heap@14 (MapType0Select Heap@14 this@@38 head) next) ptr@0) newPMask@3))) (and (= Heap@16 Heap@15) (= (ControlFlow 0 401) 400))) anon99_correct)))))
(let ((anon378_Else_correct  (=> (and (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (= Mask@18 Mask@17)) (and (=> (= (ControlFlow 0 406) 401) anon379_Then_correct) (=> (= (ControlFlow 0 406) 402) anon379_Else_correct)))))
(let ((anon378_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (and (=> (= (ControlFlow 0 404) (- 0 405)) (<= (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data)) (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)))) (=> (<= (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data)) (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data))) (=> (= Mask@18 Mask@17) (and (=> (= (ControlFlow 0 404) 401) anon379_Then_correct) (=> (= (ControlFlow 0 404) 402) anon379_Else_correct))))))))
(let ((anon95_correct  (=> (state UnfoldingHeap@9 UnfoldingMask@9) (and (=> (= (ControlFlow 0 407) 404) anon378_Then_correct) (=> (= (ControlFlow 0 407) 406) anon378_Else_correct)))))
(let ((anon94_correct  (=> (and (and (state UnfoldingHeap@8 UnfoldingMask@8) (= UnfoldingHeap@9 UnfoldingHeap@8)) (and (= UnfoldingMask@9 UnfoldingMask@8) (= (ControlFlow 0 409) 407))) anon95_correct)))
(let ((anon377_Else_correct  (=> (= (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0) (=> (and (= UnfoldingHeap@8 Heap@9) (= (ControlFlow 0 411) 409)) anon94_correct))))
(let ((anon377_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0)) (=> (and (= UnfoldingHeap@5 (MapType0Store Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0) (MapType1Store (MapType0Select Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0)) (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) data (bool_2_U true)))) (= UnfoldingHeap@6 (MapType0Store UnfoldingHeap@5 null (|lseg#sm| (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 this@@38 head) next) next) ptr@0) (MapType1Store (MapType0Select UnfoldingHeap@5 null (|lseg#sm| (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 this@@38 head) next) next) ptr@0)) (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 this@@38 head) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_42 T@U) (f_46 T@U) ) (! (let ((B@@37 (FieldTypeInv1 (type f_46))))
(let ((A@@38 (FieldTypeInv0 (type f_46))))
 (=> (and (and (= (type o_42) RefType) (= (type f_46) (FieldType A@@38 B@@37))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@6 null (|lseg#sm| (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 this@@38 head) next) next) ptr@0)) o_42 f_46)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@6 null (|lseg#sm| (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 this@@38 head) next) next) next) ptr@0)) o_42 f_46)))) (U_2_bool (MapType1Select newPMask@2 o_42 f_46)))))
 :qid |stdinbpl.3471:41|
 :skolemid |140|
 :pattern ( (MapType1Select newPMask@2 o_42 f_46))
)) (= UnfoldingHeap@7 (MapType0Store UnfoldingHeap@6 null (|lseg#sm| (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 this@@38 head) next) next) ptr@0) newPMask@2))) (and (= UnfoldingHeap@8 UnfoldingHeap@7) (= (ControlFlow 0 410) 409))) anon94_correct)))))
(let ((anon376_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (=> (and (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) null)) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)) FullPerm))))) (=> (and (and (and (state Heap@9 UnfoldingMask@6) (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) null))) (and (= UnfoldingMask@7 (MapType1Store UnfoldingMask@6 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@6 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next)) FullPerm)))) (state Heap@9 UnfoldingMask@7))) (and (and (= UnfoldingMask@8 (MapType1Store UnfoldingMask@7 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@7 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0)))) (and (state Heap@9 UnfoldingMask@8) (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0)) (<= (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)) (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) data))))))) (and (=> (= (ControlFlow 0 412) 410) anon377_Then_correct) (=> (= (ControlFlow 0 412) 411) anon377_Else_correct)))))))
(let ((anon376_Else_correct  (=> (and (and (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (= UnfoldingHeap@9 Heap@9)) (and (= UnfoldingMask@9 UnfoldingMask@5) (= (ControlFlow 0 408) 407))) anon95_correct)))
(let ((anon91_correct  (=> (= UnfoldingMask@5 (MapType1Store Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (real_2_U (- (U_2_real (MapType1Select Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0))) FullPerm)))) (and (=> (= (ControlFlow 0 413) 412) anon376_Then_correct) (=> (= (ControlFlow 0 413) 408) anon376_Else_correct)))))
(let ((anon375_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 416) 413)) anon91_correct)))
(let ((anon375_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 414) (- 0 415)) (<= FullPerm (U_2_real (MapType1Select Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)))) (=> (= (ControlFlow 0 414) 413) anon91_correct))))))
(let ((anon89_correct  (=> (and (and (= Mask@17 (MapType1Store Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (real_2_U (- (U_2_real (MapType1Select Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@9 this@@38 head) ptr@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 this@@38 head) ptr@0)) (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)))) (and (|lseg#trigger| Heap@9 (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (= (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (FrameFragment (ite (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)) (CombineFrames (FrameFragment (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next)) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) ptr@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 417) 414) anon375_Then_correct) (=> (= (ControlFlow 0 417) 416) anon375_Else_correct)))))
(let ((anon374_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 420) 417)) anon89_correct)))
(let ((anon374_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 418) (- 0 419)) (<= FullPerm (U_2_real (MapType1Select Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) ptr@0)))) (=> (= (ControlFlow 0 418) 417) anon89_correct))))))
(let ((anon87_correct  (=> (= Mask@16 (MapType1Store Mask@15 (MapType0Select Heap@9 this@@38 head) next (real_2_U (- (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@9 this@@38 head) next)) FullPerm)))) (and (=> (= (ControlFlow 0 421) 418) anon374_Then_correct) (=> (= (ControlFlow 0 421) 420) anon374_Else_correct)))))
(let ((anon373_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 424) 421)) anon87_correct)))
(let ((anon373_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 422) (- 0 423)) (<= FullPerm (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@9 this@@38 head) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@9 this@@38 head) next))) (=> (= (ControlFlow 0 422) 421) anon87_correct))))))
(let ((anon85_correct  (=> (= Mask@15 (MapType1Store Mask@9 (MapType0Select Heap@9 this@@38 head) data (real_2_U (- (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@9 this@@38 head) data)) FullPerm)))) (and (=> (= (ControlFlow 0 425) 422) anon373_Then_correct) (=> (= (ControlFlow 0 425) 424) anon373_Else_correct)))))
(let ((anon372_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 428) 425)) anon85_correct)))
(let ((anon372_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 426) (- 0 427)) (<= FullPerm (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@9 this@@38 head) data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@9 this@@38 head) data))) (=> (= (ControlFlow 0 426) 425) anon85_correct))))))
(let ((anon371_Then_correct  (=> (not (= (MapType0Select Heap@9 this@@38 head) ptr@0)) (and (=> (= (ControlFlow 0 429) 426) anon372_Then_correct) (=> (= (ControlFlow 0 429) 428) anon372_Else_correct)))))
(let ((anon371_Else_correct  (=> (and (= (MapType0Select Heap@9 this@@38 head) ptr@0) (= Mask@18 Mask@9)) (and (=> (= (ControlFlow 0 403) 401) anon379_Then_correct) (=> (= (ControlFlow 0 403) 402) anon379_Else_correct)))))
(let ((anon348_Else_correct  (=> (and (not (or (= (MapType0Select Heap@9 this@@38 head) null) (<= elem (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data))))) (U_2_bool (MapType0Select Heap@9 ptr $allocated))) (and (=> (= (ControlFlow 0 430) (- 0 432)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (=> (and (= ptr@0 (MapType0Select Heap@9 this@@38 head)) (state Heap@9 Mask@9)) (and (=> (= (ControlFlow 0 430) (- 0 431)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (and (=> (= (ControlFlow 0 430) 429) anon371_Then_correct) (=> (= (ControlFlow 0 430) 403) anon371_Else_correct))))))))))
(let ((anon347_Else_correct  (=> (= (MapType0Select Heap@9 this@@38 head) null) (and (=> (= (ControlFlow 0 512) 504) anon348_Then_correct) (=> (= (ControlFlow 0 512) 430) anon348_Else_correct)))))
(let ((anon347_Then_correct  (=> (not (= (MapType0Select Heap@9 this@@38 head) null)) (and (=> (= (ControlFlow 0 509) (- 0 511)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (and (=> (= (ControlFlow 0 509) (- 0 510)) (HasDirectPerm Mask@9 (MapType0Select Heap@9 this@@38 head) data)) (=> (HasDirectPerm Mask@9 (MapType0Select Heap@9 this@@38 head) data) (and (=> (= (ControlFlow 0 509) 504) anon348_Then_correct) (=> (= (ControlFlow 0 509) 430) anon348_Else_correct)))))))))
(let ((anon36_correct  (=> (state Heap@9 Mask@9) (and (=> (= (ControlFlow 0 513) (- 0 514)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (and (=> (= (ControlFlow 0 513) 509) anon347_Then_correct) (=> (= (ControlFlow 0 513) 512) anon347_Else_correct)))))))
(let ((anon35_correct  (=> (state Heap@8 Mask@8) (=> (and (and (state Heap@8 Mask@8) (= Heap@9 Heap@8)) (and (= Mask@9 Mask@8) (= (ControlFlow 0 516) 513))) anon36_correct))))
(let ((anon34_correct  (=> (and (and (state Heap@7 Mask@7) (= Mask@8 Mask@7)) (and (= Heap@8 Heap@7) (= (ControlFlow 0 518) 516))) anon35_correct)))
(let ((anon346_Else_correct  (=> (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (=> (and (= Heap@7 Heap@3) (= (ControlFlow 0 520) 518)) anon34_correct))))
(let ((anon346_Then_correct  (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (=> (and (= Heap@4 (MapType0Store Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data (bool_2_U true)))) (= Heap@5 (MapType0Store Heap@4 null (|lseg#sm| (MapType0Select Heap@4 (MapType0Select Heap@4 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@4 null (|lseg#sm| (MapType0Select Heap@4 (MapType0Select Heap@4 this@@38 head) next) null)) (MapType0Select Heap@4 (MapType0Select Heap@4 this@@38 head) next) next (bool_2_U true))))) (=> (and (and (forall ((o_35 T@U) (f_39 T@U) ) (! (let ((B@@38 (FieldTypeInv1 (type f_39))))
(let ((A@@39 (FieldTypeInv0 (type f_39))))
 (=> (and (and (= (type o_35) RefType) (= (type f_39) (FieldType A@@39 B@@38))) (or (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|lseg#sm| (MapType0Select Heap@5 (MapType0Select Heap@5 this@@38 head) next) null)) o_35 f_39)) (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|lseg#sm| (MapType0Select Heap@5 (MapType0Select Heap@5 (MapType0Select Heap@5 this@@38 head) next) next) null)) o_35 f_39)))) (U_2_bool (MapType1Select newPMask@1 o_35 f_39)))))
 :qid |stdinbpl.3106:37|
 :skolemid |133|
 :pattern ( (MapType1Select newPMask@1 o_35 f_39))
)) (= Heap@6 (MapType0Store Heap@5 null (|lseg#sm| (MapType0Select Heap@5 (MapType0Select Heap@5 this@@38 head) next) null) newPMask@1))) (and (= Heap@7 Heap@6) (= (ControlFlow 0 519) 518))) anon34_correct)))))
(let ((anon32_correct  (=> (and (state UnfoldingHeap@4 UnfoldingMask@4) (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (<= (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) data)) (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data))))) (and (=> (= (ControlFlow 0 521) 519) anon346_Then_correct) (=> (= (ControlFlow 0 521) 520) anon346_Else_correct)))))
(let ((anon31_correct  (=> (and (and (state UnfoldingHeap@3 UnfoldingMask@3) (= UnfoldingHeap@4 UnfoldingHeap@3)) (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 523) 521))) anon32_correct)))
(let ((anon345_Else_correct  (=> (= (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (=> (and (= UnfoldingHeap@3 Heap@3) (= (ControlFlow 0 525) 523)) anon31_correct))))
(let ((anon345_Then_correct  (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)) (=> (and (= UnfoldingHeap@0 (MapType0Store Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (MapType1Store (MapType0Select Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)) (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) data (bool_2_U true)))) (= UnfoldingHeap@1 (MapType0Store UnfoldingHeap@0 null (|lseg#sm| (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 this@@38 head) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@0 null (|lseg#sm| (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 this@@38 head) next) next) null)) (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 this@@38 head) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_34 T@U) (f_38 T@U) ) (! (let ((B@@39 (FieldTypeInv1 (type f_38))))
(let ((A@@40 (FieldTypeInv0 (type f_38))))
 (=> (and (and (= (type o_34) RefType) (= (type f_38) (FieldType A@@40 B@@39))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@1 null (|lseg#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 this@@38 head) next) next) null)) o_34 f_38)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@1 null (|lseg#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 this@@38 head) next) next) next) null)) o_34 f_38)))) (U_2_bool (MapType1Select newPMask@0 o_34 f_38)))))
 :qid |stdinbpl.3090:41|
 :skolemid |132|
 :pattern ( (MapType1Select newPMask@0 o_34 f_38))
)) (= UnfoldingHeap@2 (MapType0Store UnfoldingHeap@1 null (|lseg#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 this@@38 head) next) next) null) newPMask@0))) (and (= UnfoldingHeap@3 UnfoldingHeap@2) (= (ControlFlow 0 524) 523))) anon31_correct)))))
(let ((anon344_Then_correct  (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (=> (and (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data)) FullPerm))))) (=> (and (and (and (state Heap@3 UnfoldingMask@1) (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next)) FullPerm)))) (state Heap@3 UnfoldingMask@2))) (and (and (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)))) (and (state Heap@3 UnfoldingMask@3) (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)) (<= (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data)) (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) data))))))) (and (=> (= (ControlFlow 0 526) 524) anon345_Then_correct) (=> (= (ControlFlow 0 526) 525) anon345_Else_correct)))))))
(let ((anon344_Else_correct  (=> (and (and (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (= UnfoldingHeap@4 Heap@3)) (and (= UnfoldingMask@4 UnfoldingMask@0) (= (ControlFlow 0 522) 521))) anon32_correct)))
(let ((anon343_Then_correct  (=> (not (= (MapType0Select Heap@3 this@@38 head) null)) (=> (and (and (not (= (MapType0Select Heap@3 this@@38 head) null)) (= Mask@5 (MapType1Store Mask@4 (MapType0Select Heap@3 this@@38 head) data (real_2_U (+ (U_2_real (MapType1Select Mask@4 (MapType0Select Heap@3 this@@38 head) data)) FullPerm))))) (and (state Heap@3 Mask@5) (not (= (MapType0Select Heap@3 this@@38 head) null)))) (=> (and (and (and (= Mask@6 (MapType1Store Mask@5 (MapType0Select Heap@3 this@@38 head) next (real_2_U (+ (U_2_real (MapType1Select Mask@5 (MapType0Select Heap@3 this@@38 head) next)) FullPerm)))) (state Heap@3 Mask@6)) (and (= Mask@7 (MapType1Store Mask@6 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@6 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@3 this@@38 head) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 this@@38 head) null)) (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))))) (and (and (state Heap@3 Mask@7) (|lseg#trigger| Heap@3 (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) (and (= (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next)) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)))) EmptyFrame))) (= UnfoldingMask@0 (MapType1Store Mask@7 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 527) 526) anon344_Then_correct) (=> (= (ControlFlow 0 527) 522) anon344_Else_correct)))))))
(let ((anon343_Else_correct  (=> (and (and (= (MapType0Select Heap@3 this@@38 head) null) (= Mask@8 Mask@4)) (and (= Heap@8 Heap@3) (= (ControlFlow 0 517) 516))) anon35_correct)))
(let ((anon342_Else_correct  (=> (and (HasDirectPerm Mask@4 null (lseg (MapType0Select Heap@1 this@@38 head) null)) (= Heap@3 Heap@1)) (and (=> (= (ControlFlow 0 529) 527) anon343_Then_correct) (=> (= (ControlFlow 0 529) 517) anon343_Else_correct)))))
(let ((anon342_Then_correct  (=> (not (HasDirectPerm Mask@4 null (lseg (MapType0Select Heap@1 this@@38 head) null))) (=> (and (= Heap@2 (MapType0Store Heap@1 null (lseg (MapType0Select Heap@1 this@@38 head) null) newVersion@1)) (= Heap@3 Heap@2)) (and (=> (= (ControlFlow 0 528) 527) anon343_Then_correct) (=> (= (ControlFlow 0 528) 517) anon343_Else_correct))))))
(let ((anon25_correct  (=> (= Mask@4 (MapType1Store Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null) (real_2_U (- (U_2_real (MapType1Select Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null))) FullPerm)))) (and (=> (= (ControlFlow 0 530) 528) anon342_Then_correct) (=> (= (ControlFlow 0 530) 529) anon342_Else_correct)))))
(let ((anon341_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 533) 530)) anon25_correct)))
(let ((anon341_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 531) (- 0 532)) (<= FullPerm (U_2_real (MapType1Select Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null)))) (=> (= (ControlFlow 0 531) 530) anon25_correct))))))
(let ((anon340_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@38 head) null)) (and (=> (= (ControlFlow 0 534) (- 0 535)) (HasDirectPerm Mask@3 this@@38 head)) (=> (HasDirectPerm Mask@3 this@@38 head) (=> (and (|lseg#trigger| Heap@1 (lseg (MapType0Select Heap@1 this@@38 head) null)) (= (MapType0Select Heap@1 null (lseg (MapType0Select Heap@1 this@@38 head) null)) (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@38 head) null)) (CombineFrames (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 this@@38 head) data)) (CombineFrames (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 this@@38 head) next)) (MapType0Select Heap@1 null (lseg (MapType0Select Heap@1 (MapType0Select Heap@1 this@@38 head) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 534) 531) anon341_Then_correct) (=> (= (ControlFlow 0 534) 533) anon341_Else_correct))))))))
(let ((anon340_Else_correct  (=> (and (and (= (MapType0Select Heap@1 this@@38 head) null) (= Heap@9 Heap@1)) (and (= Mask@9 Mask@3) (= (ControlFlow 0 515) 513))) anon36_correct)))
(let ((anon22_correct  (=> (and (and (and (not (= this@@38 null)) (= Mask@2 (MapType1Store Mask@1 this@@38 head (real_2_U (+ (U_2_real (MapType1Select Mask@1 this@@38 head)) FullPerm))))) (and (state Heap@1 Mask@2) (= Mask@3 (MapType1Store Mask@2 null (lseg (MapType0Select Heap@1 this@@38 head) null) (real_2_U (+ (U_2_real (MapType1Select Mask@2 null (lseg (MapType0Select Heap@1 this@@38 head) null))) FullPerm)))))) (and (and (InsidePredicate (List this@@38) (MapType0Select Heap@1 null (List this@@38)) (lseg (MapType0Select Heap@1 this@@38 head) null) (MapType0Select Heap@1 null (lseg (MapType0Select Heap@1 this@@38 head) null))) (state Heap@1 Mask@3)) (and (state Heap@1 Mask@3) (state Heap@1 Mask@3)))) (and (=> (= (ControlFlow 0 536) (- 0 537)) (HasDirectPerm Mask@3 this@@38 head)) (=> (HasDirectPerm Mask@3 this@@38 head) (and (=> (= (ControlFlow 0 536) 534) anon340_Then_correct) (=> (= (ControlFlow 0 536) 515) anon340_Else_correct)))))))
(let ((anon339_Else_correct  (=> (HasDirectPerm Mask@1 null (List this@@38)) (=> (and (= Heap@1 Heap@@38) (= (ControlFlow 0 539) 536)) anon22_correct))))
(let ((anon339_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (List this@@38))) (= Heap@0 (MapType0Store Heap@@38 null (List this@@38) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 538) 536))) anon22_correct)))
(let ((anon20_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (List this@@38) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (List this@@38))) FullPerm)))) (and (=> (= (ControlFlow 0 540) 538) anon339_Then_correct) (=> (= (ControlFlow 0 540) 539) anon339_Else_correct)))))
(let ((anon338_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 543) 540)) anon20_correct)))
(let ((anon338_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 541) (- 0 542)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 541) 540) anon20_correct))))))
(let ((anon329_Else_correct  (=> (and (and (U_2_bool (MapType0Select Heap@@38 tmp $allocated)) (state Heap@@38 Mask@0)) (and (|List#trigger| Heap@@38 (List this@@38)) (= (MapType0Select Heap@@38 null (List this@@38)) (CombineFrames (FrameFragment (MapType0Select Heap@@38 this@@38 head)) (MapType0Select Heap@@38 null (lseg (MapType0Select Heap@@38 this@@38 head) null)))))) (and (=> (= (ControlFlow 0 544) 541) anon338_Then_correct) (=> (= (ControlFlow 0 544) 543) anon338_Else_correct)))))
(let ((anon0_correct  (=> (and (state Heap@@38 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType0Select Heap@@38 this@@38 $allocated)) (= Mask@0 (MapType1Store ZeroMask null (List this@@38) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List this@@38))) FullPerm))))) (and (state Heap@@38 Mask@0) (state Heap@@38 Mask@0))) (and (=> (= (ControlFlow 0 564) 563) anon329_Then_correct) (=> (= (ControlFlow 0 564) 544) anon329_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 565) 564) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
