(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun f_7 () T@U)
(declare-fun g () T@U)
(declare-fun next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand_5#ft| (T@U Real T@U Real T@U Real T@U Real) T@U)
(declare-fun |wand_5#sm| (T@U Real T@U Real T@U Real T@U Real) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun WandType_wand_5Type () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType1Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun wand_4 (T@U Real T@U Real) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wand_4Type () T@T)
(declare-fun wand (T@U Real T@U Real) T@U)
(declare-fun WandType_wandType () T@T)
(declare-fun wand_3 (T@U Real T@U Real) T@U)
(declare-fun WandType_wand_3Type () T@T)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun wand_2 (Bool T@U Real) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wand_2Type () T@T)
(declare-fun |wand_2#ft| (Bool T@U Real) T@U)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun List (T@U) T@U)
(declare-fun PredicateType_ListType () T@T)
(declare-fun pair (T@U) T@U)
(declare-fun PredicateType_pairType () T@T)
(declare-fun |length'| (T@U T@U) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |length#triggerStateless| (T@U) Int)
(declare-fun |sum'| (T@U T@U) Int)
(declare-fun |sum#triggerStateless| (T@U) Int)
(declare-fun |List#trigger| (T@U T@U) Bool)
(declare-fun |List#everUsed| (T@U) Bool)
(declare-fun |pair#trigger| (T@U T@U) Bool)
(declare-fun |pair#everUsed| (T@U) Bool)
(declare-fun |wand_1#ft| (T@U Real T@U Real T@U Real) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Real T@U Real) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun wand_6 (T@U Real T@U Int T@U Real Bool) T@U)
(declare-fun WandType_wand_6Type () T@T)
(declare-fun |wand_2#sm| (Bool T@U Real) T@U)
(declare-fun length (T@U T@U) Int)
(declare-fun sum (T@U T@U) Int)
(declare-fun |List#sm| (T@U) T@U)
(declare-fun |pair#sm| (T@U) T@U)
(declare-fun wand_5 (T@U Real T@U Real T@U Real T@U Real) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun |wand_4#ft| (T@U Real T@U Real) T@U)
(declare-fun |wand#ft| (T@U Real T@U Real) T@U)
(declare-fun |wand_3#ft| (T@U Real T@U Real) T@U)
(declare-fun wand_1 (T@U Real T@U Real T@U Real) T@U)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |wand_4#sm| (T@U Real T@U Real) T@U)
(declare-fun |wand#sm| (T@U Real T@U Real) T@U)
(declare-fun |wand_3#sm| (T@U Real T@U Real) T@U)
(declare-fun FullPerm () Real)
(declare-fun |length#frame| (T@U T@U) Int)
(declare-fun |sum#frame| (T@U T@U) Int)
(declare-fun |wand_6#ft| (T@U Real T@U Int T@U Real Bool) T@U)
(declare-fun |wand_6#sm| (T@U Real T@U Int T@U Real Bool) T@U)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type f_7) (FieldType NormalFieldType intType))) (= (type g) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated f_7 g next)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@14 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType0Type arg0@@14 arg1@@2)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) (arg1@@3 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15 arg1@@3)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15 arg1@@3))
))) (forall ((arg0@@16 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@16 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@16 arg1@@4))
))) (forall ((arg0@@17 T@U) (arg1@@5 T@U) (arg2 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@17))))
(= (type (MapType0Select arg0@@17 arg1@@5 arg2)) aVar1))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@17 arg1@@5 arg2))
))) (forall ((arg0@@18 T@U) (arg1@@6 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar1@@0 (type arg3)))
(let ((aVar0 (type arg1@@6)))
(= (type (MapType0Store arg0@@18 arg1@@6 arg2@@0 arg3)) (MapType0Type aVar0 aVar1@@0))))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@18 arg1@@6 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m))))
 (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (forall ((arg0@@19 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@19))))
(= (type (WandMaskField arg0@@19)) (FieldType A (MapType0Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@19))
))) (= (Ctor WandType_wand_5Type) 10)) (= (Ctor FrameTypeType) 11)) (forall ((arg0@@20 T@U) (arg1@@7 Real) (arg2@@1 T@U) (arg3@@0 Real) (arg4 T@U) (arg5 Real) (arg6 T@U) (arg7 Real) ) (! (= (type (|wand_5#ft| arg0@@20 arg1@@7 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7)) (FieldType WandType_wand_5Type FrameTypeType))
 :qid |funType:wand_5#ft|
 :pattern ( (|wand_5#ft| arg0@@20 arg1@@7 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7))
))) (forall ((arg0@@21 T@U) (arg1@@8 Real) (arg2@@2 T@U) (arg3@@1 Real) (arg4@@0 T@U) (arg5@@0 Real) (arg6@@0 T@U) (arg7@@0 Real) ) (! (= (type (|wand_5#sm| arg0@@21 arg1@@8 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0)) (FieldType WandType_wand_5Type (MapType0Type RefType boolType)))
 :qid |funType:wand_5#sm|
 :pattern ( (|wand_5#sm| arg0@@21 arg1@@8 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0))
))))
(assert (forall ((arg1@@9 T@U) (arg2@@3 Real) (arg3@@2 T@U) (arg4@@1 Real) (arg5@@1 T@U) (arg6@@1 Real) (arg7@@1 T@U) (arg8 Real) ) (!  (=> (and (and (and (= (type arg1@@9) RefType) (= (type arg3@@2) RefType)) (= (type arg5@@1) RefType)) (= (type arg7@@1) RefType)) (= (|wand_5#sm| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8) (WandMaskField (|wand_5#ft| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8))))
 :qid |stdinbpl.395:15|
 :skolemid |68|
 :pattern ( (WandMaskField (|wand_5#ft| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8)))
)))
(assert  (and (and (and (and (and (forall ((arg0@@22 T@T) ) (! (= (Ctor (MapType1Type arg0@@22)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@23 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@23)) arg0@@23)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@23))
))) (forall ((arg0@@24 T@U) (arg1@@10 T@U) (arg2@@4 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2@@4))))
(= (type (MapType1Select arg0@@24 arg1@@10 arg2@@4)) B))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@24 arg1@@10 arg2@@4))
))) (forall ((arg0@@25 T@U) (arg1@@11 T@U) (arg2@@5 T@U) (arg3@@3 T@U) ) (! (let ((aVar0@@0 (type arg1@@11)))
(= (type (MapType1Store arg0@@25 arg1@@11 arg2@@5 arg3@@3)) (MapType1Type aVar0@@0)))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@25 arg1@@11 arg2@@5 arg3@@3))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1@@3))))
 (=> (= (type val@@3) B@@0) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType1Type RefType)) (= (type Heap1) (MapType1Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wand_4Type) 13) (forall ((arg0@@26 T@U) (arg1@@12 Real) (arg2@@6 T@U) (arg3@@4 Real) ) (! (= (type (wand_4 arg0@@26 arg1@@12 arg2@@6 arg3@@4)) (FieldType WandType_wand_4Type intType))
 :qid |funType:wand_4|
 :pattern ( (wand_4 arg0@@26 arg1@@12 arg2@@6 arg3@@4))
))))
(assert (forall ((arg1@@13 T@U) (arg2@@7 Real) (arg3@@5 T@U) (arg4@@2 Real) ) (!  (=> (and (= (type arg1@@13) RefType) (= (type arg3@@5) RefType)) (= (getPredWandId (wand_4 arg1@@13 arg2@@7 arg3@@5 arg4@@2)) 2))
 :qid |stdinbpl.207:15|
 :skolemid |27|
 :pattern ( (wand_4 arg1@@13 arg2@@7 arg3@@5 arg4@@2))
)))
(assert  (and (= (Ctor WandType_wandType) 14) (forall ((arg0@@27 T@U) (arg1@@14 Real) (arg2@@8 T@U) (arg3@@6 Real) ) (! (= (type (wand arg0@@27 arg1@@14 arg2@@8 arg3@@6)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@27 arg1@@14 arg2@@8 arg3@@6))
))))
(assert (forall ((arg1@@15 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@3 Real) ) (!  (=> (and (= (type arg1@@15) RefType) (= (type arg3@@7) RefType)) (= (getPredWandId (wand arg1@@15 arg2@@9 arg3@@7 arg4@@3)) 4))
 :qid |stdinbpl.271:15|
 :skolemid |41|
 :pattern ( (wand arg1@@15 arg2@@9 arg3@@7 arg4@@3))
)))
(assert  (and (= (Ctor WandType_wand_3Type) 15) (forall ((arg0@@28 T@U) (arg1@@16 Real) (arg2@@10 T@U) (arg3@@8 Real) ) (! (= (type (wand_3 arg0@@28 arg1@@16 arg2@@10 arg3@@8)) (FieldType WandType_wand_3Type intType))
 :qid |funType:wand_3|
 :pattern ( (wand_3 arg0@@28 arg1@@16 arg2@@10 arg3@@8))
))))
(assert (forall ((arg1@@17 T@U) (arg2@@11 Real) (arg3@@9 T@U) (arg4@@4 Real) ) (!  (=> (and (= (type arg1@@17) RefType) (= (type arg3@@9) RefType)) (= (getPredWandId (wand_3 arg1@@17 arg2@@11 arg3@@9 arg4@@4)) 6))
 :qid |stdinbpl.335:15|
 :skolemid |55|
 :pattern ( (wand_3 arg1@@17 arg2@@11 arg3@@9 arg4@@4))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType1Type RefType)) (= (type Mask) (MapType0Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType1Type RefType)) (= (type Heap1@@0) (MapType1Type RefType))) (= (type Heap2) (MapType1Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (Ctor WandType_wand_2Type) 16) (forall ((arg0@@29 Bool) (arg1@@18 T@U) (arg2@@12 Real) ) (! (= (type (wand_2 arg0@@29 arg1@@18 arg2@@12)) (FieldType WandType_wand_2Type intType))
 :qid |funType:wand_2|
 :pattern ( (wand_2 arg0@@29 arg1@@18 arg2@@12))
))))
(assert (forall ((arg1@@19 Bool) (arg2@@13 T@U) (arg3@@10 Real) ) (!  (=> (= (type arg2@@13) RefType) (IsWandField (wand_2 arg1@@19 arg2@@13 arg3@@10)))
 :qid |stdinbpl.283:15|
 :skolemid |43|
 :pattern ( (wand_2 arg1@@19 arg2@@13 arg3@@10))
)))
(assert (forall ((arg0@@30 Bool) (arg1@@20 T@U) (arg2@@14 Real) ) (! (= (type (|wand_2#ft| arg0@@30 arg1@@20 arg2@@14)) (FieldType WandType_wand_2Type FrameTypeType))
 :qid |funType:wand_2#ft|
 :pattern ( (|wand_2#ft| arg0@@30 arg1@@20 arg2@@14))
)))
(assert (forall ((arg1@@21 Bool) (arg2@@15 T@U) (arg3@@11 Real) ) (!  (=> (= (type arg2@@15) RefType) (IsWandField (|wand_2#ft| arg1@@21 arg2@@15 arg3@@11)))
 :qid |stdinbpl.287:15|
 :skolemid |44|
 :pattern ( (|wand_2#ft| arg1@@21 arg2@@15 arg3@@11))
)))
(assert (forall ((arg1@@22 Bool) (arg2@@16 T@U) (arg3@@12 Real) ) (!  (=> (= (type arg2@@16) RefType) (= (getPredWandId (wand_2 arg1@@22 arg2@@16 arg3@@12)) 5))
 :qid |stdinbpl.303:15|
 :skolemid |48|
 :pattern ( (wand_2 arg1@@22 arg2@@16 arg3@@12))
)))
(assert (forall ((arg1@@23 Bool) (arg2@@17 T@U) (arg3@@13 Real) ) (!  (=> (= (type arg2@@17) RefType) (not (IsPredicateField (wand_2 arg1@@23 arg2@@17 arg3@@13))))
 :qid |stdinbpl.291:15|
 :skolemid |45|
 :pattern ( (wand_2 arg1@@23 arg2@@17 arg3@@13))
)))
(assert (forall ((arg1@@24 Bool) (arg2@@18 T@U) (arg3@@14 Real) ) (!  (=> (= (type arg2@@18) RefType) (not (IsPredicateField (|wand_2#ft| arg1@@24 arg2@@18 arg3@@14))))
 :qid |stdinbpl.295:15|
 :skolemid |46|
 :pattern ( (|wand_2#ft| arg1@@24 arg2@@18 arg3@@14))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@31 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@31))))
(= (type (PredicateMaskField arg0@@31)) (FieldType A@@0 (MapType0Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@31))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType1Type RefType)) (= (type ExhaleHeap) (MapType1Type RefType))) (= (type Mask@@0) (MapType0Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType1Select Heap@@0 null (PredicateMaskField pm_f)) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType1Type RefType)) (= (type ExhaleHeap@@0) (MapType1Type RefType))) (= (type Mask@@1) (MapType0Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType1Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_ListType) 17) (forall ((arg0@@32 T@U) ) (! (= (type (List arg0@@32)) (FieldType PredicateType_ListType FrameTypeType))
 :qid |funType:List|
 :pattern ( (List arg0@@32))
))))
(assert (forall ((x@@8 T@U) ) (!  (=> (= (type x@@8) RefType) (IsPredicateField (List x@@8)))
 :qid |stdinbpl.664:15|
 :skolemid |81|
 :pattern ( (List x@@8))
)))
(assert  (and (= (Ctor PredicateType_pairType) 18) (forall ((arg0@@33 T@U) ) (! (= (type (pair arg0@@33)) (FieldType PredicateType_pairType FrameTypeType))
 :qid |funType:pair|
 :pattern ( (pair arg0@@33))
))))
(assert (forall ((x@@9 T@U) ) (!  (=> (= (type x@@9) RefType) (IsPredicateField (pair x@@9)))
 :qid |stdinbpl.735:15|
 :skolemid |87|
 :pattern ( (pair x@@9))
)))
(assert (forall ((Heap@@2 T@U) (x@@10 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType1Type RefType)) (= (type x@@10) RefType)) (dummyFunction (int_2_U (|length#triggerStateless| x@@10))))
 :qid |stdinbpl.433:15|
 :skolemid |72|
 :pattern ( (|length'| Heap@@2 x@@10))
)))
(assert (forall ((Heap@@3 T@U) (x@@11 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType1Type RefType)) (= (type x@@11) RefType)) (dummyFunction (int_2_U (|sum#triggerStateless| x@@11))))
 :qid |stdinbpl.569:15|
 :skolemid |77|
 :pattern ( (|sum'| Heap@@3 x@@11))
)))
(assert (forall ((Heap@@4 T@U) (x@@12 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType1Type RefType)) (= (type x@@12) RefType)) (|List#everUsed| (List x@@12)))
 :qid |stdinbpl.683:15|
 :skolemid |85|
 :pattern ( (|List#trigger| Heap@@4 (List x@@12)))
)))
(assert (forall ((Heap@@5 T@U) (x@@13 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType1Type RefType)) (= (type x@@13) RefType)) (|pair#everUsed| (pair x@@13)))
 :qid |stdinbpl.754:15|
 :skolemid |91|
 :pattern ( (|pair#trigger| Heap@@5 (pair x@@13)))
)))
(assert  (and (and (= (Ctor WandType_wand_1Type) 19) (forall ((arg0@@34 T@U) (arg1@@25 Real) (arg2@@19 T@U) (arg3@@15 Real) (arg4@@5 T@U) (arg5@@2 Real) ) (! (= (type (|wand_1#ft| arg0@@34 arg1@@25 arg2@@19 arg3@@15 arg4@@5 arg5@@2)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@34 arg1@@25 arg2@@19 arg3@@15 arg4@@5 arg5@@2))
))) (forall ((arg0@@35 T@U) (arg1@@26 Real) (arg2@@20 T@U) (arg3@@16 Real) (arg4@@6 T@U) (arg5@@3 Real) ) (! (= (type (|wand_1#sm| arg0@@35 arg1@@26 arg2@@20 arg3@@16 arg4@@6 arg5@@3)) (FieldType WandType_wand_1Type (MapType0Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@35 arg1@@26 arg2@@20 arg3@@16 arg4@@6 arg5@@3))
))))
(assert (forall ((arg1@@27 T@U) (arg2@@21 Real) (arg3@@17 T@U) (arg4@@7 Real) (arg5@@4 T@U) (arg6@@2 Real) ) (!  (=> (and (and (= (type arg1@@27) RefType) (= (type arg3@@17) RefType)) (= (type arg5@@4) RefType)) (= (|wand_1#sm| arg1@@27 arg2@@21 arg3@@17 arg4@@7 arg5@@4 arg6@@2) (WandMaskField (|wand_1#ft| arg1@@27 arg2@@21 arg3@@17 arg4@@7 arg5@@4 arg6@@2))))
 :qid |stdinbpl.235:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@27 arg2@@21 arg3@@17 arg4@@7 arg5@@4 arg6@@2)))
)))
(assert  (and (= (Ctor WandType_wand_6Type) 20) (forall ((arg0@@36 T@U) (arg1@@28 Real) (arg2@@22 T@U) (arg3@@18 Int) (arg4@@8 T@U) (arg5@@5 Real) (arg6@@3 Bool) ) (! (= (type (wand_6 arg0@@36 arg1@@28 arg2@@22 arg3@@18 arg4@@8 arg5@@5 arg6@@3)) (FieldType WandType_wand_6Type intType))
 :qid |funType:wand_6|
 :pattern ( (wand_6 arg0@@36 arg1@@28 arg2@@22 arg3@@18 arg4@@8 arg5@@5 arg6@@3))
))))
(assert (forall ((arg1@@29 T@U) (arg2@@23 Real) (arg3@@19 T@U) (arg4@@9 Int) (arg5@@6 T@U) (arg6@@4 Real) (arg7@@2 Bool) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Int) (arg5_2 T@U) (arg6_2 Real) (arg7_2 Bool) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@29) RefType) (= (type arg3@@19) RefType)) (= (type arg5@@6) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (wand_6 arg1@@29 arg2@@23 arg3@@19 arg4@@9 arg5@@6 arg6@@4 arg7@@2) (wand_6 arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2))) (and (= arg1@@29 arg1_2) (and (= arg2@@23 arg2_2) (and (= arg3@@19 arg3_2) (and (= arg4@@9 arg4_2) (and (= arg5@@6 arg5_2) (and (= arg6@@4 arg6_2) (= arg7@@2 arg7_2))))))))
 :qid |stdinbpl.371:15|
 :skolemid |63|
 :pattern ( (wand_6 arg1@@29 arg2@@23 arg3@@19 arg4@@9 arg5@@6 arg6@@4 arg7@@2) (wand_6 arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2))
)))
(assert (forall ((arg0@@37 Bool) (arg1@@30 T@U) (arg2@@24 Real) ) (! (= (type (|wand_2#sm| arg0@@37 arg1@@30 arg2@@24)) (FieldType WandType_wand_2Type (MapType0Type RefType boolType)))
 :qid |funType:wand_2#sm|
 :pattern ( (|wand_2#sm| arg0@@37 arg1@@30 arg2@@24))
)))
(assert (forall ((arg1@@31 Bool) (arg2@@25 T@U) (arg3@@20 Real) ) (!  (=> (= (type arg2@@25) RefType) (= (|wand_2#sm| arg1@@31 arg2@@25 arg3@@20) (WandMaskField (|wand_2#ft| arg1@@31 arg2@@25 arg3@@20))))
 :qid |stdinbpl.299:15|
 :skolemid |47|
 :pattern ( (WandMaskField (|wand_2#ft| arg1@@31 arg2@@25 arg3@@20)))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@6) (MapType1Type RefType)) (= (type ExhaleHeap@@1) (MapType1Type RefType))) (= (type Mask@@2) (MapType0Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType1Select Heap@@6 o_1 $allocated))) (U_2_bool (MapType1Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@1 Mask@@2) (MapType1Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@7 T@U) (x@@14 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType1Type RefType)) (= (type x@@14) RefType)) (and (= (length Heap@@7 x@@14) (|length'| Heap@@7 x@@14)) (dummyFunction (int_2_U (|length#triggerStateless| x@@14)))))
 :qid |stdinbpl.429:15|
 :skolemid |71|
 :pattern ( (length Heap@@7 x@@14))
)))
(assert (forall ((Heap@@8 T@U) (x@@15 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType1Type RefType)) (= (type x@@15) RefType)) (and (= (sum Heap@@8 x@@15) (|sum'| Heap@@8 x@@15)) (dummyFunction (int_2_U (|sum#triggerStateless| x@@15)))))
 :qid |stdinbpl.565:15|
 :skolemid |76|
 :pattern ( (sum Heap@@8 x@@15))
)))
(assert (forall ((x@@16 T@U) (x2 T@U) ) (!  (=> (and (and (= (type x@@16) RefType) (= (type x2) RefType)) (= (List x@@16) (List x2))) (= x@@16 x2))
 :qid |stdinbpl.674:15|
 :skolemid |83|
 :pattern ( (List x@@16) (List x2))
)))
(assert (forall ((arg0@@38 T@U) ) (! (= (type (|List#sm| arg0@@38)) (FieldType PredicateType_ListType (MapType0Type RefType boolType)))
 :qid |funType:List#sm|
 :pattern ( (|List#sm| arg0@@38))
)))
(assert (forall ((x@@17 T@U) (x2@@0 T@U) ) (!  (=> (and (and (= (type x@@17) RefType) (= (type x2@@0) RefType)) (= (|List#sm| x@@17) (|List#sm| x2@@0))) (= x@@17 x2@@0))
 :qid |stdinbpl.678:15|
 :skolemid |84|
 :pattern ( (|List#sm| x@@17) (|List#sm| x2@@0))
)))
(assert (forall ((x@@18 T@U) (x2@@1 T@U) ) (!  (=> (and (and (= (type x@@18) RefType) (= (type x2@@1) RefType)) (= (pair x@@18) (pair x2@@1))) (= x@@18 x2@@1))
 :qid |stdinbpl.745:15|
 :skolemid |89|
 :pattern ( (pair x@@18) (pair x2@@1))
)))
(assert (forall ((arg0@@39 T@U) ) (! (= (type (|pair#sm| arg0@@39)) (FieldType PredicateType_pairType (MapType0Type RefType boolType)))
 :qid |funType:pair#sm|
 :pattern ( (|pair#sm| arg0@@39))
)))
(assert (forall ((x@@19 T@U) (x2@@2 T@U) ) (!  (=> (and (and (= (type x@@19) RefType) (= (type x2@@2) RefType)) (= (|pair#sm| x@@19) (|pair#sm| x2@@2))) (= x@@19 x2@@2))
 :qid |stdinbpl.749:15|
 :skolemid |90|
 :pattern ( (|pair#sm| x@@19) (|pair#sm| x2@@2))
)))
(assert (forall ((arg0@@40 T@U) (arg1@@32 Real) (arg2@@26 T@U) (arg3@@21 Real) (arg4@@10 T@U) (arg5@@7 Real) (arg6@@5 T@U) (arg7@@3 Real) ) (! (= (type (wand_5 arg0@@40 arg1@@32 arg2@@26 arg3@@21 arg4@@10 arg5@@7 arg6@@5 arg7@@3)) (FieldType WandType_wand_5Type intType))
 :qid |funType:wand_5|
 :pattern ( (wand_5 arg0@@40 arg1@@32 arg2@@26 arg3@@21 arg4@@10 arg5@@7 arg6@@5 arg7@@3))
)))
(assert (forall ((arg1@@33 T@U) (arg2@@27 Real) (arg3@@22 T@U) (arg4@@11 Real) (arg5@@8 T@U) (arg6@@6 Real) (arg7@@4 T@U) (arg8@@0 Real) ) (!  (=> (and (and (and (= (type arg1@@33) RefType) (= (type arg3@@22) RefType)) (= (type arg5@@8) RefType)) (= (type arg7@@4) RefType)) (IsWandField (wand_5 arg1@@33 arg2@@27 arg3@@22 arg4@@11 arg5@@8 arg6@@6 arg7@@4 arg8@@0)))
 :qid |stdinbpl.379:15|
 :skolemid |64|
 :pattern ( (wand_5 arg1@@33 arg2@@27 arg3@@22 arg4@@11 arg5@@8 arg6@@6 arg7@@4 arg8@@0))
)))
(assert (forall ((arg1@@34 T@U) (arg2@@28 Real) (arg3@@23 T@U) (arg4@@12 Real) (arg5@@9 T@U) (arg6@@7 Real) (arg7@@5 T@U) (arg8@@1 Real) ) (!  (=> (and (and (and (= (type arg1@@34) RefType) (= (type arg3@@23) RefType)) (= (type arg5@@9) RefType)) (= (type arg7@@5) RefType)) (IsWandField (|wand_5#ft| arg1@@34 arg2@@28 arg3@@23 arg4@@12 arg5@@9 arg6@@7 arg7@@5 arg8@@1)))
 :qid |stdinbpl.383:15|
 :skolemid |65|
 :pattern ( (|wand_5#ft| arg1@@34 arg2@@28 arg3@@23 arg4@@12 arg5@@9 arg6@@7 arg7@@5 arg8@@1))
)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@9) (MapType1Type RefType)) (= (type ExhaleHeap@@2) (MapType1Type RefType))) (= (type Mask@@3) (MapType0Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType1Select Heap@@9 o_1@@0 f_2) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@2 Mask@@3) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((arg1@@35 T@U) (arg2@@29 Real) (arg3@@24 T@U) (arg4@@13 Real) (arg5@@10 T@U) (arg6@@8 Real) (arg7@@6 T@U) (arg8@@2 Real) ) (!  (=> (and (and (and (= (type arg1@@35) RefType) (= (type arg3@@24) RefType)) (= (type arg5@@10) RefType)) (= (type arg7@@6) RefType)) (not (IsPredicateField (wand_5 arg1@@35 arg2@@29 arg3@@24 arg4@@13 arg5@@10 arg6@@8 arg7@@6 arg8@@2))))
 :qid |stdinbpl.387:15|
 :skolemid |66|
 :pattern ( (wand_5 arg1@@35 arg2@@29 arg3@@24 arg4@@13 arg5@@10 arg6@@8 arg7@@6 arg8@@2))
)))
(assert (forall ((arg1@@36 T@U) (arg2@@30 Real) (arg3@@25 T@U) (arg4@@14 Real) (arg5@@11 T@U) (arg6@@9 Real) (arg7@@7 T@U) (arg8@@3 Real) ) (!  (=> (and (and (and (= (type arg1@@36) RefType) (= (type arg3@@25) RefType)) (= (type arg5@@11) RefType)) (= (type arg7@@7) RefType)) (not (IsPredicateField (|wand_5#ft| arg1@@36 arg2@@30 arg3@@25 arg4@@14 arg5@@11 arg6@@9 arg7@@7 arg8@@3))))
 :qid |stdinbpl.391:15|
 :skolemid |67|
 :pattern ( (|wand_5#ft| arg1@@36 arg2@@30 arg3@@25 arg4@@14 arg5@@11 arg6@@9 arg7@@7 arg8@@3))
)))
(assert  (and (= (type dummyHeap) (MapType1Type RefType)) (= (type ZeroMask) (MapType0Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.174:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField f_7)))
(assert  (not (IsWandField f_7)))
(assert  (not (IsPredicateField g)))
(assert  (not (IsWandField g)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert (forall ((Heap@@10 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@10) (MapType1Type RefType)) (= (type ExhaleHeap@@3) (MapType1Type RefType))) (= (type Mask@@4) (MapType0Type RefType realType))) (IdenticalOnKnownLocations Heap@@10 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@10 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@10 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((Heap@@11 T@U) (Mask@@5 T@U) (x@@20 T@U) ) (!  (=> (and (and (and (= (type Heap@@11) (MapType1Type RefType)) (= (type Mask@@5) (MapType0Type RefType realType))) (= (type x@@20) RefType)) (and (state Heap@@11 Mask@@5) (< AssumeFunctionsAbove 1))) (= (sum Heap@@11 x@@20) (+ (U_2_int (MapType1Select Heap@@11 x@@20 f_7)) (U_2_int (MapType1Select Heap@@11 x@@20 g)))))
 :qid |stdinbpl.575:15|
 :skolemid |78|
 :pattern ( (state Heap@@11 Mask@@5) (sum Heap@@11 x@@20))
 :pattern ( (state Heap@@11 Mask@@5) (|sum#triggerStateless| x@@20) (|pair#trigger| Heap@@11 (pair x@@20)))
)))
(assert (forall ((Heap@@12 T@U) (Mask@@6 T@U) (x@@21 T@U) ) (!  (=> (and (and (and (= (type Heap@@12) (MapType1Type RefType)) (= (type Mask@@6) (MapType0Type RefType realType))) (= (type x@@21) RefType)) (and (state Heap@@12 Mask@@6) (< AssumeFunctionsAbove 0))) (= (length Heap@@12 x@@21) (ite (= (MapType1Select Heap@@12 x@@21 next) null) 1 (+ 1 (|length'| Heap@@12 (MapType1Select Heap@@12 x@@21 next))))))
 :qid |stdinbpl.439:15|
 :skolemid |73|
 :pattern ( (state Heap@@12 Mask@@6) (length Heap@@12 x@@21))
 :pattern ( (state Heap@@12 Mask@@6) (|length#triggerStateless| x@@21) (|List#trigger| Heap@@12 (List x@@21)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType0Type RefType realType)) (= (type SummandMask1) (MapType0Type RefType realType))) (= (type SummandMask2) (MapType0Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType0Select ResultMask o_2 f_4)) (+ (U_2_real (MapType0Select SummandMask1 o_2 f_4)) (U_2_real (MapType0Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg1@@37 T@U) (arg2@@31 Real) (arg3@@26 T@U) (arg4@@15 Real) ) (!  (=> (and (= (type arg1@@37) RefType) (= (type arg3@@26) RefType)) (IsWandField (wand_4 arg1@@37 arg2@@31 arg3@@26 arg4@@15)))
 :qid |stdinbpl.187:15|
 :skolemid |22|
 :pattern ( (wand_4 arg1@@37 arg2@@31 arg3@@26 arg4@@15))
)))
(assert (forall ((arg0@@41 T@U) (arg1@@38 Real) (arg2@@32 T@U) (arg3@@27 Real) ) (! (= (type (|wand_4#ft| arg0@@41 arg1@@38 arg2@@32 arg3@@27)) (FieldType WandType_wand_4Type FrameTypeType))
 :qid |funType:wand_4#ft|
 :pattern ( (|wand_4#ft| arg0@@41 arg1@@38 arg2@@32 arg3@@27))
)))
(assert (forall ((arg1@@39 T@U) (arg2@@33 Real) (arg3@@28 T@U) (arg4@@16 Real) ) (!  (=> (and (= (type arg1@@39) RefType) (= (type arg3@@28) RefType)) (IsWandField (|wand_4#ft| arg1@@39 arg2@@33 arg3@@28 arg4@@16)))
 :qid |stdinbpl.191:15|
 :skolemid |23|
 :pattern ( (|wand_4#ft| arg1@@39 arg2@@33 arg3@@28 arg4@@16))
)))
(assert (forall ((arg1@@40 T@U) (arg2@@34 Real) (arg3@@29 T@U) (arg4@@17 Real) ) (!  (=> (and (= (type arg1@@40) RefType) (= (type arg3@@29) RefType)) (IsWandField (wand arg1@@40 arg2@@34 arg3@@29 arg4@@17)))
 :qid |stdinbpl.251:15|
 :skolemid |36|
 :pattern ( (wand arg1@@40 arg2@@34 arg3@@29 arg4@@17))
)))
(assert (forall ((arg0@@42 T@U) (arg1@@41 Real) (arg2@@35 T@U) (arg3@@30 Real) ) (! (= (type (|wand#ft| arg0@@42 arg1@@41 arg2@@35 arg3@@30)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@42 arg1@@41 arg2@@35 arg3@@30))
)))
(assert (forall ((arg1@@42 T@U) (arg2@@36 Real) (arg3@@31 T@U) (arg4@@18 Real) ) (!  (=> (and (= (type arg1@@42) RefType) (= (type arg3@@31) RefType)) (IsWandField (|wand#ft| arg1@@42 arg2@@36 arg3@@31 arg4@@18)))
 :qid |stdinbpl.255:15|
 :skolemid |37|
 :pattern ( (|wand#ft| arg1@@42 arg2@@36 arg3@@31 arg4@@18))
)))
(assert (forall ((arg1@@43 T@U) (arg2@@37 Real) (arg3@@32 T@U) (arg4@@19 Real) ) (!  (=> (and (= (type arg1@@43) RefType) (= (type arg3@@32) RefType)) (IsWandField (wand_3 arg1@@43 arg2@@37 arg3@@32 arg4@@19)))
 :qid |stdinbpl.315:15|
 :skolemid |50|
 :pattern ( (wand_3 arg1@@43 arg2@@37 arg3@@32 arg4@@19))
)))
(assert (forall ((arg0@@43 T@U) (arg1@@44 Real) (arg2@@38 T@U) (arg3@@33 Real) ) (! (= (type (|wand_3#ft| arg0@@43 arg1@@44 arg2@@38 arg3@@33)) (FieldType WandType_wand_3Type FrameTypeType))
 :qid |funType:wand_3#ft|
 :pattern ( (|wand_3#ft| arg0@@43 arg1@@44 arg2@@38 arg3@@33))
)))
(assert (forall ((arg1@@45 T@U) (arg2@@39 Real) (arg3@@34 T@U) (arg4@@20 Real) ) (!  (=> (and (= (type arg1@@45) RefType) (= (type arg3@@34) RefType)) (IsWandField (|wand_3#ft| arg1@@45 arg2@@39 arg3@@34 arg4@@20)))
 :qid |stdinbpl.319:15|
 :skolemid |51|
 :pattern ( (|wand_3#ft| arg1@@45 arg2@@39 arg3@@34 arg4@@20))
)))
(assert (forall ((arg0@@44 T@U) (arg1@@46 Real) (arg2@@40 T@U) (arg3@@35 Real) (arg4@@21 T@U) (arg5@@12 Real) ) (! (= (type (wand_1 arg0@@44 arg1@@46 arg2@@40 arg3@@35 arg4@@21 arg5@@12)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@44 arg1@@46 arg2@@40 arg3@@35 arg4@@21 arg5@@12))
)))
(assert (forall ((arg1@@47 T@U) (arg2@@41 Real) (arg3@@36 T@U) (arg4@@22 Real) (arg5@@13 T@U) (arg6@@10 Real) (arg1_2@@0 T@U) (arg2_2@@0 Real) (arg3_2@@0 T@U) (arg4_2@@0 Real) (arg5_2@@0 T@U) (arg6_2@@0 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@47) RefType) (= (type arg3@@36) RefType)) (= (type arg5@@13) RefType)) (= (type arg1_2@@0) RefType)) (= (type arg3_2@@0) RefType)) (= (type arg5_2@@0) RefType)) (= (wand_1 arg1@@47 arg2@@41 arg3@@36 arg4@@22 arg5@@13 arg6@@10) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0 arg5_2@@0 arg6_2@@0))) (and (= arg1@@47 arg1_2@@0) (and (= arg2@@41 arg2_2@@0) (and (= arg3@@36 arg3_2@@0) (and (= arg4@@22 arg4_2@@0) (and (= arg5@@13 arg5_2@@0) (= arg6@@10 arg6_2@@0)))))))
 :qid |stdinbpl.243:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@47 arg2@@41 arg3@@36 arg4@@22 arg5@@13 arg6@@10) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0 arg5_2@@0 arg6_2@@0))
)))
(assert  (and (forall ((arg0@@45 Real) (arg1@@48 T@U) ) (! (= (type (ConditionalFrame arg0@@45 arg1@@48)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@45 arg1@@48))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.162:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((arg1@@49 T@U) (arg2@@42 Real) (arg3@@37 T@U) (arg4@@23 Real) ) (!  (=> (and (= (type arg1@@49) RefType) (= (type arg3@@37) RefType)) (not (IsPredicateField (wand_4 arg1@@49 arg2@@42 arg3@@37 arg4@@23))))
 :qid |stdinbpl.195:15|
 :skolemid |24|
 :pattern ( (wand_4 arg1@@49 arg2@@42 arg3@@37 arg4@@23))
)))
(assert (forall ((arg1@@50 T@U) (arg2@@43 Real) (arg3@@38 T@U) (arg4@@24 Real) ) (!  (=> (and (= (type arg1@@50) RefType) (= (type arg3@@38) RefType)) (not (IsPredicateField (|wand_4#ft| arg1@@50 arg2@@43 arg3@@38 arg4@@24))))
 :qid |stdinbpl.199:15|
 :skolemid |25|
 :pattern ( (|wand_4#ft| arg1@@50 arg2@@43 arg3@@38 arg4@@24))
)))
(assert (forall ((arg1@@51 T@U) (arg2@@44 Real) (arg3@@39 T@U) (arg4@@25 Real) ) (!  (=> (and (= (type arg1@@51) RefType) (= (type arg3@@39) RefType)) (not (IsPredicateField (wand arg1@@51 arg2@@44 arg3@@39 arg4@@25))))
 :qid |stdinbpl.259:15|
 :skolemid |38|
 :pattern ( (wand arg1@@51 arg2@@44 arg3@@39 arg4@@25))
)))
(assert (forall ((arg1@@52 T@U) (arg2@@45 Real) (arg3@@40 T@U) (arg4@@26 Real) ) (!  (=> (and (= (type arg1@@52) RefType) (= (type arg3@@40) RefType)) (not (IsPredicateField (|wand#ft| arg1@@52 arg2@@45 arg3@@40 arg4@@26))))
 :qid |stdinbpl.263:15|
 :skolemid |39|
 :pattern ( (|wand#ft| arg1@@52 arg2@@45 arg3@@40 arg4@@26))
)))
(assert (forall ((arg1@@53 T@U) (arg2@@46 Real) (arg3@@41 T@U) (arg4@@27 Real) ) (!  (=> (and (= (type arg1@@53) RefType) (= (type arg3@@41) RefType)) (not (IsPredicateField (wand_3 arg1@@53 arg2@@46 arg3@@41 arg4@@27))))
 :qid |stdinbpl.323:15|
 :skolemid |52|
 :pattern ( (wand_3 arg1@@53 arg2@@46 arg3@@41 arg4@@27))
)))
(assert (forall ((arg1@@54 T@U) (arg2@@47 Real) (arg3@@42 T@U) (arg4@@28 Real) ) (!  (=> (and (= (type arg1@@54) RefType) (= (type arg3@@42) RefType)) (not (IsPredicateField (|wand_3#ft| arg1@@54 arg2@@47 arg3@@42 arg4@@28))))
 :qid |stdinbpl.327:15|
 :skolemid |53|
 :pattern ( (|wand_3#ft| arg1@@54 arg2@@47 arg3@@42 arg4@@28))
)))
(assert (forall ((Mask@@7 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@7) (MapType0Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@7 o_2@@0 f_4@@0) (> (U_2_real (MapType0Select Mask@@7 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@7 o_2@@0 f_4@@0))
)))
(assert (forall ((arg0@@46 T@U) (arg1@@55 Real) (arg2@@48 T@U) (arg3@@43 Real) ) (! (= (type (|wand_4#sm| arg0@@46 arg1@@55 arg2@@48 arg3@@43)) (FieldType WandType_wand_4Type (MapType0Type RefType boolType)))
 :qid |funType:wand_4#sm|
 :pattern ( (|wand_4#sm| arg0@@46 arg1@@55 arg2@@48 arg3@@43))
)))
(assert (forall ((arg1@@56 T@U) (arg2@@49 Real) (arg3@@44 T@U) (arg4@@29 Real) ) (!  (=> (and (= (type arg1@@56) RefType) (= (type arg3@@44) RefType)) (= (|wand_4#sm| arg1@@56 arg2@@49 arg3@@44 arg4@@29) (WandMaskField (|wand_4#ft| arg1@@56 arg2@@49 arg3@@44 arg4@@29))))
 :qid |stdinbpl.203:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand_4#ft| arg1@@56 arg2@@49 arg3@@44 arg4@@29)))
)))
(assert (forall ((arg0@@47 T@U) (arg1@@57 Real) (arg2@@50 T@U) (arg3@@45 Real) ) (! (= (type (|wand#sm| arg0@@47 arg1@@57 arg2@@50 arg3@@45)) (FieldType WandType_wandType (MapType0Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@47 arg1@@57 arg2@@50 arg3@@45))
)))
(assert (forall ((arg1@@58 T@U) (arg2@@51 Real) (arg3@@46 T@U) (arg4@@30 Real) ) (!  (=> (and (= (type arg1@@58) RefType) (= (type arg3@@46) RefType)) (= (|wand#sm| arg1@@58 arg2@@51 arg3@@46 arg4@@30) (WandMaskField (|wand#ft| arg1@@58 arg2@@51 arg3@@46 arg4@@30))))
 :qid |stdinbpl.267:15|
 :skolemid |40|
 :pattern ( (WandMaskField (|wand#ft| arg1@@58 arg2@@51 arg3@@46 arg4@@30)))
)))
(assert (forall ((arg0@@48 T@U) (arg1@@59 Real) (arg2@@52 T@U) (arg3@@47 Real) ) (! (= (type (|wand_3#sm| arg0@@48 arg1@@59 arg2@@52 arg3@@47)) (FieldType WandType_wand_3Type (MapType0Type RefType boolType)))
 :qid |funType:wand_3#sm|
 :pattern ( (|wand_3#sm| arg0@@48 arg1@@59 arg2@@52 arg3@@47))
)))
(assert (forall ((arg1@@60 T@U) (arg2@@53 Real) (arg3@@48 T@U) (arg4@@31 Real) ) (!  (=> (and (= (type arg1@@60) RefType) (= (type arg3@@48) RefType)) (= (|wand_3#sm| arg1@@60 arg2@@53 arg3@@48 arg4@@31) (WandMaskField (|wand_3#ft| arg1@@60 arg2@@53 arg3@@48 arg4@@31))))
 :qid |stdinbpl.331:15|
 :skolemid |54|
 :pattern ( (WandMaskField (|wand_3#ft| arg1@@60 arg2@@53 arg3@@48 arg4@@31)))
)))
(assert (forall ((arg1@@61 T@U) (arg2@@54 Real) (arg3@@49 T@U) (arg4@@32 Real) (arg5@@14 T@U) (arg6@@11 Real) ) (!  (=> (and (and (= (type arg1@@61) RefType) (= (type arg3@@49) RefType)) (= (type arg5@@14) RefType)) (= (getPredWandId (wand_1 arg1@@61 arg2@@54 arg3@@49 arg4@@32 arg5@@14 arg6@@11)) 3))
 :qid |stdinbpl.239:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@61 arg2@@54 arg3@@49 arg4@@32 arg5@@14 arg6@@11))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType0Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType0Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@62 T@U) (arg2@@55 Real) (arg3@@50 T@U) (arg4@@33 Real) (arg5@@15 T@U) (arg6@@12 Real) (arg7@@8 T@U) (arg8@@4 Real) (arg1_2@@1 T@U) (arg2_2@@1 Real) (arg3_2@@1 T@U) (arg4_2@@1 Real) (arg5_2@@1 T@U) (arg6_2@@1 Real) (arg7_2@@0 T@U) (arg8_2 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@62) RefType) (= (type arg3@@50) RefType)) (= (type arg5@@15) RefType)) (= (type arg7@@8) RefType)) (= (type arg1_2@@1) RefType)) (= (type arg3_2@@1) RefType)) (= (type arg5_2@@1) RefType)) (= (type arg7_2@@0) RefType)) (= (wand_5 arg1@@62 arg2@@55 arg3@@50 arg4@@33 arg5@@15 arg6@@12 arg7@@8 arg8@@4) (wand_5 arg1_2@@1 arg2_2@@1 arg3_2@@1 arg4_2@@1 arg5_2@@1 arg6_2@@1 arg7_2@@0 arg8_2))) (and (= arg1@@62 arg1_2@@1) (and (= arg2@@55 arg2_2@@1) (and (= arg3@@50 arg3_2@@1) (and (= arg4@@33 arg4_2@@1) (and (= arg5@@15 arg5_2@@1) (and (= arg6@@12 arg6_2@@1) (and (= arg7@@8 arg7_2@@0) (= arg8@@4 arg8_2)))))))))
 :qid |stdinbpl.403:15|
 :skolemid |70|
 :pattern ( (wand_5 arg1@@62 arg2@@55 arg3@@50 arg4@@33 arg5@@15 arg6@@12 arg7@@8 arg8@@4) (wand_5 arg1_2@@1 arg2_2@@1 arg3_2@@1 arg4_2@@1 arg5_2@@1 arg6_2@@1 arg7_2@@0 arg8_2))
)))
(assert (forall ((arg1@@63 T@U) (arg2@@56 Real) (arg3@@51 T@U) (arg4@@34 Real) (arg5@@16 T@U) (arg6@@13 Real) ) (!  (=> (and (and (= (type arg1@@63) RefType) (= (type arg3@@51) RefType)) (= (type arg5@@16) RefType)) (IsWandField (wand_1 arg1@@63 arg2@@56 arg3@@51 arg4@@34 arg5@@16 arg6@@13)))
 :qid |stdinbpl.219:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@63 arg2@@56 arg3@@51 arg4@@34 arg5@@16 arg6@@13))
)))
(assert (forall ((arg1@@64 T@U) (arg2@@57 Real) (arg3@@52 T@U) (arg4@@35 Real) (arg5@@17 T@U) (arg6@@14 Real) ) (!  (=> (and (and (= (type arg1@@64) RefType) (= (type arg3@@52) RefType)) (= (type arg5@@17) RefType)) (IsWandField (|wand_1#ft| arg1@@64 arg2@@57 arg3@@52 arg4@@35 arg5@@17 arg6@@14)))
 :qid |stdinbpl.223:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@64 arg2@@57 arg3@@52 arg4@@35 arg5@@17 arg6@@14))
)))
(assert (forall ((arg1@@65 T@U) (arg2@@58 Real) (arg3@@53 T@U) (arg4@@36 Real) (arg5@@18 T@U) (arg6@@15 Real) ) (!  (=> (and (and (= (type arg1@@65) RefType) (= (type arg3@@53) RefType)) (= (type arg5@@18) RefType)) (not (IsPredicateField (wand_1 arg1@@65 arg2@@58 arg3@@53 arg4@@36 arg5@@18 arg6@@15))))
 :qid |stdinbpl.227:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@65 arg2@@58 arg3@@53 arg4@@36 arg5@@18 arg6@@15))
)))
(assert (forall ((arg1@@66 T@U) (arg2@@59 Real) (arg3@@54 T@U) (arg4@@37 Real) (arg5@@19 T@U) (arg6@@16 Real) ) (!  (=> (and (and (= (type arg1@@66) RefType) (= (type arg3@@54) RefType)) (= (type arg5@@19) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@66 arg2@@59 arg3@@54 arg4@@37 arg5@@19 arg6@@16))))
 :qid |stdinbpl.231:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@66 arg2@@59 arg3@@54 arg4@@37 arg5@@19 arg6@@16))
)))
(assert (forall ((arg1@@67 T@U) (arg2@@60 Real) (arg3@@55 T@U) (arg4@@38 Real) (arg5@@20 T@U) (arg6@@17 Real) (arg7@@9 T@U) (arg8@@5 Real) ) (!  (=> (and (and (and (= (type arg1@@67) RefType) (= (type arg3@@55) RefType)) (= (type arg5@@20) RefType)) (= (type arg7@@9) RefType)) (= (getPredWandId (wand_5 arg1@@67 arg2@@60 arg3@@55 arg4@@38 arg5@@20 arg6@@17 arg7@@9 arg8@@5)) 8))
 :qid |stdinbpl.399:15|
 :skolemid |69|
 :pattern ( (wand_5 arg1@@67 arg2@@60 arg3@@55 arg4@@38 arg5@@20 arg6@@17 arg7@@9 arg8@@5))
)))
(assert (forall ((arg1@@68 Bool) (arg2@@61 T@U) (arg3@@56 Real) (arg1_2@@2 Bool) (arg2_2@@2 T@U) (arg3_2@@2 Real) ) (!  (=> (and (and (= (type arg2@@61) RefType) (= (type arg2_2@@2) RefType)) (= (wand_2 arg1@@68 arg2@@61 arg3@@56) (wand_2 arg1_2@@2 arg2_2@@2 arg3_2@@2))) (and (= arg1@@68 arg1_2@@2) (and (= arg2@@61 arg2_2@@2) (= arg3@@56 arg3_2@@2))))
 :qid |stdinbpl.307:15|
 :skolemid |49|
 :pattern ( (wand_2 arg1@@68 arg2@@61 arg3@@56) (wand_2 arg1_2@@2 arg2_2@@2 arg3_2@@2))
)))
(assert (forall ((Heap@@13 T@U) (ExhaleHeap@@4 T@U) (Mask@@8 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@13) (MapType1Type RefType)) (= (type ExhaleHeap@@4) (MapType1Type RefType))) (= (type Mask@@8) (MapType0Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@4 Mask@@8)) (and (HasDirectPerm Mask@@8 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType0Select (MapType1Select Heap@@13 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType1Select Heap@@13 o2 f_2@@0) (MapType1Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType1Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@4 Mask@@8) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@14 T@U) (ExhaleHeap@@5 T@U) (Mask@@9 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@14) (MapType1Type RefType)) (= (type ExhaleHeap@@5) (MapType1Type RefType))) (= (type Mask@@9) (MapType0Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@14 ExhaleHeap@@5 Mask@@9)) (and (HasDirectPerm Mask@@9 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType0Select (MapType1Select Heap@@14 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType1Select Heap@@14 o2@@0 f_2@@1) (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@14 ExhaleHeap@@5 Mask@@9) (IsWandField pm_f@@2))
)))
(assert (forall ((x@@22 T@U) ) (!  (=> (= (type x@@22) RefType) (= (getPredWandId (List x@@22)) 0))
 :qid |stdinbpl.668:15|
 :skolemid |82|
 :pattern ( (List x@@22))
)))
(assert (forall ((x@@23 T@U) ) (!  (=> (= (type x@@23) RefType) (= (getPredWandId (pair x@@23)) 1))
 :qid |stdinbpl.739:15|
 :skolemid |88|
 :pattern ( (pair x@@23))
)))
(assert (forall ((Mask@@10 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@10) (MapType0Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@10)) (and (>= (U_2_real (MapType0Select Mask@@10 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@10) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType0Select Mask@@10 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@10) (MapType0Select Mask@@10 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@15 T@U) (Mask@@11 T@U) (x@@24 T@U) ) (!  (=> (and (and (and (= (type Heap@@15) (MapType1Type RefType)) (= (type Mask@@11) (MapType0Type RefType realType))) (= (type x@@24) RefType)) (state Heap@@15 Mask@@11)) (= (|length'| Heap@@15 x@@24) (|length#frame| (MapType1Select Heap@@15 null (List x@@24)) x@@24)))
 :qid |stdinbpl.446:15|
 :skolemid |74|
 :pattern ( (state Heap@@15 Mask@@11) (|length'| Heap@@15 x@@24))
 :pattern ( (state Heap@@15 Mask@@11) (|length#triggerStateless| x@@24) (|List#trigger| Heap@@15 (List x@@24)))
)))
(assert (forall ((Heap@@16 T@U) (Mask@@12 T@U) (x@@25 T@U) ) (!  (=> (and (and (and (= (type Heap@@16) (MapType1Type RefType)) (= (type Mask@@12) (MapType0Type RefType realType))) (= (type x@@25) RefType)) (state Heap@@16 Mask@@12)) (= (|sum'| Heap@@16 x@@25) (|sum#frame| (MapType1Select Heap@@16 null (pair x@@25)) x@@25)))
 :qid |stdinbpl.582:15|
 :skolemid |79|
 :pattern ( (state Heap@@16 Mask@@12) (|sum'| Heap@@16 x@@25))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@17 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@17) (MapType1Type RefType))) (U_2_bool (MapType1Select Heap@@17 o $allocated))) (U_2_bool (MapType1Select Heap@@17 (MapType1Select Heap@@17 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType1Select Heap@@17 o f))
)))
(assert (forall ((x@@26 T@U) ) (!  (=> (= (type x@@26) RefType) (= (PredicateMaskField (List x@@26)) (|List#sm| x@@26)))
 :qid |stdinbpl.660:15|
 :skolemid |80|
 :pattern ( (PredicateMaskField (List x@@26)))
)))
(assert (forall ((x@@27 T@U) ) (!  (=> (= (type x@@27) RefType) (= (PredicateMaskField (pair x@@27)) (|pair#sm| x@@27)))
 :qid |stdinbpl.731:15|
 :skolemid |86|
 :pattern ( (PredicateMaskField (pair x@@27)))
)))
(assert (forall ((Heap@@18 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@18) (MapType1Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@18 (MapType1Store Heap@@18 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType1Store Heap@@18 o@@0 f_3 v))
)))
(assert  (and (forall ((arg0@@49 T@U) (arg1@@69 Real) (arg2@@62 T@U) (arg3@@57 Int) (arg4@@39 T@U) (arg5@@21 Real) (arg6@@18 Bool) ) (! (= (type (|wand_6#ft| arg0@@49 arg1@@69 arg2@@62 arg3@@57 arg4@@39 arg5@@21 arg6@@18)) (FieldType WandType_wand_6Type FrameTypeType))
 :qid |funType:wand_6#ft|
 :pattern ( (|wand_6#ft| arg0@@49 arg1@@69 arg2@@62 arg3@@57 arg4@@39 arg5@@21 arg6@@18))
)) (forall ((arg0@@50 T@U) (arg1@@70 Real) (arg2@@63 T@U) (arg3@@58 Int) (arg4@@40 T@U) (arg5@@22 Real) (arg6@@19 Bool) ) (! (= (type (|wand_6#sm| arg0@@50 arg1@@70 arg2@@63 arg3@@58 arg4@@40 arg5@@22 arg6@@19)) (FieldType WandType_wand_6Type (MapType0Type RefType boolType)))
 :qid |funType:wand_6#sm|
 :pattern ( (|wand_6#sm| arg0@@50 arg1@@70 arg2@@63 arg3@@58 arg4@@40 arg5@@22 arg6@@19))
))))
(assert (forall ((arg1@@71 T@U) (arg2@@64 Real) (arg3@@59 T@U) (arg4@@41 Int) (arg5@@23 T@U) (arg6@@20 Real) (arg7@@10 Bool) ) (!  (=> (and (and (= (type arg1@@71) RefType) (= (type arg3@@59) RefType)) (= (type arg5@@23) RefType)) (= (|wand_6#sm| arg1@@71 arg2@@64 arg3@@59 arg4@@41 arg5@@23 arg6@@20 arg7@@10) (WandMaskField (|wand_6#ft| arg1@@71 arg2@@64 arg3@@59 arg4@@41 arg5@@23 arg6@@20 arg7@@10))))
 :qid |stdinbpl.363:15|
 :skolemid |61|
 :pattern ( (WandMaskField (|wand_6#ft| arg1@@71 arg2@@64 arg3@@59 arg4@@41 arg5@@23 arg6@@20 arg7@@10)))
)))
(assert (= (type ZeroPMask) (MapType0Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType0Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType0Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.169:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((arg1@@72 T@U) (arg2@@65 Real) (arg3@@60 T@U) (arg4@@42 Int) (arg5@@24 T@U) (arg6@@21 Real) (arg7@@11 Bool) ) (!  (=> (and (and (= (type arg1@@72) RefType) (= (type arg3@@60) RefType)) (= (type arg5@@24) RefType)) (IsWandField (wand_6 arg1@@72 arg2@@65 arg3@@60 arg4@@42 arg5@@24 arg6@@21 arg7@@11)))
 :qid |stdinbpl.347:15|
 :skolemid |57|
 :pattern ( (wand_6 arg1@@72 arg2@@65 arg3@@60 arg4@@42 arg5@@24 arg6@@21 arg7@@11))
)))
(assert (forall ((arg1@@73 T@U) (arg2@@66 Real) (arg3@@61 T@U) (arg4@@43 Int) (arg5@@25 T@U) (arg6@@22 Real) (arg7@@12 Bool) ) (!  (=> (and (and (= (type arg1@@73) RefType) (= (type arg3@@61) RefType)) (= (type arg5@@25) RefType)) (IsWandField (|wand_6#ft| arg1@@73 arg2@@66 arg3@@61 arg4@@43 arg5@@25 arg6@@22 arg7@@12)))
 :qid |stdinbpl.351:15|
 :skolemid |58|
 :pattern ( (|wand_6#ft| arg1@@73 arg2@@66 arg3@@61 arg4@@43 arg5@@25 arg6@@22 arg7@@12))
)))
(assert (forall ((arg1@@74 T@U) (arg2@@67 Real) (arg3@@62 T@U) (arg4@@44 Int) (arg5@@26 T@U) (arg6@@23 Real) (arg7@@13 Bool) ) (!  (=> (and (and (= (type arg1@@74) RefType) (= (type arg3@@62) RefType)) (= (type arg5@@26) RefType)) (not (IsPredicateField (wand_6 arg1@@74 arg2@@67 arg3@@62 arg4@@44 arg5@@26 arg6@@23 arg7@@13))))
 :qid |stdinbpl.355:15|
 :skolemid |59|
 :pattern ( (wand_6 arg1@@74 arg2@@67 arg3@@62 arg4@@44 arg5@@26 arg6@@23 arg7@@13))
)))
(assert (forall ((arg1@@75 T@U) (arg2@@68 Real) (arg3@@63 T@U) (arg4@@45 Int) (arg5@@27 T@U) (arg6@@24 Real) (arg7@@14 Bool) ) (!  (=> (and (and (= (type arg1@@75) RefType) (= (type arg3@@63) RefType)) (= (type arg5@@27) RefType)) (not (IsPredicateField (|wand_6#ft| arg1@@75 arg2@@68 arg3@@63 arg4@@45 arg5@@27 arg6@@24 arg7@@14))))
 :qid |stdinbpl.359:15|
 :skolemid |60|
 :pattern ( (|wand_6#ft| arg1@@75 arg2@@68 arg3@@63 arg4@@45 arg5@@27 arg6@@24 arg7@@14))
)))
(assert (forall ((arg1@@76 T@U) (arg2@@69 Real) (arg3@@64 T@U) (arg4@@46 Int) (arg5@@28 T@U) (arg6@@25 Real) (arg7@@15 Bool) ) (!  (=> (and (and (= (type arg1@@76) RefType) (= (type arg3@@64) RefType)) (= (type arg5@@28) RefType)) (= (getPredWandId (wand_6 arg1@@76 arg2@@69 arg3@@64 arg4@@46 arg5@@28 arg6@@25 arg7@@15)) 7))
 :qid |stdinbpl.367:15|
 :skolemid |62|
 :pattern ( (wand_6 arg1@@76 arg2@@69 arg3@@64 arg4@@46 arg5@@28 arg6@@25 arg7@@15))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@77 T@U) (arg2@@70 Real) (arg3@@65 T@U) (arg4@@47 Real) (arg1_2@@3 T@U) (arg2_2@@3 Real) (arg3_2@@3 T@U) (arg4_2@@2 Real) ) (!  (=> (and (and (and (and (= (type arg1@@77) RefType) (= (type arg3@@65) RefType)) (= (type arg1_2@@3) RefType)) (= (type arg3_2@@3) RefType)) (= (wand_4 arg1@@77 arg2@@70 arg3@@65 arg4@@47) (wand_4 arg1_2@@3 arg2_2@@3 arg3_2@@3 arg4_2@@2))) (and (= arg1@@77 arg1_2@@3) (and (= arg2@@70 arg2_2@@3) (and (= arg3@@65 arg3_2@@3) (= arg4@@47 arg4_2@@2)))))
 :qid |stdinbpl.211:15|
 :skolemid |28|
 :pattern ( (wand_4 arg1@@77 arg2@@70 arg3@@65 arg4@@47) (wand_4 arg1_2@@3 arg2_2@@3 arg3_2@@3 arg4_2@@2))
)))
(assert (forall ((arg1@@78 T@U) (arg2@@71 Real) (arg3@@66 T@U) (arg4@@48 Real) (arg1_2@@4 T@U) (arg2_2@@4 Real) (arg3_2@@4 T@U) (arg4_2@@3 Real) ) (!  (=> (and (and (and (and (= (type arg1@@78) RefType) (= (type arg3@@66) RefType)) (= (type arg1_2@@4) RefType)) (= (type arg3_2@@4) RefType)) (= (wand arg1@@78 arg2@@71 arg3@@66 arg4@@48) (wand arg1_2@@4 arg2_2@@4 arg3_2@@4 arg4_2@@3))) (and (= arg1@@78 arg1_2@@4) (and (= arg2@@71 arg2_2@@4) (and (= arg3@@66 arg3_2@@4) (= arg4@@48 arg4_2@@3)))))
 :qid |stdinbpl.275:15|
 :skolemid |42|
 :pattern ( (wand arg1@@78 arg2@@71 arg3@@66 arg4@@48) (wand arg1_2@@4 arg2_2@@4 arg3_2@@4 arg4_2@@3))
)))
(assert (forall ((arg1@@79 T@U) (arg2@@72 Real) (arg3@@67 T@U) (arg4@@49 Real) (arg1_2@@5 T@U) (arg2_2@@5 Real) (arg3_2@@5 T@U) (arg4_2@@4 Real) ) (!  (=> (and (and (and (and (= (type arg1@@79) RefType) (= (type arg3@@67) RefType)) (= (type arg1_2@@5) RefType)) (= (type arg3_2@@5) RefType)) (= (wand_3 arg1@@79 arg2@@72 arg3@@67 arg4@@49) (wand_3 arg1_2@@5 arg2_2@@5 arg3_2@@5 arg4_2@@4))) (and (= arg1@@79 arg1_2@@5) (and (= arg2@@72 arg2_2@@5) (and (= arg3@@67 arg3_2@@5) (= arg4@@49 arg4_2@@4)))))
 :qid |stdinbpl.339:15|
 :skolemid |56|
 :pattern ( (wand_3 arg1@@79 arg2@@72 arg3@@67 arg4@@49) (wand_3 arg1_2@@5 arg2_2@@5 arg3_2@@5 arg4_2@@4))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun perm@2 () Real)
(declare-fun x@@28 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun perm@3 () Real)
(declare-fun perm@5 () Real)
(declare-fun WandDefLHSMask@1 () T@U)
(declare-fun WandDefLHSHeap@1 () T@U)
(declare-fun perm@6 () Real)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun ExhaleHeap@3 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun b_25@28 () Bool)
(declare-fun b_42@10 () Bool)
(declare-fun neededTransfer@47 () Real)
(declare-fun Used_20Mask@7 () T@U)
(declare-fun initNeededTransfer@8 () Real)
(declare-fun b_44@0 () Bool)
(declare-fun b_44@1 () Bool)
(declare-fun Result_15Heap () T@U)
(declare-fun Result_15Mask () T@U)
(declare-fun b_44@2 () Bool)
(declare-fun Ops_11Mask () T@U)
(declare-fun b_44@3 () Bool)
(declare-fun Ops_11Heap@10 () T@U)
(declare-fun Used_20Heap@0 () T@U)
(declare-fun b_44@4 () Bool)
(declare-fun b_25@29 () Bool)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun takeTransfer@21 () Real)
(declare-fun neededTransfer@45 () Real)
(declare-fun b_42@8 () Bool)
(declare-fun Mask@21 () T@U)
(declare-fun Used_20Mask@5 () T@U)
(declare-fun neededTransfer@46 () Real)
(declare-fun Used_20Mask@6 () T@U)
(declare-fun b_42@9 () Bool)
(declare-fun Mask@22 () T@U)
(declare-fun maskTransfer@21 () Real)
(declare-fun takeTransfer@20 () Real)
(declare-fun Used_20Mask@3 () T@U)
(declare-fun b_42@6 () Bool)
(declare-fun neededTransfer@44 () Real)
(declare-fun Used_20Mask@4 () T@U)
(declare-fun b_42@7 () Bool)
(declare-fun Ops_11Mask@23 () T@U)
(declare-fun Ops_11Mask@22 () T@U)
(declare-fun maskTransfer@20 () Real)
(declare-fun b_25@27 () Bool)
(declare-fun neededTransfer@43 () Real)
(declare-fun initNeededTransfer@7 () Real)
(declare-fun b_43@0 () Bool)
(declare-fun b_43@1 () Bool)
(declare-fun Result_14Heap () T@U)
(declare-fun Result_14Mask () T@U)
(declare-fun b_43@2 () Bool)
(declare-fun b_43@3 () Bool)
(declare-fun b_43@4 () Bool)
(declare-fun takeTransfer@19 () Real)
(declare-fun Mask@19 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun neededTransfer@41 () Real)
(declare-fun b_42@3 () Bool)
(declare-fun Used_20Mask@1 () T@U)
(declare-fun neededTransfer@42 () Real)
(declare-fun Used_20Mask@2 () T@U)
(declare-fun b_42@4 () Bool)
(declare-fun b_42@5 () Bool)
(declare-fun Mask@20 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun maskTransfer@19 () Real)
(declare-fun takeTransfer@18 () Real)
(declare-fun Ops_11Mask@20 () T@U)
(declare-fun b_42@0 () Bool)
(declare-fun neededTransfer@40 () Real)
(declare-fun Used_20Mask@0 () T@U)
(declare-fun b_42@1 () Bool)
(declare-fun b_42@2 () Bool)
(declare-fun Ops_11Mask@21 () T@U)
(declare-fun maskTransfer@18 () Real)
(declare-fun b_42 () Bool)
(declare-fun b_35@19 () Bool)
(declare-fun b_25@23 () Bool)
(declare-fun b_40@9 () Bool)
(declare-fun neededTransfer@39 () Real)
(declare-fun Used_19Mask@5 () T@U)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_41@0 () Bool)
(declare-fun b_41@1 () Bool)
(declare-fun Result_13Heap () T@U)
(declare-fun Result_13Mask () T@U)
(declare-fun b_41@2 () Bool)
(declare-fun Ops_15Mask () T@U)
(declare-fun b_41@3 () Bool)
(declare-fun Ops_15Heap@1 () T@U)
(declare-fun Used_19Heap@0 () T@U)
(declare-fun b_41@4 () Bool)
(declare-fun b_35@20 () Bool)
(declare-fun Ops_11Mask@19 () T@U)
(declare-fun Ops_11Mask@18 () T@U)
(declare-fun b_25@24 () Bool)
(declare-fun Ops_11Heap@9 () T@U)
(declare-fun b_25@25 () Bool)
(declare-fun b_25@26 () Bool)
(declare-fun Mask@18 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun takeTransfer@17 () Real)
(declare-fun Heap@10 () T@U)
(declare-fun Used_19Mask@3 () T@U)
(declare-fun b_40@6 () Bool)
(declare-fun Mask@16 () T@U)
(declare-fun neededTransfer@37 () Real)
(declare-fun neededTransfer@38 () Real)
(declare-fun Used_19Mask@4 () T@U)
(declare-fun b_40@7 () Bool)
(declare-fun b_40@8 () Bool)
(declare-fun Mask@17 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun maskTransfer@17 () Real)
(declare-fun takeTransfer@16 () Real)
(declare-fun Ops_11Heap@7 () T@U)
(declare-fun Ops_11Mask@16 () T@U)
(declare-fun neededTransfer@35 () Real)
(declare-fun b_40@3 () Bool)
(declare-fun Used_19Mask@1 () T@U)
(declare-fun neededTransfer@36 () Real)
(declare-fun Used_19Mask@2 () T@U)
(declare-fun b_40@4 () Bool)
(declare-fun b_40@5 () Bool)
(declare-fun Ops_11Mask@17 () T@U)
(declare-fun Ops_11Heap@8 () T@U)
(declare-fun maskTransfer@16 () Real)
(declare-fun takeTransfer@15 () Real)
(declare-fun b_40@0 () Bool)
(declare-fun neededTransfer@34 () Real)
(declare-fun Used_19Mask@0 () T@U)
(declare-fun b_40@1 () Bool)
(declare-fun b_40@2 () Bool)
(declare-fun Ops_15Mask@8 () T@U)
(declare-fun Ops_15Mask@7 () T@U)
(declare-fun maskTransfer@15 () Real)
(declare-fun b_40 () Bool)
(declare-fun b_35@9 () Bool)
(declare-fun b_38@9 () Bool)
(declare-fun neededTransfer@33 () Real)
(declare-fun Used_18Mask@5 () T@U)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_39@0 () Bool)
(declare-fun b_39@1 () Bool)
(declare-fun Result_12Heap () T@U)
(declare-fun Result_12Mask () T@U)
(declare-fun b_39@2 () Bool)
(declare-fun Ops_15Mask@5 () T@U)
(declare-fun b_39@3 () Bool)
(declare-fun Ops_15Heap@0 () T@U)
(declare-fun Used_18Heap@0 () T@U)
(declare-fun b_39@4 () Bool)
(declare-fun b_35@10 () Bool)
(declare-fun b_35@11 () Bool)
(declare-fun b_35@12 () Bool)
(declare-fun b_35@13 () Bool)
(declare-fun perm@7 () Real)
(declare-fun b_35@14 () Bool)
(declare-fun Ops_15Mask@6 () T@U)
(declare-fun b_35@15 () Bool)
(declare-fun b_35@16 () Bool)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun b_35@17 () Bool)
(declare-fun b_35@18 () Bool)
(declare-fun Mask@15 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Ops_11Mask@15 () T@U)
(declare-fun Ops_11Heap@6 () T@U)
(declare-fun takeTransfer@14 () Real)
(declare-fun neededTransfer@31 () Real)
(declare-fun Used_18Mask@3 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun b_38@6 () Bool)
(declare-fun neededTransfer@32 () Real)
(declare-fun Used_18Mask@4 () T@U)
(declare-fun b_38@7 () Bool)
(declare-fun b_38@8 () Bool)
(declare-fun Mask@14 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun maskTransfer@14 () Real)
(declare-fun takeTransfer@13 () Real)
(declare-fun b_38@3 () Bool)
(declare-fun Ops_11Heap@4 () T@U)
(declare-fun Ops_11Mask@13 () T@U)
(declare-fun Used_18Mask@1 () T@U)
(declare-fun neededTransfer@29 () Real)
(declare-fun neededTransfer@30 () Real)
(declare-fun Used_18Mask@2 () T@U)
(declare-fun b_38@4 () Bool)
(declare-fun b_38@5 () Bool)
(declare-fun Ops_11Mask@14 () T@U)
(declare-fun Ops_11Heap@5 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun neededTransfer@27 () Real)
(declare-fun Ops_15Mask@3 () T@U)
(declare-fun b_38@0 () Bool)
(declare-fun neededTransfer@28 () Real)
(declare-fun Used_18Mask@0 () T@U)
(declare-fun b_38@1 () Bool)
(declare-fun b_38@2 () Bool)
(declare-fun Ops_15Mask@4 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun b_35@5 () Bool)
(declare-fun b_36@6 () Bool)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_17Mask@5 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_37@0 () Bool)
(declare-fun b_37@1 () Bool)
(declare-fun Result_11Heap () T@U)
(declare-fun Result_11Mask () T@U)
(declare-fun b_37@2 () Bool)
(declare-fun b_37@3 () Bool)
(declare-fun Used_17Heap@0 () T@U)
(declare-fun b_37@4 () Bool)
(declare-fun b_35@6 () Bool)
(declare-fun b_35@7 () Bool)
(declare-fun b_35@8 () Bool)
(declare-fun b_38 () Bool)
(declare-fun takeTransfer@11 () Real)
(declare-fun Mask@11 () T@U)
(declare-fun Used_17Mask@3 () T@U)
(declare-fun b_36@4 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun neededTransfer@25 () Real)
(declare-fun Used_17Mask@4 () T@U)
(declare-fun b_36@5 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_11Mask@11 () T@U)
(declare-fun neededTransfer@22 () Real)
(declare-fun b_36@2 () Bool)
(declare-fun Used_17Mask@1 () T@U)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_17Mask@2 () T@U)
(declare-fun b_36@3 () Bool)
(declare-fun Ops_11Mask@12 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun takeTransfer@9 () Real)
(declare-fun Ops_15Mask@1 () T@U)
(declare-fun b_36@0 () Bool)
(declare-fun neededTransfer@21 () Real)
(declare-fun Used_17Mask@0 () T@U)
(declare-fun b_36@1 () Bool)
(declare-fun Ops_15Mask@2 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun b_36 () Bool)
(declare-fun b_35@4 () Bool)
(declare-fun b_35@3 () Bool)
(declare-fun b_35@0 () Bool)
(declare-fun b_35@1 () Bool)
(declare-fun Ops_15Mask@0 () T@U)
(declare-fun b_35@2 () Bool)
(declare-fun b_35 () Bool)
(declare-fun b_34@0 () Bool)
(declare-fun b_34 () Bool)
(declare-fun Used_16Heap@0 () T@U)
(declare-fun b_25@13 () Bool)
(declare-fun b_32@6 () Bool)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_15Mask@3 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_33@0 () Bool)
(declare-fun b_33@1 () Bool)
(declare-fun Result_10Heap () T@U)
(declare-fun Result_10Mask () T@U)
(declare-fun b_33@2 () Bool)
(declare-fun Ops_11Mask@9 () T@U)
(declare-fun b_33@3 () Bool)
(declare-fun Ops_11Heap@3 () T@U)
(declare-fun Used_15Heap@0 () T@U)
(declare-fun b_33@4 () Bool)
(declare-fun b_25@14 () Bool)
(declare-fun b_25@15 () Bool)
(declare-fun b_25@16 () Bool)
(declare-fun b_25@17 () Bool)
(declare-fun perm@4 () Real)
(declare-fun b_25@18 () Bool)
(declare-fun Ops_11Mask@10 () T@U)
(declare-fun b_25@19 () Bool)
(declare-fun b_25@20 () Bool)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_25@21 () Bool)
(declare-fun b_25@22 () Bool)
(declare-fun Mask@10 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun takeTransfer@8 () Real)
(declare-fun Heap@4 () T@U)
(declare-fun b_32@3 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun Used_15Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_15Mask@2 () T@U)
(declare-fun b_32@4 () Bool)
(declare-fun b_32@5 () Bool)
(declare-fun Mask@9 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun takeTransfer@7 () Real)
(declare-fun neededTransfer@16 () Real)
(declare-fun Ops_11Mask@7 () T@U)
(declare-fun b_32@0 () Bool)
(declare-fun neededTransfer@17 () Real)
(declare-fun Used_15Mask@0 () T@U)
(declare-fun b_32@1 () Bool)
(declare-fun b_32@2 () Bool)
(declare-fun Ops_11Mask@8 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun b_25@9 () Bool)
(declare-fun b_30@4 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_14Mask@3 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_31@0 () Bool)
(declare-fun b_31@1 () Bool)
(declare-fun Result_9Heap () T@U)
(declare-fun Result_9Mask () T@U)
(declare-fun b_31@2 () Bool)
(declare-fun b_31@3 () Bool)
(declare-fun Used_14Heap@0 () T@U)
(declare-fun b_31@4 () Bool)
(declare-fun b_25@10 () Bool)
(declare-fun b_25@11 () Bool)
(declare-fun b_25@12 () Bool)
(declare-fun b_32 () Bool)
(declare-fun takeTransfer@6 () Real)
(declare-fun Mask@6 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun b_30@2 () Bool)
(declare-fun Used_14Mask@1 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_14Mask@2 () T@U)
(declare-fun b_30@3 () Bool)
(declare-fun Mask@7 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun takeTransfer@5 () Real)
(declare-fun Ops_11Mask@5 () T@U)
(declare-fun b_30@0 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_14Mask@0 () T@U)
(declare-fun b_30@1 () Bool)
(declare-fun Ops_11Mask@6 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun b_30 () Bool)
(declare-fun b_27@5 () Bool)
(declare-fun b_25@5 () Bool)
(declare-fun b_28@9 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun Used_13Mask@5 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_29@0 () Bool)
(declare-fun b_29@1 () Bool)
(declare-fun Result_8Heap () T@U)
(declare-fun Result_8Mask () T@U)
(declare-fun b_29@2 () Bool)
(declare-fun Ops_13Mask () T@U)
(declare-fun b_29@3 () Bool)
(declare-fun Ops_13Heap@0 () T@U)
(declare-fun Used_13Heap@0 () T@U)
(declare-fun b_29@4 () Bool)
(declare-fun b_27@6 () Bool)
(declare-fun Ops_11Mask@4 () T@U)
(declare-fun Ops_11Mask@3 () T@U)
(declare-fun b_25@6 () Bool)
(declare-fun Ops_11Heap@2 () T@U)
(declare-fun b_25@7 () Bool)
(declare-fun b_25@8 () Bool)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun takeTransfer@4 () Real)
(declare-fun Mask@3 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun neededTransfer@9 () Real)
(declare-fun Used_13Mask@3 () T@U)
(declare-fun b_28@6 () Bool)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_13Mask@4 () T@U)
(declare-fun b_28@7 () Bool)
(declare-fun b_28@8 () Bool)
(declare-fun Mask@4 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun takeTransfer@3 () Real)
(declare-fun Ops_11Heap@0 () T@U)
(declare-fun Ops_11Mask@1 () T@U)
(declare-fun b_28@3 () Bool)
(declare-fun Used_13Mask@1 () T@U)
(declare-fun neededTransfer@7 () Real)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_13Mask@2 () T@U)
(declare-fun b_28@4 () Bool)
(declare-fun b_28@5 () Bool)
(declare-fun Ops_11Mask@2 () T@U)
(declare-fun Ops_11Heap@1 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun neededTransfer@5 () Real)
(declare-fun b_28@0 () Bool)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_13Mask@0 () T@U)
(declare-fun b_28@1 () Bool)
(declare-fun b_28@2 () Bool)
(declare-fun Ops_13Mask@2 () T@U)
(declare-fun Ops_13Mask@1 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_27@4 () Bool)
(declare-fun b_27@3 () Bool)
(declare-fun b_28 () Bool)
(declare-fun b_27@0 () Bool)
(declare-fun perm@1 () Real)
(declare-fun b_27@1 () Bool)
(declare-fun Ops_13Mask@0 () T@U)
(declare-fun b_27@2 () Bool)
(declare-fun b_27 () Bool)
(declare-fun b_26@0 () Bool)
(declare-fun b_26 () Bool)
(declare-fun Used_12Heap@0 () T@U)
(declare-fun b_25@4 () Bool)
(declare-fun b_25@3 () Bool)
(declare-fun b_25@0 () Bool)
(declare-fun b_25@1 () Bool)
(declare-fun Ops_11Mask@0 () T@U)
(declare-fun b_25@2 () Bool)
(declare-fun b_21@5 () Bool)
(declare-fun b_22@6 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_10Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_23@0 () Bool)
(declare-fun b_23@1 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun b_23@2 () Bool)
(declare-fun Ops_9Mask () T@U)
(declare-fun b_23@3 () Bool)
(declare-fun Ops_9Heap@0 () T@U)
(declare-fun Used_10Heap@0 () T@U)
(declare-fun b_23@4 () Bool)
(declare-fun b_21@6 () Bool)
(declare-fun Mask@2 () T@U)
(declare-fun b_25 () Bool)
(declare-fun b_24@0 () Bool)
(declare-fun b_24 () Bool)
(declare-fun Used_11Heap@0 () T@U)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@0 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun b_22@3 () Bool)
(declare-fun Used_10Mask@1 () T@U)
(declare-fun Heap@@19 () T@U)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_10Mask@2 () T@U)
(declare-fun b_22@4 () Bool)
(declare-fun b_22@5 () Bool)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun b_22@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun neededTransfer@1 () Real)
(declare-fun Used_10Mask@0 () T@U)
(declare-fun b_22@1 () Bool)
(declare-fun b_22@2 () Bool)
(declare-fun Ops_9Mask@2 () T@U)
(declare-fun Ops_9Mask@1 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_21@4 () Bool)
(declare-fun b_21@3 () Bool)
(declare-fun b_22 () Bool)
(declare-fun b_21@0 () Bool)
(declare-fun perm@0 () Real)
(declare-fun b_21@1 () Bool)
(declare-fun Ops_9Mask@0 () T@U)
(declare-fun b_21@2 () Bool)
(declare-fun b_21 () Bool)
(declare-fun b_20@0 () Bool)
(declare-fun b_20 () Bool)
(declare-fun Used_9Heap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@30) (MapType0Type RefType realType)) (= (type Mask@29) (MapType0Type RefType realType))) (= (type x@@28) RefType)) (= (type Heap@16) (MapType1Type RefType))) (= (type Mask@31) (MapType0Type RefType realType))) (= (type ExhaleHeap@3) (MapType1Type RefType))) (= (type Mask@26) (MapType0Type RefType realType))) (= (type Mask@25) (MapType0Type RefType realType))) (= (type Heap@15) (MapType1Type RefType))) (= (type Mask@27) (MapType0Type RefType realType))) (= (type Mask@28) (MapType0Type RefType realType))) (= (type ExhaleHeap@2) (MapType1Type RefType))) (= (type Used_20Mask@7) (MapType0Type RefType realType))) (= (type Result_15Heap) (MapType1Type RefType))) (= (type Result_15Mask) (MapType0Type RefType realType))) (= (type Ops_11Mask) (MapType0Type RefType realType))) (= (type Ops_11Heap@10) (MapType1Type RefType))) (= (type Used_20Heap@0) (MapType1Type RefType))) (= (type Mask@24) (MapType0Type RefType realType))) (= (type Mask@23) (MapType0Type RefType realType))) (= (type Mask@21) (MapType0Type RefType realType))) (= (type Used_20Mask@5) (MapType0Type RefType realType))) (= (type Used_20Mask@6) (MapType0Type RefType realType))) (= (type Mask@22) (MapType0Type RefType realType))) (= (type Used_20Mask@3) (MapType0Type RefType realType))) (= (type Used_20Mask@4) (MapType0Type RefType realType))) (= (type Ops_11Mask@23) (MapType0Type RefType realType))) (= (type Ops_11Mask@22) (MapType0Type RefType realType))) (= (type Result_14Heap) (MapType1Type RefType))) (= (type Result_14Mask) (MapType0Type RefType realType))) (= (type Mask@19) (MapType0Type RefType realType))) (= (type Heap@13) (MapType1Type RefType))) (= (type Used_20Mask@1) (MapType0Type RefType realType))) (= (type Used_20Mask@2) (MapType0Type RefType realType))) (= (type Mask@20) (MapType0Type RefType realType))) (= (type Heap@14) (MapType1Type RefType))) (= (type Ops_11Mask@20) (MapType0Type RefType realType))) (= (type Used_20Mask@0) (MapType0Type RefType realType))) (= (type Ops_11Mask@21) (MapType0Type RefType realType))) (= (type Mask@11) (MapType0Type RefType realType))) (= (type Heap@7) (MapType1Type RefType))) (= (type Ops_11Mask@11) (MapType0Type RefType realType))) (= (type Ops_11Heap@4) (MapType1Type RefType))) (= (type Used_19Mask@5) (MapType0Type RefType realType))) (= (type Result_13Heap) (MapType1Type RefType))) (= (type Result_13Mask) (MapType0Type RefType realType))) (= (type Ops_15Mask) (MapType0Type RefType realType))) (= (type Ops_15Heap@1) (MapType1Type RefType))) (= (type Used_19Heap@0) (MapType1Type RefType))) (= (type Ops_11Mask@19) (MapType0Type RefType realType))) (= (type Ops_11Mask@18) (MapType0Type RefType realType))) (= (type Ops_11Heap@9) (MapType1Type RefType))) (= (type Mask@18) (MapType0Type RefType realType))) (= (type Heap@12) (MapType1Type RefType))) (= (type Heap@10) (MapType1Type RefType))) (= (type Used_19Mask@3) (MapType0Type RefType realType))) (= (type Mask@16) (MapType0Type RefType realType))) (= (type Used_19Mask@4) (MapType0Type RefType realType))) (= (type Mask@17) (MapType0Type RefType realType))) (= (type Heap@11) (MapType1Type RefType))) (= (type Ops_11Heap@7) (MapType1Type RefType))) (= (type Ops_11Mask@16) (MapType0Type RefType realType))) (= (type Used_19Mask@1) (MapType0Type RefType realType))) (= (type Used_19Mask@2) (MapType0Type RefType realType))) (= (type Ops_11Mask@17) (MapType0Type RefType realType))) (= (type Ops_11Heap@8) (MapType1Type RefType))) (= (type Used_19Mask@0) (MapType0Type RefType realType))) (= (type Ops_15Mask@8) (MapType0Type RefType realType))) (= (type Ops_15Mask@7) (MapType0Type RefType realType))) (= (type Ops_15Heap@0) (MapType1Type RefType))) (= (type Ops_15Mask@1) (MapType0Type RefType realType))) (= (type Used_18Mask@5) (MapType0Type RefType realType))) (= (type Result_12Heap) (MapType1Type RefType))) (= (type Result_12Mask) (MapType0Type RefType realType))) (= (type Ops_15Mask@5) (MapType0Type RefType realType))) (= (type Used_18Heap@0) (MapType1Type RefType))) (= (type Ops_15Mask@6) (MapType0Type RefType realType))) (= (type ExhaleHeap@1) (MapType1Type RefType))) (= (type Mask@15) (MapType0Type RefType realType))) (= (type Heap@9) (MapType1Type RefType))) (= (type Ops_11Mask@15) (MapType0Type RefType realType))) (= (type Ops_11Heap@6) (MapType1Type RefType))) (= (type Used_18Mask@3) (MapType0Type RefType realType))) (= (type Mask@13) (MapType0Type RefType realType))) (= (type Used_18Mask@4) (MapType0Type RefType realType))) (= (type Mask@14) (MapType0Type RefType realType))) (= (type Heap@8) (MapType1Type RefType))) (= (type Ops_11Mask@13) (MapType0Type RefType realType))) (= (type Used_18Mask@1) (MapType0Type RefType realType))) (= (type Used_18Mask@2) (MapType0Type RefType realType))) (= (type Ops_11Mask@14) (MapType0Type RefType realType))) (= (type Ops_11Heap@5) (MapType1Type RefType))) (= (type Ops_15Mask@3) (MapType0Type RefType realType))) (= (type Used_18Mask@0) (MapType0Type RefType realType))) (= (type Ops_15Mask@4) (MapType0Type RefType realType))) (= (type Used_17Mask@5) (MapType0Type RefType realType))) (= (type Result_11Heap) (MapType1Type RefType))) (= (type Result_11Mask) (MapType0Type RefType realType))) (= (type Used_17Heap@0) (MapType1Type RefType))) (= (type Used_17Mask@3) (MapType0Type RefType realType))) (= (type Used_17Mask@4) (MapType0Type RefType realType))) (= (type Mask@12) (MapType0Type RefType realType))) (= (type Used_17Mask@1) (MapType0Type RefType realType))) (= (type Used_17Mask@2) (MapType0Type RefType realType))) (= (type Ops_11Mask@12) (MapType0Type RefType realType))) (= (type Used_17Mask@0) (MapType0Type RefType realType))) (= (type Ops_15Mask@2) (MapType0Type RefType realType))) (= (type WandDefLHSMask@1) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@1) (MapType1Type RefType))) (= (type Ops_15Mask@0) (MapType0Type RefType realType))) (= (type Used_16Heap@0) (MapType1Type RefType))) (= (type Ops_11Heap@3) (MapType1Type RefType))) (= (type Mask@6) (MapType0Type RefType realType))) (= (type Ops_11Mask@5) (MapType0Type RefType realType))) (= (type Heap@4) (MapType1Type RefType))) (= (type Used_15Mask@3) (MapType0Type RefType realType))) (= (type Result_10Heap) (MapType1Type RefType))) (= (type Result_10Mask) (MapType0Type RefType realType))) (= (type Ops_11Mask@9) (MapType0Type RefType realType))) (= (type Used_15Heap@0) (MapType1Type RefType))) (= (type Ops_11Mask@10) (MapType0Type RefType realType))) (= (type ExhaleHeap@0) (MapType1Type RefType))) (= (type Mask@10) (MapType0Type RefType realType))) (= (type Heap@6) (MapType1Type RefType))) (= (type Mask@8) (MapType0Type RefType realType))) (= (type Used_15Mask@1) (MapType0Type RefType realType))) (= (type Used_15Mask@2) (MapType0Type RefType realType))) (= (type Mask@9) (MapType0Type RefType realType))) (= (type Heap@5) (MapType1Type RefType))) (= (type Ops_11Mask@7) (MapType0Type RefType realType))) (= (type Used_15Mask@0) (MapType0Type RefType realType))) (= (type Ops_11Mask@8) (MapType0Type RefType realType))) (= (type Used_14Mask@3) (MapType0Type RefType realType))) (= (type Result_9Heap) (MapType1Type RefType))) (= (type Result_9Mask) (MapType0Type RefType realType))) (= (type Used_14Heap@0) (MapType1Type RefType))) (= (type Used_14Mask@1) (MapType0Type RefType realType))) (= (type Used_14Mask@2) (MapType0Type RefType realType))) (= (type Mask@7) (MapType0Type RefType realType))) (= (type Used_14Mask@0) (MapType0Type RefType realType))) (= (type Ops_11Mask@6) (MapType0Type RefType realType))) (= (type WandDefLHSMask@0) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType1Type RefType))) (= (type Heap@1) (MapType1Type RefType))) (= (type Mask@3) (MapType0Type RefType realType))) (= (type Ops_11Mask@1) (MapType0Type RefType realType))) (= (type Ops_11Heap@0) (MapType1Type RefType))) (= (type Used_13Mask@5) (MapType0Type RefType realType))) (= (type Result_8Heap) (MapType1Type RefType))) (= (type Result_8Mask) (MapType0Type RefType realType))) (= (type Ops_13Mask) (MapType0Type RefType realType))) (= (type Ops_13Heap@0) (MapType1Type RefType))) (= (type Used_13Heap@0) (MapType1Type RefType))) (= (type Ops_11Mask@4) (MapType0Type RefType realType))) (= (type Ops_11Mask@3) (MapType0Type RefType realType))) (= (type Ops_11Heap@2) (MapType1Type RefType))) (= (type Heap@3) (MapType1Type RefType))) (= (type Mask@5) (MapType0Type RefType realType))) (= (type Used_13Mask@3) (MapType0Type RefType realType))) (= (type Used_13Mask@4) (MapType0Type RefType realType))) (= (type Mask@4) (MapType0Type RefType realType))) (= (type Heap@2) (MapType1Type RefType))) (= (type Used_13Mask@1) (MapType0Type RefType realType))) (= (type Used_13Mask@2) (MapType0Type RefType realType))) (= (type Ops_11Mask@2) (MapType0Type RefType realType))) (= (type Ops_11Heap@1) (MapType1Type RefType))) (= (type Used_13Mask@0) (MapType0Type RefType realType))) (= (type Ops_13Mask@2) (MapType0Type RefType realType))) (= (type Ops_13Mask@1) (MapType0Type RefType realType))) (= (type Ops_13Mask@0) (MapType0Type RefType realType))) (= (type Used_12Heap@0) (MapType1Type RefType))) (= (type Ops_11Mask@0) (MapType0Type RefType realType))) (= (type Used_10Mask@3) (MapType0Type RefType realType))) (= (type Result_7Heap) (MapType1Type RefType))) (= (type Result_7Mask) (MapType0Type RefType realType))) (= (type Ops_9Mask) (MapType0Type RefType realType))) (= (type Ops_9Heap@0) (MapType1Type RefType))) (= (type Used_10Heap@0) (MapType1Type RefType))) (= (type Mask@2) (MapType0Type RefType realType))) (= (type Used_11Heap@0) (MapType1Type RefType))) (= (type Mask@0) (MapType0Type RefType realType))) (= (type Used_10Mask@1) (MapType0Type RefType realType))) (= (type Heap@@19) (MapType1Type RefType))) (= (type Used_10Mask@2) (MapType0Type RefType realType))) (= (type Mask@1) (MapType0Type RefType realType))) (= (type Heap@0) (MapType1Type RefType))) (= (type Used_10Mask@0) (MapType0Type RefType realType))) (= (type Ops_9Mask@2) (MapType0Type RefType realType))) (= (type Ops_9Mask@1) (MapType0Type RefType realType))) (= (type Ops_9Mask@0) (MapType0Type RefType realType))) (= (type Used_9Heap@0) (MapType1Type RefType))))
(set-info :boogie-vc-id test4)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 224) (let ((anon187_Then_correct  (=> (= perm@2 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 168) (- 0 169)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (=> (=> (> perm@2 NoPerm) (not (= x@@28 null))) (=> (and (= WandDefLHSMask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) perm@2)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (=> (and (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (= perm@3 (/ (to_real 1) (to_real 2))) (= (ControlFlow 0 168) (- 0 167)))) (>= perm@3 NoPerm)))))))))
(let ((anon205_Then_correct  (=> (= perm@5 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 123) (- 0 124)) (>= perm@5 NoPerm)) (=> (>= perm@5 NoPerm) (=> (=> (> perm@5 NoPerm) (not (= x@@28 null))) (=> (and (= WandDefLHSMask@1 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) perm@5)))) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (=> (and (and (state WandDefLHSHeap@1 WandDefLHSMask@1) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (and (= perm@6 (/ (to_real 1) (to_real 2))) (= (ControlFlow 0 123) (- 0 122)))) (>= perm@6 NoPerm)))))))))
(let ((anon241_Then_correct true))
(let ((anon164_correct  (=> (= Mask@30 (MapType0Store Mask@29 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@29 x@@28 f_7)) FullPerm)))) (=> (and (and (and (state Heap@16 Mask@30) (not (= x@@28 null))) (and (= Mask@31 (MapType0Store Mask@30 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Mask@30 x@@28 f_7)) FullPerm)))) (state Heap@16 Mask@31))) (and (and (state Heap@16 Mask@31) (IdenticalOnKnownLocations Heap@16 ExhaleHeap@3 Mask@31)) (and (state ExhaleHeap@3 Mask@31) (state ExhaleHeap@3 Mask@31)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (HasDirectPerm Mask@31 x@@28 f_7)) (=> (HasDirectPerm Mask@31 x@@28 f_7) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= (U_2_int (MapType1Select ExhaleHeap@3 x@@28 f_7)) 2)) (=> (= (U_2_int (MapType1Select ExhaleHeap@3 x@@28 f_7)) 2) (=> (and (state ExhaleHeap@3 Mask@31) (= (ControlFlow 0 2) (- 0 1))) false)))))))))
(let ((anon249_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 7) 2)) anon164_correct)))
(let ((anon249_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= FullPerm (U_2_real (MapType0Select Mask@29 x@@28 f_7)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@29 x@@28 f_7))) (=> (= (ControlFlow 0 5) 2) anon164_correct))))))
(let ((anon162_correct  (=> (= Mask@26 (MapType0Store Mask@25 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@25 x@@28 f_7)) FullPerm)))) (=> (and (state Heap@15 Mask@26) (not (= x@@28 null))) (=> (and (and (and (= Mask@27 (MapType0Store Mask@26 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Mask@26 x@@28 f_7)) FullPerm)))) (state Heap@15 Mask@27)) (and (= Mask@28 (MapType0Store Mask@27 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (+ (U_2_real (MapType0Select Mask@27 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) FullPerm)))) (state Heap@15 Mask@28))) (and (and (state Heap@15 Mask@28) (IdenticalOnKnownLocations Heap@15 ExhaleHeap@2 Mask@28)) (and (state ExhaleHeap@2 Mask@28) (state ExhaleHeap@2 Mask@28)))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (= FullPerm (U_2_real (MapType0Select Mask@28 x@@28 f_7)))) (=> (= FullPerm (U_2_real (MapType0Select Mask@28 x@@28 f_7))) (=> (and (= Heap@16 (MapType1Store ExhaleHeap@2 x@@28 f_7 (int_2_U 2))) (state Heap@16 Mask@28)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (<= FullPerm (U_2_real (MapType0Select Mask@28 null (wand_4 x@@28 FullPerm x@@28 FullPerm))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@28 null (wand_4 x@@28 FullPerm x@@28 FullPerm)))) (=> (and (= Mask@29 (MapType0Store Mask@28 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (- (U_2_real (MapType0Select Mask@28 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) FullPerm)))) (state Heap@16 Mask@29)) (and (=> (= (ControlFlow 0 8) 5) anon249_Then_correct) (=> (= (ControlFlow 0 8) 7) anon249_Else_correct)))))))))))))
(let ((anon248_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 13) 8)) anon162_correct)))
(let ((anon248_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= FullPerm (U_2_real (MapType0Select Mask@25 x@@28 f_7)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@25 x@@28 f_7))) (=> (= (ControlFlow 0 11) 8) anon162_correct))))))
(let ((anon160_correct  (and (=> (= (ControlFlow 0 14) (- 0 16)) (=> (and (and b_25@28 b_25@28) b_42@10) (and (= neededTransfer@47 0.0) (= (U_2_real (MapType0Select Used_20Mask@7 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) initNeededTransfer@8)))) (=> (=> (and (and b_25@28 b_25@28) b_42@10) (and (= neededTransfer@47 0.0) (= (U_2_real (MapType0Select Used_20Mask@7 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) initNeededTransfer@8))) (=> (and (= b_44@0  (and b_25@28 b_42@10)) (= b_44@1  (and b_44@0 (state Result_15Heap Result_15Mask)))) (=> (and (and (and (= b_44@2  (and b_44@1 (sumMask Result_15Mask Ops_11Mask Used_20Mask@7))) (= b_44@3  (and (and b_44@2 (IdenticalOnKnownLocations Ops_11Heap@10 Result_15Heap Ops_11Mask)) (IdenticalOnKnownLocations Used_20Heap@0 Result_15Heap Used_20Mask@7)))) (and (= b_44@4  (and b_44@3 (state Result_15Heap Result_15Mask))) (= b_25@29  (and b_25@28 b_44@4)))) (and (and (= Mask@24 (MapType0Store Mask@23 null (wand_5 x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm) (real_2_U (+ (U_2_real (MapType0Select Mask@23 null (wand_5 x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm))) FullPerm)))) (state Heap@15 Mask@24)) (and (state Heap@15 Mask@24) (state Heap@15 Mask@24)))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= FullPerm (U_2_real (MapType0Select Mask@24 null (wand_5 x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@24 null (wand_5 x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm)))) (=> (and (= Mask@25 (MapType0Store Mask@24 null (wand_5 x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm) (real_2_U (- (U_2_real (MapType0Select Mask@24 null (wand_5 x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm))) FullPerm)))) (state Heap@15 Mask@25)) (and (=> (= (ControlFlow 0 14) 11) anon248_Then_correct) (=> (= (ControlFlow 0 14) 13) anon248_Else_correct)))))))))))
(let ((anon247_Else_correct  (=> (and (>= 0.0 takeTransfer@21) (= neededTransfer@47 neededTransfer@45)) (=> (and (and (= b_42@10 b_42@8) (= Mask@23 Mask@21)) (and (= Used_20Mask@7 Used_20Mask@5) (= (ControlFlow 0 19) 14))) anon160_correct))))
(let ((anon247_Then_correct  (=> (and (> takeTransfer@21 0.0) (= neededTransfer@46 (- neededTransfer@45 takeTransfer@21))) (=> (and (and (and (= Used_20Mask@6 (MapType0Store Used_20Mask@5 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (+ (U_2_real (MapType0Select Used_20Mask@5 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) takeTransfer@21)))) (= b_42@9  (and b_42@8 (state Used_20Heap@0 Used_20Mask@6)))) (and (= Mask@22 (MapType0Store Mask@21 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (- (U_2_real (MapType0Select Mask@21 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) takeTransfer@21)))) (= neededTransfer@47 neededTransfer@46))) (and (and (= b_42@10 b_42@9) (= Mask@23 Mask@22)) (and (= Used_20Mask@7 Used_20Mask@6) (= (ControlFlow 0 18) 14)))) anon160_correct))))
(let ((anon246_Else_correct  (=> (and (< maskTransfer@21 neededTransfer@45) (= takeTransfer@21 maskTransfer@21)) (and (=> (= (ControlFlow 0 21) 18) anon247_Then_correct) (=> (= (ControlFlow 0 21) 19) anon247_Else_correct)))))
(let ((anon246_Then_correct  (=> (and (<= neededTransfer@45 maskTransfer@21) (= takeTransfer@21 neededTransfer@45)) (and (=> (= (ControlFlow 0 20) 18) anon247_Then_correct) (=> (= (ControlFlow 0 20) 19) anon247_Else_correct)))))
(let ((anon245_Then_correct  (=> (and (and (and (and (and b_25@28 b_25@28) b_42@8) true) (> neededTransfer@45 0.0)) (= maskTransfer@21 (U_2_real (MapType0Select Mask@21 null (wand_4 x@@28 FullPerm x@@28 FullPerm))))) (and (=> (= (ControlFlow 0 22) 20) anon246_Then_correct) (=> (= (ControlFlow 0 22) 21) anon246_Else_correct)))))
(let ((anon245_Else_correct  (=> (and (not (and (and (and (and b_25@28 b_25@28) b_42@8) true) (> neededTransfer@45 0.0))) (= neededTransfer@47 neededTransfer@45)) (=> (and (and (= b_42@10 b_42@8) (= Mask@23 Mask@21)) (and (= Used_20Mask@7 Used_20Mask@5) (= (ControlFlow 0 17) 14))) anon160_correct))))
(let ((anon244_Else_correct  (=> (and (and (>= 0.0 takeTransfer@20) (= Used_20Mask@5 Used_20Mask@3)) (and (= b_42@8 b_42@6) (= neededTransfer@45 1.0))) (and (=> (= (ControlFlow 0 25) 22) anon245_Then_correct) (=> (= (ControlFlow 0 25) 17) anon245_Else_correct)))))
(let ((anon244_Then_correct  (=> (and (and (and (> takeTransfer@20 0.0) (= neededTransfer@44 (- 1.0 takeTransfer@20))) (and (= Used_20Mask@4 (MapType0Store Used_20Mask@3 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (+ (U_2_real (MapType0Select Used_20Mask@3 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) takeTransfer@20)))) (= b_42@7  (and b_42@6 (state Used_20Heap@0 Used_20Mask@4))))) (and (and (= Ops_11Mask@23 (MapType0Store Ops_11Mask@22 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@22 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) takeTransfer@20)))) (= Used_20Mask@5 Used_20Mask@4)) (and (= b_42@8 b_42@7) (= neededTransfer@45 neededTransfer@44)))) (and (=> (= (ControlFlow 0 24) 22) anon245_Then_correct) (=> (= (ControlFlow 0 24) 17) anon245_Else_correct)))))
(let ((anon243_Else_correct  (=> (and (< maskTransfer@20 1.0) (= takeTransfer@20 maskTransfer@20)) (and (=> (= (ControlFlow 0 27) 24) anon244_Then_correct) (=> (= (ControlFlow 0 27) 25) anon244_Else_correct)))))
(let ((anon243_Then_correct  (=> (and (<= 1.0 maskTransfer@20) (= takeTransfer@20 1.0)) (and (=> (= (ControlFlow 0 26) 24) anon244_Then_correct) (=> (= (ControlFlow 0 26) 25) anon244_Else_correct)))))
(let ((anon242_Then_correct  (=> (and (and (and (and (and b_25@28 b_25@28) b_42@6) true) (> 1.0 0.0)) (= maskTransfer@20 (U_2_real (MapType0Select Ops_11Mask@22 null (wand_4 x@@28 FullPerm x@@28 FullPerm))))) (and (=> (= (ControlFlow 0 28) 26) anon243_Then_correct) (=> (= (ControlFlow 0 28) 27) anon243_Else_correct)))))
(let ((anon242_Else_correct  (=> (and (and (not (and (and (and (and b_25@28 b_25@28) b_42@6) true) (> 1.0 0.0))) (= Used_20Mask@5 Used_20Mask@3)) (and (= b_42@8 b_42@6) (= neededTransfer@45 1.0))) (and (=> (= (ControlFlow 0 23) 22) anon245_Then_correct) (=> (= (ControlFlow 0 23) 17) anon245_Else_correct)))))
(let ((anon148_correct  (=> (= initNeededTransfer@8 (+ (U_2_real (MapType0Select Used_20Mask@3 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) 1.0)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 29) 28) anon242_Then_correct) (=> (= (ControlFlow 0 29) 23) anon242_Else_correct)))))))
(let ((anon240_Then_correct  (=> b_25@28 (and (=> (= (ControlFlow 0 34) 33) anon241_Then_correct) (=> (= (ControlFlow 0 34) 29) anon148_correct)))))
(let ((anon240_Else_correct  (=> (and (not b_25@28) (= (ControlFlow 0 32) 29)) anon148_correct)))
(let ((anon239_Then_correct  (=> (and (and b_25@28 b_25@28) b_42@6) (and (=> (= (ControlFlow 0 35) 34) anon240_Then_correct) (=> (= (ControlFlow 0 35) 32) anon240_Else_correct)))))
(let ((anon239_Else_correct  (=> (and (not (and (and b_25@28 b_25@28) b_42@6)) (= (ControlFlow 0 31) 29)) anon148_correct)))
(let ((anon144_correct  (and (=> (= (ControlFlow 0 36) (- 0 37)) (=> (and (and b_25@27 b_25@27) b_42@6) (and (= neededTransfer@43 0.0) (= (U_2_real (MapType0Select Used_20Mask@3 x@@28 f_7)) initNeededTransfer@7)))) (=> (=> (and (and b_25@27 b_25@27) b_42@6) (and (= neededTransfer@43 0.0) (= (U_2_real (MapType0Select Used_20Mask@3 x@@28 f_7)) initNeededTransfer@7))) (=> (and (= b_43@0  (and b_25@27 b_42@6)) (= b_43@1  (and b_43@0 (state Result_14Heap Result_14Mask)))) (=> (and (and (= b_43@2  (and b_43@1 (sumMask Result_14Mask Ops_11Mask@22 Used_20Mask@3))) (= b_43@3  (and (and b_43@2 (IdenticalOnKnownLocations Ops_11Heap@10 Result_14Heap Ops_11Mask@22)) (IdenticalOnKnownLocations Used_20Heap@0 Result_14Heap Used_20Mask@3)))) (and (= b_43@4  (and b_43@3 (state Result_14Heap Result_14Mask))) (= b_25@28  (and b_25@27 b_43@4)))) (and (=> (= (ControlFlow 0 36) 35) anon239_Then_correct) (=> (= (ControlFlow 0 36) 31) anon239_Else_correct))))))))
(let ((anon238_Else_correct  (=> (>= 0.0 takeTransfer@19) (=> (and (= Mask@21 Mask@19) (= Heap@15 Heap@13)) (=> (and (and (= neededTransfer@43 neededTransfer@41) (= b_42@6 b_42@3)) (and (= Used_20Mask@3 Used_20Mask@1) (= (ControlFlow 0 40) 36))) anon144_correct)))))
(let ((anon238_Then_correct  (=> (> takeTransfer@19 0.0) (=> (and (and (= neededTransfer@42 (- neededTransfer@41 takeTransfer@19)) (= Used_20Mask@2 (MapType0Store Used_20Mask@1 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_20Mask@1 x@@28 f_7)) takeTransfer@19))))) (and (= b_42@4  (and b_42@3 (state Used_20Heap@0 Used_20Mask@2))) (= b_42@5  (and b_42@4 (= (U_2_int (MapType1Select Heap@13 x@@28 f_7)) (U_2_int (MapType1Select Used_20Heap@0 x@@28 f_7))))))) (=> (and (and (and (= Mask@20 (MapType0Store Mask@19 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@19 x@@28 f_7)) takeTransfer@19)))) (= Heap@14 (MapType1Store Heap@13 null (|wand_5#sm| x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm) (MapType0Store (MapType1Select Heap@13 null (|wand_5#sm| x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm)) x@@28 f_7 (bool_2_U true))))) (and (= Mask@21 Mask@20) (= Heap@15 Heap@14))) (and (and (= neededTransfer@43 neededTransfer@42) (= b_42@6 b_42@5)) (and (= Used_20Mask@3 Used_20Mask@2) (= (ControlFlow 0 39) 36)))) anon144_correct)))))
(let ((anon237_Else_correct  (=> (and (< maskTransfer@19 neededTransfer@41) (= takeTransfer@19 maskTransfer@19)) (and (=> (= (ControlFlow 0 42) 39) anon238_Then_correct) (=> (= (ControlFlow 0 42) 40) anon238_Else_correct)))))
(let ((anon237_Then_correct  (=> (and (<= neededTransfer@41 maskTransfer@19) (= takeTransfer@19 neededTransfer@41)) (and (=> (= (ControlFlow 0 41) 39) anon238_Then_correct) (=> (= (ControlFlow 0 41) 40) anon238_Else_correct)))))
(let ((anon236_Then_correct  (=> (and (and (and (and (and b_25@27 b_25@27) b_42@3) true) (> neededTransfer@41 0.0)) (= maskTransfer@19 (U_2_real (MapType0Select Mask@19 x@@28 f_7)))) (and (=> (= (ControlFlow 0 43) 41) anon237_Then_correct) (=> (= (ControlFlow 0 43) 42) anon237_Else_correct)))))
(let ((anon236_Else_correct  (=> (not (and (and (and (and b_25@27 b_25@27) b_42@3) true) (> neededTransfer@41 0.0))) (=> (and (= Mask@21 Mask@19) (= Heap@15 Heap@13)) (=> (and (and (= neededTransfer@43 neededTransfer@41) (= b_42@6 b_42@3)) (and (= Used_20Mask@3 Used_20Mask@1) (= (ControlFlow 0 38) 36))) anon144_correct)))))
(let ((anon235_Else_correct  (=> (>= 0.0 takeTransfer@18) (=> (and (and (= Ops_11Mask@22 Ops_11Mask@20) (= Used_20Mask@1 ZeroMask)) (and (= b_42@3 b_42@0) (= neededTransfer@41 FullPerm))) (and (=> (= (ControlFlow 0 46) 43) anon236_Then_correct) (=> (= (ControlFlow 0 46) 38) anon236_Else_correct))))))
(let ((anon235_Then_correct  (=> (and (> takeTransfer@18 0.0) (= neededTransfer@40 (- FullPerm takeTransfer@18))) (=> (and (and (and (= Used_20Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) takeTransfer@18)))) (= b_42@1  (and b_42@0 (state Used_20Heap@0 Used_20Mask@0)))) (and (= b_42@2  (and b_42@1 (= (U_2_int (MapType1Select Ops_11Heap@10 x@@28 f_7)) (U_2_int (MapType1Select Used_20Heap@0 x@@28 f_7))))) (= Ops_11Mask@21 (MapType0Store Ops_11Mask@20 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@20 x@@28 f_7)) takeTransfer@18)))))) (and (and (= Ops_11Mask@22 Ops_11Mask@21) (= Used_20Mask@1 Used_20Mask@0)) (and (= b_42@3 b_42@2) (= neededTransfer@41 neededTransfer@40)))) (and (=> (= (ControlFlow 0 45) 43) anon236_Then_correct) (=> (= (ControlFlow 0 45) 38) anon236_Else_correct))))))
(let ((anon234_Else_correct  (=> (and (< maskTransfer@18 FullPerm) (= takeTransfer@18 maskTransfer@18)) (and (=> (= (ControlFlow 0 48) 45) anon235_Then_correct) (=> (= (ControlFlow 0 48) 46) anon235_Else_correct)))))
(let ((anon234_Then_correct  (=> (and (<= FullPerm maskTransfer@18) (= takeTransfer@18 FullPerm)) (and (=> (= (ControlFlow 0 47) 45) anon235_Then_correct) (=> (= (ControlFlow 0 47) 46) anon235_Else_correct)))))
(let ((anon233_Then_correct  (=> (and (and (and (and (and b_25@27 b_25@27) b_42@0) true) (> FullPerm 0.0)) (= maskTransfer@18 (U_2_real (MapType0Select Ops_11Mask@20 x@@28 f_7)))) (and (=> (= (ControlFlow 0 49) 47) anon234_Then_correct) (=> (= (ControlFlow 0 49) 48) anon234_Else_correct)))))
(let ((anon233_Else_correct  (=> (not (and (and (and (and b_25@27 b_25@27) b_42@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_11Mask@22 Ops_11Mask@20) (= Used_20Mask@1 ZeroMask)) (and (= b_42@3 b_42@0) (= neededTransfer@41 FullPerm))) (and (=> (= (ControlFlow 0 44) 43) anon236_Then_correct) (=> (= (ControlFlow 0 44) 38) anon236_Else_correct))))))
(let ((anon132_correct  (=> (and (= b_42@0  (and b_42 (state Used_20Heap@0 ZeroMask))) (= initNeededTransfer@7 (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 50) (- 0 51)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 50) 49) anon233_Then_correct) (=> (= (ControlFlow 0 50) 44) anon233_Else_correct)))))))
(let ((anon131_correct  (and (=> (= (ControlFlow 0 53) (- 0 54)) (=> (and (and b_35@19 (and b_35@19 b_25@23)) b_40@9) (and (= neededTransfer@39 0.0) (= (U_2_real (MapType0Select Used_19Mask@5 x@@28 f_7)) initNeededTransfer@6)))) (=> (=> (and (and b_35@19 (and b_35@19 b_25@23)) b_40@9) (and (= neededTransfer@39 0.0) (= (U_2_real (MapType0Select Used_19Mask@5 x@@28 f_7)) initNeededTransfer@6))) (=> (and (and (and (and (= b_41@0  (and b_35@19 b_40@9)) (= b_41@1  (and b_41@0 (state Result_13Heap Result_13Mask)))) (and (= b_41@2  (and b_41@1 (sumMask Result_13Mask Ops_15Mask Used_19Mask@5))) (= b_41@3  (and (and b_41@2 (IdenticalOnKnownLocations Ops_15Heap@1 Result_13Heap Ops_15Mask)) (IdenticalOnKnownLocations Used_19Heap@0 Result_13Heap Used_19Mask@5))))) (and (and (= b_41@4  (and b_41@3 (state Result_13Heap Result_13Mask))) (= b_35@20  (and b_35@19 b_41@4))) (and (= Ops_11Mask@19 (MapType0Store Ops_11Mask@18 null (wand_4 x@@28 FullPerm x@@28 FullPerm) (real_2_U (+ (U_2_real (MapType0Select Ops_11Mask@18 null (wand_4 x@@28 FullPerm x@@28 FullPerm))) FullPerm)))) (= b_25@24  (and b_25@23 (state Ops_11Heap@9 Ops_11Mask@19)))))) (and (and (and (= b_25@25  (and b_25@24 (state Ops_11Heap@9 Ops_11Mask@19))) (= b_25@26  (and b_25@25 (state Ops_11Heap@9 Ops_11Mask@19)))) (and (= Mask@19 Mask@18) (= b_25@27 b_25@26))) (and (and (= Heap@13 Heap@12) (= Ops_11Mask@20 Ops_11Mask@19)) (and (= Ops_11Heap@10 Ops_11Heap@9) (= (ControlFlow 0 53) 50))))) anon132_correct)))))
(let ((anon232_Else_correct  (=> (>= 0.0 takeTransfer@17) (=> (and (= Heap@12 Heap@10) (= Used_19Mask@5 Used_19Mask@3)) (=> (and (and (= b_40@9 b_40@6) (= Mask@18 Mask@16)) (and (= neededTransfer@39 neededTransfer@37) (= (ControlFlow 0 57) 53))) anon131_correct)))))
(let ((anon232_Then_correct  (=> (> takeTransfer@17 0.0) (=> (and (and (= neededTransfer@38 (- neededTransfer@37 takeTransfer@17)) (= Used_19Mask@4 (MapType0Store Used_19Mask@3 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_19Mask@3 x@@28 f_7)) takeTransfer@17))))) (and (= b_40@7  (and b_40@6 (state Used_19Heap@0 Used_19Mask@4))) (= b_40@8  (and b_40@7 (= (U_2_int (MapType1Select Heap@10 x@@28 f_7)) (U_2_int (MapType1Select Used_19Heap@0 x@@28 f_7))))))) (=> (and (and (and (= Mask@17 (MapType0Store Mask@16 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@16 x@@28 f_7)) takeTransfer@17)))) (= Heap@11 (MapType1Store Heap@10 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm) (MapType0Store (MapType1Select Heap@10 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm)) x@@28 f_7 (bool_2_U true))))) (and (= Heap@12 Heap@11) (= Used_19Mask@5 Used_19Mask@4))) (and (and (= b_40@9 b_40@8) (= Mask@18 Mask@17)) (and (= neededTransfer@39 neededTransfer@38) (= (ControlFlow 0 56) 53)))) anon131_correct)))))
(let ((anon231_Else_correct  (=> (and (< maskTransfer@17 neededTransfer@37) (= takeTransfer@17 maskTransfer@17)) (and (=> (= (ControlFlow 0 59) 56) anon232_Then_correct) (=> (= (ControlFlow 0 59) 57) anon232_Else_correct)))))
(let ((anon231_Then_correct  (=> (and (<= neededTransfer@37 maskTransfer@17) (= takeTransfer@17 neededTransfer@37)) (and (=> (= (ControlFlow 0 58) 56) anon232_Then_correct) (=> (= (ControlFlow 0 58) 57) anon232_Else_correct)))))
(let ((anon230_Then_correct  (=> (and (and (and (and (and b_35@19 (and b_35@19 b_25@23)) b_40@6) true) (> neededTransfer@37 0.0)) (= maskTransfer@17 (U_2_real (MapType0Select Mask@16 x@@28 f_7)))) (and (=> (= (ControlFlow 0 60) 58) anon231_Then_correct) (=> (= (ControlFlow 0 60) 59) anon231_Else_correct)))))
(let ((anon230_Else_correct  (=> (not (and (and (and (and b_35@19 (and b_35@19 b_25@23)) b_40@6) true) (> neededTransfer@37 0.0))) (=> (and (= Heap@12 Heap@10) (= Used_19Mask@5 Used_19Mask@3)) (=> (and (and (= b_40@9 b_40@6) (= Mask@18 Mask@16)) (and (= neededTransfer@39 neededTransfer@37) (= (ControlFlow 0 55) 53))) anon131_correct)))))
(let ((anon229_Else_correct  (=> (and (>= 0.0 takeTransfer@16) (= Ops_11Heap@9 Ops_11Heap@7)) (=> (and (and (= Ops_11Mask@18 Ops_11Mask@16) (= neededTransfer@37 neededTransfer@35)) (and (= b_40@6 b_40@3) (= Used_19Mask@3 Used_19Mask@1))) (and (=> (= (ControlFlow 0 63) 60) anon230_Then_correct) (=> (= (ControlFlow 0 63) 55) anon230_Else_correct))))))
(let ((anon229_Then_correct  (=> (and (and (> takeTransfer@16 0.0) (= neededTransfer@36 (- neededTransfer@35 takeTransfer@16))) (and (= Used_19Mask@2 (MapType0Store Used_19Mask@1 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_19Mask@1 x@@28 f_7)) takeTransfer@16)))) (= b_40@4  (and b_40@3 (state Used_19Heap@0 Used_19Mask@2))))) (=> (and (and (and (= b_40@5  (and b_40@4 (= (U_2_int (MapType1Select Ops_11Heap@7 x@@28 f_7)) (U_2_int (MapType1Select Used_19Heap@0 x@@28 f_7))))) (= Ops_11Mask@17 (MapType0Store Ops_11Mask@16 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@16 x@@28 f_7)) takeTransfer@16))))) (and (= Ops_11Heap@8 (MapType1Store Ops_11Heap@7 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm) (MapType0Store (MapType1Select Ops_11Heap@7 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm)) x@@28 f_7 (bool_2_U true)))) (= Ops_11Heap@9 Ops_11Heap@8))) (and (and (= Ops_11Mask@18 Ops_11Mask@17) (= neededTransfer@37 neededTransfer@36)) (and (= b_40@6 b_40@5) (= Used_19Mask@3 Used_19Mask@2)))) (and (=> (= (ControlFlow 0 62) 60) anon230_Then_correct) (=> (= (ControlFlow 0 62) 55) anon230_Else_correct))))))
(let ((anon228_Else_correct  (=> (and (< maskTransfer@16 neededTransfer@35) (= takeTransfer@16 maskTransfer@16)) (and (=> (= (ControlFlow 0 65) 62) anon229_Then_correct) (=> (= (ControlFlow 0 65) 63) anon229_Else_correct)))))
(let ((anon228_Then_correct  (=> (and (<= neededTransfer@35 maskTransfer@16) (= takeTransfer@16 neededTransfer@35)) (and (=> (= (ControlFlow 0 64) 62) anon229_Then_correct) (=> (= (ControlFlow 0 64) 63) anon229_Else_correct)))))
(let ((anon227_Then_correct  (=> (and (and (and (and (and b_35@19 (and b_35@19 b_25@23)) b_40@3) true) (> neededTransfer@35 0.0)) (= maskTransfer@16 (U_2_real (MapType0Select Ops_11Mask@16 x@@28 f_7)))) (and (=> (= (ControlFlow 0 66) 64) anon228_Then_correct) (=> (= (ControlFlow 0 66) 65) anon228_Else_correct)))))
(let ((anon227_Else_correct  (=> (and (not (and (and (and (and b_35@19 (and b_35@19 b_25@23)) b_40@3) true) (> neededTransfer@35 0.0))) (= Ops_11Heap@9 Ops_11Heap@7)) (=> (and (and (= Ops_11Mask@18 Ops_11Mask@16) (= neededTransfer@37 neededTransfer@35)) (and (= b_40@6 b_40@3) (= Used_19Mask@3 Used_19Mask@1))) (and (=> (= (ControlFlow 0 61) 60) anon230_Then_correct) (=> (= (ControlFlow 0 61) 55) anon230_Else_correct))))))
(let ((anon226_Else_correct  (=> (and (and (>= 0.0 takeTransfer@15) (= Used_19Mask@1 ZeroMask)) (and (= b_40@3 b_40@0) (= neededTransfer@35 FullPerm))) (and (=> (= (ControlFlow 0 69) 66) anon227_Then_correct) (=> (= (ControlFlow 0 69) 61) anon227_Else_correct)))))
(let ((anon226_Then_correct  (=> (> takeTransfer@15 0.0) (=> (and (and (and (= neededTransfer@34 (- FullPerm takeTransfer@15)) (= Used_19Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) takeTransfer@15))))) (and (= b_40@1  (and b_40@0 (state Used_19Heap@0 Used_19Mask@0))) (= b_40@2  (and b_40@1 (= (U_2_int (MapType1Select Ops_15Heap@1 x@@28 f_7)) (U_2_int (MapType1Select Used_19Heap@0 x@@28 f_7))))))) (and (and (= Ops_15Mask@8 (MapType0Store Ops_15Mask@7 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_15Mask@7 x@@28 f_7)) takeTransfer@15)))) (= Used_19Mask@1 Used_19Mask@0)) (and (= b_40@3 b_40@2) (= neededTransfer@35 neededTransfer@34)))) (and (=> (= (ControlFlow 0 68) 66) anon227_Then_correct) (=> (= (ControlFlow 0 68) 61) anon227_Else_correct))))))
(let ((anon225_Else_correct  (=> (and (< maskTransfer@15 FullPerm) (= takeTransfer@15 maskTransfer@15)) (and (=> (= (ControlFlow 0 71) 68) anon226_Then_correct) (=> (= (ControlFlow 0 71) 69) anon226_Else_correct)))))
(let ((anon225_Then_correct  (=> (and (<= FullPerm maskTransfer@15) (= takeTransfer@15 FullPerm)) (and (=> (= (ControlFlow 0 70) 68) anon226_Then_correct) (=> (= (ControlFlow 0 70) 69) anon226_Else_correct)))))
(let ((anon224_Then_correct  (=> (and (and (and (and (and b_35@19 (and b_35@19 b_25@23)) b_40@0) true) (> FullPerm 0.0)) (= maskTransfer@15 (U_2_real (MapType0Select Ops_15Mask@7 x@@28 f_7)))) (and (=> (= (ControlFlow 0 72) 70) anon225_Then_correct) (=> (= (ControlFlow 0 72) 71) anon225_Else_correct)))))
(let ((anon224_Else_correct  (=> (and (and (not (and (and (and (and b_35@19 (and b_35@19 b_25@23)) b_40@0) true) (> FullPerm 0.0))) (= Used_19Mask@1 ZeroMask)) (and (= b_40@3 b_40@0) (= neededTransfer@35 FullPerm))) (and (=> (= (ControlFlow 0 67) 66) anon227_Then_correct) (=> (= (ControlFlow 0 67) 61) anon227_Else_correct)))))
(let ((anon113_correct  (=> (and (= b_40@0  (and b_40 (state Used_19Heap@0 ZeroMask))) (= initNeededTransfer@6 (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 73) (- 0 74)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 73) 72) anon224_Then_correct) (=> (= (ControlFlow 0 73) 67) anon224_Else_correct)))))))
(let ((anon112_correct  (and (=> (= (ControlFlow 0 76) (- 0 78)) (=> (and b_35@9 b_38@9) (and (= neededTransfer@33 0.0) (= (U_2_real (MapType0Select Used_18Mask@5 x@@28 f_7)) initNeededTransfer@5)))) (=> (=> (and b_35@9 b_38@9) (and (= neededTransfer@33 0.0) (= (U_2_real (MapType0Select Used_18Mask@5 x@@28 f_7)) initNeededTransfer@5))) (=> (and (= b_39@0  (and b_35@9 b_38@9)) (= b_39@1  (and b_39@0 (state Result_12Heap Result_12Mask)))) (=> (and (and (and (= b_39@2  (and b_39@1 (sumMask Result_12Mask Ops_15Mask@5 Used_18Mask@5))) (= b_39@3  (and (and b_39@2 (IdenticalOnKnownLocations Ops_15Heap@0 Result_12Heap Ops_15Mask@5)) (IdenticalOnKnownLocations Used_18Heap@0 Result_12Heap Used_18Mask@5)))) (and (= b_39@4  (and b_39@3 (state Result_12Heap Result_12Mask))) (= b_35@10  (and b_35@9 b_39@4)))) (and (and (= b_35@11  (and b_35@10 b_38@9)) (= b_35@12  (and b_35@11 (= Used_18Heap@0 Ops_15Heap@0)))) (and (= b_35@13  (and b_35@12 (state Ops_15Heap@0 Ops_15Mask@5))) (= perm@7 (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 76) (- 0 77)) (>= perm@7 NoPerm)) (=> (>= perm@7 NoPerm) (=> (= b_35@14  (and b_35@13 (=> (> perm@7 NoPerm) (not (= x@@28 null))))) (=> (and (= Ops_15Mask@6 (MapType0Store Ops_15Mask@5 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Ops_15Mask@5 x@@28 f_7)) perm@7)))) (= b_35@15  (and b_35@14 (state Ops_15Heap@0 Ops_15Mask@6)))) (=> (and (and (= b_35@16  (and b_35@15 (state Ops_15Heap@0 Ops_15Mask@6))) (IdenticalOnKnownLocations Ops_15Heap@0 ExhaleHeap@1 Ops_15Mask@6)) (and (= b_35@17  (and b_35@16 (state ExhaleHeap@1 Ops_15Mask@6))) (= b_35@18  (and b_35@17 (state ExhaleHeap@1 Ops_15Mask@6))))) (=> (and (and (and (= Mask@16 Mask@15) (= Heap@10 Heap@9)) (and (= Ops_15Heap@1 ExhaleHeap@1) (= b_35@19 b_35@18))) (and (and (= Ops_11Mask@16 Ops_11Mask@15) (= Ops_11Heap@7 Ops_11Heap@6)) (and (= Ops_15Mask@7 Ops_15Mask@6) (= (ControlFlow 0 76) 73)))) anon113_correct))))))))))))
(let ((anon223_Else_correct  (=> (>= 0.0 takeTransfer@14) (=> (and (= neededTransfer@33 neededTransfer@31) (= Used_18Mask@5 Used_18Mask@3)) (=> (and (and (= Heap@9 Heap@7) (= Mask@15 Mask@13)) (and (= b_38@9 b_38@6) (= (ControlFlow 0 81) 76))) anon112_correct)))))
(let ((anon223_Then_correct  (=> (> takeTransfer@14 0.0) (=> (and (and (= neededTransfer@32 (- neededTransfer@31 takeTransfer@14)) (= Used_18Mask@4 (MapType0Store Used_18Mask@3 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_18Mask@3 x@@28 f_7)) takeTransfer@14))))) (and (= b_38@7  (and b_38@6 (state Used_18Heap@0 Used_18Mask@4))) (= b_38@8  (and b_38@7 (= (U_2_int (MapType1Select Heap@7 x@@28 f_7)) (U_2_int (MapType1Select Used_18Heap@0 x@@28 f_7))))))) (=> (and (and (and (= Mask@14 (MapType0Store Mask@13 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@13 x@@28 f_7)) takeTransfer@14)))) (= Heap@8 (MapType1Store Heap@7 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm) (MapType0Store (MapType1Select Heap@7 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm)) x@@28 f_7 (bool_2_U true))))) (and (= neededTransfer@33 neededTransfer@32) (= Used_18Mask@5 Used_18Mask@4))) (and (and (= Heap@9 Heap@8) (= Mask@15 Mask@14)) (and (= b_38@9 b_38@8) (= (ControlFlow 0 80) 76)))) anon112_correct)))))
(let ((anon222_Else_correct  (=> (and (< maskTransfer@14 neededTransfer@31) (= takeTransfer@14 maskTransfer@14)) (and (=> (= (ControlFlow 0 83) 80) anon223_Then_correct) (=> (= (ControlFlow 0 83) 81) anon223_Else_correct)))))
(let ((anon222_Then_correct  (=> (and (<= neededTransfer@31 maskTransfer@14) (= takeTransfer@14 neededTransfer@31)) (and (=> (= (ControlFlow 0 82) 80) anon223_Then_correct) (=> (= (ControlFlow 0 82) 81) anon223_Else_correct)))))
(let ((anon221_Then_correct  (=> (and (and (and (and b_35@9 b_38@6) true) (> neededTransfer@31 0.0)) (= maskTransfer@14 (U_2_real (MapType0Select Mask@13 x@@28 f_7)))) (and (=> (= (ControlFlow 0 84) 82) anon222_Then_correct) (=> (= (ControlFlow 0 84) 83) anon222_Else_correct)))))
(let ((anon221_Else_correct  (=> (not (and (and (and b_35@9 b_38@6) true) (> neededTransfer@31 0.0))) (=> (and (= neededTransfer@33 neededTransfer@31) (= Used_18Mask@5 Used_18Mask@3)) (=> (and (and (= Heap@9 Heap@7) (= Mask@15 Mask@13)) (and (= b_38@9 b_38@6) (= (ControlFlow 0 79) 76))) anon112_correct)))))
(let ((anon220_Else_correct  (=> (and (>= 0.0 takeTransfer@13) (= b_38@6 b_38@3)) (=> (and (and (= Ops_11Heap@6 Ops_11Heap@4) (= Ops_11Mask@15 Ops_11Mask@13)) (and (= Used_18Mask@3 Used_18Mask@1) (= neededTransfer@31 neededTransfer@29))) (and (=> (= (ControlFlow 0 87) 84) anon221_Then_correct) (=> (= (ControlFlow 0 87) 79) anon221_Else_correct))))))
(let ((anon220_Then_correct  (=> (and (and (> takeTransfer@13 0.0) (= neededTransfer@30 (- neededTransfer@29 takeTransfer@13))) (and (= Used_18Mask@2 (MapType0Store Used_18Mask@1 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_18Mask@1 x@@28 f_7)) takeTransfer@13)))) (= b_38@4  (and b_38@3 (state Used_18Heap@0 Used_18Mask@2))))) (=> (and (and (and (= b_38@5  (and b_38@4 (= (U_2_int (MapType1Select Ops_11Heap@4 x@@28 f_7)) (U_2_int (MapType1Select Used_18Heap@0 x@@28 f_7))))) (= Ops_11Mask@14 (MapType0Store Ops_11Mask@13 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@13 x@@28 f_7)) takeTransfer@13))))) (and (= Ops_11Heap@5 (MapType1Store Ops_11Heap@4 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm) (MapType0Store (MapType1Select Ops_11Heap@4 null (|wand_4#sm| x@@28 FullPerm x@@28 FullPerm)) x@@28 f_7 (bool_2_U true)))) (= b_38@6 b_38@5))) (and (and (= Ops_11Heap@6 Ops_11Heap@5) (= Ops_11Mask@15 Ops_11Mask@14)) (and (= Used_18Mask@3 Used_18Mask@2) (= neededTransfer@31 neededTransfer@30)))) (and (=> (= (ControlFlow 0 86) 84) anon221_Then_correct) (=> (= (ControlFlow 0 86) 79) anon221_Else_correct))))))
(let ((anon219_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@29) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 89) 86) anon220_Then_correct) (=> (= (ControlFlow 0 89) 87) anon220_Else_correct)))))
(let ((anon219_Then_correct  (=> (and (<= neededTransfer@29 maskTransfer@13) (= takeTransfer@13 neededTransfer@29)) (and (=> (= (ControlFlow 0 88) 86) anon220_Then_correct) (=> (= (ControlFlow 0 88) 87) anon220_Else_correct)))))
(let ((anon218_Then_correct  (=> (and (and (and (and b_35@9 b_38@3) true) (> neededTransfer@29 0.0)) (= maskTransfer@13 (U_2_real (MapType0Select Ops_11Mask@13 x@@28 f_7)))) (and (=> (= (ControlFlow 0 90) 88) anon219_Then_correct) (=> (= (ControlFlow 0 90) 89) anon219_Else_correct)))))
(let ((anon218_Else_correct  (=> (and (not (and (and (and b_35@9 b_38@3) true) (> neededTransfer@29 0.0))) (= b_38@6 b_38@3)) (=> (and (and (= Ops_11Heap@6 Ops_11Heap@4) (= Ops_11Mask@15 Ops_11Mask@13)) (and (= Used_18Mask@3 Used_18Mask@1) (= neededTransfer@31 neededTransfer@29))) (and (=> (= (ControlFlow 0 85) 84) anon221_Then_correct) (=> (= (ControlFlow 0 85) 79) anon221_Else_correct))))))
(let ((anon217_Else_correct  (=> (>= 0.0 takeTransfer@12) (=> (and (and (= neededTransfer@29 neededTransfer@27) (= Ops_15Mask@5 Ops_15Mask@3)) (and (= Used_18Mask@1 ZeroMask) (= b_38@3 b_38@0))) (and (=> (= (ControlFlow 0 93) 90) anon218_Then_correct) (=> (= (ControlFlow 0 93) 85) anon218_Else_correct))))))
(let ((anon217_Then_correct  (=> (and (> takeTransfer@12 0.0) (= neededTransfer@28 (- neededTransfer@27 takeTransfer@12))) (=> (and (and (and (= Used_18Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) takeTransfer@12)))) (= b_38@1  (and b_38@0 (state Used_18Heap@0 Used_18Mask@0)))) (and (= b_38@2  (and b_38@1 (= (U_2_int (MapType1Select Ops_15Heap@0 x@@28 f_7)) (U_2_int (MapType1Select Used_18Heap@0 x@@28 f_7))))) (= Ops_15Mask@4 (MapType0Store Ops_15Mask@3 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_15Mask@3 x@@28 f_7)) takeTransfer@12)))))) (and (and (= neededTransfer@29 neededTransfer@28) (= Ops_15Mask@5 Ops_15Mask@4)) (and (= Used_18Mask@1 Used_18Mask@0) (= b_38@3 b_38@2)))) (and (=> (= (ControlFlow 0 92) 90) anon218_Then_correct) (=> (= (ControlFlow 0 92) 85) anon218_Else_correct))))))
(let ((anon216_Else_correct  (=> (and (< maskTransfer@12 neededTransfer@27) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 95) 92) anon217_Then_correct) (=> (= (ControlFlow 0 95) 93) anon217_Else_correct)))))
(let ((anon216_Then_correct  (=> (and (<= neededTransfer@27 maskTransfer@12) (= takeTransfer@12 neededTransfer@27)) (and (=> (= (ControlFlow 0 94) 92) anon217_Then_correct) (=> (= (ControlFlow 0 94) 93) anon217_Else_correct)))))
(let ((anon215_Then_correct  (=> (and (and (and (and b_35@9 b_38@0) true) (> neededTransfer@27 0.0)) (= maskTransfer@12 (U_2_real (MapType0Select Ops_15Mask@3 x@@28 f_7)))) (and (=> (= (ControlFlow 0 96) 94) anon216_Then_correct) (=> (= (ControlFlow 0 96) 95) anon216_Else_correct)))))
(let ((anon215_Else_correct  (=> (not (and (and (and b_35@9 b_38@0) true) (> neededTransfer@27 0.0))) (=> (and (and (= neededTransfer@29 neededTransfer@27) (= Ops_15Mask@5 Ops_15Mask@3)) (and (= Used_18Mask@1 ZeroMask) (= b_38@3 b_38@0))) (and (=> (= (ControlFlow 0 91) 90) anon218_Then_correct) (=> (= (ControlFlow 0 91) 85) anon218_Else_correct))))))
(let ((anon94_correct  (and (=> (= (ControlFlow 0 97) (- 0 99)) (=> (and b_35@5 b_36@6) (and (= neededTransfer@26 0.0) (= (U_2_real (MapType0Select Used_17Mask@5 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) initNeededTransfer@4)))) (=> (=> (and b_35@5 b_36@6) (and (= neededTransfer@26 0.0) (= (U_2_real (MapType0Select Used_17Mask@5 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) initNeededTransfer@4))) (=> (and (and (= b_37@0  (and b_35@5 b_36@6)) (= b_37@1  (and b_37@0 (state Result_11Heap Result_11Mask)))) (and (= b_37@2  (and b_37@1 (sumMask Result_11Mask Ops_15Mask@3 Used_17Mask@5))) (= b_37@3  (and (and b_37@2 (IdenticalOnKnownLocations Ops_15Heap@0 Result_11Heap Ops_15Mask@3)) (IdenticalOnKnownLocations Used_17Heap@0 Result_11Heap Used_17Mask@5))))) (=> (and (and (and (= b_37@4  (and b_37@3 (state Result_11Heap Result_11Mask))) (= b_35@6  (and b_35@5 b_37@4))) (and (= b_35@7  (and b_35@6 b_36@6)) (= b_35@8  (and b_35@7 (= Used_17Heap@0 Ops_15Heap@0))))) (and (and (= b_35@9  (and b_35@8 (state Ops_15Heap@0 Ops_15Mask@3))) (= b_38@0  (and b_38 (state Used_18Heap@0 ZeroMask)))) (and (= neededTransfer@27 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@5 (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) neededTransfer@27))))) (and (=> (= (ControlFlow 0 97) (- 0 98)) (>= neededTransfer@27 0.0)) (=> (>= neededTransfer@27 0.0) (and (=> (= (ControlFlow 0 97) 96) anon215_Then_correct) (=> (= (ControlFlow 0 97) 91) anon215_Else_correct))))))))))
(let ((anon214_Else_correct  (=> (and (>= 0.0 takeTransfer@11) (= Mask@13 Mask@11)) (=> (and (and (= Used_17Mask@5 Used_17Mask@3) (= b_36@6 b_36@4)) (and (= neededTransfer@26 neededTransfer@24) (= (ControlFlow 0 102) 97))) anon94_correct))))
(let ((anon214_Then_correct  (=> (and (> takeTransfer@11 0.0) (= neededTransfer@25 (- neededTransfer@24 takeTransfer@11))) (=> (and (and (and (= Used_17Mask@4 (MapType0Store Used_17Mask@3 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select Used_17Mask@3 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@11)))) (= b_36@5  (and b_36@4 (state Used_17Heap@0 Used_17Mask@4)))) (and (= Mask@12 (MapType0Store Mask@11 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (- (U_2_real (MapType0Select Mask@11 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@11)))) (= Mask@13 Mask@12))) (and (and (= Used_17Mask@5 Used_17Mask@4) (= b_36@6 b_36@5)) (and (= neededTransfer@26 neededTransfer@25) (= (ControlFlow 0 101) 97)))) anon94_correct))))
(let ((anon213_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@24) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 104) 101) anon214_Then_correct) (=> (= (ControlFlow 0 104) 102) anon214_Else_correct)))))
(let ((anon213_Then_correct  (=> (and (<= neededTransfer@24 maskTransfer@11) (= takeTransfer@11 neededTransfer@24)) (and (=> (= (ControlFlow 0 103) 101) anon214_Then_correct) (=> (= (ControlFlow 0 103) 102) anon214_Else_correct)))))
(let ((anon212_Then_correct  (=> (and (and (and (and b_35@5 b_36@4) true) (> neededTransfer@24 0.0)) (= maskTransfer@11 (U_2_real (MapType0Select Mask@11 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))))) (and (=> (= (ControlFlow 0 105) 103) anon213_Then_correct) (=> (= (ControlFlow 0 105) 104) anon213_Else_correct)))))
(let ((anon212_Else_correct  (=> (and (not (and (and (and b_35@5 b_36@4) true) (> neededTransfer@24 0.0))) (= Mask@13 Mask@11)) (=> (and (and (= Used_17Mask@5 Used_17Mask@3) (= b_36@6 b_36@4)) (and (= neededTransfer@26 neededTransfer@24) (= (ControlFlow 0 100) 97))) anon94_correct))))
(let ((anon211_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (and (= Ops_11Mask@13 Ops_11Mask@11) (= neededTransfer@24 neededTransfer@22)) (and (= b_36@4 b_36@2) (= Used_17Mask@3 Used_17Mask@1))) (and (=> (= (ControlFlow 0 108) 105) anon212_Then_correct) (=> (= (ControlFlow 0 108) 100) anon212_Else_correct))))))
(let ((anon211_Then_correct  (=> (> takeTransfer@10 0.0) (=> (and (and (and (= neededTransfer@23 (- neededTransfer@22 takeTransfer@10)) (= Used_17Mask@2 (MapType0Store Used_17Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select Used_17Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@10))))) (and (= b_36@3  (and b_36@2 (state Used_17Heap@0 Used_17Mask@2))) (= Ops_11Mask@12 (MapType0Store Ops_11Mask@11 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@11 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@10)))))) (and (and (= Ops_11Mask@13 Ops_11Mask@12) (= neededTransfer@24 neededTransfer@23)) (and (= b_36@4 b_36@3) (= Used_17Mask@3 Used_17Mask@2)))) (and (=> (= (ControlFlow 0 107) 105) anon212_Then_correct) (=> (= (ControlFlow 0 107) 100) anon212_Else_correct))))))
(let ((anon210_Else_correct  (=> (and (< maskTransfer@10 neededTransfer@22) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 110) 107) anon211_Then_correct) (=> (= (ControlFlow 0 110) 108) anon211_Else_correct)))))
(let ((anon210_Then_correct  (=> (and (<= neededTransfer@22 maskTransfer@10) (= takeTransfer@10 neededTransfer@22)) (and (=> (= (ControlFlow 0 109) 107) anon211_Then_correct) (=> (= (ControlFlow 0 109) 108) anon211_Else_correct)))))
(let ((anon209_Then_correct  (=> (and (and (and (and b_35@5 b_36@2) true) (> neededTransfer@22 0.0)) (= maskTransfer@10 (U_2_real (MapType0Select Ops_11Mask@11 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))))) (and (=> (= (ControlFlow 0 111) 109) anon210_Then_correct) (=> (= (ControlFlow 0 111) 110) anon210_Else_correct)))))
(let ((anon209_Else_correct  (=> (not (and (and (and b_35@5 b_36@2) true) (> neededTransfer@22 0.0))) (=> (and (and (= Ops_11Mask@13 Ops_11Mask@11) (= neededTransfer@24 neededTransfer@22)) (and (= b_36@4 b_36@2) (= Used_17Mask@3 Used_17Mask@1))) (and (=> (= (ControlFlow 0 106) 105) anon212_Then_correct) (=> (= (ControlFlow 0 106) 100) anon212_Else_correct))))))
(let ((anon208_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (and (= Ops_15Mask@3 Ops_15Mask@1) (= Used_17Mask@1 ZeroMask)) (and (= b_36@2 b_36@0) (= neededTransfer@22 1.0))) (and (=> (= (ControlFlow 0 114) 111) anon209_Then_correct) (=> (= (ControlFlow 0 114) 106) anon209_Else_correct))))))
(let ((anon208_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (and (and (= neededTransfer@21 (- 1.0 takeTransfer@9)) (= Used_17Mask@0 (MapType0Store ZeroMask null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@9))))) (and (= b_36@1  (and b_36@0 (state Used_17Heap@0 Used_17Mask@0))) (= Ops_15Mask@2 (MapType0Store Ops_15Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (- (U_2_real (MapType0Select Ops_15Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@9)))))) (and (and (= Ops_15Mask@3 Ops_15Mask@2) (= Used_17Mask@1 Used_17Mask@0)) (and (= b_36@2 b_36@1) (= neededTransfer@22 neededTransfer@21)))) (and (=> (= (ControlFlow 0 113) 111) anon209_Then_correct) (=> (= (ControlFlow 0 113) 106) anon209_Else_correct))))))
(let ((anon207_Else_correct  (=> (and (< maskTransfer@9 1.0) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 116) 113) anon208_Then_correct) (=> (= (ControlFlow 0 116) 114) anon208_Else_correct)))))
(let ((anon207_Then_correct  (=> (and (<= 1.0 maskTransfer@9) (= takeTransfer@9 1.0)) (and (=> (= (ControlFlow 0 115) 113) anon208_Then_correct) (=> (= (ControlFlow 0 115) 114) anon208_Else_correct)))))
(let ((anon206_Then_correct  (=> (and (and (and (and b_35@5 b_36@0) true) (> 1.0 0.0)) (= maskTransfer@9 (U_2_real (MapType0Select Ops_15Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))))) (and (=> (= (ControlFlow 0 117) 115) anon207_Then_correct) (=> (= (ControlFlow 0 117) 116) anon207_Else_correct)))))
(let ((anon206_Else_correct  (=> (not (and (and (and b_35@5 b_36@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_15Mask@3 Ops_15Mask@1) (= Used_17Mask@1 ZeroMask)) (and (= b_36@2 b_36@0) (= neededTransfer@22 1.0))) (and (=> (= (ControlFlow 0 112) 111) anon209_Then_correct) (=> (= (ControlFlow 0 112) 106) anon209_Else_correct))))))
(let ((anon76_correct  (=> (= initNeededTransfer@4 (+ (U_2_real (MapType0Select ZeroMask null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) 1.0)) (and (=> (= (ControlFlow 0 118) (- 0 119)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 118) 117) anon206_Then_correct) (=> (= (ControlFlow 0 118) 112) anon206_Else_correct)))))))
(let ((anon204_Then_correct  (=> b_35@5 (and (=> (= (ControlFlow 0 125) 123) anon205_Then_correct) (=> (= (ControlFlow 0 125) 118) anon76_correct)))))
(let ((anon204_Else_correct  (=> (and (not b_35@5) (= (ControlFlow 0 121) 118)) anon76_correct)))
(let ((anon203_Then_correct  (=> (and b_35@5 b_36@0) (and (=> (= (ControlFlow 0 126) 125) anon204_Then_correct) (=> (= (ControlFlow 0 126) 121) anon204_Else_correct)))))
(let ((anon203_Else_correct  (=> (and (not (and b_35@5 b_36@0)) (= (ControlFlow 0 120) 118)) anon76_correct)))
(let ((anon202_Then_correct  (=> (and (and b_35@5 b_25@23) (= b_36@0  (and b_36 (state Used_17Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 127) 126) anon203_Then_correct) (=> (= (ControlFlow 0 127) 120) anon203_Else_correct)))))
(let ((anon202_Else_correct  (=> (not (and b_35@5 b_25@23)) (=> (and (and (and (= Mask@16 Mask@11) (= Heap@10 Heap@7)) (and (= Ops_15Heap@1 Ops_15Heap@0) (= b_35@19 b_35@5))) (and (and (= Ops_11Mask@16 Ops_11Mask@11) (= Ops_11Heap@7 Ops_11Heap@4)) (and (= Ops_15Mask@7 Ops_15Mask@1) (= (ControlFlow 0 75) 73)))) anon113_correct))))
(let ((anon71_correct  (=> (and (= b_35@4  (and b_35@3 (state Ops_15Heap@0 Ops_15Mask@1))) (= b_35@5  (and b_35@4 (state Ops_15Heap@0 Ops_15Mask@1)))) (and (=> (= (ControlFlow 0 128) 127) anon202_Then_correct) (=> (= (ControlFlow 0 128) 75) anon202_Else_correct)))))
(let ((anon201_Else_correct  (=> (and (and (not b_35@0) (= Ops_15Mask@1 ZeroMask)) (and (= b_35@3 b_35@0) (= (ControlFlow 0 130) 128))) anon71_correct)))
(let ((anon201_Then_correct  (=> b_35@0 (=> (and (= b_35@1  (and b_35@0 (not (= x@@28 null)))) (= Ops_15Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) FullPerm))))) (=> (and (and (= b_35@2  (and b_35@1 (state Ops_15Heap@0 Ops_15Mask@0))) (= Ops_15Mask@1 Ops_15Mask@0)) (and (= b_35@3 b_35@2) (= (ControlFlow 0 129) 128))) anon71_correct)))))
(let ((anon200_Then_correct  (=> b_25@23 (=> (and (= b_35@0  (and b_35 (state Ops_15Heap@0 ZeroMask))) (= b_34@0  (and b_34 (state Used_16Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 131) 129) anon201_Then_correct) (=> (= (ControlFlow 0 131) 130) anon201_Else_correct))))))
(let ((anon200_Else_correct  (=> (not b_25@23) (=> (and (= Mask@19 Mask@11) (= b_25@27 b_25@23)) (=> (and (and (= Heap@13 Heap@7) (= Ops_11Mask@20 Ops_11Mask@11)) (and (= Ops_11Heap@10 Ops_11Heap@4) (= (ControlFlow 0 52) 50))) anon132_correct)))))
(let ((anon67_correct  (and (=> (= (ControlFlow 0 133) (- 0 135)) (=> (and b_25@13 b_32@6) (and (= neededTransfer@20 0.0) (= (U_2_real (MapType0Select Used_15Mask@3 x@@28 f_7)) initNeededTransfer@3)))) (=> (=> (and b_25@13 b_32@6) (and (= neededTransfer@20 0.0) (= (U_2_real (MapType0Select Used_15Mask@3 x@@28 f_7)) initNeededTransfer@3))) (=> (and (= b_33@0  (and b_25@13 b_32@6)) (= b_33@1  (and b_33@0 (state Result_10Heap Result_10Mask)))) (=> (and (and (and (= b_33@2  (and b_33@1 (sumMask Result_10Mask Ops_11Mask@9 Used_15Mask@3))) (= b_33@3  (and (and b_33@2 (IdenticalOnKnownLocations Ops_11Heap@3 Result_10Heap Ops_11Mask@9)) (IdenticalOnKnownLocations Used_15Heap@0 Result_10Heap Used_15Mask@3)))) (and (= b_33@4  (and b_33@3 (state Result_10Heap Result_10Mask))) (= b_25@14  (and b_25@13 b_33@4)))) (and (and (= b_25@15  (and b_25@14 b_32@6)) (= b_25@16  (and b_25@15 (= Used_15Heap@0 Ops_11Heap@3)))) (and (= b_25@17  (and b_25@16 (state Ops_11Heap@3 Ops_11Mask@9))) (= perm@4 (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 133) (- 0 134)) (>= perm@4 NoPerm)) (=> (>= perm@4 NoPerm) (=> (and (and (= b_25@18  (and b_25@17 (=> (> perm@4 NoPerm) (not (= x@@28 null))))) (= Ops_11Mask@10 (MapType0Store Ops_11Mask@9 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Ops_11Mask@9 x@@28 f_7)) perm@4))))) (and (= b_25@19  (and b_25@18 (state Ops_11Heap@3 Ops_11Mask@10))) (= b_25@20  (and b_25@19 (state Ops_11Heap@3 Ops_11Mask@10))))) (=> (and (and (and (IdenticalOnKnownLocations Ops_11Heap@3 ExhaleHeap@0 Ops_11Mask@10) (= b_25@21  (and b_25@20 (state ExhaleHeap@0 Ops_11Mask@10)))) (and (= b_25@22  (and b_25@21 (state ExhaleHeap@0 Ops_11Mask@10))) (= b_25@23 b_25@22))) (and (and (= Ops_11Heap@4 ExhaleHeap@0) (= Mask@11 Mask@10)) (and (= Ops_11Mask@11 Ops_11Mask@10) (= Heap@7 Heap@6)))) (and (=> (= (ControlFlow 0 133) 131) anon200_Then_correct) (=> (= (ControlFlow 0 133) 52) anon200_Else_correct))))))))))))
(let ((anon199_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (= Heap@6 Heap@4) (= b_32@6 b_32@3)) (=> (and (and (= Mask@10 Mask@8) (= Used_15Mask@3 Used_15Mask@1)) (and (= neededTransfer@20 neededTransfer@18) (= (ControlFlow 0 138) 133))) anon67_correct)))))
(let ((anon199_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (and (= neededTransfer@19 (- neededTransfer@18 takeTransfer@8)) (= Used_15Mask@2 (MapType0Store Used_15Mask@1 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_15Mask@1 x@@28 f_7)) takeTransfer@8))))) (and (= b_32@4  (and b_32@3 (state Used_15Heap@0 Used_15Mask@2))) (= b_32@5  (and b_32@4 (= (U_2_int (MapType1Select Heap@4 x@@28 f_7)) (U_2_int (MapType1Select Used_15Heap@0 x@@28 f_7))))))) (=> (and (and (and (= Mask@9 (MapType0Store Mask@8 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@8 x@@28 f_7)) takeTransfer@8)))) (= Heap@5 (MapType1Store Heap@4 null (|wand_5#sm| x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm) (MapType0Store (MapType1Select Heap@4 null (|wand_5#sm| x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm x@@28 FullPerm)) x@@28 f_7 (bool_2_U true))))) (and (= Heap@6 Heap@5) (= b_32@6 b_32@5))) (and (and (= Mask@10 Mask@9) (= Used_15Mask@3 Used_15Mask@2)) (and (= neededTransfer@20 neededTransfer@19) (= (ControlFlow 0 137) 133)))) anon67_correct)))))
(let ((anon198_Else_correct  (=> (and (< maskTransfer@8 neededTransfer@18) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 140) 137) anon199_Then_correct) (=> (= (ControlFlow 0 140) 138) anon199_Else_correct)))))
(let ((anon198_Then_correct  (=> (and (<= neededTransfer@18 maskTransfer@8) (= takeTransfer@8 neededTransfer@18)) (and (=> (= (ControlFlow 0 139) 137) anon199_Then_correct) (=> (= (ControlFlow 0 139) 138) anon199_Else_correct)))))
(let ((anon197_Then_correct  (=> (and (and (and (and b_25@13 b_32@3) true) (> neededTransfer@18 0.0)) (= maskTransfer@8 (U_2_real (MapType0Select Mask@8 x@@28 f_7)))) (and (=> (= (ControlFlow 0 141) 139) anon198_Then_correct) (=> (= (ControlFlow 0 141) 140) anon198_Else_correct)))))
(let ((anon197_Else_correct  (=> (not (and (and (and b_25@13 b_32@3) true) (> neededTransfer@18 0.0))) (=> (and (= Heap@6 Heap@4) (= b_32@6 b_32@3)) (=> (and (and (= Mask@10 Mask@8) (= Used_15Mask@3 Used_15Mask@1)) (and (= neededTransfer@20 neededTransfer@18) (= (ControlFlow 0 136) 133))) anon67_correct)))))
(let ((anon196_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (and (= neededTransfer@18 neededTransfer@16) (= Ops_11Mask@9 Ops_11Mask@7)) (and (= Used_15Mask@1 ZeroMask) (= b_32@3 b_32@0))) (and (=> (= (ControlFlow 0 144) 141) anon197_Then_correct) (=> (= (ControlFlow 0 144) 136) anon197_Else_correct))))))
(let ((anon196_Then_correct  (=> (and (> takeTransfer@7 0.0) (= neededTransfer@17 (- neededTransfer@16 takeTransfer@7))) (=> (and (and (and (= Used_15Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) takeTransfer@7)))) (= b_32@1  (and b_32@0 (state Used_15Heap@0 Used_15Mask@0)))) (and (= b_32@2  (and b_32@1 (= (U_2_int (MapType1Select Ops_11Heap@3 x@@28 f_7)) (U_2_int (MapType1Select Used_15Heap@0 x@@28 f_7))))) (= Ops_11Mask@8 (MapType0Store Ops_11Mask@7 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@7 x@@28 f_7)) takeTransfer@7)))))) (and (and (= neededTransfer@18 neededTransfer@17) (= Ops_11Mask@9 Ops_11Mask@8)) (and (= Used_15Mask@1 Used_15Mask@0) (= b_32@3 b_32@2)))) (and (=> (= (ControlFlow 0 143) 141) anon197_Then_correct) (=> (= (ControlFlow 0 143) 136) anon197_Else_correct))))))
(let ((anon195_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@16) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 146) 143) anon196_Then_correct) (=> (= (ControlFlow 0 146) 144) anon196_Else_correct)))))
(let ((anon195_Then_correct  (=> (and (<= neededTransfer@16 maskTransfer@7) (= takeTransfer@7 neededTransfer@16)) (and (=> (= (ControlFlow 0 145) 143) anon196_Then_correct) (=> (= (ControlFlow 0 145) 144) anon196_Else_correct)))))
(let ((anon194_Then_correct  (=> (and (and (and (and b_25@13 b_32@0) true) (> neededTransfer@16 0.0)) (= maskTransfer@7 (U_2_real (MapType0Select Ops_11Mask@7 x@@28 f_7)))) (and (=> (= (ControlFlow 0 147) 145) anon195_Then_correct) (=> (= (ControlFlow 0 147) 146) anon195_Else_correct)))))
(let ((anon194_Else_correct  (=> (not (and (and (and b_25@13 b_32@0) true) (> neededTransfer@16 0.0))) (=> (and (and (= neededTransfer@18 neededTransfer@16) (= Ops_11Mask@9 Ops_11Mask@7)) (and (= Used_15Mask@1 ZeroMask) (= b_32@3 b_32@0))) (and (=> (= (ControlFlow 0 142) 141) anon197_Then_correct) (=> (= (ControlFlow 0 142) 136) anon197_Else_correct))))))
(let ((anon55_correct  (and (=> (= (ControlFlow 0 148) (- 0 150)) (=> (and b_25@9 b_30@4) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType0Select Used_14Mask@3 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) initNeededTransfer@2)))) (=> (=> (and b_25@9 b_30@4) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType0Select Used_14Mask@3 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) initNeededTransfer@2))) (=> (and (and (= b_31@0  (and b_25@9 b_30@4)) (= b_31@1  (and b_31@0 (state Result_9Heap Result_9Mask)))) (and (= b_31@2  (and b_31@1 (sumMask Result_9Mask Ops_11Mask@7 Used_14Mask@3))) (= b_31@3  (and (and b_31@2 (IdenticalOnKnownLocations Ops_11Heap@3 Result_9Heap Ops_11Mask@7)) (IdenticalOnKnownLocations Used_14Heap@0 Result_9Heap Used_14Mask@3))))) (=> (and (and (and (= b_31@4  (and b_31@3 (state Result_9Heap Result_9Mask))) (= b_25@10  (and b_25@9 b_31@4))) (and (= b_25@11  (and b_25@10 b_30@4)) (= b_25@12  (and b_25@11 (= Used_14Heap@0 Ops_11Heap@3))))) (and (and (= b_25@13  (and b_25@12 (state Ops_11Heap@3 Ops_11Mask@7))) (= b_32@0  (and b_32 (state Used_15Heap@0 ZeroMask)))) (and (= neededTransfer@16 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@3 (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) neededTransfer@16))))) (and (=> (= (ControlFlow 0 148) (- 0 149)) (>= neededTransfer@16 0.0)) (=> (>= neededTransfer@16 0.0) (and (=> (= (ControlFlow 0 148) 147) anon194_Then_correct) (=> (= (ControlFlow 0 148) 142) anon194_Else_correct))))))))))
(let ((anon193_Else_correct  (=> (and (>= 0.0 takeTransfer@6) (= Mask@8 Mask@6)) (=> (and (and (= neededTransfer@15 neededTransfer@13) (= b_30@4 b_30@2)) (and (= Used_14Mask@3 Used_14Mask@1) (= (ControlFlow 0 153) 148))) anon55_correct))))
(let ((anon193_Then_correct  (=> (and (> takeTransfer@6 0.0) (= neededTransfer@14 (- neededTransfer@13 takeTransfer@6))) (=> (and (and (and (= Used_14Mask@2 (MapType0Store Used_14Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select Used_14Mask@1 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@6)))) (= b_30@3  (and b_30@2 (state Used_14Heap@0 Used_14Mask@2)))) (and (= Mask@7 (MapType0Store Mask@6 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (- (U_2_real (MapType0Select Mask@6 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@6)))) (= Mask@8 Mask@7))) (and (and (= neededTransfer@15 neededTransfer@14) (= b_30@4 b_30@3)) (and (= Used_14Mask@3 Used_14Mask@2) (= (ControlFlow 0 152) 148)))) anon55_correct))))
(let ((anon192_Else_correct  (=> (and (< maskTransfer@6 neededTransfer@13) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 155) 152) anon193_Then_correct) (=> (= (ControlFlow 0 155) 153) anon193_Else_correct)))))
(let ((anon192_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@6) (= takeTransfer@6 neededTransfer@13)) (and (=> (= (ControlFlow 0 154) 152) anon193_Then_correct) (=> (= (ControlFlow 0 154) 153) anon193_Else_correct)))))
(let ((anon191_Then_correct  (=> (and (and (and (and b_25@9 b_30@2) true) (> neededTransfer@13 0.0)) (= maskTransfer@6 (U_2_real (MapType0Select Mask@6 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))))) (and (=> (= (ControlFlow 0 156) 154) anon192_Then_correct) (=> (= (ControlFlow 0 156) 155) anon192_Else_correct)))))
(let ((anon191_Else_correct  (=> (and (not (and (and (and b_25@9 b_30@2) true) (> neededTransfer@13 0.0))) (= Mask@8 Mask@6)) (=> (and (and (= neededTransfer@15 neededTransfer@13) (= b_30@4 b_30@2)) (and (= Used_14Mask@3 Used_14Mask@1) (= (ControlFlow 0 151) 148))) anon55_correct))))
(let ((anon190_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (and (= Ops_11Mask@7 Ops_11Mask@5) (= Used_14Mask@1 ZeroMask)) (and (= b_30@2 b_30@0) (= neededTransfer@13 1.0))) (and (=> (= (ControlFlow 0 159) 156) anon191_Then_correct) (=> (= (ControlFlow 0 159) 151) anon191_Else_correct))))))
(let ((anon190_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (and (= neededTransfer@12 (- 1.0 takeTransfer@5)) (= Used_14Mask@0 (MapType0Store ZeroMask null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@5))))) (and (= b_30@1  (and b_30@0 (state Used_14Heap@0 Used_14Mask@0))) (= Ops_11Mask@6 (MapType0Store Ops_11Mask@5 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@5 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) takeTransfer@5)))))) (and (and (= Ops_11Mask@7 Ops_11Mask@6) (= Used_14Mask@1 Used_14Mask@0)) (and (= b_30@2 b_30@1) (= neededTransfer@13 neededTransfer@12)))) (and (=> (= (ControlFlow 0 158) 156) anon191_Then_correct) (=> (= (ControlFlow 0 158) 151) anon191_Else_correct))))))
(let ((anon189_Else_correct  (=> (and (< maskTransfer@5 1.0) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 161) 158) anon190_Then_correct) (=> (= (ControlFlow 0 161) 159) anon190_Else_correct)))))
(let ((anon189_Then_correct  (=> (and (<= 1.0 maskTransfer@5) (= takeTransfer@5 1.0)) (and (=> (= (ControlFlow 0 160) 158) anon190_Then_correct) (=> (= (ControlFlow 0 160) 159) anon190_Else_correct)))))
(let ((anon188_Then_correct  (=> (and (and (and (and b_25@9 b_30@0) true) (> 1.0 0.0)) (= maskTransfer@5 (U_2_real (MapType0Select Ops_11Mask@5 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))))) (and (=> (= (ControlFlow 0 162) 160) anon189_Then_correct) (=> (= (ControlFlow 0 162) 161) anon189_Else_correct)))))
(let ((anon188_Else_correct  (=> (not (and (and (and b_25@9 b_30@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_11Mask@7 Ops_11Mask@5) (= Used_14Mask@1 ZeroMask)) (and (= b_30@2 b_30@0) (= neededTransfer@13 1.0))) (and (=> (= (ControlFlow 0 157) 156) anon191_Then_correct) (=> (= (ControlFlow 0 157) 151) anon191_Else_correct))))))
(let ((anon43_correct  (=> (= initNeededTransfer@2 (+ (U_2_real (MapType0Select ZeroMask null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) 1.0)) (and (=> (= (ControlFlow 0 163) (- 0 164)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 163) 162) anon188_Then_correct) (=> (= (ControlFlow 0 163) 157) anon188_Else_correct)))))))
(let ((anon186_Then_correct  (=> b_25@9 (and (=> (= (ControlFlow 0 170) 168) anon187_Then_correct) (=> (= (ControlFlow 0 170) 163) anon43_correct)))))
(let ((anon186_Else_correct  (=> (and (not b_25@9) (= (ControlFlow 0 166) 163)) anon43_correct)))
(let ((anon185_Then_correct  (=> (and b_25@9 b_30@0) (and (=> (= (ControlFlow 0 171) 170) anon186_Then_correct) (=> (= (ControlFlow 0 171) 166) anon186_Else_correct)))))
(let ((anon185_Else_correct  (=> (and (not (and b_25@9 b_30@0)) (= (ControlFlow 0 165) 163)) anon43_correct)))
(let ((anon184_Then_correct  (=> (and b_25@9 (= b_30@0  (and b_30 (state Used_14Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 172) 171) anon185_Then_correct) (=> (= (ControlFlow 0 172) 165) anon185_Else_correct)))))
(let ((anon184_Else_correct  (=> (and (not b_25@9) (= b_25@23 b_25@9)) (=> (and (and (= Ops_11Heap@4 Ops_11Heap@3) (= Mask@11 Mask@6)) (and (= Ops_11Mask@11 Ops_11Mask@5) (= Heap@7 Heap@4))) (and (=> (= (ControlFlow 0 132) 131) anon200_Then_correct) (=> (= (ControlFlow 0 132) 52) anon200_Else_correct))))))
(let ((anon37_correct  (and (=> (= (ControlFlow 0 174) (- 0 175)) (=> (and (and b_27@5 (and b_27@5 b_25@5)) b_28@9) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType0Select Used_13Mask@5 x@@28 f_7)) initNeededTransfer@1)))) (=> (=> (and (and b_27@5 (and b_27@5 b_25@5)) b_28@9) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType0Select Used_13Mask@5 x@@28 f_7)) initNeededTransfer@1))) (=> (= b_29@0  (and b_27@5 b_28@9)) (=> (and (= b_29@1  (and b_29@0 (state Result_8Heap Result_8Mask))) (= b_29@2  (and b_29@1 (sumMask Result_8Mask Ops_13Mask Used_13Mask@5)))) (=> (and (and (= b_29@3  (and (and b_29@2 (IdenticalOnKnownLocations Ops_13Heap@0 Result_8Heap Ops_13Mask)) (IdenticalOnKnownLocations Used_13Heap@0 Result_8Heap Used_13Mask@5))) (= b_29@4  (and b_29@3 (state Result_8Heap Result_8Mask)))) (and (= b_27@6  (and b_27@5 b_29@4)) (= Ops_11Mask@4 (MapType0Store Ops_11Mask@3 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select Ops_11Mask@3 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) FullPerm)))))) (=> (and (and (and (= b_25@6  (and b_25@5 (state Ops_11Heap@2 Ops_11Mask@4))) (= b_25@7  (and b_25@6 (state Ops_11Heap@2 Ops_11Mask@4)))) (and (= b_25@8  (and b_25@7 (state Ops_11Heap@2 Ops_11Mask@4))) (= b_25@9 b_25@8))) (and (and (= Heap@4 Heap@3) (= Mask@6 Mask@5)) (and (= Ops_11Mask@5 Ops_11Mask@4) (= Ops_11Heap@3 Ops_11Heap@2)))) (and (=> (= (ControlFlow 0 174) 172) anon184_Then_correct) (=> (= (ControlFlow 0 174) 132) anon184_Else_correct))))))))))
(let ((anon183_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (= Mask@5 Mask@3) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@11 neededTransfer@9) (= Used_13Mask@5 Used_13Mask@3)) (and (= b_28@9 b_28@6) (= (ControlFlow 0 178) 174))) anon37_correct)))))
(let ((anon183_Then_correct  (=> (> takeTransfer@4 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@4)) (= Used_13Mask@4 (MapType0Store Used_13Mask@3 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_13Mask@3 x@@28 f_7)) takeTransfer@4))))) (and (= b_28@7  (and b_28@6 (state Used_13Heap@0 Used_13Mask@4))) (= b_28@8  (and b_28@7 (= (U_2_int (MapType1Select Heap@1 x@@28 f_7)) (U_2_int (MapType1Select Used_13Heap@0 x@@28 f_7))))))) (=> (and (and (and (= Mask@4 (MapType0Store Mask@3 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@3 x@@28 f_7)) takeTransfer@4)))) (= Heap@2 (MapType1Store Heap@1 null (|wand_4#sm| x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (MapType0Store (MapType1Select Heap@1 null (|wand_4#sm| x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2)))) x@@28 f_7 (bool_2_U true))))) (and (= Mask@5 Mask@4) (= Heap@3 Heap@2))) (and (and (= neededTransfer@11 neededTransfer@10) (= Used_13Mask@5 Used_13Mask@4)) (and (= b_28@9 b_28@8) (= (ControlFlow 0 177) 174)))) anon37_correct)))))
(let ((anon182_Else_correct  (=> (and (< maskTransfer@4 neededTransfer@9) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 180) 177) anon183_Then_correct) (=> (= (ControlFlow 0 180) 178) anon183_Else_correct)))))
(let ((anon182_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@4) (= takeTransfer@4 neededTransfer@9)) (and (=> (= (ControlFlow 0 179) 177) anon183_Then_correct) (=> (= (ControlFlow 0 179) 178) anon183_Else_correct)))))
(let ((anon181_Then_correct  (=> (and (and (and (and (and b_27@5 (and b_27@5 b_25@5)) b_28@6) true) (> neededTransfer@9 0.0)) (= maskTransfer@4 (U_2_real (MapType0Select Mask@3 x@@28 f_7)))) (and (=> (= (ControlFlow 0 181) 179) anon182_Then_correct) (=> (= (ControlFlow 0 181) 180) anon182_Else_correct)))))
(let ((anon181_Else_correct  (=> (not (and (and (and (and b_27@5 (and b_27@5 b_25@5)) b_28@6) true) (> neededTransfer@9 0.0))) (=> (and (= Mask@5 Mask@3) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@11 neededTransfer@9) (= Used_13Mask@5 Used_13Mask@3)) (and (= b_28@9 b_28@6) (= (ControlFlow 0 176) 174))) anon37_correct)))))
(let ((anon180_Else_correct  (=> (and (>= 0.0 takeTransfer@3) (= Ops_11Heap@2 Ops_11Heap@0)) (=> (and (and (= Ops_11Mask@3 Ops_11Mask@1) (= b_28@6 b_28@3)) (and (= Used_13Mask@3 Used_13Mask@1) (= neededTransfer@9 neededTransfer@7))) (and (=> (= (ControlFlow 0 184) 181) anon181_Then_correct) (=> (= (ControlFlow 0 184) 176) anon181_Else_correct))))))
(let ((anon180_Then_correct  (=> (and (and (> takeTransfer@3 0.0) (= neededTransfer@8 (- neededTransfer@7 takeTransfer@3))) (and (= Used_13Mask@2 (MapType0Store Used_13Mask@1 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_13Mask@1 x@@28 f_7)) takeTransfer@3)))) (= b_28@4  (and b_28@3 (state Used_13Heap@0 Used_13Mask@2))))) (=> (and (and (and (= b_28@5  (and b_28@4 (= (U_2_int (MapType1Select Ops_11Heap@0 x@@28 f_7)) (U_2_int (MapType1Select Used_13Heap@0 x@@28 f_7))))) (= Ops_11Mask@2 (MapType0Store Ops_11Mask@1 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_11Mask@1 x@@28 f_7)) takeTransfer@3))))) (and (= Ops_11Heap@1 (MapType1Store Ops_11Heap@0 null (|wand_4#sm| x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (MapType0Store (MapType1Select Ops_11Heap@0 null (|wand_4#sm| x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2)))) x@@28 f_7 (bool_2_U true)))) (= Ops_11Heap@2 Ops_11Heap@1))) (and (and (= Ops_11Mask@3 Ops_11Mask@2) (= b_28@6 b_28@5)) (and (= Used_13Mask@3 Used_13Mask@2) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 183) 181) anon181_Then_correct) (=> (= (ControlFlow 0 183) 176) anon181_Else_correct))))))
(let ((anon179_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@7) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 186) 183) anon180_Then_correct) (=> (= (ControlFlow 0 186) 184) anon180_Else_correct)))))
(let ((anon179_Then_correct  (=> (and (<= neededTransfer@7 maskTransfer@3) (= takeTransfer@3 neededTransfer@7)) (and (=> (= (ControlFlow 0 185) 183) anon180_Then_correct) (=> (= (ControlFlow 0 185) 184) anon180_Else_correct)))))
(let ((anon178_Then_correct  (=> (and (and (and (and (and b_27@5 (and b_27@5 b_25@5)) b_28@3) true) (> neededTransfer@7 0.0)) (= maskTransfer@3 (U_2_real (MapType0Select Ops_11Mask@1 x@@28 f_7)))) (and (=> (= (ControlFlow 0 187) 185) anon179_Then_correct) (=> (= (ControlFlow 0 187) 186) anon179_Else_correct)))))
(let ((anon178_Else_correct  (=> (and (not (and (and (and (and b_27@5 (and b_27@5 b_25@5)) b_28@3) true) (> neededTransfer@7 0.0))) (= Ops_11Heap@2 Ops_11Heap@0)) (=> (and (and (= Ops_11Mask@3 Ops_11Mask@1) (= b_28@6 b_28@3)) (and (= Used_13Mask@3 Used_13Mask@1) (= neededTransfer@9 neededTransfer@7))) (and (=> (= (ControlFlow 0 182) 181) anon181_Then_correct) (=> (= (ControlFlow 0 182) 176) anon181_Else_correct))))))
(let ((anon177_Else_correct  (=> (and (and (>= 0.0 takeTransfer@2) (= neededTransfer@7 neededTransfer@5)) (and (= Used_13Mask@1 ZeroMask) (= b_28@3 b_28@0))) (and (=> (= (ControlFlow 0 190) 187) anon178_Then_correct) (=> (= (ControlFlow 0 190) 182) anon178_Else_correct)))))
(let ((anon177_Then_correct  (=> (> takeTransfer@2 0.0) (=> (and (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@2)) (= Used_13Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) takeTransfer@2))))) (and (= b_28@1  (and b_28@0 (state Used_13Heap@0 Used_13Mask@0))) (= b_28@2  (and b_28@1 (= (U_2_int (MapType1Select Ops_13Heap@0 x@@28 f_7)) (U_2_int (MapType1Select Used_13Heap@0 x@@28 f_7))))))) (and (and (= Ops_13Mask@2 (MapType0Store Ops_13Mask@1 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_13Mask@1 x@@28 f_7)) takeTransfer@2)))) (= neededTransfer@7 neededTransfer@6)) (and (= Used_13Mask@1 Used_13Mask@0) (= b_28@3 b_28@2)))) (and (=> (= (ControlFlow 0 189) 187) anon178_Then_correct) (=> (= (ControlFlow 0 189) 182) anon178_Else_correct))))))
(let ((anon176_Else_correct  (=> (and (< maskTransfer@2 neededTransfer@5) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 192) 189) anon177_Then_correct) (=> (= (ControlFlow 0 192) 190) anon177_Else_correct)))))
(let ((anon176_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@2) (= takeTransfer@2 neededTransfer@5)) (and (=> (= (ControlFlow 0 191) 189) anon177_Then_correct) (=> (= (ControlFlow 0 191) 190) anon177_Else_correct)))))
(let ((anon175_Then_correct  (=> (and (and (and (and (and b_27@5 (and b_27@5 b_25@5)) b_28@0) true) (> neededTransfer@5 0.0)) (= maskTransfer@2 (U_2_real (MapType0Select Ops_13Mask@1 x@@28 f_7)))) (and (=> (= (ControlFlow 0 193) 191) anon176_Then_correct) (=> (= (ControlFlow 0 193) 192) anon176_Else_correct)))))
(let ((anon175_Else_correct  (=> (and (and (not (and (and (and (and b_27@5 (and b_27@5 b_25@5)) b_28@0) true) (> neededTransfer@5 0.0))) (= neededTransfer@7 neededTransfer@5)) (and (= Used_13Mask@1 ZeroMask) (= b_28@3 b_28@0))) (and (=> (= (ControlFlow 0 188) 187) anon178_Then_correct) (=> (= (ControlFlow 0 188) 182) anon178_Else_correct)))))
(let ((anon19_correct  (=> (= b_27@4  (and b_27@3 (state Ops_13Heap@0 Ops_13Mask@1))) (=> (and (and (= b_27@5  (and b_27@4 (state Ops_13Heap@0 Ops_13Mask@1))) (= b_28@0  (and b_28 (state Used_13Heap@0 ZeroMask)))) (and (= neededTransfer@5 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@1 (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) neededTransfer@5)))) (and (=> (= (ControlFlow 0 194) (- 0 195)) (>= neededTransfer@5 0.0)) (=> (>= neededTransfer@5 0.0) (and (=> (= (ControlFlow 0 194) 193) anon175_Then_correct) (=> (= (ControlFlow 0 194) 188) anon175_Else_correct))))))))
(let ((anon174_Else_correct  (=> (and (and (not b_27@0) (= Ops_13Mask@1 ZeroMask)) (and (= b_27@3 b_27@0) (= (ControlFlow 0 198) 194))) anon19_correct)))
(let ((anon174_Then_correct  (=> (and b_27@0 (= perm@1 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 196) (- 0 197)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (=> (and (= b_27@1  (and b_27@0 (=> (> perm@1 NoPerm) (not (= x@@28 null))))) (= Ops_13Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) perm@1))))) (=> (and (and (= b_27@2  (and b_27@1 (state Ops_13Heap@0 Ops_13Mask@0))) (= Ops_13Mask@1 Ops_13Mask@0)) (and (= b_27@3 b_27@2) (= (ControlFlow 0 196) 194))) anon19_correct)))))))
(let ((anon173_Then_correct  (=> b_25@5 (=> (and (= b_27@0  (and b_27 (state Ops_13Heap@0 ZeroMask))) (= b_26@0  (and b_26 (state Used_12Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 199) 196) anon174_Then_correct) (=> (= (ControlFlow 0 199) 198) anon174_Else_correct))))))
(let ((anon173_Else_correct  (=> (and (not b_25@5) (= b_25@9 b_25@5)) (=> (and (and (= Heap@4 Heap@1) (= Mask@6 Mask@3)) (and (= Ops_11Mask@5 Ops_11Mask@1) (= Ops_11Heap@3 Ops_11Heap@0))) (and (=> (= (ControlFlow 0 173) 172) anon184_Then_correct) (=> (= (ControlFlow 0 173) 132) anon184_Else_correct))))))
(let ((anon16_correct  (=> (and (= b_25@4  (and b_25@3 (state Ops_11Heap@0 Ops_11Mask@1))) (= b_25@5  (and b_25@4 (state Ops_11Heap@0 Ops_11Mask@1)))) (and (=> (= (ControlFlow 0 200) 199) anon173_Then_correct) (=> (= (ControlFlow 0 200) 173) anon173_Else_correct)))))
(let ((anon172_Else_correct  (=> (and (and (not b_25@0) (= Ops_11Mask@1 ZeroMask)) (and (= b_25@3 b_25@0) (= (ControlFlow 0 202) 200))) anon16_correct)))
(let ((anon172_Then_correct  (=> b_25@0 (=> (and (= b_25@1  (and b_25@0 (not (= x@@28 null)))) (= Ops_11Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) FullPerm))))) (=> (and (and (= b_25@2  (and b_25@1 (state Ops_11Heap@0 Ops_11Mask@0))) (= Ops_11Mask@1 Ops_11Mask@0)) (and (= b_25@3 b_25@2) (= (ControlFlow 0 201) 200))) anon16_correct)))))
(let ((anon14_correct  (and (=> (= (ControlFlow 0 203) (- 0 204)) (=> (and (and b_21@5 b_21@5) b_22@6) (and (= neededTransfer@4 0.0) (= (U_2_real (MapType0Select Used_10Mask@3 x@@28 f_7)) initNeededTransfer@0)))) (=> (=> (and (and b_21@5 b_21@5) b_22@6) (and (= neededTransfer@4 0.0) (= (U_2_real (MapType0Select Used_10Mask@3 x@@28 f_7)) initNeededTransfer@0))) (=> (and (and (= b_23@0  (and b_21@5 b_22@6)) (= b_23@1  (and b_23@0 (state Result_7Heap Result_7Mask)))) (and (= b_23@2  (and b_23@1 (sumMask Result_7Mask Ops_9Mask Used_10Mask@3))) (= b_23@3  (and (and b_23@2 (IdenticalOnKnownLocations Ops_9Heap@0 Result_7Heap Ops_9Mask)) (IdenticalOnKnownLocations Used_10Heap@0 Result_7Heap Used_10Mask@3))))) (=> (and (and (and (= b_23@4  (and b_23@3 (state Result_7Heap Result_7Mask))) (= b_21@6  (and b_21@5 b_23@4))) (and (= Mask@3 (MapType0Store Mask@2 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (real_2_U (+ (U_2_real (MapType0Select Mask@2 null (wand_4 x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))))) FullPerm)))) (state Heap@1 Mask@3))) (and (and (state Heap@1 Mask@3) (state Heap@1 Mask@3)) (and (= b_25@0  (and b_25 (state Ops_11Heap@0 ZeroMask))) (= b_24@0  (and b_24 (state Used_11Heap@0 ZeroMask)))))) (and (=> (= (ControlFlow 0 203) 201) anon172_Then_correct) (=> (= (ControlFlow 0 203) 202) anon172_Else_correct))))))))
(let ((anon171_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@2 Mask@0) (= neededTransfer@4 neededTransfer@2)) (=> (and (and (= b_22@6 b_22@3) (= Used_10Mask@3 Used_10Mask@1)) (and (= Heap@1 Heap@@19) (= (ControlFlow 0 207) 203))) anon14_correct)))))
(let ((anon171_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (= neededTransfer@3 (- neededTransfer@2 takeTransfer@1)) (= Used_10Mask@2 (MapType0Store Used_10Mask@1 x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_10Mask@1 x@@28 f_7)) takeTransfer@1))))) (and (= b_22@4  (and b_22@3 (state Used_10Heap@0 Used_10Mask@2))) (= b_22@5  (and b_22@4 (= (U_2_int (MapType1Select Heap@@19 x@@28 f_7)) (U_2_int (MapType1Select Used_10Heap@0 x@@28 f_7))))))) (=> (and (and (and (= Mask@1 (MapType0Store Mask@0 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@0 x@@28 f_7)) takeTransfer@1)))) (= Heap@0 (MapType1Store Heap@@19 null (|wand_4#sm| x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2))) (MapType0Store (MapType1Select Heap@@19 null (|wand_4#sm| x@@28 (/ (to_real 1) (to_real 2)) x@@28 (/ (to_real 1) (to_real 2)))) x@@28 f_7 (bool_2_U true))))) (and (= Mask@2 Mask@1) (= neededTransfer@4 neededTransfer@3))) (and (and (= b_22@6 b_22@5) (= Used_10Mask@3 Used_10Mask@2)) (and (= Heap@1 Heap@0) (= (ControlFlow 0 206) 203)))) anon14_correct)))))
(let ((anon170_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@2) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 209) 206) anon171_Then_correct) (=> (= (ControlFlow 0 209) 207) anon171_Else_correct)))))
(let ((anon170_Then_correct  (=> (and (<= neededTransfer@2 maskTransfer@1) (= takeTransfer@1 neededTransfer@2)) (and (=> (= (ControlFlow 0 208) 206) anon171_Then_correct) (=> (= (ControlFlow 0 208) 207) anon171_Else_correct)))))
(let ((anon169_Then_correct  (=> (and (and (and (and (and b_21@5 b_21@5) b_22@3) true) (> neededTransfer@2 0.0)) (= maskTransfer@1 (U_2_real (MapType0Select Mask@0 x@@28 f_7)))) (and (=> (= (ControlFlow 0 210) 208) anon170_Then_correct) (=> (= (ControlFlow 0 210) 209) anon170_Else_correct)))))
(let ((anon169_Else_correct  (=> (not (and (and (and (and b_21@5 b_21@5) b_22@3) true) (> neededTransfer@2 0.0))) (=> (and (= Mask@2 Mask@0) (= neededTransfer@4 neededTransfer@2)) (=> (and (and (= b_22@6 b_22@3) (= Used_10Mask@3 Used_10Mask@1)) (and (= Heap@1 Heap@@19) (= (ControlFlow 0 205) 203))) anon14_correct)))))
(let ((anon168_Else_correct  (=> (and (and (>= 0.0 takeTransfer@0) (= Used_10Mask@1 ZeroMask)) (and (= b_22@3 b_22@0) (= neededTransfer@2 neededTransfer@0))) (and (=> (= (ControlFlow 0 213) 210) anon169_Then_correct) (=> (= (ControlFlow 0 213) 205) anon169_Else_correct)))))
(let ((anon168_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (and (and (= neededTransfer@1 (- neededTransfer@0 takeTransfer@0)) (= Used_10Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) takeTransfer@0))))) (and (= b_22@1  (and b_22@0 (state Used_10Heap@0 Used_10Mask@0))) (= b_22@2  (and b_22@1 (= (U_2_int (MapType1Select Ops_9Heap@0 x@@28 f_7)) (U_2_int (MapType1Select Used_10Heap@0 x@@28 f_7))))))) (and (and (= Ops_9Mask@2 (MapType0Store Ops_9Mask@1 x@@28 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_9Mask@1 x@@28 f_7)) takeTransfer@0)))) (= Used_10Mask@1 Used_10Mask@0)) (and (= b_22@3 b_22@2) (= neededTransfer@2 neededTransfer@1)))) (and (=> (= (ControlFlow 0 212) 210) anon169_Then_correct) (=> (= (ControlFlow 0 212) 205) anon169_Else_correct))))))
(let ((anon167_Else_correct  (=> (and (< maskTransfer@0 neededTransfer@0) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 215) 212) anon168_Then_correct) (=> (= (ControlFlow 0 215) 213) anon168_Else_correct)))))
(let ((anon167_Then_correct  (=> (and (<= neededTransfer@0 maskTransfer@0) (= takeTransfer@0 neededTransfer@0)) (and (=> (= (ControlFlow 0 214) 212) anon168_Then_correct) (=> (= (ControlFlow 0 214) 213) anon168_Else_correct)))))
(let ((anon166_Then_correct  (=> (and (and (and (and (and b_21@5 b_21@5) b_22@0) true) (> neededTransfer@0 0.0)) (= maskTransfer@0 (U_2_real (MapType0Select Ops_9Mask@1 x@@28 f_7)))) (and (=> (= (ControlFlow 0 216) 214) anon167_Then_correct) (=> (= (ControlFlow 0 216) 215) anon167_Else_correct)))))
(let ((anon166_Else_correct  (=> (and (and (not (and (and (and (and b_21@5 b_21@5) b_22@0) true) (> neededTransfer@0 0.0))) (= Used_10Mask@1 ZeroMask)) (and (= b_22@3 b_22@0) (= neededTransfer@2 neededTransfer@0))) (and (=> (= (ControlFlow 0 211) 210) anon169_Then_correct) (=> (= (ControlFlow 0 211) 205) anon169_Else_correct)))))
(let ((anon2_correct  (=> (= b_21@4  (and b_21@3 (state Ops_9Heap@0 Ops_9Mask@1))) (=> (and (and (= b_21@5  (and b_21@4 (state Ops_9Heap@0 Ops_9Mask@1))) (= b_22@0  (and b_22 (state Used_10Heap@0 ZeroMask)))) (and (= neededTransfer@0 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@0 (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) neededTransfer@0)))) (and (=> (= (ControlFlow 0 217) (- 0 218)) (>= neededTransfer@0 0.0)) (=> (>= neededTransfer@0 0.0) (and (=> (= (ControlFlow 0 217) 216) anon166_Then_correct) (=> (= (ControlFlow 0 217) 211) anon166_Else_correct))))))))
(let ((anon165_Else_correct  (=> (and (and (not b_21@0) (= Ops_9Mask@1 ZeroMask)) (and (= b_21@3 b_21@0) (= (ControlFlow 0 221) 217))) anon2_correct)))
(let ((anon165_Then_correct  (=> (and b_21@0 (= perm@0 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 219) (- 0 220)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (=> (and (= b_21@1  (and b_21@0 (=> (> perm@0 NoPerm) (not (= x@@28 null))))) (= Ops_9Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) perm@0))))) (=> (and (and (= b_21@2  (and b_21@1 (state Ops_9Heap@0 Ops_9Mask@0))) (= Ops_9Mask@1 Ops_9Mask@0)) (and (= b_21@3 b_21@2) (= (ControlFlow 0 219) 217))) anon2_correct)))))))
(let ((anon0_correct  (=> (and (state Heap@@19 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType1Select Heap@@19 x@@28 $allocated)) (not (= x@@28 null))) (and (= Mask@0 (MapType0Store ZeroMask x@@28 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@28 f_7)) FullPerm)))) (state Heap@@19 Mask@0))) (and (=> (= (ControlFlow 0 222) (- 0 223)) (HasDirectPerm Mask@0 x@@28 f_7)) (=> (HasDirectPerm Mask@0 x@@28 f_7) (=> (and (and (= (U_2_int (MapType1Select Heap@@19 x@@28 f_7)) 1) (state Heap@@19 Mask@0)) (and (= b_21@0  (and b_21 (state Ops_9Heap@0 ZeroMask))) (= b_20@0  (and b_20 (state Used_9Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 222) 219) anon165_Then_correct) (=> (= (ControlFlow 0 222) 221) anon165_Else_correct)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 224) 222) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
