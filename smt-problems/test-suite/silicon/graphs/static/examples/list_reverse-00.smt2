(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:11:23
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<$Snap> 0)
(declare-sort Edge 0)
(declare-sort TrClo 0)
(declare-sort $FVF<next> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<next>To$Snap ($FVF<next>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<next> ($Snap) $FVF<next>)
(assert (forall ((x $FVF<next>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<next>($SortWrappers.$FVF<next>To$Snap x)))
    :pattern (($SortWrappers.$FVF<next>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<next>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<next>To$Snap($SortWrappers.$SnapTo$FVF<next> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<next> x))
    :qid |$Snap.$FVF<next>To$SnapTo$FVF<next>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
; /field_value_functions_declarations.smt2 [next: Ref]
(declare-fun $FVF.domain_next ($FVF<next>) Set<$Ref>)
(declare-fun $FVF.lookup_next ($FVF<next> $Ref) $Ref)
(declare-fun $FVF.after_next ($FVF<next> $FVF<next>) Bool)
(declare-fun $FVF.loc_next ($Ref $Ref) Bool)
(declare-fun $FVF.perm_next ($FPM $Ref) $Perm)
(declare-const $fvfTOP_next $FVF<next>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
; /field_value_functions_axioms.smt2 [next: Ref]
(assert (forall ((vs $FVF<next>) (ws $FVF<next>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_next vs) ($FVF.domain_next ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_next vs))
            (= ($FVF.lookup_next vs x) ($FVF.lookup_next ws x)))
          :pattern (($FVF.lookup_next vs x) ($FVF.lookup_next ws x))
          :qid |qp.$FVF<next>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<next>To$Snap vs)
              ($SortWrappers.$FVF<next>To$Snap ws)
              )
    :qid |qp.$FVF<next>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_next pm r))
    :pattern (($FVF.perm_next pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_next f r) true)
    :pattern (($FVF.loc_next f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@4@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@5@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@3@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@6@00 ($Snap Set<$Ref>) $FVF<next>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@2@00 $Ref)) (!
      (=>
        (Set_in n@2@00 refs@0@00)
        (and
          (= (inv@4@00 s@$ refs@0@00 n@2@00) n@2@00)
          (img@5@00 s@$ refs@0@00 n@2@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) n@2@00) n@2@00))
      :qid |quant-u-3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@5@00 s@$ refs@0@00 r)
          (Set_in (inv@4@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@4@00 s@$ refs@0@00 r) r))
      :pattern ((inv@4@00 s@$ refs@0@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@3@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@5@00 s@$ refs@0@00 r)
          (Set_in (inv@4@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r)))
      :pattern (($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r) r)
      :pattern (($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (forall ((p $Ref) (s $Ref)) (!
        (=
          (and
            (Set_in p refs@0@00)
            (and
              (Set_in s refs@0@00)
              (= ($FVF.lookup_next (sm@6@00 s@$ refs@0@00) p) s)))
          (Set_in (create_edge<Edge> p s) result@1@00))
        :pattern ((create_edge<Edge> p s))
        )))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-6|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- link ----------
(declare-const g@0@01 Set<$Ref>)
(declare-const x@1@01 $Ref)
(declare-const y@2@01 $Ref)
(declare-const g@3@01 Set<$Ref>)
(declare-const x@4@01 $Ref)
(declare-const y@5@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
(assert (= ($Snap.first $t@6@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@4@01 g@3@01))
(assert (=
  ($Snap.second $t@6@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@01))
    ($Snap.second ($Snap.second $t@6@01)))))
(assert (= ($Snap.first ($Snap.second $t@6@01)) $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 0 | y@5@01 != Null | live]
; [else-branch: 0 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 3
(push) ; 3
; [else-branch: 0 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= y@5@01 $Ref.null) (not (= y@5@01 $Ref.null))))
(assert (=> (not (= y@5@01 $Ref.null)) (Set_in y@5@01 g@3@01)))
(assert (=
  ($Snap.second ($Snap.second $t@6@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@6@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01)))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(declare-const sm@7@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@7@01  $FVF<next>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(assert (not (= x@4@01 $Ref.null)))
(declare-const sm@8@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@8@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@8@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@8@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@8@01  $FVF<next>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(declare-const n@9@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 1 | !(n@9@01 in g@3@01) | live]
; [else-branch: 1 | n@9@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 1 | !(n@9@01 in g@3@01)]
(assert (not (Set_in n@9@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1 | n@9@01 in g@3@01]
(assert (Set_in n@9@01 g@3@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@9@01 g@3@01) (not (Set_in n@9@01 g@3@01))))
(assert (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@10@01 ($Ref) $Ref)
(declare-fun img@11@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@9@01 $Ref)) (!
  (=>
    (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01)))
    (or (Set_in n@9@01 g@3@01) (not (Set_in n@9@01 g@3@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) n@9@01) n@9@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@9@01 $Ref) (n2@9@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@9@01 g@3@01) (not (= n1@9@01 x@4@01)))
      (and (Set_in n2@9@01 g@3@01) (not (= n2@9@01 x@4@01)))
      (= n1@9@01 n2@9@01))
    (= n1@9@01 n2@9@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@9@01 $Ref)) (!
  (=>
    (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01)))
    (and (= (inv@10@01 n@9@01) n@9@01) (img@11@01 n@9@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) n@9@01) n@9@01))
  :qid |quant-u-8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (= (inv@10@01 r) r))
  :pattern ((inv@10@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@9@01 $Ref)) (!
  (=>
    (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01)))
    (not (= n@9@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) n@9@01) n@9@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@12@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@10@01 r))
  :qid |quant-u-9|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@13@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 2 | !(n$0@13@01 in g@3@01) | live]
; [else-branch: 2 | n$0@13@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 2 | !(n$0@13@01 in g@3@01)]
(assert (not (Set_in n$0@13@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$0@13@01 in g@3@01]
(assert (Set_in n$0@13@01 g@3@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@13@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@11@01 n$0@13@01)
        (and
          (Set_in (inv@10@01 n$0@13@01) g@3@01)
          (not (= (inv@10@01 n$0@13@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (=>
  (Set_in n$0@13@01 g@3@01)
  (and
    (Set_in n$0@13@01 g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))))
(assert (or (Set_in n$0@13@01 g@3@01) (not (Set_in n$0@13@01 g@3@01))))
(push) ; 3
; [then-branch: 3 | n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null | live]
; [else-branch: 3 | !(n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null]
(assert (and
  (Set_in n$0@13@01 g@3@01)
  (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@13@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@11@01 n$0@13@01)
        (and
          (Set_in (inv@10@01 n$0@13@01) g@3@01)
          (not (= (inv@10@01 n$0@13@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null)]
(assert (not
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (=>
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@13@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@13@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@13@01 g@3@01)
      (and
        (Set_in n$0@13@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or (Set_in n$0@13@01 g@3@01) (not (Set_in n$0@13@01 g@3@01)))
    (=>
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or
      (not
        (and
          (Set_in n$0@13@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) g@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(assert (forall ((n$0@13@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@13@01 g@3@01)
      (and
        (Set_in n$0@13@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or (Set_in n$0@13@01 g@3@01) (not (Set_in n$0@13@01 g@3@01)))
    (=>
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or
      (not
        (and
          (Set_in n$0@13@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
  :pattern ((Set_in n$0@13@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(assert (forall ((n$0@13@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@13@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) g@3@01))
  :pattern ((Set_in n$0@13@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  $Snap.unit))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) x@4@01) x@4@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@11@01 x@4@01)
        (and
          (Set_in (inv@10@01 x@4@01) g@3@01)
          (not (= (inv@10@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) x@4@01) $Ref.null))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@14@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@01))
    ($Snap.second ($Snap.second $t@14@01)))))
(assert (= ($Snap.first ($Snap.second $t@14@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@14@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
(declare-const sm@15@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@15@01  $FVF<next>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@14@01))))))
(declare-const sm@16@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@16@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@16@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@16@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@16@01  $FVF<next>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
(declare-const n$1@17@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 4 | !(n$1@17@01 in g@3@01) | live]
; [else-branch: 4 | n$1@17@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 4 | !(n$1@17@01 in g@3@01)]
(assert (not (Set_in n$1@17@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | n$1@17@01 in g@3@01]
(assert (Set_in n$1@17@01 g@3@01))
; [eval] n$1 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@17@01 g@3@01) (not (Set_in n$1@17@01 g@3@01))))
(assert (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@18@01 ($Ref) $Ref)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@17@01 $Ref)) (!
  (=>
    (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01)))
    (or (Set_in n$1@17@01 g@3@01) (not (Set_in n$1@17@01 g@3@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) n$1@17@01) n$1@17@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@17@01 $Ref) (n$12@17@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@17@01 g@3@01) (not (= n$11@17@01 x@4@01)))
      (and (Set_in n$12@17@01 g@3@01) (not (= n$12@17@01 x@4@01)))
      (= n$11@17@01 n$12@17@01))
    (= n$11@17@01 n$12@17@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@17@01 $Ref)) (!
  (=>
    (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01)))
    (and (= (inv@18@01 n$1@17@01) n$1@17@01) (img@19@01 n$1@17@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) n$1@17@01) n$1@17@01))
  :qid |quant-u-11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@17@01 $Ref)) (!
  (=>
    (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01)))
    (not (= n$1@17@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) n$1@17@01) n$1@17@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@20@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-12|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@21@01 $Ref)
(push) ; 3
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 4
; [then-branch: 5 | !(n$2@21@01 in g@3@01) | live]
; [else-branch: 5 | n$2@21@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 5 | !(n$2@21@01 in g@3@01)]
(assert (not (Set_in n$2@21@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | n$2@21@01 in g@3@01]
(assert (Set_in n$2@21@01 g@3@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@21@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@19@01 n$2@21@01)
        (and
          (Set_in (inv@18@01 n$2@21@01) g@3@01)
          (not (= (inv@18@01 n$2@21@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$2@21@01 g@3@01)
  (and
    (Set_in n$2@21@01 g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))))
(assert (or (Set_in n$2@21@01 g@3@01) (not (Set_in n$2@21@01 g@3@01))))
(push) ; 4
; [then-branch: 6 | n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null | live]
; [else-branch: 6 | !(n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null) | live]
(push) ; 5
; [then-branch: 6 | n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null]
(assert (and
  (Set_in n$2@21@01 g@3@01)
  (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@21@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@19@01 n$2@21@01)
        (and
          (Set_in (inv@18@01 n$2@21@01) g@3@01)
          (not (= (inv@18@01 n$2@21@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 6 | !(n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null)]
(assert (not
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@21@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@21@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@21@01 g@3@01)
      (and
        (Set_in n$2@21@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or (Set_in n$2@21@01 g@3@01) (not (Set_in n$2@21@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or
      (not
        (and
          (Set_in n$2@21@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) g@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@21@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@21@01 g@3@01)
      (and
        (Set_in n$2@21@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or (Set_in n$2@21@01 g@3@01) (not (Set_in n$2@21@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or
      (not
        (and
          (Set_in n$2@21@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
  :pattern ((Set_in n$2@21@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@21@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@21@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) g@3@01))
  :pattern ((Set_in n$2@21@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  $Snap.unit))
; [eval] x.next == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) x@4@01) x@4@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@19@01 x@4@01)
        (and
          (Set_in (inv@18@01 x@4@01) g@3@01)
          (not (= (inv@18@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) x@4@01) y@5@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 7 | y@5@01 == Null | live]
; [else-branch: 7 | y@5@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 7 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@22@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@22@01 g@3@01))
(pop) ; 6
(declare-fun inv@23@01 ($Ref) $Ref)
(declare-fun img@24@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@22@01 $Ref) (n2@22@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@22@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n1@22@01) n1@22@01))
      (and
        (Set_in n2@22@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n2@22@01) n2@22@01))
      (= n1@22@01 n2@22@01))
    (= n1@22@01 n2@22@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@22@01 $Ref)) (!
  (=>
    (Set_in n@22@01 g@3@01)
    (and (= (inv@23@01 n@22@01) n@22@01) (img@24@01 n@22@01)))
  :pattern ((Set_in n@22@01 g@3@01))
  :pattern ((inv@23@01 n@22@01))
  :pattern ((img@24@01 n@22@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@24@01 r) (Set_in (inv@23@01 r) g@3@01)) (= (inv@23@01 r) r))
  :pattern ((inv@23@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@23@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@23@01 r))
  :qid |quant-u-14|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@25@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r) (= r (inv@23@01 r)))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@26@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r) (= r (inv@23@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@25@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@25@01 r))
    $Perm.No)
  
  :qid |quant-u-16|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r) (= r (inv@23@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@25@01 r)) $Perm.No))
  
  :qid |quant-u-17|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@26@01 x@4@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@26@01 r) $Perm.No)
  
  :qid |quant-u-19|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r) (= r (inv@23@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@25@01 r)) (pTaken@26@01 r))
      $Perm.No))
  
  :qid |quant-u-20|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@27@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>)))
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)))
    (=>
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@27@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@27@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@27@01  $FVF<next>)) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@22@01 $Ref)) (!
  (=>
    (Set_in n@22@01 g@3@01)
    (and (= (inv@23@01 n@22@01) n@22@01) (img@24@01 n@22@01)))
  :pattern ((Set_in n@22@01 g@3@01))
  :pattern ((inv@23@01 n@22@01))
  :pattern ((img@24@01 n@22@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@24@01 r) (Set_in (inv@23@01 r) g@3@01)) (= (inv@23@01 r) r))
  :pattern ((inv@23@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>)))
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)))
    (=>
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@27@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@27@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@23@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
    :pattern ((inv@23@01 r))
    :qid |quant-u-14|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@27@01  $FVF<next>)) g@3@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 5
(declare-const n@28@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@28@01 g@3@01))
(pop) ; 6
(declare-fun inv@29@01 ($Ref) $Ref)
(declare-fun img@30@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@28@01 $Ref) (n2@28@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@28@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n1@28@01) n1@28@01))
      (and
        (Set_in n2@28@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n2@28@01) n2@28@01))
      (= n1@28@01 n2@28@01))
    (= n1@28@01 n2@28@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@28@01 $Ref)) (!
  (=>
    (Set_in n@28@01 g@3@01)
    (and (= (inv@29@01 n@28@01) n@28@01) (img@30@01 n@28@01)))
  :pattern ((Set_in n@28@01 g@3@01))
  :pattern ((inv@29@01 n@28@01))
  :pattern ((img@30@01 n@28@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@30@01 r) (Set_in (inv@29@01 r) g@3@01)) (= (inv@29@01 r) r))
  :pattern ((inv@29@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@29@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@29@01 r))
  :qid |quant-u-22|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@31@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r) (= r (inv@29@01 r)))
    ($Perm.min
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@32@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r) (= r (inv@29@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@31@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@31@01 r))
    $Perm.No)
  
  :qid |quant-u-24|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r) (= r (inv@29@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@31@01 r)) $Perm.No))
  
  :qid |quant-u-25|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@32@01 x@4@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@32@01 r) $Perm.No)
  
  :qid |quant-u-27|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r) (= r (inv@29@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@31@01 r)) (pTaken@32@01 r))
      $Perm.No))
  
  :qid |quant-u-28|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@33@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>)))
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r)))
    (=>
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r))
      (Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@33@01  $FVF<next>)) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@28@01 $Ref)) (!
  (=>
    (Set_in n@28@01 g@3@01)
    (and (= (inv@29@01 n@28@01) n@28@01) (img@30@01 n@28@01)))
  :pattern ((Set_in n@28@01 g@3@01))
  :pattern ((inv@29@01 n@28@01))
  :pattern ((img@30@01 n@28@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@30@01 r) (Set_in (inv@29@01 r) g@3@01)) (= (inv@29@01 r) r))
  :pattern ((inv@29@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>)))
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r)))
    (=>
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r))
      (Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@29@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
    :pattern ((inv@29@01 r))
    :qid |quant-u-22|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@33@01  $FVF<next>)) g@3@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 7 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@22@01 $Ref)) (!
  (=>
    (Set_in n@22@01 g@3@01)
    (and (= (inv@23@01 n@22@01) n@22@01) (img@24@01 n@22@01)))
  :pattern ((Set_in n@22@01 g@3@01))
  :pattern ((inv@23@01 n@22@01))
  :pattern ((img@24@01 n@22@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@24@01 r) (Set_in (inv@23@01 r) g@3@01)) (= (inv@23@01 r) r))
  :pattern ((inv@23@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>)))
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)))
    (=>
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@27@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@27@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@27@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@27@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@28@01 $Ref)) (!
  (=>
    (Set_in n@28@01 g@3@01)
    (and (= (inv@29@01 n@28@01) n@28@01) (img@30@01 n@28@01)))
  :pattern ((Set_in n@28@01 g@3@01))
  :pattern ((inv@29@01 n@28@01))
  :pattern ((img@30@01 n@28@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@30@01 r) (Set_in (inv@29@01 r) g@3@01)) (= (inv@29@01 r) r))
  :pattern ((inv@29@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>)))
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r)))
    (=>
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r))
      (Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@33@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@29@01 r) g@3@01) (img@30@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (= y@5@01 $Ref.null)
  (and
    (= y@5@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@23@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
      :pattern ((inv@23@01 r))
      :qid |quant-u-14|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@27@01  $FVF<next>)) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@29@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
      :pattern ((inv@29@01 r))
      :qid |quant-u-22|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@33@01  $FVF<next>)) g@3@01))))
; Joined path conditions
(assert (or (not (= y@5@01 $Ref.null)) (= y@5@01 $Ref.null)))
(assert (=>
  (= y@5@01 $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@27@01  $FVF<next>)) g@3@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@33@01  $FVF<next>)) g@3@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 8 | y@5@01 != Null | live]
; [else-branch: 8 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@34@01 $Ref)
(declare-const v2@35@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@36@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@36@01 g@3@01))
(pop) ; 7
(declare-fun inv@37@01 ($Ref) $Ref)
(declare-fun img@38@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@36@01 $Ref) (n2@36@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@36@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n1@36@01) n1@36@01))
      (and
        (Set_in n2@36@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n2@36@01) n2@36@01))
      (= n1@36@01 n2@36@01))
    (= n1@36@01 n2@36@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-30|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@39@01 ((r $Ref) (v1@34@01 $Ref) (v2@35@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@40@01 ((r $Ref) (v1@34@01 $Ref) (v2@35@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@39@01 r v1@34@01 v2@35@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@39@01 r v1@34@01 v2@35@01))
    $Perm.No)
  
  :qid |quant-u-32|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@39@01 r v1@34@01 v2@35@01))
      $Perm.No))
  
  :qid |quant-u-33|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@40@01 x@4@01 v1@34@01 v2@35@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@40@01 r v1@34@01 v2@35@01) $Perm.No)
  
  :qid |quant-u-35|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@39@01 r v1@34@01 v2@35@01))
        (pTaken@40@01 r v1@34@01 v2@35@01))
      $Perm.No))
  
  :qid |quant-u-36|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@41@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@41@01  $FVF<next>)) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@37@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
    :pattern ((inv@37@01 r))
    :qid |quant-u-30|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@41@01  $FVF<next>)) g@3@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@42@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@42@01 g@3@01))
(pop) ; 7
(declare-fun inv@43@01 ($Ref) $Ref)
(declare-fun img@44@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@42@01 $Ref) (n2@42@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@42@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n1@42@01) n1@42@01))
      (and
        (Set_in n2@42@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n2@42@01) n2@42@01))
      (= n1@42@01 n2@42@01))
    (= n1@42@01 n2@42@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@43@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@43@01 r))
  :qid |quant-u-38|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@45@01 ((r $Ref) (v1@34@01 $Ref) (v2@35@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    ($Perm.min
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@46@01 ((r $Ref) (v1@34@01 $Ref) (v2@35@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@45@01 r v1@34@01 v2@35@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@45@01 r v1@34@01 v2@35@01))
    $Perm.No)
  
  :qid |quant-u-40|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@45@01 r v1@34@01 v2@35@01))
      $Perm.No))
  
  :qid |quant-u-41|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@46@01 x@4@01 v1@34@01 v2@35@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@46@01 r v1@34@01 v2@35@01) $Perm.No)
  
  :qid |quant-u-43|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@45@01 r v1@34@01 v2@35@01))
        (pTaken@46@01 r v1@34@01 v2@35@01))
      $Perm.No))
  
  :qid |quant-u-44|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@47@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@43@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
    :pattern ((inv@43@01 r))
    :qid |quant-u-38|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 9 | edge[Bool]($$(sm@47@01, g@3@01), v1@34@01, v2@35@01) | live]
; [else-branch: 9 | !(edge[Bool]($$(sm@47@01, g@3@01), v1@34@01, v2@35@01)) | live]
(push) ; 7
; [then-branch: 9 | edge[Bool]($$(sm@47@01, g@3@01), v1@34@01, v2@35@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
(pop) ; 7
(push) ; 7
; [else-branch: 9 | !(edge[Bool]($$(sm@47@01, g@3@01), v1@34@01, v2@35@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 8
; [then-branch: 10 | v1@34@01 != x@4@01 | live]
; [else-branch: 10 | v1@34@01 == x@4@01 | live]
(push) ; 9
; [then-branch: 10 | v1@34@01 != x@4@01]
(assert (not (= v1@34@01 x@4@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 10 | v1@34@01 == x@4@01]
(assert (= v1@34@01 x@4@01))
; [eval] v2 == y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@34@01 x@4@01) (not (= v1@34@01 x@4@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
  (and
    (not
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
    (or (= v1@34@01 x@4@01) (not (= v1@34@01 x@4@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-30|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@41@01  $FVF<next>)) g@3@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@43@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@43@01 r))
  :qid |quant-u-38|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@34@01 $Ref) (v2@35@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
      (and
        (not
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
        (or (= v1@34@01 x@4@01) (not (= v1@34@01 x@4@01)))))
    (or
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 8 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@41@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@41@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@41@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@47@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@37@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
      :pattern ((inv@37@01 r))
      :qid |quant-u-30|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@41@01  $FVF<next>)) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@43@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
      :pattern ((inv@43@01 r))
      :qid |quant-u-38|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01)
    (forall ((v1@34@01 $Ref) (v2@35@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
          (and
            (not
              (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
            (or (= v1@34@01 x@4@01) (not (= v1@34@01 x@4@01)))))
        (or
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01)))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@34@01 $Ref) (v2@35@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@41@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01)
      (or
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01)
        (and (= v1@34@01 x@4@01) (= v2@35@01 y@5@01))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@47@01  $FVF<next>)) g@3@01) v1@34@01 v2@35@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 11 | y@5@01 != Null | live]
; [else-branch: 11 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@48@01 $Ref)
(declare-const v2@49@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 12 | v1@48@01 != v2@49@01 | live]
; [else-branch: 12 | v1@48@01 == v2@49@01 | live]
(push) ; 7
; [then-branch: 12 | v1@48@01 != v2@49@01]
(assert (not (= v1@48@01 v2@49@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@50@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@50@01 g@3@01))
(pop) ; 9
(declare-fun inv@51@01 ($Ref) $Ref)
(declare-fun img@52@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@50@01 $Ref) (n2@50@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@50@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n1@50@01) n1@50@01))
      (and
        (Set_in n2@50@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n2@50@01) n2@50@01))
      (= n1@50@01 n2@50@01))
    (= n1@50@01 n2@50@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@51@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@51@01 r))
  :qid |quant-u-46|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@53@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r) (= r (inv@51@01 r)))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@54@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r) (= r (inv@51@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@53@01 r v1@48@01 v2@49@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@53@01 r v1@48@01 v2@49@01))
    $Perm.No)
  
  :qid |quant-u-48|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r) (= r (inv@51@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@53@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-49|))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@54@01 x@4@01 v1@48@01 v2@49@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@54@01 r v1@48@01 v2@49@01) $Perm.No)
  
  :qid |quant-u-51|))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r) (= r (inv@51@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@53@01 r v1@48@01 v2@49@01))
        (pTaken@54@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-52|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@55@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@51@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
    :pattern ((inv@51@01 r))
    :qid |quant-u-46|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@56@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@56@01 g@3@01))
(pop) ; 9
(declare-fun inv@57@01 ($Ref) $Ref)
(declare-fun img@58@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@56@01 $Ref) (n2@56@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@56@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n1@56@01) n1@56@01))
      (and
        (Set_in n2@56@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n2@56@01) n2@56@01))
      (= n1@56@01 n2@56@01))
    (= n1@56@01 n2@56@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@57@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@57@01 r))
  :qid |quant-u-54|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@59@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r) (= r (inv@57@01 r)))
    ($Perm.min
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@60@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r) (= r (inv@57@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@59@01 r v1@48@01 v2@49@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@59@01 r v1@48@01 v2@49@01))
    $Perm.No)
  
  :qid |quant-u-56|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r) (= r (inv@57@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@59@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-57|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@60@01 x@4@01 v1@48@01 v2@49@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@60@01 r v1@48@01 v2@49@01) $Perm.No)
  
  :qid |quant-u-59|))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r) (= r (inv@57@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@59@01 r v1@48@01 v2@49@01))
        (pTaken@60@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-60|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@61@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@57@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
    :pattern ((inv@57@01 r))
    :qid |quant-u-54|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01)))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 13 | exists_path[Bool]($$(sm@61@01, g@3@01), v1@48@01, v2@49@01) | live]
; [else-branch: 13 | !(exists_path[Bool]($$(sm@61@01, g@3@01), v1@48@01, v2@49@01)) | live]
(push) ; 9
; [then-branch: 13 | exists_path[Bool]($$(sm@61@01, g@3@01), v1@48@01, v2@49@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
(pop) ; 9
(push) ; 9
; [else-branch: 13 | !(exists_path[Bool]($$(sm@61@01, g@3@01), v1@48@01, v2@49@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@62@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@62@01 g@3@01))
(pop) ; 11
(declare-fun inv@63@01 ($Ref) $Ref)
(declare-fun img@64@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@65@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@62@01 $Ref) (n2@62@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@62@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) n1@62@01) n1@62@01))
      (and
        (Set_in n2@62@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) n2@62@01) n2@62@01))
      (= n1@62@01 n2@62@01))
    (= n1@62@01 n2@62@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@62@01 $Ref)) (!
  (=>
    (Set_in n@62@01 g@3@01)
    (and (= (inv@63@01 n@62@01) n@62@01) (img@64@01 n@62@01)))
  :pattern ((Set_in n@62@01 g@3@01))
  :pattern ((inv@63@01 n@62@01))
  :pattern ((img@64@01 n@62@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@64@01 r) (Set_in (inv@63@01 r) g@3@01)) (= (inv@63@01 r) r))
  :pattern ((inv@63@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@63@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r))
  :pattern ((inv@63@01 r))
  :qid |quant-u-62|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@66@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r) (= r (inv@63@01 r)))
    ($Perm.min
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@67@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r) (= r (inv@63@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@66@01 r v1@48@01 v2@49@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@66@01 r v1@48@01 v2@49@01))
    $Perm.No)
  
  :qid |quant-u-64|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r) (= r (inv@63@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@66@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-65|))))
(check-sat)
; unknown
(pop) ; 11
; 0,02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@67@01 x@4@01 v1@48@01 v2@49@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0,03s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@67@01 r v1@48@01 v2@49@01) $Perm.No)
  
  :qid |quant-u-67|))))
(check-sat)
; unknown
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r) (= r (inv@63@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@66@01 r v1@48@01 v2@49@01))
        (pTaken@67@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-68|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@68@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)))
    (=>
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@62@01 $Ref)) (!
  (=>
    (Set_in n@62@01 g@3@01)
    (and (= (inv@63@01 n@62@01) n@62@01) (img@64@01 n@62@01)))
  :pattern ((Set_in n@62@01 g@3@01))
  :pattern ((inv@63@01 n@62@01))
  :pattern ((img@64@01 n@62@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@64@01 r) (Set_in (inv@63@01 r) g@3@01)) (= (inv@63@01 r) r))
  :pattern ((inv@63@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)))
    (=>
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@63@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r))
    :pattern ((inv@63@01 r))
    :qid |quant-u-62|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01)))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 14 | !(exists_path[Bool]($$(sm@68@01, g@3@01), v1@48@01, x@4@01)) | live]
; [else-branch: 14 | exists_path[Bool]($$(sm@68@01, g@3@01), v1@48@01, x@4@01) | live]
(push) ; 11
; [then-branch: 14 | !(exists_path[Bool]($$(sm@68@01, g@3@01), v1@48@01, x@4@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 14 | exists_path[Bool]($$(sm@68@01, g@3@01), v1@48@01, x@4@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@69@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@69@01 g@3@01))
(pop) ; 13
(declare-fun inv@70@01 ($Ref) $Ref)
(declare-fun img@71@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@72@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@69@01 $Ref) (n2@69@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@69@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n1@69@01) n1@69@01))
      (and
        (Set_in n2@69@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n2@69@01) n2@69@01))
      (= n1@69@01 n2@69@01))
    (= n1@69@01 n2@69@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@70@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
  :pattern ((inv@70@01 r))
  :qid |quant-u-70|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@73@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r) (= r (inv@70@01 r)))
    ($Perm.min
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@74@01 ((r $Ref) (v1@48@01 $Ref) (v2@49@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r) (= r (inv@70@01 r)))
    ($Perm.min
      (ite (= r x@4@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@73@01 r v1@48@01 v2@49@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@11@01 r)
          (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@73@01 r v1@48@01 v2@49@01))
    $Perm.No)
  
  :qid |quant-u-72|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r) (= r (inv@70@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@73@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-73|))))
(check-sat)
; unknown
(pop) ; 13
; 0,02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@74@01 x@4@01 v1@48@01 v2@49@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0,08s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@74@01 r v1@48@01 v2@49@01) $Perm.No)
  
  :qid |quant-u-75|))))
(check-sat)
; unknown
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r) (= r (inv@70@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@73@01 r v1@48@01 v2@49@01))
        (pTaken@74@01 r v1@48@01 v2@49@01))
      $Perm.No))
  
  :qid |quant-u-76|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@75@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@70@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
    :pattern ((inv@70@01 r))
    :qid |quant-u-70|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@70@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
      :pattern ((inv@70@01 r))
      :qid |quant-u-70|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@62@01 $Ref)) (!
  (=>
    (Set_in n@62@01 g@3@01)
    (and (= (inv@63@01 n@62@01) n@62@01) (img@64@01 n@62@01)))
  :pattern ((Set_in n@62@01 g@3@01))
  :pattern ((inv@63@01 n@62@01))
  :pattern ((img@64@01 n@62@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@64@01 r) (Set_in (inv@63@01 r) g@3@01)) (= (inv@63@01 r) r))
  :pattern ((inv@63@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)))
    (=>
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@63@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r))
      :pattern ((inv@63@01 r))
      :qid |quant-u-62|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@70@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
          :pattern ((inv@70@01 r))
          :qid |quant-u-70|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 12 | v1@48@01 == v2@49@01]
(assert (= v1@48@01 v2@49@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@62@01 $Ref)) (!
  (=>
    (Set_in n@62@01 g@3@01)
    (and (= (inv@63@01 n@62@01) n@62@01) (img@64@01 n@62@01)))
  :pattern ((Set_in n@62@01 g@3@01))
  :pattern ((inv@63@01 n@62@01))
  :pattern ((img@64@01 n@62@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@64@01 r) (Set_in (inv@63@01 r) g@3@01)) (= (inv@63@01 r) r))
  :pattern ((inv@63@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)))
    (=>
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (not (= v1@48@01 v2@49@01))
  (and
    (not (= v1@48@01 v2@49@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@51@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
      :pattern ((inv@51@01 r))
      :qid |quant-u-46|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@57@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
      :pattern ((inv@57@01 r))
      :qid |quant-u-54|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@63@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r))
          :pattern ((inv@63@01 r))
          :qid |quant-u-62|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@70@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
              :pattern ((inv@70@01 r))
              :qid |quant-u-70|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01)))))
; Joined path conditions
(assert (or (= v1@48@01 v2@49@01) (not (= v1@48@01 v2@49@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@62@01 $Ref)) (!
  (=>
    (Set_in n@62@01 g@3@01)
    (and (= (inv@63@01 n@62@01) n@62@01) (img@64@01 n@62@01)))
  :pattern ((Set_in n@62@01 g@3@01))
  :pattern ((inv@63@01 n@62@01))
  :pattern ((img@64@01 n@62@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@64@01 r) (Set_in (inv@63@01 r) g@3@01)) (= (inv@63@01 r) r))
  :pattern ((inv@63@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)))
    (=>
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@48@01 $Ref) (v2@49@01 $Ref)) (!
  (and
    (=>
      (not (= v1@48@01 v2@49@01))
      (and
        (not (= v1@48@01 v2@49@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@51@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
          :pattern ((inv@51@01 r))
          :qid |quant-u-46|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@57@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
          :pattern ((inv@57@01 r))
          :qid |quant-u-54|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@63@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r))
              :pattern ((inv@63@01 r))
              :qid |quant-u-62|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@70@01 r) g@3@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
                  :pattern ((inv@70@01 r))
                  :qid |quant-u-70|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))))
    (or (= v1@48@01 v2@49@01) (not (= v1@48@01 v2@49@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@55@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@61@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@61@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@61@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@62@01 $Ref)) (!
  (=>
    (Set_in n@62@01 g@3@01)
    (and (= (inv@63@01 n@62@01) n@62@01) (img@64@01 n@62@01)))
  :pattern ((Set_in n@62@01 g@3@01))
  :pattern ((inv@63@01 n@62@01))
  :pattern ((img@64@01 n@62@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@64@01 r) (Set_in (inv@63@01 r) g@3@01)) (= (inv@63@01 r) r))
  :pattern ((inv@63@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)))
    (=>
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@68@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@63@01 r) g@3@01) (img@64@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@75@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@75@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@75@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((v1@48@01 $Ref) (v2@49@01 $Ref)) (!
      (and
        (=>
          (not (= v1@48@01 v2@49@01))
          (and
            (not (= v1@48@01 v2@49@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@51@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
              :pattern ((inv@51@01 r))
              :qid |quant-u-46|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@57@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
              :pattern ((inv@57@01 r))
              :qid |quant-u-54|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@63@01 r) g@3@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r))
                  :pattern ((inv@63@01 r))
                  :qid |quant-u-62|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@70@01 r) g@3@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
                      :pattern ((inv@70@01 r))
                      :qid |quant-u-70|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))))
        (or (= v1@48@01 v2@49@01) (not (= v1@48@01 v2@49@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@48@01 $Ref) (v2@49@01 $Ref)) (!
    (=>
      (not (= v1@48@01 v2@49@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01)
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@61@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@68@01  $FVF<next>)) g@3@01) v1@48@01 x@4@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@75@01  $FVF<next>)) g@3@01) y@5@01 v2@49@01)))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@55@01  $FVF<next>)) g@3@01) v1@48@01 v2@49@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- unlink ----------
(declare-const g@76@01 Set<$Ref>)
(declare-const x@77@01 $Ref)
(declare-const g@78@01 Set<$Ref>)
(declare-const x@79@01 $Ref)
(push) ; 1
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 ($Snap.combine ($Snap.first $t@80@01) ($Snap.second $t@80@01))))
(assert (= ($Snap.first $t@80@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@79@01 g@78@01))
(assert (=
  ($Snap.second $t@80@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@01))
    ($Snap.second ($Snap.second $t@80@01)))))
(assert (= ($Snap.first ($Snap.second $t@80@01)) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@78@01)))
(assert (=
  ($Snap.second ($Snap.second $t@80@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@80@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@80@01))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@80@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(declare-const sm@81@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@81@01  $FVF<next>) x@79@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(assert (not (= x@79@01 $Ref.null)))
(declare-const sm@82@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@82@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@82@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@82@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef49|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@82@01  $FVF<next>) x@79@01) x@79@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
(declare-const n@83@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 15 | !(n@83@01 in g@78@01) | live]
; [else-branch: 15 | n@83@01 in g@78@01 | live]
(push) ; 4
; [then-branch: 15 | !(n@83@01 in g@78@01)]
(assert (not (Set_in n@83@01 g@78@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 15 | n@83@01 in g@78@01]
(assert (Set_in n@83@01 g@78@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@83@01 g@78@01) (not (Set_in n@83@01 g@78@01))))
(assert (and (Set_in n@83@01 g@78@01) (not (= n@83@01 x@79@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@84@01 ($Ref) $Ref)
(declare-fun img@85@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (and (Set_in n@83@01 g@78@01) (not (= n@83@01 x@79@01)))
    (or (Set_in n@83@01 g@78@01) (not (Set_in n@83@01 g@78@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) n@83@01) n@83@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@83@01 $Ref) (n2@83@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@83@01 g@78@01) (not (= n1@83@01 x@79@01)))
      (and (Set_in n2@83@01 g@78@01) (not (= n2@83@01 x@79@01)))
      (= n1@83@01 n2@83@01))
    (= n1@83@01 n2@83@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (and (Set_in n@83@01 g@78@01) (not (= n@83@01 x@79@01)))
    (and (= (inv@84@01 n@83@01) n@83@01) (img@85@01 n@83@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) n@83@01) n@83@01))
  :qid |quant-u-78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (= (inv@84@01 r) r))
  :pattern ((inv@84@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@83@01 $Ref)) (!
  (=>
    (and (Set_in n@83@01 g@78@01) (not (= n@83@01 x@79@01)))
    (not (= n@83@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) n@83@01) n@83@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@86@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
  :pattern ((inv@84@01 r))
  :qid |quant-u-79|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@87@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 16 | !(n$0@87@01 in g@78@01) | live]
; [else-branch: 16 | n$0@87@01 in g@78@01 | live]
(push) ; 4
; [then-branch: 16 | !(n$0@87@01 in g@78@01)]
(assert (not (Set_in n$0@87@01 g@78@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | n$0@87@01 in g@78@01]
(assert (Set_in n$0@87@01 g@78@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@87@01 x@79@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@85@01 n$0@87@01)
        (and
          (Set_in (inv@84@01 n$0@87@01) g@78@01)
          (not (= (inv@84@01 n$0@87@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
(assert (=>
  (Set_in n$0@87@01 g@78@01)
  (and
    (Set_in n$0@87@01 g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01))))
(assert (or (Set_in n$0@87@01 g@78@01) (not (Set_in n$0@87@01 g@78@01))))
(push) ; 3
; [then-branch: 17 | n$0@87@01 in g@78@01 && Lookup(next, sm@86@01, n$0@87@01) != Null | live]
; [else-branch: 17 | !(n$0@87@01 in g@78@01 && Lookup(next, sm@86@01, n$0@87@01) != Null) | live]
(push) ; 4
; [then-branch: 17 | n$0@87@01 in g@78@01 && Lookup(next, sm@86@01, n$0@87@01) != Null]
(assert (and
  (Set_in n$0@87@01 g@78@01)
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@87@01 x@79@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@85@01 n$0@87@01)
        (and
          (Set_in (inv@84@01 n$0@87@01) g@78@01)
          (not (= (inv@84@01 n$0@87@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(n$0@87@01 in g@78@01 && Lookup(next, sm@86@01, n$0@87@01) != Null)]
(assert (not
  (and
    (Set_in n$0@87@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
(assert (=>
  (and
    (Set_in n$0@87@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))
  (and
    (Set_in n$0@87@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@87@01 g@78@01)
      (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))))
  (and
    (Set_in n$0@87@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@87@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@87@01 g@78@01)
      (and
        (Set_in n$0@87@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01)))
    (or (Set_in n$0@87@01 g@78@01) (not (Set_in n$0@87@01 g@78@01)))
    (=>
      (and
        (Set_in n$0@87@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))
      (and
        (Set_in n$0@87@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01)))
    (or
      (not
        (and
          (Set_in n$0@87@01 g@78@01)
          (not
            (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))))
      (and
        (Set_in n$0@87@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) g@78@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(assert (forall ((n$0@87@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@87@01 g@78@01)
      (and
        (Set_in n$0@87@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01)))
    (or (Set_in n$0@87@01 g@78@01) (not (Set_in n$0@87@01 g@78@01)))
    (=>
      (and
        (Set_in n$0@87@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))
      (and
        (Set_in n$0@87@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01)))
    (or
      (not
        (and
          (Set_in n$0@87@01 g@78@01)
          (not
            (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null))))
      (and
        (Set_in n$0@87@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))))
  :pattern ((Set_in n$0@87@01 g@78@01) ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(assert (forall ((n$0@87@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@87@01 g@78@01)
      (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) g@78@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) g@78@01))
  :pattern ((Set_in n$0@87@01 g@78@01) ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n$0@87@01) n$0@87@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 ($Snap.combine ($Snap.first $t@88@01) ($Snap.second $t@88@01))))
(assert (= ($Snap.first $t@88@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@88@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@88@01))
    ($Snap.second ($Snap.second $t@88@01)))))
(assert (= ($Snap.first ($Snap.second $t@88@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@88@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@88@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
(declare-const sm@89@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@89@01  $FVF<next>) x@79@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))
(declare-const sm@90@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef54|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) x@79@01) x@79@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@88@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
(declare-const n$1@91@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 18 | !(n$1@91@01 in g@78@01) | live]
; [else-branch: 18 | n$1@91@01 in g@78@01 | live]
(push) ; 5
; [then-branch: 18 | !(n$1@91@01 in g@78@01)]
(assert (not (Set_in n$1@91@01 g@78@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | n$1@91@01 in g@78@01]
(assert (Set_in n$1@91@01 g@78@01))
; [eval] n$1 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@91@01 g@78@01) (not (Set_in n$1@91@01 g@78@01))))
(assert (and (Set_in n$1@91@01 g@78@01) (not (= n$1@91@01 x@79@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@92@01 ($Ref) $Ref)
(declare-fun img@93@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@91@01 $Ref)) (!
  (=>
    (and (Set_in n$1@91@01 g@78@01) (not (= n$1@91@01 x@79@01)))
    (or (Set_in n$1@91@01 g@78@01) (not (Set_in n$1@91@01 g@78@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) n$1@91@01) n$1@91@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@91@01 $Ref) (n$12@91@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@91@01 g@78@01) (not (= n$11@91@01 x@79@01)))
      (and (Set_in n$12@91@01 g@78@01) (not (= n$12@91@01 x@79@01)))
      (= n$11@91@01 n$12@91@01))
    (= n$11@91@01 n$12@91@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@91@01 $Ref)) (!
  (=>
    (and (Set_in n$1@91@01 g@78@01) (not (= n$1@91@01 x@79@01)))
    (and (= (inv@92@01 n$1@91@01) n$1@91@01) (img@93@01 n$1@91@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) n$1@91@01) n$1@91@01))
  :qid |quant-u-81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@93@01 r)
      (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
    (= (inv@92@01 r) r))
  :pattern ((inv@92@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@91@01 $Ref)) (!
  (=>
    (and (Set_in n$1@91@01 g@78@01) (not (= n$1@91@01 x@79@01)))
    (not (= n$1@91@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) n$1@91@01) n$1@91@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@94@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@93@01 r)
      (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
  :pattern ((inv@92@01 r))
  :qid |quant-u-82|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@95@01 $Ref)
(push) ; 3
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 4
; [then-branch: 19 | !(n$2@95@01 in g@78@01) | live]
; [else-branch: 19 | n$2@95@01 in g@78@01 | live]
(push) ; 5
; [then-branch: 19 | !(n$2@95@01 in g@78@01)]
(assert (not (Set_in n$2@95@01 g@78@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | n$2@95@01 in g@78@01]
(assert (Set_in n$2@95@01 g@78@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef57|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@95@01 x@79@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@93@01 n$2@95@01)
        (and
          (Set_in (inv@92@01 n$2@95@01) g@78@01)
          (not (= (inv@92@01 n$2@95@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@93@01 r)
      (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (=>
  (Set_in n$2@95@01 g@78@01)
  (and
    (Set_in n$2@95@01 g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01))))
(assert (or (Set_in n$2@95@01 g@78@01) (not (Set_in n$2@95@01 g@78@01))))
(push) ; 4
; [then-branch: 20 | n$2@95@01 in g@78@01 && Lookup(next, sm@94@01, n$2@95@01) != Null | live]
; [else-branch: 20 | !(n$2@95@01 in g@78@01 && Lookup(next, sm@94@01, n$2@95@01) != Null) | live]
(push) ; 5
; [then-branch: 20 | n$2@95@01 in g@78@01 && Lookup(next, sm@94@01, n$2@95@01) != Null]
(assert (and
  (Set_in n$2@95@01 g@78@01)
  (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef57|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@95@01 x@79@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@93@01 n$2@95@01)
        (and
          (Set_in (inv@92@01 n$2@95@01) g@78@01)
          (not (= (inv@92@01 n$2@95@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(n$2@95@01 in g@78@01 && Lookup(next, sm@94@01, n$2@95@01) != Null)]
(assert (not
  (and
    (Set_in n$2@95@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@93@01 r)
      (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (=>
  (and
    (Set_in n$2@95@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))
  (and
    (Set_in n$2@95@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@95@01 g@78@01)
      (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))))
  (and
    (Set_in n$2@95@01 g@78@01)
    (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@93@01 r)
      (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@95@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@95@01 g@78@01)
      (and
        (Set_in n$2@95@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01)))
    (or (Set_in n$2@95@01 g@78@01) (not (Set_in n$2@95@01 g@78@01)))
    (=>
      (and
        (Set_in n$2@95@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))
      (and
        (Set_in n$2@95@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01)))
    (or
      (not
        (and
          (Set_in n$2@95@01 g@78@01)
          (not
            (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))))
      (and
        (Set_in n$2@95@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) g@78@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@95@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@95@01 g@78@01)
      (and
        (Set_in n$2@95@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01)))
    (or (Set_in n$2@95@01 g@78@01) (not (Set_in n$2@95@01 g@78@01)))
    (=>
      (and
        (Set_in n$2@95@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))
      (and
        (Set_in n$2@95@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01)))
    (or
      (not
        (and
          (Set_in n$2@95@01 g@78@01)
          (not
            (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null))))
      (and
        (Set_in n$2@95@01 g@78@01)
        (not
          (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))))
  :pattern ((Set_in n$2@95@01 g@78@01) ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@95@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@95@01 g@78@01)
      (not (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) g@78@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) g@78@01))
  :pattern ((Set_in n$2@95@01 g@78@01) ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n$2@95@01) n$2@95@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
  $Snap.unit))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef57|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) x@79@01) x@79@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@93@01 x@79@01)
        (and
          (Set_in (inv@92@01 x@79@01) g@78@01)
          (not (= (inv@92@01 x@79@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@94@01  $FVF<next>) x@79@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
  $Snap.unit))
; [eval] old(x.next) == null ==> $$(g) == old($$(g))
; [eval] old(x.next) == null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) x@79@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@85@01 x@79@01)
        (and
          (Set_in (inv@84@01 x@79@01) g@78@01)
          (not (= (inv@84@01 x@79@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 21 | Lookup(next, sm@86@01, x@79@01) == Null | live]
; [else-branch: 21 | Lookup(next, sm@86@01, x@79@01) != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | Lookup(next, sm@86@01, x@79@01) == Null]
(assert (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@96@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@96@01 g@78@01))
(pop) ; 6
(declare-fun inv@97@01 ($Ref) $Ref)
(declare-fun img@98@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@96@01 $Ref) (n2@96@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@96@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n1@96@01) n1@96@01))
      (and
        (Set_in n2@96@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n2@96@01) n2@96@01))
      (= n1@96@01 n2@96@01))
    (= n1@96@01 n2@96@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@96@01 $Ref)) (!
  (=>
    (Set_in n@96@01 g@78@01)
    (and (= (inv@97@01 n@96@01) n@96@01) (img@98@01 n@96@01)))
  :pattern ((Set_in n@96@01 g@78@01))
  :pattern ((inv@97@01 n@96@01))
  :pattern ((img@98@01 n@96@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@98@01 r) (Set_in (inv@97@01 r) g@78@01)) (= (inv@97@01 r) r))
  :pattern ((inv@97@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@97@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
  :pattern ((inv@97@01 r))
  :qid |quant-u-84|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@99@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r) (= r (inv@97@01 r)))
    ($Perm.min
      (ite
        (and
          (img@93@01 r)
          (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@100@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r) (= r (inv@97@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@99@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@93@01 r)
          (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@99@01 r))
    $Perm.No)
  
  :qid |quant-u-86|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r) (= r (inv@97@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@99@01 r)) $Perm.No))
  
  :qid |quant-u-87|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@100@01 x@79@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@100@01 r) $Perm.No)
  
  :qid |quant-u-89|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r) (= r (inv@97@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@99@01 r)) (pTaken@100@01 r))
      $Perm.No))
  
  :qid |quant-u-90|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@101@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>)))
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r)))
    (=>
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r))
      (Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>))))
  :qid |qp.fvfDomDef61|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@101@01  $FVF<next>)) g@78@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@96@01 $Ref)) (!
  (=>
    (Set_in n@96@01 g@78@01)
    (and (= (inv@97@01 n@96@01) n@96@01) (img@98@01 n@96@01)))
  :pattern ((Set_in n@96@01 g@78@01))
  :pattern ((inv@97@01 n@96@01))
  :pattern ((img@98@01 n@96@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@98@01 r) (Set_in (inv@97@01 r) g@78@01)) (= (inv@97@01 r) r))
  :pattern ((inv@97@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>)))
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r)))
    (=>
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r))
      (Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>))))
  :qid |qp.fvfDomDef61|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@97@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
    :pattern ((inv@97@01 r))
    :qid |quant-u-84|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@101@01  $FVF<next>)) g@78@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 5
(declare-const n@102@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@102@01 g@78@01))
(pop) ; 6
(declare-fun inv@103@01 ($Ref) $Ref)
(declare-fun img@104@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@102@01 $Ref) (n2@102@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@102@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n1@102@01) n1@102@01))
      (and
        (Set_in n2@102@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n2@102@01) n2@102@01))
      (= n1@102@01 n2@102@01))
    (= n1@102@01 n2@102@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@78@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@78@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@78@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@103@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
  :pattern ((inv@103@01 r))
  :qid |quant-u-92|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@105@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r) (= r (inv@103@01 r)))
    ($Perm.min
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@106@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r) (= r (inv@103@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@105@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@105@01 r))
    $Perm.No)
  
  :qid |quant-u-94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r) (= r (inv@103@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@105@01 r)) $Perm.No))
  
  :qid |quant-u-95|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@106@01 x@79@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@106@01 r) $Perm.No)
  
  :qid |quant-u-97|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r) (= r (inv@103@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@105@01 r)) (pTaken@106@01 r))
      $Perm.No))
  
  :qid |quant-u-98|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@107@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) g@78@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@78@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@78@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@78@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@103@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
    :pattern ((inv@103@01 r))
    :qid |quant-u-92|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) g@78@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 21 | Lookup(next, sm@86@01, x@79@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@96@01 $Ref)) (!
  (=>
    (Set_in n@96@01 g@78@01)
    (and (= (inv@97@01 n@96@01) n@96@01) (img@98@01 n@96@01)))
  :pattern ((Set_in n@96@01 g@78@01))
  :pattern ((inv@97@01 n@96@01))
  :pattern ((img@98@01 n@96@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@98@01 r) (Set_in (inv@97@01 r) g@78@01)) (= (inv@97@01 r) r))
  :pattern ((inv@97@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>)))
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r)))
    (=>
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r))
      (Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@101@01  $FVF<next>))))
  :qid |qp.fvfDomDef61|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@97@01 r) g@78@01) (img@98@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@78@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@78@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@78@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@78@01) (img@104@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)
  (and
    (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@97@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
      :pattern ((inv@97@01 r))
      :qid |quant-u-84|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@101@01  $FVF<next>)) g@78@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@103@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
      :pattern ((inv@103@01 r))
      :qid |quant-u-92|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) g@78@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
  (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@101@01  $FVF<next>)) g@78@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) g@78@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@85@01 x@79@01)
        (and
          (Set_in (inv@84@01 x@79@01) g@78@01)
          (not (= (inv@84@01 x@79@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 22 | Lookup(next, sm@86@01, x@79@01) != Null | live]
; [else-branch: 22 | Lookup(next, sm@86@01, x@79@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 22 | Lookup(next, sm@86@01, x@79@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
(declare-const v1@108@01 $Ref)
(declare-const v2@109@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@110@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@110@01 g@78@01))
(pop) ; 7
(declare-fun inv@111@01 ($Ref) $Ref)
(declare-fun img@112@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@110@01 $Ref) (n2@110@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@110@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n1@110@01) n1@110@01))
      (and
        (Set_in n2@110@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n2@110@01) n2@110@01))
      (= n1@110@01 n2@110@01))
    (= n1@110@01 n2@110@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@111@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
  :pattern ((inv@111@01 r))
  :qid |quant-u-100|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@113@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r) (= r (inv@111@01 r)))
    ($Perm.min
      (ite
        (and
          (img@93@01 r)
          (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@114@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r) (= r (inv@111@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@113@01 r v1@108@01 v2@109@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@93@01 r)
          (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@113@01 r v1@108@01 v2@109@01))
    $Perm.No)
  
  :qid |quant-u-102|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r) (= r (inv@111@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@113@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-103|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@114@01 x@79@01 v1@108@01 v2@109@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@114@01 r v1@108@01 v2@109@01) $Perm.No)
  
  :qid |quant-u-105|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r) (= r (inv@111@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@113@01 r v1@108@01 v2@109@01))
        (pTaken@114@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-106|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@115@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@111@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
    :pattern ((inv@111@01 r))
    :qid |quant-u-100|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@116@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@116@01 g@78@01))
(pop) ; 7
(declare-fun inv@117@01 ($Ref) $Ref)
(declare-fun img@118@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@116@01 $Ref) (n2@116@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@116@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n1@116@01) n1@116@01))
      (and
        (Set_in n2@116@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n2@116@01) n2@116@01))
      (= n1@116@01 n2@116@01))
    (= n1@116@01 n2@116@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@78@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@78@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@78@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@117@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
  :pattern ((inv@117@01 r))
  :qid |quant-u-108|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@119@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r) (= r (inv@117@01 r)))
    ($Perm.min
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@120@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r) (= r (inv@117@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@119@01 r v1@108@01 v2@109@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@119@01 r v1@108@01 v2@109@01))
    $Perm.No)
  
  :qid |quant-u-110|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r) (= r (inv@117@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@119@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-111|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@120@01 x@79@01 v1@108@01 v2@109@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@120@01 r v1@108@01 v2@109@01) $Perm.No)
  
  :qid |quant-u-113|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r) (= r (inv@117@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@119@01 r v1@108@01 v2@109@01))
        (pTaken@120@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-114|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@121@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@78@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@78@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@78@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@117@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
    :pattern ((inv@117@01 r))
    :qid |quant-u-108|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 23 | !(edge[Bool]($$(sm@121@01, g@78@01), v1@108@01, v2@109@01)) | live]
; [else-branch: 23 | edge[Bool]($$(sm@121@01, g@78@01), v1@108@01, v2@109@01) | live]
(push) ; 7
; [then-branch: 23 | !(edge[Bool]($$(sm@121@01, g@78@01), v1@108@01, v2@109@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 23 | edge[Bool]($$(sm@121@01, g@78@01), v1@108@01, v2@109@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))
; [eval] !(v1 == x && v2 == old(x.next))
; [eval] v1 == x && v2 == old(x.next)
; [eval] v1 == x
(push) ; 8
; [then-branch: 24 | v1@108@01 != x@79@01 | live]
; [else-branch: 24 | v1@108@01 == x@79@01 | live]
(push) ; 9
; [then-branch: 24 | v1@108@01 != x@79@01]
(assert (not (= v1@108@01 x@79@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 24 | v1@108@01 == x@79@01]
(assert (= v1@108@01 x@79@01))
; [eval] v2 == old(x.next)
; [eval] old(x.next)
(declare-const sm@122@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(declare-const pm@123@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@123@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) x@79@01) x@79@01))
(push) ; 10
(assert (not (< $Perm.No ($FVF.perm_next (as pm@123@01  $FPM) x@79@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@123@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (=>
  (= v1@108@01 x@79@01)
  (and
    (= v1@108@01 x@79@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) x@79@01) x@79@01))))
(assert (or (= v1@108@01 x@79@01) (not (= v1@108@01 x@79@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@123@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (=>
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
  (and
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
    (=>
      (= v1@108@01 x@79@01)
      (and
        (= v1@108@01 x@79@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) x@79@01) x@79@01)))
    (or (= v1@108@01 x@79@01) (not (= v1@108@01 x@79@01))))))
(assert (or
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@78@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@78@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@78@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@123@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@111@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
  :pattern ((inv@111@01 r))
  :qid |quant-u-100|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@117@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
  :pattern ((inv@117@01 r))
  :qid |quant-u-108|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
        (=>
          (= v1@108@01 x@79@01)
          (and
            (= v1@108@01 x@79@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) x@79@01) x@79@01)))
        (or (= v1@108@01 x@79@01) (not (= v1@108@01 x@79@01)))))
    (or
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 22 | Lookup(next, sm@86@01, x@79@01) == Null]
(assert (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@78@01) (img@112@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@78@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@78@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@78@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@121@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@78@01) (img@118@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@121@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@121@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@123@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@123@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@111@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
      :pattern ((inv@111@01 r))
      :qid |quant-u-100|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@117@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
      :pattern ((inv@117@01 r))
      :qid |quant-u-108|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01)
    (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
          (and
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
            (=>
              (= v1@108@01 x@79@01)
              (and
                (= v1@108@01 x@79@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@122@01  $FVF<next>) x@79@01) x@79@01)))
            (or (= v1@108@01 x@79@01) (not (= v1@108@01 x@79@01)))))
        (or
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
  (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@121@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01)
        (not
          (and
            (= v1@108@01 x@79@01)
            (= v2@109@01 ($FVF.lookup_next (as sm@122@01  $FVF<next>) x@79@01))))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@78@01) v1@108@01 v2@109@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@79@01)
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
      (=
        ($FVF.lookup_next (as sm@86@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@86@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@85@01 x@79@01)
        (and
          (Set_in (inv@84@01 x@79@01) g@78@01)
          (not (= (inv@84@01 x@79@01) x@79@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 25 | Lookup(next, sm@86@01, x@79@01) != Null | live]
; [else-branch: 25 | Lookup(next, sm@86@01, x@79@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | Lookup(next, sm@86@01, x@79@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
(declare-const v1@124@01 $Ref)
(declare-const v2@125@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 26 | v1@124@01 != v2@125@01 | live]
; [else-branch: 26 | v1@124@01 == v2@125@01 | live]
(push) ; 7
; [then-branch: 26 | v1@124@01 != v2@125@01]
(assert (not (= v1@124@01 v2@125@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@126@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@126@01 g@78@01))
(pop) ; 9
(declare-fun inv@127@01 ($Ref) $Ref)
(declare-fun img@128@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@126@01 $Ref) (n2@126@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@126@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n1@126@01) n1@126@01))
      (and
        (Set_in n2@126@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) n2@126@01) n2@126@01))
      (= n1@126@01 n2@126@01))
    (= n1@126@01 n2@126@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@126@01 $Ref)) (!
  (=>
    (Set_in n@126@01 g@78@01)
    (and (= (inv@127@01 n@126@01) n@126@01) (img@128@01 n@126@01)))
  :pattern ((Set_in n@126@01 g@78@01))
  :pattern ((inv@127@01 n@126@01))
  :pattern ((img@128@01 n@126@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@128@01 r) (Set_in (inv@127@01 r) g@78@01)) (= (inv@127@01 r) r))
  :pattern ((inv@127@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@127@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
  :pattern ((inv@127@01 r))
  :qid |quant-u-116|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@129@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r) (= r (inv@127@01 r)))
    ($Perm.min
      (ite
        (and
          (img@93@01 r)
          (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@130@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r) (= r (inv@127@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@129@01 r v1@124@01 v2@125@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@93@01 r)
          (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@129@01 r v1@124@01 v2@125@01))
    $Perm.No)
  
  :qid |quant-u-118|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r) (= r (inv@127@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@129@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-119|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@130@01 x@79@01 v1@124@01 v2@125@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@130@01 r v1@124@01 v2@125@01) $Perm.No)
  
  :qid |quant-u-121|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r) (= r (inv@127@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@129@01 r v1@124@01 v2@125@01))
        (pTaken@130@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-122|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@131@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)))
    (=>
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@126@01 $Ref)) (!
  (=>
    (Set_in n@126@01 g@78@01)
    (and (= (inv@127@01 n@126@01) n@126@01) (img@128@01 n@126@01)))
  :pattern ((Set_in n@126@01 g@78@01))
  :pattern ((inv@127@01 n@126@01))
  :pattern ((img@128@01 n@126@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@128@01 r) (Set_in (inv@127@01 r) g@78@01)) (= (inv@127@01 r) r))
  :pattern ((inv@127@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)))
    (=>
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@127@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
    :pattern ((inv@127@01 r))
    :qid |quant-u-116|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@132@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@132@01 g@78@01))
(pop) ; 9
(declare-fun inv@133@01 ($Ref) $Ref)
(declare-fun img@134@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@132@01 $Ref) (n2@132@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@132@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n1@132@01) n1@132@01))
      (and
        (Set_in n2@132@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) n2@132@01) n2@132@01))
      (= n1@132@01 n2@132@01))
    (= n1@132@01 n2@132@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@78@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@78@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@78@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@133@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
  :pattern ((inv@133@01 r))
  :qid |quant-u-124|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@135@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r) (= r (inv@133@01 r)))
    ($Perm.min
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@136@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r) (= r (inv@133@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@135@01 r v1@124@01 v2@125@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@135@01 r v1@124@01 v2@125@01))
    $Perm.No)
  
  :qid |quant-u-126|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r) (= r (inv@133@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@135@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-127|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@136@01 x@79@01 v1@124@01 v2@125@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@136@01 r v1@124@01 v2@125@01) $Perm.No)
  
  :qid |quant-u-129|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r) (= r (inv@133@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@135@01 r v1@124@01 v2@125@01))
        (pTaken@136@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-130|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@137@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@78@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@78@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@78@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@133@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
    :pattern ((inv@133@01 r))
    :qid |quant-u-124|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01)))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 27 | !(exists_path[Bool]($$(sm@137@01, g@78@01), v1@124@01, v2@125@01)) | live]
; [else-branch: 27 | exists_path[Bool]($$(sm@137@01, g@78@01), v1@124@01, v2@125@01) | live]
(push) ; 9
; [then-branch: 27 | !(exists_path[Bool]($$(sm@137@01, g@78@01), v1@124@01, v2@125@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 27 | exists_path[Bool]($$(sm@137@01, g@78@01), v1@124@01, v2@125@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@138@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@138@01 g@78@01))
(pop) ; 11
(declare-fun inv@139@01 ($Ref) $Ref)
(declare-fun img@140@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@141@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@138@01 $Ref) (n2@138@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@138@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) n1@138@01) n1@138@01))
      (and
        (Set_in n2@138@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) n2@138@01) n2@138@01))
      (= n1@138@01 n2@138@01))
    (= n1@138@01 n2@138@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@138@01 $Ref)) (!
  (=>
    (Set_in n@138@01 g@78@01)
    (and (= (inv@139@01 n@138@01) n@138@01) (img@140@01 n@138@01)))
  :pattern ((Set_in n@138@01 g@78@01))
  :pattern ((inv@139@01 n@138@01))
  :pattern ((img@140@01 n@138@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@140@01 r) (Set_in (inv@139@01 r) g@78@01)) (= (inv@139@01 r) r))
  :pattern ((inv@139@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@139@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) r) r))
  :pattern ((inv@139@01 r))
  :qid |quant-u-132|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@142@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r) (= r (inv@139@01 r)))
    ($Perm.min
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@143@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r) (= r (inv@139@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@142@01 r v1@124@01 v2@125@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@142@01 r v1@124@01 v2@125@01))
    $Perm.No)
  
  :qid |quant-u-134|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r) (= r (inv@139@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@142@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-135|))))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@143@01 x@79@01 v1@124@01 v2@125@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@143@01 r v1@124@01 v2@125@01) $Perm.No)
  
  :qid |quant-u-137|))))
(check-sat)
; unknown
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r) (= r (inv@139@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@142@01 r v1@124@01 v2@125@01))
        (pTaken@143@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-138|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@144@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)))
    (=>
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@138@01 $Ref)) (!
  (=>
    (Set_in n@138@01 g@78@01)
    (and (= (inv@139@01 n@138@01) n@138@01) (img@140@01 n@138@01)))
  :pattern ((Set_in n@138@01 g@78@01))
  :pattern ((inv@139@01 n@138@01))
  :pattern ((img@140@01 n@138@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@140@01 r) (Set_in (inv@139@01 r) g@78@01)) (= (inv@139@01 r) r))
  :pattern ((inv@139@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)))
    (=>
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@139@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) r) r))
    :pattern ((inv@139@01 r))
    :qid |quant-u-132|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01)))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 28 | !(exists_path[Bool]($$(sm@144@01, g@78@01), v1@124@01, x@79@01)) | live]
; [else-branch: 28 | exists_path[Bool]($$(sm@144@01, g@78@01), v1@124@01, x@79@01) | live]
(push) ; 11
; [then-branch: 28 | !(exists_path[Bool]($$(sm@144@01, g@78@01), v1@124@01, x@79@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 28 | exists_path[Bool]($$(sm@144@01, g@78@01), v1@124@01, x@79@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01))
; [eval] exists_path(old($$(g)), old(x.next), v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@145@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@145@01 g@78@01))
(pop) ; 13
(declare-fun inv@146@01 ($Ref) $Ref)
(declare-fun img@147@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@148@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@145@01 $Ref) (n2@145@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@145@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) n1@145@01) n1@145@01))
      (and
        (Set_in n2@145@01 g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) n2@145@01) n2@145@01))
      (= n1@145@01 n2@145@01))
    (= n1@145@01 n2@145@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@146@01 r) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
  :pattern ((inv@146@01 r))
  :qid |quant-u-140|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@149@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r) (= r (inv@146@01 r)))
    ($Perm.min
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@150@01 ((r $Ref) (v1@124@01 $Ref) (v2@125@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r) (= r (inv@146@01 r)))
    ($Perm.min
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@149@01 r v1@124@01 v2@125@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@149@01 r v1@124@01 v2@125@01))
    $Perm.No)
  
  :qid |quant-u-142|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r) (= r (inv@146@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@149@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-143|))))
(check-sat)
; unknown
(pop) ; 13
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@150@01 x@79@01 v1@124@01 v2@125@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0,05s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@150@01 r v1@124@01 v2@125@01) $Perm.No)
  
  :qid |quant-u-145|))))
(check-sat)
; unknown
(pop) ; 13
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r) (= r (inv@146@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@149@01 r v1@124@01 v2@125@01))
        (pTaken@150@01 r v1@124@01 v2@125@01))
      $Perm.No))
  
  :qid |quant-u-146|))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@151@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@146@01 r) g@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
    :pattern ((inv@146@01 r))
    :qid |quant-u-140|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01)))
; [eval] old(x.next)
(declare-const sm@152@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(declare-const pm@153@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@153@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) x@79@01))
(set-option :timeout 0)
(push) ; 12
(assert (not (< $Perm.No ($FVF.perm_next (as pm@153@01  $FPM) x@79@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@153@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@146@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
      :pattern ((inv@146@01 r))
      :qid |quant-u-140|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) x@79@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@138@01 $Ref)) (!
  (=>
    (Set_in n@138@01 g@78@01)
    (and (= (inv@139@01 n@138@01) n@138@01) (img@140@01 n@138@01)))
  :pattern ((Set_in n@138@01 g@78@01))
  :pattern ((inv@139@01 n@138@01))
  :pattern ((img@140@01 n@138@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@140@01 r) (Set_in (inv@139@01 r) g@78@01)) (= (inv@139@01 r) r))
  :pattern ((inv@139@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)))
    (=>
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@153@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@139@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) r) r))
      :pattern ((inv@139@01 r))
      :qid |quant-u-132|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@146@01 r) g@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
          :pattern ((inv@146@01 r))
          :qid |quant-u-140|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) x@79@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01))))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 26 | v1@124@01 == v2@125@01]
(assert (= v1@124@01 v2@125@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@126@01 $Ref)) (!
  (=>
    (Set_in n@126@01 g@78@01)
    (and (= (inv@127@01 n@126@01) n@126@01) (img@128@01 n@126@01)))
  :pattern ((Set_in n@126@01 g@78@01))
  :pattern ((inv@127@01 n@126@01))
  :pattern ((img@128@01 n@126@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@128@01 r) (Set_in (inv@127@01 r) g@78@01)) (= (inv@127@01 r) r))
  :pattern ((inv@127@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)))
    (=>
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@78@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@78@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@78@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@138@01 $Ref)) (!
  (=>
    (Set_in n@138@01 g@78@01)
    (and (= (inv@139@01 n@138@01) n@138@01) (img@140@01 n@138@01)))
  :pattern ((Set_in n@138@01 g@78@01))
  :pattern ((inv@139@01 n@138@01))
  :pattern ((img@140@01 n@138@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@140@01 r) (Set_in (inv@139@01 r) g@78@01)) (= (inv@139@01 r) r))
  :pattern ((inv@139@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)))
    (=>
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@153@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (not (= v1@124@01 v2@125@01))
  (and
    (not (= v1@124@01 v2@125@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@127@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
      :pattern ((inv@127@01 r))
      :qid |quant-u-116|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@133@01 r) g@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
      :pattern ((inv@133@01 r))
      :qid |quant-u-124|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@139@01 r) g@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) r) r))
          :pattern ((inv@139@01 r))
          :qid |quant-u-132|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@146@01 r) g@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
              :pattern ((inv@146@01 r))
              :qid |quant-u-140|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) x@79@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)))))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01))))))
; Joined path conditions
(assert (or (= v1@124@01 v2@125@01) (not (= v1@124@01 v2@125@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@126@01 $Ref)) (!
  (=>
    (Set_in n@126@01 g@78@01)
    (and (= (inv@127@01 n@126@01) n@126@01) (img@128@01 n@126@01)))
  :pattern ((Set_in n@126@01 g@78@01))
  :pattern ((inv@127@01 n@126@01))
  :pattern ((img@128@01 n@126@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@128@01 r) (Set_in (inv@127@01 r) g@78@01)) (= (inv@127@01 r) r))
  :pattern ((inv@127@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)))
    (=>
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@78@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@78@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@78@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@138@01 $Ref)) (!
  (=>
    (Set_in n@138@01 g@78@01)
    (and (= (inv@139@01 n@138@01) n@138@01) (img@140@01 n@138@01)))
  :pattern ((Set_in n@138@01 g@78@01))
  :pattern ((inv@139@01 n@138@01))
  :pattern ((img@140@01 n@138@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@140@01 r) (Set_in (inv@139@01 r) g@78@01)) (= (inv@139@01 r) r))
  :pattern ((inv@139@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)))
    (=>
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@153@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@124@01 $Ref) (v2@125@01 $Ref)) (!
  (and
    (=>
      (not (= v1@124@01 v2@125@01))
      (and
        (not (= v1@124@01 v2@125@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@127@01 r) g@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
          :pattern ((inv@127@01 r))
          :qid |quant-u-116|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@133@01 r) g@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
          :pattern ((inv@133@01 r))
          :qid |quant-u-124|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@139@01 r) g@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) r) r))
              :pattern ((inv@139@01 r))
              :qid |quant-u-132|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@146@01 r) g@78@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
                  :pattern ((inv@146@01 r))
                  :qid |quant-u-140|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) x@79@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)))))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)))))
    (or (= v1@124@01 v2@125@01) (not (= v1@124@01 v2@125@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 25 | Lookup(next, sm@86@01, x@79@01) == Null]
(assert (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@126@01 $Ref)) (!
  (=>
    (Set_in n@126@01 g@78@01)
    (and (= (inv@127@01 n@126@01) n@126@01) (img@128@01 n@126@01)))
  :pattern ((Set_in n@126@01 g@78@01))
  :pattern ((inv@127@01 n@126@01))
  :pattern ((img@128@01 n@126@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@128@01 r) (Set_in (inv@127@01 r) g@78@01)) (= (inv@127@01 r) r))
  :pattern ((inv@127@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)))
    (=>
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@131@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@89@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@89@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@127@01 r) g@78@01) (img@128@01 r))
      (and
        (img@93@01 r)
        (and (Set_in (inv@92@01 r) g@78@01) (not (= (inv@92@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@131@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@89@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@131@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@132@01 $Ref)) (!
  (=>
    (Set_in n@132@01 g@78@01)
    (and (= (inv@133@01 n@132@01) n@132@01) (img@134@01 n@132@01)))
  :pattern ((Set_in n@132@01 g@78@01))
  :pattern ((inv@133@01 n@132@01))
  :pattern ((img@134@01 n@132@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@134@01 r) (Set_in (inv@133@01 r) g@78@01)) (= (inv@133@01 r) r))
  :pattern ((inv@133@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)))
    (=>
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@137@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@133@01 r) g@78@01) (img@134@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@138@01 $Ref)) (!
  (=>
    (Set_in n@138@01 g@78@01)
    (and (= (inv@139@01 n@138@01) n@138@01) (img@140@01 n@138@01)))
  :pattern ((Set_in n@138@01 g@78@01))
  :pattern ((inv@139@01 n@138@01))
  :pattern ((img@140@01 n@138@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@140@01 r) (Set_in (inv@139@01 r) g@78@01)) (= (inv@139@01 r) r))
  :pattern ((inv@139@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)))
    (=>
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@144@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@139@01 r) g@78@01) (img@140@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@144@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@144@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@78@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@78@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@78@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r)) (= r x@79@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@78@01) (img@147@01 r))
      (and
        (img@85@01 r)
        (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@79@01)
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@81@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@81@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@85@01 r)
      (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
    (=
      ($FVF.lookup_next (as sm@152@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@152@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@153@01  $FPM) r)
    (+
      (ite (= r x@79@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@85@01 r)
          (and (Set_in (inv@84@01 r) g@78@01) (not (= (inv@84@01 r) x@79@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@81@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@153@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
    (forall ((v1@124@01 $Ref) (v2@125@01 $Ref)) (!
      (and
        (=>
          (not (= v1@124@01 v2@125@01))
          (and
            (not (= v1@124@01 v2@125@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@127@01 r) g@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@94@01  $FVF<next>) r) r))
              :pattern ((inv@127@01 r))
              :qid |quant-u-116|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@133@01 r) g@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@86@01  $FVF<next>) r) r))
              :pattern ((inv@133@01 r))
              :qid |quant-u-124|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@139@01 r) g@78@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@141@01  $FVF<next>) r) r))
                  :pattern ((inv@139@01 r))
                  :qid |quant-u-132|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@146@01 r) g@78@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
                      :pattern ((inv@146@01 r))
                      :qid |quant-u-140|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) x@79@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)))))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)))))
        (or (= v1@124@01 v2@125@01) (not (= v1@124@01 v2@125@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_next (as sm@86@01  $FVF<next>) x@79@01) $Ref.null))
  (forall ((v1@124@01 $Ref) (v2@125@01 $Ref)) (!
    (=>
      (not (= v1@124@01 v2@125@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@137@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01)
          (not
            (and
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@144@01  $FVF<next>)) g@78@01) v1@124@01 x@79@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@78@01) ($FVF.lookup_next (as sm@152@01  $FVF<next>) x@79@01) v2@125@01))))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@131@01  $FVF<next>)) g@78@01) v1@124@01 v2@125@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- reverse ----------
(declare-const g@154@01 Set<$Ref>)
(declare-const xe@155@01 $Ref)
(declare-const y@156@01 $Ref)
(declare-const g@157@01 Set<$Ref>)
(declare-const xe@158@01 $Ref)
(declare-const y@159@01 $Ref)
(push) ; 1
(declare-const $t@160@01 $Snap)
(assert (= $t@160@01 ($Snap.combine ($Snap.first $t@160@01) ($Snap.second $t@160@01))))
(assert (= ($Snap.first $t@160@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@157@01)))
(assert (=
  ($Snap.second $t@160@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@160@01))
    ($Snap.second ($Snap.second $t@160@01)))))
(declare-const n@161@01 $Ref)
(push) ; 2
; [eval] (n in g)
(assert (Set_in n@161@01 g@157@01))
(declare-const sm@162@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@163@01 ($Ref) $Ref)
(declare-fun img@164@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@161@01 $Ref) (n2@161@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@161@01 g@157@01)
      (Set_in n2@161@01 g@157@01)
      (= n1@161@01 n2@161@01))
    (= n1@161@01 n2@161@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g@157@01)
    (and (= (inv@163@01 n@161@01) n@161@01) (img@164@01 n@161@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) n@161@01) n@161@01))
  :qid |quant-u-148|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)) (= (inv@163@01 r) r))
  :pattern ((inv@163@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@161@01 $Ref)) (!
  (=> (Set_in n@161@01 g@157@01) (not (= n@161@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) n@161@01) n@161@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@165@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@163@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) r) r))
  :pattern ((inv@163@01 r))
  :qid |quant-u-149|)))
(assert (=
  ($Snap.second ($Snap.second $t@160@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@160@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@160@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@160@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@166@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 29 | !(n$0@166@01 in g@157@01) | live]
; [else-branch: 29 | n$0@166@01 in g@157@01 | live]
(push) ; 4
; [then-branch: 29 | !(n$0@166@01 in g@157@01)]
(assert (not (Set_in n$0@166@01 g@157@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 29 | n$0@166@01 in g@157@01]
(assert (Set_in n$0@166@01 g@157@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
    :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
    :qid |qp.fvfValDef107|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef108|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01))
(push) ; 5
(assert (not (and (img@164@01 n$0@166@01) (Set_in (inv@163@01 n$0@166@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
(assert (=>
  (Set_in n$0@166@01 g@157@01)
  (and
    (Set_in n$0@166@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01))))
(assert (or (Set_in n$0@166@01 g@157@01) (not (Set_in n$0@166@01 g@157@01))))
(push) ; 3
; [then-branch: 30 | n$0@166@01 in g@157@01 && Lookup(next, sm@165@01, n$0@166@01) != Null | live]
; [else-branch: 30 | !(n$0@166@01 in g@157@01 && Lookup(next, sm@165@01, n$0@166@01) != Null) | live]
(push) ; 4
; [then-branch: 30 | n$0@166@01 in g@157@01 && Lookup(next, sm@165@01, n$0@166@01) != Null]
(assert (and
  (Set_in n$0@166@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
    :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
    :qid |qp.fvfValDef107|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef108|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01))
(push) ; 5
(assert (not (and (img@164@01 n$0@166@01) (Set_in (inv@163@01 n$0@166@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 30 | !(n$0@166@01 in g@157@01 && Lookup(next, sm@165@01, n$0@166@01) != Null)]
(assert (not
  (and
    (Set_in n$0@166@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
(assert (=>
  (and
    (Set_in n$0@166@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))
  (and
    (Set_in n$0@166@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@166@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null))))
  (and
    (Set_in n$0@166@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@166@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@166@01 g@157@01)
      (and
        (Set_in n$0@166@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01)))
    (or (Set_in n$0@166@01 g@157@01) (not (Set_in n$0@166@01 g@157@01)))
    (=>
      (and
        (Set_in n$0@166@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))
      (and
        (Set_in n$0@166@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01)))
    (or
      (not
        (and
          (Set_in n$0@166@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01)
              $Ref.null))))
      (and
        (Set_in n$0@166@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@384@14@384@22-aux|)))
(assert (forall ((n$0@166@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@166@01 g@157@01)
      (and
        (Set_in n$0@166@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01)))
    (or (Set_in n$0@166@01 g@157@01) (not (Set_in n$0@166@01 g@157@01)))
    (=>
      (and
        (Set_in n$0@166@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))
      (and
        (Set_in n$0@166@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01)))
    (or
      (not
        (and
          (Set_in n$0@166@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01)
              $Ref.null))))
      (and
        (Set_in n$0@166@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))))
  :pattern ((Set_in n$0@166@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@384@14@384@22-aux|)))
(assert (forall ((n$0@166@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@166@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) g@157@01))
  :pattern ((Set_in n$0@166@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n$0@166@01) n$0@166@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@384@14@384@22|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@160@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@160@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@160@01))))
  $Snap.unit))
; [eval] (xe in g)
(assert (Set_in xe@158@01 g@157@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))
  $Snap.unit))
; [eval] acyclic_graph($$(g))
; [eval] $$(g)
(push) ; 2
(declare-const n@167@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@167@01 g@157@01))
(pop) ; 3
(declare-fun inv@168@01 ($Ref) $Ref)
(declare-fun img@169@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@167@01 $Ref) (n2@167@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@167@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n1@167@01) n1@167@01))
      (and
        (Set_in n2@167@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) n2@167@01) n2@167@01))
      (= n1@167@01 n2@167@01))
    (= n1@167@01 n2@167@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@167@01 $Ref)) (!
  (=>
    (Set_in n@167@01 g@157@01)
    (and (= (inv@168@01 n@167@01) n@167@01) (img@169@01 n@167@01)))
  :pattern ((Set_in n@167@01 g@157@01))
  :pattern ((inv@168@01 n@167@01))
  :pattern ((img@169@01 n@167@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@169@01 r) (Set_in (inv@168@01 r) g@157@01)) (= (inv@168@01 r) r))
  :pattern ((inv@168@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@168@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) r) r))
  :pattern ((inv@168@01 r))
  :qid |quant-u-151|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@170@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r) (= r (inv@168@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@170@01 r))
    $Perm.No)
  
  :qid |quant-u-153|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@170@01 r) $Perm.No)
  
  :qid |quant-u-154|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r) (= r (inv@168@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@170@01 r)) $Perm.No))
  
  :qid |quant-u-155|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@171@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))
      (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r)))
    (=>
      (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r))
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) g@157@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@167@01 $Ref)) (!
  (=>
    (Set_in n@167@01 g@157@01)
    (and (= (inv@168@01 n@167@01) n@167@01) (img@169@01 n@167@01)))
  :pattern ((Set_in n@167@01 g@157@01))
  :pattern ((inv@168@01 n@167@01))
  :pattern ((img@169@01 n@167@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@169@01 r) (Set_in (inv@168@01 r) g@157@01)) (= (inv@168@01 r) r))
  :pattern ((inv@168@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))
      (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r)))
    (=>
      (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r))
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@168@01 r) g@157@01) (img@169@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@168@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@165@01  $FVF<next>) r) r))
    :pattern ((inv@168@01 r))
    :qid |quant-u-151|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) g@157@01)))
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01))))))
  $Snap.unit))
; [eval] unshared_graph($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 2
(declare-const n@172@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@172@01 g@157@01))
(pop) ; 3
(declare-fun inv@173@01 ($Ref) $Ref)
(declare-fun img@174@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@175@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@172@01 $Ref) (n2@172@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@172@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n1@172@01) n1@172@01))
      (and
        (Set_in n2@172@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n2@172@01) n2@172@01))
      (= n1@172@01 n2@172@01))
    (= n1@172@01 n2@172@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@172@01 $Ref)) (!
  (=>
    (Set_in n@172@01 g@157@01)
    (and (= (inv@173@01 n@172@01) n@172@01) (img@174@01 n@172@01)))
  :pattern ((Set_in n@172@01 g@157@01))
  :pattern ((inv@173@01 n@172@01))
  :pattern ((img@174@01 n@172@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@174@01 r) (Set_in (inv@173@01 r) g@157@01)) (= (inv@173@01 r) r))
  :pattern ((inv@173@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@173@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
  :pattern ((inv@173@01 r))
  :qid |quant-u-157|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@176@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r) (= r (inv@173@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@176@01 r))
    $Perm.No)
  
  :qid |quant-u-159|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@176@01 r) $Perm.No)
  
  :qid |quant-u-160|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r) (= r (inv@173@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@176@01 r)) $Perm.No))
  
  :qid |quant-u-161|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@177@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@177@01  $FVF<next>)))
      (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r)))
    (=>
      (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r))
      (Set_in r ($FVF.domain_next (as sm@177@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@177@01  $FVF<next>))))
  :qid |qp.fvfDomDef116|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@177@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@177@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@177@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@177@01  $FVF<next>)) g@157@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@172@01 $Ref)) (!
  (=>
    (Set_in n@172@01 g@157@01)
    (and (= (inv@173@01 n@172@01) n@172@01) (img@174@01 n@172@01)))
  :pattern ((Set_in n@172@01 g@157@01))
  :pattern ((inv@173@01 n@172@01))
  :pattern ((img@174@01 n@172@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@174@01 r) (Set_in (inv@173@01 r) g@157@01)) (= (inv@173@01 r) r))
  :pattern ((inv@173@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@177@01  $FVF<next>)))
      (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r)))
    (=>
      (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r))
      (Set_in r ($FVF.domain_next (as sm@177@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@177@01  $FVF<next>))))
  :qid |qp.fvfDomDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@173@01 r) g@157@01) (img@174@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@177@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@177@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@177@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@173@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
    :pattern ((inv@173@01 r))
    :qid |quant-u-157|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@177@01  $FVF<next>)) g@157@01)))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@177@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))))
  $Snap.unit))
; [eval] func_graph($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 2
(declare-const n@178@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@178@01 g@157@01))
(pop) ; 3
(declare-fun inv@179@01 ($Ref) $Ref)
(declare-fun img@180@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@181@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@178@01 $Ref) (n2@178@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@178@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@181@01  $FVF<next>) n1@178@01) n1@178@01))
      (and
        (Set_in n2@178@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@181@01  $FVF<next>) n2@178@01) n2@178@01))
      (= n1@178@01 n2@178@01))
    (= n1@178@01 n2@178@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@157@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@157@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@157@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@179@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@181@01  $FVF<next>) r) r))
  :pattern ((inv@179@01 r))
  :qid |quant-u-163|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@182@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r) (= r (inv@179@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@182@01 r))
    $Perm.No)
  
  :qid |quant-u-165|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@182@01 r) $Perm.No)
  
  :qid |quant-u-166|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r) (= r (inv@179@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@182@01 r)) $Perm.No))
  
  :qid |quant-u-167|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@183@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef121|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@157@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@157@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@157@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@157@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@157@01) (img@180@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@179@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@181@01  $FVF<next>) r) r))
    :pattern ((inv@179@01 r))
    :qid |quant-u-163|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@157@01)))
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@160@01)))))))
  $Snap.unit))
; [eval] (forall v: Ref :: { exists_path($$(g), xe, v) } (v in g) ==> exists_path($$(g), xe, v))
(declare-const v@184@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (v in g) ==> exists_path($$(g), xe, v)
; [eval] (v in g)
(push) ; 3
; [then-branch: 31 | v@184@01 in g@157@01 | live]
; [else-branch: 31 | !(v@184@01 in g@157@01) | live]
(push) ; 4
; [then-branch: 31 | v@184@01 in g@157@01]
(assert (Set_in v@184@01 g@157@01))
; [eval] exists_path($$(g), xe, v)
; [eval] $$(g)
(push) ; 5
(declare-const n@185@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@185@01 g@157@01))
(pop) ; 6
(declare-fun inv@186@01 ($Ref) $Ref)
(declare-fun img@187@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@188@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@188@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@185@01 $Ref) (n2@185@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@185@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@188@01  $FVF<next>) n1@185@01) n1@185@01))
      (and
        (Set_in n2@185@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@188@01  $FVF<next>) n2@185@01) n2@185@01))
      (= n1@185@01 n2@185@01))
    (= n1@185@01 n2@185@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@185@01 $Ref)) (!
  (=>
    (Set_in n@185@01 g@157@01)
    (and (= (inv@186@01 n@185@01) n@185@01) (img@187@01 n@185@01)))
  :pattern ((Set_in n@185@01 g@157@01))
  :pattern ((inv@186@01 n@185@01))
  :pattern ((img@187@01 n@185@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@187@01 r) (Set_in (inv@186@01 r) g@157@01)) (= (inv@186@01 r) r))
  :pattern ((inv@186@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@186@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@188@01  $FVF<next>) r) r))
  :pattern ((inv@186@01 r))
  :qid |quant-u-169|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@189@01 ((r $Ref) (v@184@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r) (= r (inv@186@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@189@01 r v@184@01))
    $Perm.No)
  
  :qid |quant-u-171|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@189@01 r v@184@01) $Perm.No)
  
  :qid |quant-u-172|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r) (= r (inv@186@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@189@01 r v@184@01)) $Perm.No))
  
  :qid |quant-u-173|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@190@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r)))
    (=>
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@188@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((n@185@01 $Ref)) (!
  (=>
    (Set_in n@185@01 g@157@01)
    (and (= (inv@186@01 n@185@01) n@185@01) (img@187@01 n@185@01)))
  :pattern ((Set_in n@185@01 g@157@01))
  :pattern ((inv@186@01 n@185@01))
  :pattern ((img@187@01 n@185@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@187@01 r) (Set_in (inv@186@01 r) g@157@01)) (= (inv@186@01 r) r))
  :pattern ((inv@186@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r)))
    (=>
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@186@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@188@01  $FVF<next>) r) r))
    :pattern ((inv@186@01 r))
    :qid |quant-u-169|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 31 | !(v@184@01 in g@157@01)]
(assert (not (Set_in v@184@01 g@157@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@188@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((n@185@01 $Ref)) (!
  (=>
    (Set_in n@185@01 g@157@01)
    (and (= (inv@186@01 n@185@01) n@185@01) (img@187@01 n@185@01)))
  :pattern ((Set_in n@185@01 g@157@01))
  :pattern ((inv@186@01 n@185@01))
  :pattern ((img@187@01 n@185@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@187@01 r) (Set_in (inv@186@01 r) g@157@01)) (= (inv@186@01 r) r))
  :pattern ((inv@186@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r)))
    (=>
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (=>
  (Set_in v@184@01 g@157@01)
  (and
    (Set_in v@184@01 g@157@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@186@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@188@01  $FVF<next>) r) r))
      :pattern ((inv@186@01 r))
      :qid |quant-u-169|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or (not (Set_in v@184@01 g@157@01)) (Set_in v@184@01 g@157@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@188@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@188@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((n@185@01 $Ref)) (!
  (=>
    (Set_in n@185@01 g@157@01)
    (and (= (inv@186@01 n@185@01) n@185@01) (img@187@01 n@185@01)))
  :pattern ((Set_in n@185@01 g@157@01))
  :pattern ((inv@186@01 n@185@01))
  :pattern ((img@187@01 n@185@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@187@01 r) (Set_in (inv@186@01 r) g@157@01)) (= (inv@186@01 r) r))
  :pattern ((inv@186@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r)))
    (=>
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@186@01 r) g@157@01) (img@187@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v@184@01 $Ref)) (!
  (and
    (=>
      (Set_in v@184@01 g@157@01)
      (and
        (Set_in v@184@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@186@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@188@01  $FVF<next>) r) r))
          :pattern ((inv@186@01 r))
          :qid |quant-u-169|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01)))
    (or (not (Set_in v@184@01 g@157@01)) (Set_in v@184@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01) xe@158@01 v@184@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@392@14@392@90-aux|)))
(assert (forall ((v@184@01 $Ref)) (!
  (=>
    (Set_in v@184@01 g@157@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01) xe@158@01 v@184@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@157@01) xe@158@01 v@184@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@392@14@392@90|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var old_g: Set[Edge]
(declare-const old_g@191@01 Set<Edge>)
; [exec]
; var t: Ref
(declare-const t@192@01 $Ref)
; [exec]
; var x: Ref
(declare-const x@193@01 $Ref)
; [exec]
; old_g := $$(g)
; [eval] $$(g)
(push) ; 3
(declare-const n@194@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@194@01 g@157@01))
(pop) ; 4
(declare-fun inv@195@01 ($Ref) $Ref)
(declare-fun img@196@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@197@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@197@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@197@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@197@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@194@01 $Ref) (n2@194@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@194@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@197@01  $FVF<next>) n1@194@01) n1@194@01))
      (and
        (Set_in n2@194@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@197@01  $FVF<next>) n2@194@01) n2@194@01))
      (= n1@194@01 n2@194@01))
    (= n1@194@01 n2@194@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@157@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@157@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@157@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@195@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@197@01  $FVF<next>) r) r))
  :pattern ((inv@195@01 r))
  :qid |quant-u-175|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@198@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r) (= r (inv@195@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@198@01 r))
    $Perm.No)
  
  :qid |quant-u-177|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@198@01 r) $Perm.No)
  
  :qid |quant-u-178|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r) (= r (inv@195@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@198@01 r)) $Perm.No))
  
  :qid |quant-u-179|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@199@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@199@01  $FVF<next>)))
      (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r))
      (Set_in r ($FVF.domain_next (as sm@199@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@199@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@199@01  $FVF<next>)) g@157@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@197@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@197@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@197@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@157@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@157@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@157@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@199@01  $FVF<next>)))
      (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r))
      (Set_in r ($FVF.domain_next (as sm@199@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@199@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@157@01) (img@196@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@195@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@197@01  $FVF<next>) r) r))
    :pattern ((inv@195@01 r))
    :qid |quant-u-175|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@199@01  $FVF<next>)) g@157@01)))
(declare-const old_g@200@01 Set<Edge>)
(assert (=
  old_g@200@01
  ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@199@01  $FVF<next>)) g@157@01)))
; [exec]
; t := null
; [exec]
; x := xe
; [exec]
; y := null
(declare-const save_g@201@01 Set<Edge>)
(declare-const save_y@202@01 $Ref)
(declare-const save_x@203@01 $Ref)
(declare-const t@204@01 $Ref)
(declare-const y@205@01 $Ref)
(declare-const x@206@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 ($Snap.combine ($Snap.first $t@207@01) ($Snap.second $t@207@01))))
(assert (= ($Snap.first $t@207@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@207@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@207@01))
    ($Snap.second ($Snap.second $t@207@01)))))
(declare-const n$1@208@01 $Ref)
(push) ; 4
; [eval] (n$1 in g)
(assert (Set_in n$1@208@01 g@157@01))
(declare-const sm@209@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@210@01 ($Ref) $Ref)
(declare-fun img@211@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@208@01 $Ref) (n$12@208@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@208@01 g@157@01)
      (Set_in n$12@208@01 g@157@01)
      (= n$11@208@01 n$12@208@01))
    (= n$11@208@01 n$12@208@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@208@01 $Ref)) (!
  (=>
    (Set_in n$1@208@01 g@157@01)
    (and (= (inv@210@01 n$1@208@01) n$1@208@01) (img@211@01 n$1@208@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) n$1@208@01) n$1@208@01))
  :qid |quant-u-181|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)) (= (inv@210@01 r) r))
  :pattern ((inv@210@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@208@01 $Ref)) (!
  (=> (Set_in n$1@208@01 g@157@01) (not (= n$1@208@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) n$1@208@01) n$1@208@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@212@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@210@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
  :pattern ((inv@210@01 r))
  :qid |quant-u-182|)))
(assert (=
  ($Snap.second ($Snap.second $t@207@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@207@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@207@01))) $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@213@01 $Ref)
(push) ; 4
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 5
; [then-branch: 32 | !(n$2@213@01 in g@157@01) | live]
; [else-branch: 32 | n$2@213@01 in g@157@01 | live]
(push) ; 6
; [then-branch: 32 | !(n$2@213@01 in g@157@01)]
(assert (not (Set_in n$2@213@01 g@157@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 32 | n$2@213@01 in g@157@01]
(assert (Set_in n$2@213@01 g@157@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef133|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef134|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))
(push) ; 7
(assert (not (and (img@211@01 n$2@213@01) (Set_in (inv@210@01 n$2@213@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (=>
  (Set_in n$2@213@01 g@157@01)
  (and
    (Set_in n$2@213@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))))
(assert (or (Set_in n$2@213@01 g@157@01) (not (Set_in n$2@213@01 g@157@01))))
(push) ; 5
; [then-branch: 33 | n$2@213@01 in g@157@01 && Lookup(next, sm@212@01, n$2@213@01) != Null | live]
; [else-branch: 33 | !(n$2@213@01 in g@157@01 && Lookup(next, sm@212@01, n$2@213@01) != Null) | live]
(push) ; 6
; [then-branch: 33 | n$2@213@01 in g@157@01 && Lookup(next, sm@212@01, n$2@213@01) != Null]
(assert (and
  (Set_in n$2@213@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef133|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef134|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))
(push) ; 7
(assert (not (and (img@211@01 n$2@213@01) (Set_in (inv@210@01 n$2@213@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 33 | !(n$2@213@01 in g@157@01 && Lookup(next, sm@212@01, n$2@213@01) != Null)]
(assert (not
  (and
    (Set_in n$2@213@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (=>
  (and
    (Set_in n$2@213@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
  (and
    (Set_in n$2@213@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@213@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))))
  (and
    (Set_in n$2@213@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@213@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@213@01 g@157@01)
      (and
        (Set_in n$2@213@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or (Set_in n$2@213@01 g@157@01) (not (Set_in n$2@213@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or
      (not
        (and
          (Set_in n$2@213@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01)
              $Ref.null))))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@213@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@213@01 g@157@01)
      (and
        (Set_in n$2@213@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or (Set_in n$2@213@01 g@157@01) (not (Set_in n$2@213@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or
      (not
        (and
          (Set_in n$2@213@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01)
              $Ref.null))))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))))
  :pattern ((Set_in n$2@213@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@213@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@213@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) g@157@01))
  :pattern ((Set_in n$2@213@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@207@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
  $Snap.unit))
; [eval] x != null ==> (x in g)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x@206@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x@206@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 34 | x@206@01 != Null | live]
; [else-branch: 34 | x@206@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 34 | x@206@01 != Null]
(assert (not (= x@206@01 $Ref.null)))
; [eval] (x in g)
(pop) ; 5
(push) ; 5
; [else-branch: 34 | x@206@01 == Null]
(assert (= x@206@01 $Ref.null))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (= x@206@01 $Ref.null) (not (= x@206@01 $Ref.null))))
(assert (=> (not (= x@206@01 $Ref.null)) (Set_in x@206@01 g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= y@205@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= y@205@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 35 | y@205@01 != Null | live]
; [else-branch: 35 | y@205@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 35 | y@205@01 != Null]
(assert (not (= y@205@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 5
(push) ; 5
; [else-branch: 35 | y@205@01 == Null]
(assert (= y@205@01 $Ref.null))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (= y@205@01 $Ref.null) (not (= y@205@01 $Ref.null))))
(assert (=> (not (= y@205@01 $Ref.null)) (Set_in y@205@01 g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { exists_path($$(g), x, n) } { exists_path($$(g), y, n) } (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n))
(declare-const n@214@01 $Ref)
(push) ; 4
; [eval] (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] (n in g)
(push) ; 5
; [then-branch: 36 | n@214@01 in g@157@01 | live]
; [else-branch: 36 | !(n@214@01 in g@157@01) | live]
(push) ; 6
; [then-branch: 36 | n@214@01 in g@157@01]
(assert (Set_in n@214@01 g@157@01))
; [eval] exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] exists_path($$(g), x, n)
; [eval] $$(g)
(push) ; 7
(declare-const n@215@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@215@01 g@157@01))
(pop) ; 8
(declare-fun inv@216@01 ($Ref) $Ref)
(declare-fun img@217@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@215@01 $Ref) (n2@215@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@215@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n1@215@01) n1@215@01))
      (and
        (Set_in n2@215@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n2@215@01) n2@215@01))
      (= n1@215@01 n2@215@01))
    (= n1@215@01 n2@215@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 g@157@01)
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 g@157@01))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@217@01 r) (Set_in (inv@216@01 r) g@157@01)) (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@216@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
  :pattern ((inv@216@01 r))
  :qid |quant-u-184|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@218@01 ((r $Ref) (n@214@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r) (= r (inv@216@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@218@01 r n@214@01))
    $Perm.No)
  
  :qid |quant-u-186|))))
(check-sat)
; unknown
(pop) ; 8
; 0,54s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@218@01 r n@214@01) $Perm.No)
  
  :qid |quant-u-187|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r) (= r (inv@216@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@218@01 r n@214@01)) $Perm.No))
  
  :qid |quant-u-188|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@219@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r)))
    (=>
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@219@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 g@157@01)
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 g@157@01))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@217@01 r) (Set_in (inv@216@01 r) g@157@01)) (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r)))
    (=>
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@219@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@216@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
    :pattern ((inv@216@01 r))
    :qid |quant-u-184|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 7
; [then-branch: 37 | exists_path[Bool]($$(sm@219@01, g@157@01), x@206@01, n@214@01) | live]
; [else-branch: 37 | !(exists_path[Bool]($$(sm@219@01, g@157@01), x@206@01, n@214@01)) | live]
(push) ; 8
; [then-branch: 37 | exists_path[Bool]($$(sm@219@01, g@157@01), x@206@01, n@214@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
(pop) ; 8
(push) ; 8
; [else-branch: 37 | !(exists_path[Bool]($$(sm@219@01, g@157@01), x@206@01, n@214@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01)))
; [eval] exists_path($$(g), y, n)
; [eval] $$(g)
(push) ; 9
(declare-const n@220@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@220@01 g@157@01))
(pop) ; 10
(declare-fun inv@221@01 ($Ref) $Ref)
(declare-fun img@222@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@223@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@220@01 $Ref) (n2@220@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@220@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) n1@220@01) n1@220@01))
      (and
        (Set_in n2@220@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) n2@220@01) n2@220@01))
      (= n1@220@01 n2@220@01))
    (= n1@220@01 n2@220@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@220@01 $Ref)) (!
  (=>
    (Set_in n@220@01 g@157@01)
    (and (= (inv@221@01 n@220@01) n@220@01) (img@222@01 n@220@01)))
  :pattern ((Set_in n@220@01 g@157@01))
  :pattern ((inv@221@01 n@220@01))
  :pattern ((img@222@01 n@220@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@222@01 r) (Set_in (inv@221@01 r) g@157@01)) (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@221@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
  :pattern ((inv@221@01 r))
  :qid |quant-u-190|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@224@01 ((r $Ref) (n@214@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r) (= r (inv@221@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@224@01 r n@214@01))
    $Perm.No)
  
  :qid |quant-u-192|))))
(check-sat)
; unknown
(pop) ; 10
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@224@01 r n@214@01) $Perm.No)
  
  :qid |quant-u-193|))))
(check-sat)
; unknown
(pop) ; 10
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r) (= r (inv@221@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@224@01 r n@214@01)) $Perm.No))
  
  :qid |quant-u-194|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@225@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r)))
    (=>
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@225@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@220@01 $Ref)) (!
  (=>
    (Set_in n@220@01 g@157@01)
    (and (= (inv@221@01 n@220@01) n@220@01) (img@222@01 n@220@01)))
  :pattern ((Set_in n@220@01 g@157@01))
  :pattern ((inv@221@01 n@220@01))
  :pattern ((img@222@01 n@220@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@222@01 r) (Set_in (inv@221@01 r) g@157@01)) (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r)))
    (=>
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@225@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@221@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
    :pattern ((inv@221@01 r))
    :qid |quant-u-190|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@220@01 $Ref)) (!
  (=>
    (Set_in n@220@01 g@157@01)
    (and (= (inv@221@01 n@220@01) n@220@01) (img@222@01 n@220@01)))
  :pattern ((Set_in n@220@01 g@157@01))
  :pattern ((inv@221@01 n@220@01))
  :pattern ((img@222@01 n@220@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@222@01 r) (Set_in (inv@221@01 r) g@157@01)) (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r)))
    (=>
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@225@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@221@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
      :pattern ((inv@221@01 r))
      :qid |quant-u-190|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01)))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 36 | !(n@214@01 in g@157@01)]
(assert (not (Set_in n@214@01 g@157@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 g@157@01)
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 g@157@01))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@217@01 r) (Set_in (inv@216@01 r) g@157@01)) (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r)))
    (=>
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@219@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@220@01 $Ref)) (!
  (=>
    (Set_in n@220@01 g@157@01)
    (and (= (inv@221@01 n@220@01) n@220@01) (img@222@01 n@220@01)))
  :pattern ((Set_in n@220@01 g@157@01))
  :pattern ((inv@221@01 n@220@01))
  :pattern ((img@222@01 n@220@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@222@01 r) (Set_in (inv@221@01 r) g@157@01)) (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r)))
    (=>
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@225@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (=>
  (Set_in n@214@01 g@157@01)
  (and
    (Set_in n@214@01 g@157@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@216@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
      :pattern ((inv@216@01 r))
      :qid |quant-u-184|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@221@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
          :pattern ((inv@221@01 r))
          :qid |quant-u-190|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01)))))
; Joined path conditions
(assert (or (not (Set_in n@214@01 g@157@01)) (Set_in n@214@01 g@157@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 g@157@01)
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 g@157@01))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@217@01 r) (Set_in (inv@216@01 r) g@157@01)) (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r)))
    (=>
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@219@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@220@01 $Ref)) (!
  (=>
    (Set_in n@220@01 g@157@01)
    (and (= (inv@221@01 n@220@01) n@220@01) (img@222@01 n@220@01)))
  :pattern ((Set_in n@220@01 g@157@01))
  :pattern ((inv@221@01 n@220@01))
  :pattern ((img@222@01 n@220@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@222@01 r) (Set_in (inv@221@01 r) g@157@01)) (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r)))
    (=>
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@225@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n@214@01 g@157@01)
      (and
        (Set_in n@214@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@216@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
          :pattern ((inv@216@01 r))
          :qid |quant-u-184|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@221@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
              :pattern ((inv@221@01 r))
              :qid |quant-u-190|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))))
    (or (not (Set_in n@214@01 g@157@01)) (Set_in n@214@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n@214@01 g@157@01)
      (and
        (Set_in n@214@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@216@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
          :pattern ((inv@216@01 r))
          :qid |quant-u-184|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@221@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
              :pattern ((inv@221@01 r))
              :qid |quant-u-190|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))))
    (or (not (Set_in n@214@01 g@157@01)) (Set_in n@214@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01) y@205@01 n@214@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@214@01 $Ref)) (!
  (=>
    (Set_in n@214@01 g@157@01)
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01) y@205@01 n@214@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01) y@205@01 n@214@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
  $Snap.unit))
; [eval] acyclic_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@226@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@226@01 g@157@01))
(pop) ; 5
(declare-fun inv@227@01 ($Ref) $Ref)
(declare-fun img@228@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@226@01 $Ref) (n2@226@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@226@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n1@226@01) n1@226@01))
      (and
        (Set_in n2@226@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n2@226@01) n2@226@01))
      (= n1@226@01 n2@226@01))
    (= n1@226@01 n2@226@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@226@01 $Ref)) (!
  (=>
    (Set_in n@226@01 g@157@01)
    (and (= (inv@227@01 n@226@01) n@226@01) (img@228@01 n@226@01)))
  :pattern ((Set_in n@226@01 g@157@01))
  :pattern ((inv@227@01 n@226@01))
  :pattern ((img@228@01 n@226@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@228@01 r) (Set_in (inv@227@01 r) g@157@01)) (= (inv@227@01 r) r))
  :pattern ((inv@227@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@227@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
  :pattern ((inv@227@01 r))
  :qid |quant-u-196|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@229@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r) (= r (inv@227@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@229@01 r))
    $Perm.No)
  
  :qid |quant-u-198|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@229@01 r) $Perm.No)
  
  :qid |quant-u-199|))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r) (= r (inv@227@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@229@01 r)) $Perm.No))
  
  :qid |quant-u-200|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@230@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>)))
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r)))
    (=>
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r))
      (Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@230@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@230@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@230@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@230@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@226@01 $Ref)) (!
  (=>
    (Set_in n@226@01 g@157@01)
    (and (= (inv@227@01 n@226@01) n@226@01) (img@228@01 n@226@01)))
  :pattern ((Set_in n@226@01 g@157@01))
  :pattern ((inv@227@01 n@226@01))
  :pattern ((img@228@01 n@226@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@228@01 r) (Set_in (inv@227@01 r) g@157@01)) (= (inv@227@01 r) r))
  :pattern ((inv@227@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>)))
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r)))
    (=>
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r))
      (Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@230@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@230@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@230@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@227@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
    :pattern ((inv@227@01 r))
    :qid |quant-u-196|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@230@01  $FVF<next>)) g@157@01)))
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@230@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
  $Snap.unit))
; [eval] unshared_graph($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 4
(declare-const n@231@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@231@01 g@157@01))
(pop) ; 5
(declare-fun inv@232@01 ($Ref) $Ref)
(declare-fun img@233@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@234@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@231@01 $Ref) (n2@231@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@231@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@234@01  $FVF<next>) n1@231@01) n1@231@01))
      (and
        (Set_in n2@231@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@234@01  $FVF<next>) n2@231@01) n2@231@01))
      (= n1@231@01 n2@231@01))
    (= n1@231@01 n2@231@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@231@01 $Ref)) (!
  (=>
    (Set_in n@231@01 g@157@01)
    (and (= (inv@232@01 n@231@01) n@231@01) (img@233@01 n@231@01)))
  :pattern ((Set_in n@231@01 g@157@01))
  :pattern ((inv@232@01 n@231@01))
  :pattern ((img@233@01 n@231@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@233@01 r) (Set_in (inv@232@01 r) g@157@01)) (= (inv@232@01 r) r))
  :pattern ((inv@232@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@232@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@234@01  $FVF<next>) r) r))
  :pattern ((inv@232@01 r))
  :qid |quant-u-202|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@235@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r) (= r (inv@232@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@235@01 r))
    $Perm.No)
  
  :qid |quant-u-204|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@235@01 r) $Perm.No)
  
  :qid |quant-u-205|))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r) (= r (inv@232@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@235@01 r)) $Perm.No))
  
  :qid |quant-u-206|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@236@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r)))
    (=>
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r))
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((n@231@01 $Ref)) (!
  (=>
    (Set_in n@231@01 g@157@01)
    (and (= (inv@232@01 n@231@01) n@231@01) (img@233@01 n@231@01)))
  :pattern ((Set_in n@231@01 g@157@01))
  :pattern ((inv@232@01 n@231@01))
  :pattern ((img@233@01 n@231@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@233@01 r) (Set_in (inv@232@01 r) g@157@01)) (= (inv@232@01 r) r))
  :pattern ((inv@232@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r)))
    (=>
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r))
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@232@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@234@01  $FVF<next>) r) r))
    :pattern ((inv@232@01 r))
    :qid |quant-u-202|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g@157@01)))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
  $Snap.unit))
; [eval] func_graph($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 4
(declare-const n@237@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@237@01 g@157@01))
(pop) ; 5
(declare-fun inv@238@01 ($Ref) $Ref)
(declare-fun img@239@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@240@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@237@01 $Ref) (n2@237@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@237@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) n1@237@01) n1@237@01))
      (and
        (Set_in n2@237@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) n2@237@01) n2@237@01))
      (= n1@237@01 n2@237@01))
    (= n1@237@01 n2@237@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (Set_in n@237@01 g@157@01)
    (and (= (inv@238@01 n@237@01) n@237@01) (img@239@01 n@237@01)))
  :pattern ((Set_in n@237@01 g@157@01))
  :pattern ((inv@238@01 n@237@01))
  :pattern ((img@239@01 n@237@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@239@01 r) (Set_in (inv@238@01 r) g@157@01)) (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@238@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) r) r))
  :pattern ((inv@238@01 r))
  :qid |quant-u-208|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@241@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r) (= r (inv@238@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@241@01 r))
    $Perm.No)
  
  :qid |quant-u-210|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@241@01 r) $Perm.No)
  
  :qid |quant-u-211|))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r) (= r (inv@238@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@241@01 r)) $Perm.No))
  
  :qid |quant-u-212|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@242@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r)))
    (=>
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (Set_in n@237@01 g@157@01)
    (and (= (inv@238@01 n@237@01) n@237@01) (img@239@01 n@237@01)))
  :pattern ((Set_in n@237@01 g@157@01))
  :pattern ((inv@238@01 n@237@01))
  :pattern ((img@239@01 n@237@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@239@01 r) (Set_in (inv@238@01 r) g@157@01)) (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r)))
    (=>
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@238@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) r) r))
    :pattern ((inv@238@01 r))
    :qid |quant-u-208|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@157@01)))
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
  $Snap.unit))
; [eval] x != xe && x != null ==> !exists_path($$(g), x, xe)
; [eval] x != xe && x != null
; [eval] x != xe
(set-option :timeout 0)
(push) ; 4
; [then-branch: 38 | x@206@01 == xe@158@01 | live]
; [else-branch: 38 | x@206@01 != xe@158@01 | live]
(push) ; 5
; [then-branch: 38 | x@206@01 == xe@158@01]
(assert (= x@206@01 xe@158@01))
(pop) ; 5
(push) ; 5
; [else-branch: 38 | x@206@01 != xe@158@01]
(assert (not (= x@206@01 xe@158@01)))
; [eval] x != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= x@206@01 xe@158@01)) (= x@206@01 xe@158@01)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null))))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; [then-branch: 39 | x@206@01 != xe@158@01 && x@206@01 != Null | live]
; [else-branch: 39 | !(x@206@01 != xe@158@01 && x@206@01 != Null) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 39 | x@206@01 != xe@158@01 && x@206@01 != Null]
(assert (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null))))
; [eval] !exists_path($$(g), x, xe)
; [eval] exists_path($$(g), x, xe)
; [eval] $$(g)
(push) ; 6
(declare-const n@243@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@243@01 g@157@01))
(pop) ; 7
(declare-fun inv@244@01 ($Ref) $Ref)
(declare-fun img@245@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@246@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@243@01 $Ref) (n2@243@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@243@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) n1@243@01) n1@243@01))
      (and
        (Set_in n2@243@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) n2@243@01) n2@243@01))
      (= n1@243@01 n2@243@01))
    (= n1@243@01 n2@243@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@157@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@157@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@157@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@244@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
  :pattern ((inv@244@01 r))
  :qid |quant-u-214|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@247@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r) (= r (inv@244@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@247@01 r))
    $Perm.No)
  
  :qid |quant-u-216|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@247@01 r) $Perm.No)
  
  :qid |quant-u-217|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r) (= r (inv@244@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@247@01 r)) $Perm.No))
  
  :qid |quant-u-218|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@248@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) g@157@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@157@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@157@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@157@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@244@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
    :pattern ((inv@244@01 r))
    :qid |quant-u-214|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) g@157@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 39 | !(x@206@01 != xe@158@01 && x@206@01 != Null)]
(assert (not (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@157@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@157@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@157@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (=>
  (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))
  (and
    (not (= x@206@01 xe@158@01))
    (not (= x@206@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@244@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
      :pattern ((inv@244@01 r))
      :qid |quant-u-214|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or
  (not (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null))))
  (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))))
(assert (=>
  (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) g@157@01) x@206@01 xe@158@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
  $Snap.unit))
; [eval] x != null ==> !edge($$(g), x, y)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x@206@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x@206@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; [then-branch: 40 | x@206@01 != Null | live]
; [else-branch: 40 | x@206@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 40 | x@206@01 != Null]
(assert (not (= x@206@01 $Ref.null)))
; [eval] !edge($$(g), x, y)
; [eval] edge($$(g), x, y)
; [eval] $$(g)
(push) ; 6
(declare-const n@249@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@249@01 g@157@01))
(pop) ; 7
(declare-fun inv@250@01 ($Ref) $Ref)
(declare-fun img@251@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@252@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@249@01 $Ref) (n2@249@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@249@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) n1@249@01) n1@249@01))
      (and
        (Set_in n2@249@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) n2@249@01) n2@249@01))
      (= n1@249@01 n2@249@01))
    (= n1@249@01 n2@249@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@249@01 $Ref)) (!
  (=>
    (Set_in n@249@01 g@157@01)
    (and (= (inv@250@01 n@249@01) n@249@01) (img@251@01 n@249@01)))
  :pattern ((Set_in n@249@01 g@157@01))
  :pattern ((inv@250@01 n@249@01))
  :pattern ((img@251@01 n@249@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@251@01 r) (Set_in (inv@250@01 r) g@157@01)) (= (inv@250@01 r) r))
  :pattern ((inv@250@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@250@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) r) r))
  :pattern ((inv@250@01 r))
  :qid |quant-u-220|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@253@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r) (= r (inv@250@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@253@01 r))
    $Perm.No)
  
  :qid |quant-u-222|))))
(check-sat)
; unknown
(pop) ; 7
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@253@01 r) $Perm.No)
  
  :qid |quant-u-223|))))
(check-sat)
; unknown
(pop) ; 7
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r) (= r (inv@250@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@253@01 r)) $Perm.No))
  
  :qid |quant-u-224|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@254@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r)))
    (=>
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@254@01  $FVF<next>)) g@157@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@249@01 $Ref)) (!
  (=>
    (Set_in n@249@01 g@157@01)
    (and (= (inv@250@01 n@249@01) n@249@01) (img@251@01 n@249@01)))
  :pattern ((Set_in n@249@01 g@157@01))
  :pattern ((inv@250@01 n@249@01))
  :pattern ((img@251@01 n@249@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@251@01 r) (Set_in (inv@250@01 r) g@157@01)) (= (inv@250@01 r) r))
  :pattern ((inv@250@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r)))
    (=>
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@250@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) r) r))
    :pattern ((inv@250@01 r))
    :qid |quant-u-220|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@254@01  $FVF<next>)) g@157@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 40 | x@206@01 == Null]
(assert (= x@206@01 $Ref.null))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@249@01 $Ref)) (!
  (=>
    (Set_in n@249@01 g@157@01)
    (and (= (inv@250@01 n@249@01) n@249@01) (img@251@01 n@249@01)))
  :pattern ((Set_in n@249@01 g@157@01))
  :pattern ((inv@250@01 n@249@01))
  :pattern ((img@251@01 n@249@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@251@01 r) (Set_in (inv@250@01 r) g@157@01)) (= (inv@250@01 r) r))
  :pattern ((inv@250@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r)))
    (=>
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (=>
  (not (= x@206@01 $Ref.null))
  (and
    (not (= x@206@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@250@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) r) r))
      :pattern ((inv@250@01 r))
      :qid |quant-u-220|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@254@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (=>
  (not (= x@206@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@254@01  $FVF<next>)) g@157@01) x@206@01 y@205@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
  $Snap.unit))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2))
(declare-const v1@255@01 $Ref)
(declare-const v2@256@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] exists_path($$(g), x, v1)
; [eval] $$(g)
(push) ; 5
(declare-const n@257@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@257@01 g@157@01))
(pop) ; 6
(declare-fun inv@258@01 ($Ref) $Ref)
(declare-fun img@259@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@260@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@260@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@257@01 $Ref) (n2@257@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@257@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@260@01  $FVF<next>) n1@257@01) n1@257@01))
      (and
        (Set_in n2@257@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@260@01  $FVF<next>) n2@257@01) n2@257@01))
      (= n1@257@01 n2@257@01))
    (= n1@257@01 n2@257@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@157@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@157@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@157@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@258@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@260@01  $FVF<next>) r) r))
  :pattern ((inv@258@01 r))
  :qid |quant-u-226|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@261@01 ((r $Ref) (v1@255@01 $Ref) (v2@256@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r) (= r (inv@258@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@261@01 r v1@255@01 v2@256@01))
    $Perm.No)
  
  :qid |quant-u-228|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@261@01 r v1@255@01 v2@256@01) $Perm.No)
  
  :qid |quant-u-229|))))
(check-sat)
; unknown
(pop) ; 6
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r) (= r (inv@258@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@261@01 r v1@255@01 v2@256@01))
      $Perm.No))
  
  :qid |quant-u-230|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@262@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@262@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@260@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@157@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@157@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@157@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@262@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@258@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@260@01  $FVF<next>) r) r))
    :pattern ((inv@258@01 r))
    :qid |quant-u-226|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 5
; [then-branch: 41 | exists_path[Bool]($$(sm@262@01, g@157@01), x@206@01, v1@255@01) | live]
; [else-branch: 41 | !(exists_path[Bool]($$(sm@262@01, g@157@01), x@206@01, v1@255@01)) | live]
(push) ; 6
; [then-branch: 41 | exists_path[Bool]($$(sm@262@01, g@157@01), x@206@01, v1@255@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01))
; [eval] edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 7
(declare-const n@263@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@263@01 g@157@01))
(pop) ; 8
(declare-fun inv@264@01 ($Ref) $Ref)
(declare-fun img@265@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@266@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@263@01 $Ref) (n2@263@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@263@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) n1@263@01) n1@263@01))
      (and
        (Set_in n2@263@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) n2@263@01) n2@263@01))
      (= n1@263@01 n2@263@01))
    (= n1@263@01 n2@263@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g@157@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g@157@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@265@01 r) (Set_in (inv@264@01 r) g@157@01)) (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@264@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
  :pattern ((inv@264@01 r))
  :qid |quant-u-232|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@267@01 ((r $Ref) (v1@255@01 $Ref) (v2@256@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r) (= r (inv@264@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@267@01 r v1@255@01 v2@256@01))
    $Perm.No)
  
  :qid |quant-u-234|))))
(check-sat)
; unknown
(pop) ; 8
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@267@01 r v1@255@01 v2@256@01) $Perm.No)
  
  :qid |quant-u-235|))))
(check-sat)
; unknown
(pop) ; 8
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r) (= r (inv@264@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@267@01 r v1@255@01 v2@256@01))
      $Perm.No))
  
  :qid |quant-u-236|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@268@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@268@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g@157@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g@157@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@265@01 r) (Set_in (inv@264@01 r) g@157@01)) (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@268@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@264@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
    :pattern ((inv@264@01 r))
    :qid |quant-u-232|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01)))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 41 | !(exists_path[Bool]($$(sm@262@01, g@157@01), x@206@01, v1@255@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g@157@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g@157@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@265@01 r) (Set_in (inv@264@01 r) g@157@01)) (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@268@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@264@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
      :pattern ((inv@264@01 r))
      :qid |quant-u-232|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)))
; [eval] edge(old_g, v1, v2)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@260@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@157@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@157@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@157@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@262@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g@157@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g@157@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@265@01 r) (Set_in (inv@264@01 r) g@157@01)) (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@268@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@258@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@260@01  $FVF<next>) r) r))
  :pattern ((inv@258@01 r))
  :qid |quant-u-226|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@255@01 $Ref) (v2@256@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@264@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
          :pattern ((inv@264@01 r))
          :qid |quant-u-232|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@255@01 v2@256@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@255@01 $Ref) (v2@256@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@264@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
          :pattern ((inv@264@01 r))
          :qid |quant-u-232|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01) v1@255@01 v2@256@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@255@01 $Ref) (v2@256@01 $Ref)) (!
  (=>
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
    (=
      (edge<Bool> old_g@200@01 v1@255@01 v2@256@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01) v1@255@01 v2@256@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@255@01 v2@256@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01) v1@255@01 v2@256@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
  $Snap.unit))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1))
(declare-const v1@269@01 $Ref)
(declare-const v2@270@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] exists_path($$(g), y, v2) && v1 != y
; [eval] exists_path($$(g), y, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@271@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@271@01 g@157@01))
(pop) ; 6
(declare-fun inv@272@01 ($Ref) $Ref)
(declare-fun img@273@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@274@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@271@01 $Ref) (n2@271@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@271@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n1@271@01) n1@271@01))
      (and
        (Set_in n2@271@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n2@271@01) n2@271@01))
      (= n1@271@01 n2@271@01))
    (= n1@271@01 n2@271@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@157@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@157@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@157@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-238|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@275@01 ((r $Ref) (v1@269@01 $Ref) (v2@270@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r) (= r (inv@272@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@275@01 r v1@269@01 v2@270@01))
    $Perm.No)
  
  :qid |quant-u-240|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@275@01 r v1@269@01 v2@270@01) $Perm.No)
  
  :qid |quant-u-241|))))
(check-sat)
; unknown
(pop) ; 6
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r) (= r (inv@272@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@275@01 r v1@269@01 v2@270@01))
      $Perm.No))
  
  :qid |quant-u-242|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@276@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@276@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@157@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@157@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@157@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@276@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@272@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
    :pattern ((inv@272@01 r))
    :qid |quant-u-238|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 5
; [then-branch: 42 | !(exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01)) | live]
; [else-branch: 42 | exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01) | live]
(push) ; 6
; [then-branch: 42 | !(exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 42 | exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01))
; [eval] v1 != y
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01))))
(push) ; 5
; [then-branch: 43 | exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01) && v1@269@01 != y@205@01 | live]
; [else-branch: 43 | !(exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01) && v1@269@01 != y@205@01) | live]
(push) ; 6
; [then-branch: 43 | exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01) && v1@269@01 != y@205@01]
(assert (and
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
  (not (= v1@269@01 y@205@01))))
; [eval] edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v2, v1)
; [eval] $$(g)
(push) ; 7
(declare-const n@277@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@277@01 g@157@01))
(pop) ; 8
(declare-fun inv@278@01 ($Ref) $Ref)
(declare-fun img@279@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@280@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@277@01 $Ref) (n2@277@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@277@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n1@277@01) n1@277@01))
      (and
        (Set_in n2@277@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n2@277@01) n2@277@01))
      (= n1@277@01 n2@277@01))
    (= n1@277@01 n2@277@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@277@01 $Ref)) (!
  (=>
    (Set_in n@277@01 g@157@01)
    (and (= (inv@278@01 n@277@01) n@277@01) (img@279@01 n@277@01)))
  :pattern ((Set_in n@277@01 g@157@01))
  :pattern ((inv@278@01 n@277@01))
  :pattern ((img@279@01 n@277@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@279@01 r) (Set_in (inv@278@01 r) g@157@01)) (= (inv@278@01 r) r))
  :pattern ((inv@278@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@278@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
  :pattern ((inv@278@01 r))
  :qid |quant-u-244|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@281@01 ((r $Ref) (v1@269@01 $Ref) (v2@270@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r) (= r (inv@278@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@281@01 r v1@269@01 v2@270@01))
    $Perm.No)
  
  :qid |quant-u-246|))))
(check-sat)
; unknown
(pop) ; 8
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@281@01 r v1@269@01 v2@270@01) $Perm.No)
  
  :qid |quant-u-247|))))
(check-sat)
; unknown
(pop) ; 8
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r) (= r (inv@278@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@281@01 r v1@269@01 v2@270@01))
      $Perm.No))
  
  :qid |quant-u-248|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@282@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r)))
    (=>
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@277@01 $Ref)) (!
  (=>
    (Set_in n@277@01 g@157@01)
    (and (= (inv@278@01 n@277@01) n@277@01) (img@279@01 n@277@01)))
  :pattern ((Set_in n@277@01 g@157@01))
  :pattern ((inv@278@01 n@277@01))
  :pattern ((img@279@01 n@277@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@279@01 r) (Set_in (inv@278@01 r) g@157@01)) (= (inv@278@01 r) r))
  :pattern ((inv@278@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r)))
    (=>
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@278@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
    :pattern ((inv@278@01 r))
    :qid |quant-u-244|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01)))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 43 | !(exists_path[Bool]($$(sm@276@01, g@157@01), y@205@01, v2@270@01) && v1@269@01 != y@205@01)]
(assert (not
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
    (not (= v1@269@01 y@205@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@277@01 $Ref)) (!
  (=>
    (Set_in n@277@01 g@157@01)
    (and (= (inv@278@01 n@277@01) n@277@01) (img@279@01 n@277@01)))
  :pattern ((Set_in n@277@01 g@157@01))
  :pattern ((inv@278@01 n@277@01))
  :pattern ((img@279@01 n@277@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@279@01 r) (Set_in (inv@278@01 r) g@157@01)) (= (inv@278@01 r) r))
  :pattern ((inv@278@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r)))
    (=>
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (=>
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
    (not (= v1@269@01 y@205@01)))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
    (not (= v1@269@01 y@205@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@278@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
      :pattern ((inv@278@01 r))
      :qid |quant-u-244|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not (= v1@269@01 y@205@01))))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
    (not (= v1@269@01 y@205@01)))))
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@283@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@283@01 g@157@01))
(pop) ; 6
(declare-fun inv@284@01 ($Ref) $Ref)
(declare-fun img@285@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@286@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@283@01 $Ref) (n2@283@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@283@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) n1@283@01) n1@283@01))
      (and
        (Set_in n2@283@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) n2@283@01) n2@283@01))
      (= n1@283@01 n2@283@01))
    (= n1@283@01 n2@283@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@157@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@157@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@157@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@284@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-250|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@287@01 ((r $Ref) (v1@269@01 $Ref) (v2@270@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r) (= r (inv@284@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@287@01 r v1@269@01 v2@270@01))
    $Perm.No)
  
  :qid |quant-u-252|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@287@01 r v1@269@01 v2@270@01) $Perm.No)
  
  :qid |quant-u-253|))))
(check-sat)
; unknown
(pop) ; 6
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r) (= r (inv@284@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@287@01 r v1@269@01 v2@270@01))
      $Perm.No))
  
  :qid |quant-u-254|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@288@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@157@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@157@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@157@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@284@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
    :pattern ((inv@284@01 r))
    :qid |quant-u-250|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@157@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@157@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@157@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@284@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-250|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@157@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@157@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@157@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@276@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@277@01 $Ref)) (!
  (=>
    (Set_in n@277@01 g@157@01)
    (and (= (inv@278@01 n@277@01) n@277@01) (img@279@01 n@277@01)))
  :pattern ((Set_in n@277@01 g@157@01))
  :pattern ((inv@278@01 n@277@01))
  :pattern ((img@279@01 n@277@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@279@01 r) (Set_in (inv@278@01 r) g@157@01)) (= (inv@278@01 r) r))
  :pattern ((inv@278@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r)))
    (=>
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@157@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@157@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@157@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-238|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@284@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-250|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@269@01 $Ref) (v2@270@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@278@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
          :pattern ((inv@278@01 r))
          :qid |quant-u-244|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
          (not (= v1@269@01 y@205@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))))
  :pattern ((edge<Bool> old_g@200@01 v1@269@01 v2@270@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@269@01 $Ref) (v2@270@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@278@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
          :pattern ((inv@278@01 r))
          :qid |quant-u-244|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
          (not (= v1@269@01 y@205@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01) v1@269@01 v2@270@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@269@01 $Ref) (v2@270@01 $Ref)) (!
  (=>
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not (= v1@269@01 y@205@01)))
    (=
      (edge<Bool> old_g@200@01 v1@269@01 v2@270@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01) v2@270@01 v1@269@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@269@01 v2@270@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01) v1@269@01 v2@270@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
  $Snap.unit))
; [eval] y != null && x != null ==> edge(old_g, y, x)
; [eval] y != null && x != null
; [eval] y != null
(set-option :timeout 0)
(push) ; 4
; [then-branch: 44 | y@205@01 == Null | live]
; [else-branch: 44 | y@205@01 != Null | live]
(push) ; 5
; [then-branch: 44 | y@205@01 == Null]
(assert (= y@205@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 44 | y@205@01 != Null]
(assert (not (= y@205@01 $Ref.null)))
; [eval] x != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= y@205@01 $Ref.null)) (= y@205@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null))))))
(check-sat)
; unknown
(pop) ; 5
; 0,03s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null)))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; [then-branch: 45 | y@205@01 != Null && x@206@01 != Null | live]
; [else-branch: 45 | !(y@205@01 != Null && x@206@01 != Null) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 45 | y@205@01 != Null && x@206@01 != Null]
(assert (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null))))
; [eval] edge(old_g, y, x)
(pop) ; 5
(push) ; 5
; [else-branch: 45 | !(y@205@01 != Null && x@206@01 != Null)]
(assert (not (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null))))
  (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null)))))
(assert (=>
  (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null)))
  (edge<Bool> old_g@200@01 y@205@01 x@206@01)))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$1@289@01 $Ref)
(push) ; 4
; [eval] (n$1 in g)
(assert (Set_in n$1@289@01 g@157@01))
(declare-const sm@290@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef192|)))
(pop) ; 4
(declare-fun inv@291@01 ($Ref) $Ref)
(declare-fun img@292@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef192|)))
; Nested auxiliary terms: non-globals
(declare-const sm@293@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@289@01 $Ref) (n$12@289@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@289@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$11@289@01) n$11@289@01))
      (and
        (Set_in n$12@289@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$12@289@01) n$12@289@01))
      (= n$11@289@01 n$12@289@01))
    (= n$11@289@01 n$12@289@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@289@01 $Ref)) (!
  (=>
    (Set_in n$1@289@01 g@157@01)
    (and (= (inv@291@01 n$1@289@01) n$1@289@01) (img@292@01 n$1@289@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@290@01  $FVF<next>) n$1@289@01) n$1@289@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@292@01 r) (Set_in (inv@291@01 r) g@157@01)) (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@291@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@291@01 r))
  :qid |quant-u-256|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@294@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@291@01 r) g@157@01) (img@292@01 r) (= r (inv@291@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@294@01 r))
    $Perm.No)
  
  :qid |quant-u-258|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@291@01 r) g@157@01) (img@292@01 r) (= r (inv@291@01 r)))
    (= (- $Perm.Write (pTaken@294@01 r)) $Perm.No))
  
  :qid |quant-u-259|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@295@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 5
; [then-branch: 46 | !(n$2@295@01 in g@157@01) | live]
; [else-branch: 46 | n$2@295@01 in g@157@01 | live]
(push) ; 6
; [then-branch: 46 | !(n$2@295@01 in g@157@01)]
(assert (not (Set_in n$2@295@01 g@157@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 46 | n$2@295@01 in g@157@01]
(assert (Set_in n$2@295@01 g@157@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
    :qid |qp.fvfValDef193|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef194|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))
(push) ; 7
(assert (not (and (img@164@01 n$2@295@01) (Set_in (inv@163@01 n$2@295@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (=>
  (Set_in n$2@295@01 g@157@01)
  (and
    (Set_in n$2@295@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))))
(assert (or (Set_in n$2@295@01 g@157@01) (not (Set_in n$2@295@01 g@157@01))))
(push) ; 5
; [then-branch: 47 | n$2@295@01 in g@157@01 && Lookup(next, sm@293@01, n$2@295@01) != Null | live]
; [else-branch: 47 | !(n$2@295@01 in g@157@01 && Lookup(next, sm@293@01, n$2@295@01) != Null) | live]
(push) ; 6
; [then-branch: 47 | n$2@295@01 in g@157@01 && Lookup(next, sm@293@01, n$2@295@01) != Null]
(assert (and
  (Set_in n$2@295@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
    :qid |qp.fvfValDef193|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef194|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))
(push) ; 7
(assert (not (and (img@164@01 n$2@295@01) (Set_in (inv@163@01 n$2@295@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 47 | !(n$2@295@01 in g@157@01 && Lookup(next, sm@293@01, n$2@295@01) != Null)]
(assert (not
  (and
    (Set_in n$2@295@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (=>
  (and
    (Set_in n$2@295@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))
  (and
    (Set_in n$2@295@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@295@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null))))
  (and
    (Set_in n$2@295@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@295@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@295@01 g@157@01)
      (and
        (Set_in n$2@295@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01)))
    (or (Set_in n$2@295@01 g@157@01) (not (Set_in n$2@295@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@295@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))
      (and
        (Set_in n$2@295@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01)))
    (or
      (not
        (and
          (Set_in n$2@295@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01)
              $Ref.null))))
      (and
        (Set_in n$2@295@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@295@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@295@01 g@157@01)
      (and
        (Set_in n$2@295@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01)))
    (or (Set_in n$2@295@01 g@157@01) (not (Set_in n$2@295@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@295@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))
      (and
        (Set_in n$2@295@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01)))
    (or
      (not
        (and
          (Set_in n$2@295@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01)
              $Ref.null))))
      (and
        (Set_in n$2@295@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))))
  :pattern ((Set_in n$2@295@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(push) ; 4
(assert (not (forall ((n$2@295@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@295@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) g@157@01))
  :pattern ((Set_in n$2@295@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$2@295@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@295@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) g@157@01))
  :pattern ((Set_in n$2@295@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$2@295@01) n$2@295@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
; [eval] x != null ==> (x in g)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= xe@158@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= xe@158@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 48 | xe@158@01 != Null | live]
; [else-branch: 48 | xe@158@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 48 | xe@158@01 != Null]
(assert (not (= xe@158@01 $Ref.null)))
; [eval] (x in g)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= xe@158@01 $Ref.null)))
(push) ; 4
(assert (not (=> (not (= xe@158@01 $Ref.null)) (Set_in xe@158@01 g@157@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (=> (not (= xe@158@01 $Ref.null)) (Set_in xe@158@01 g@157@01)))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 4
; [then-branch: 49 | False | dead]
; [else-branch: 49 | True | live]
(push) ; 5
; [else-branch: 49 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] (forall n: Ref :: { exists_path($$(g), x, n) } { exists_path($$(g), y, n) } (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n))
(declare-const n@296@01 $Ref)
(push) ; 4
; [eval] (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] (n in g)
(push) ; 5
; [then-branch: 50 | n@296@01 in g@157@01 | live]
; [else-branch: 50 | !(n@296@01 in g@157@01) | live]
(push) ; 6
; [then-branch: 50 | n@296@01 in g@157@01]
(assert (Set_in n@296@01 g@157@01))
; [eval] exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] exists_path($$(g), x, n)
; [eval] $$(g)
(push) ; 7
(declare-const n@297@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@297@01 g@157@01))
(pop) ; 8
(declare-fun inv@298@01 ($Ref) $Ref)
(declare-fun img@299@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@297@01 $Ref) (n2@297@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@297@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n1@297@01) n1@297@01))
      (and
        (Set_in n2@297@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n2@297@01) n2@297@01))
      (= n1@297@01 n2@297@01))
    (= n1@297@01 n2@297@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@297@01 $Ref)) (!
  (=>
    (Set_in n@297@01 g@157@01)
    (and (= (inv@298@01 n@297@01) n@297@01) (img@299@01 n@297@01)))
  :pattern ((Set_in n@297@01 g@157@01))
  :pattern ((inv@298@01 n@297@01))
  :pattern ((img@299@01 n@297@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@299@01 r) (Set_in (inv@298@01 r) g@157@01)) (= (inv@298@01 r) r))
  :pattern ((inv@298@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@298@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@298@01 r))
  :qid |quant-u-261|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@300@01 ((r $Ref) (n@296@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r) (= r (inv@298@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@300@01 r n@296@01))
    $Perm.No)
  
  :qid |quant-u-263|))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@300@01 r n@296@01) $Perm.No)
  
  :qid |quant-u-264|))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r) (= r (inv@298@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@300@01 r n@296@01)) $Perm.No))
  
  :qid |quant-u-265|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@301@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r)))
    (=>
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@301@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((n@297@01 $Ref)) (!
  (=>
    (Set_in n@297@01 g@157@01)
    (and (= (inv@298@01 n@297@01) n@297@01) (img@299@01 n@297@01)))
  :pattern ((Set_in n@297@01 g@157@01))
  :pattern ((inv@298@01 n@297@01))
  :pattern ((img@299@01 n@297@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@299@01 r) (Set_in (inv@298@01 r) g@157@01)) (= (inv@298@01 r) r))
  :pattern ((inv@298@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r)))
    (=>
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@301@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@298@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
    :pattern ((inv@298@01 r))
    :qid |quant-u-261|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 7
; [then-branch: 51 | exists_path[Bool]($$(sm@301@01, g@157@01), xe@158@01, n@296@01) | live]
; [else-branch: 51 | !(exists_path[Bool]($$(sm@301@01, g@157@01), xe@158@01, n@296@01)) | live]
(push) ; 8
; [then-branch: 51 | exists_path[Bool]($$(sm@301@01, g@157@01), xe@158@01, n@296@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
(pop) ; 8
(push) ; 8
; [else-branch: 51 | !(exists_path[Bool]($$(sm@301@01, g@157@01), xe@158@01, n@296@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01)))
; [eval] exists_path($$(g), y, n)
; [eval] $$(g)
(push) ; 9
(declare-const n@302@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@302@01 g@157@01))
(pop) ; 10
(declare-fun inv@303@01 ($Ref) $Ref)
(declare-fun img@304@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@305@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@302@01 $Ref) (n2@302@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@302@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) n1@302@01) n1@302@01))
      (and
        (Set_in n2@302@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) n2@302@01) n2@302@01))
      (= n1@302@01 n2@302@01))
    (= n1@302@01 n2@302@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@302@01 $Ref)) (!
  (=>
    (Set_in n@302@01 g@157@01)
    (and (= (inv@303@01 n@302@01) n@302@01) (img@304@01 n@302@01)))
  :pattern ((Set_in n@302@01 g@157@01))
  :pattern ((inv@303@01 n@302@01))
  :pattern ((img@304@01 n@302@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@304@01 r) (Set_in (inv@303@01 r) g@157@01)) (= (inv@303@01 r) r))
  :pattern ((inv@303@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@303@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) r) r))
  :pattern ((inv@303@01 r))
  :qid |quant-u-267|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@306@01 ((r $Ref) (n@296@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r) (= r (inv@303@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@306@01 r n@296@01))
    $Perm.No)
  
  :qid |quant-u-269|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r) (= r (inv@303@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@306@01 r n@296@01)) $Perm.No))
  
  :qid |quant-u-270|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@307@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r)))
    (=>
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@302@01 $Ref)) (!
  (=>
    (Set_in n@302@01 g@157@01)
    (and (= (inv@303@01 n@302@01) n@302@01) (img@304@01 n@302@01)))
  :pattern ((Set_in n@302@01 g@157@01))
  :pattern ((inv@303@01 n@302@01))
  :pattern ((img@304@01 n@302@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@304@01 r) (Set_in (inv@303@01 r) g@157@01)) (= (inv@303@01 r) r))
  :pattern ((inv@303@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r)))
    (=>
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@303@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) r) r))
    :pattern ((inv@303@01 r))
    :qid |quant-u-267|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@302@01 $Ref)) (!
  (=>
    (Set_in n@302@01 g@157@01)
    (and (= (inv@303@01 n@302@01) n@302@01) (img@304@01 n@302@01)))
  :pattern ((Set_in n@302@01 g@157@01))
  :pattern ((inv@303@01 n@302@01))
  :pattern ((img@304@01 n@302@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@304@01 r) (Set_in (inv@303@01 r) g@157@01)) (= (inv@303@01 r) r))
  :pattern ((inv@303@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r)))
    (=>
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@303@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) r) r))
      :pattern ((inv@303@01 r))
      :qid |quant-u-267|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01)))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 50 | !(n@296@01 in g@157@01)]
(assert (not (Set_in n@296@01 g@157@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((n@297@01 $Ref)) (!
  (=>
    (Set_in n@297@01 g@157@01)
    (and (= (inv@298@01 n@297@01) n@297@01) (img@299@01 n@297@01)))
  :pattern ((Set_in n@297@01 g@157@01))
  :pattern ((inv@298@01 n@297@01))
  :pattern ((img@299@01 n@297@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@299@01 r) (Set_in (inv@298@01 r) g@157@01)) (= (inv@298@01 r) r))
  :pattern ((inv@298@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r)))
    (=>
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@301@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@302@01 $Ref)) (!
  (=>
    (Set_in n@302@01 g@157@01)
    (and (= (inv@303@01 n@302@01) n@302@01) (img@304@01 n@302@01)))
  :pattern ((Set_in n@302@01 g@157@01))
  :pattern ((inv@303@01 n@302@01))
  :pattern ((img@304@01 n@302@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@304@01 r) (Set_in (inv@303@01 r) g@157@01)) (= (inv@303@01 r) r))
  :pattern ((inv@303@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r)))
    (=>
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (=>
  (Set_in n@296@01 g@157@01)
  (and
    (Set_in n@296@01 g@157@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@298@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
      :pattern ((inv@298@01 r))
      :qid |quant-u-261|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@303@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) r) r))
          :pattern ((inv@303@01 r))
          :qid |quant-u-267|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01)))))
; Joined path conditions
(assert (or (not (Set_in n@296@01 g@157@01)) (Set_in n@296@01 g@157@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@297@01 $Ref)) (!
  (=>
    (Set_in n@297@01 g@157@01)
    (and (= (inv@298@01 n@297@01) n@297@01) (img@299@01 n@297@01)))
  :pattern ((Set_in n@297@01 g@157@01))
  :pattern ((inv@298@01 n@297@01))
  :pattern ((img@299@01 n@297@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@299@01 r) (Set_in (inv@298@01 r) g@157@01)) (= (inv@298@01 r) r))
  :pattern ((inv@298@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r)))
    (=>
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@301@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g@157@01) (img@299@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@301@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@301@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@302@01 $Ref)) (!
  (=>
    (Set_in n@302@01 g@157@01)
    (and (= (inv@303@01 n@302@01) n@302@01) (img@304@01 n@302@01)))
  :pattern ((Set_in n@302@01 g@157@01))
  :pattern ((inv@303@01 n@302@01))
  :pattern ((img@304@01 n@302@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@304@01 r) (Set_in (inv@303@01 r) g@157@01)) (= (inv@303@01 r) r))
  :pattern ((inv@303@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r)))
    (=>
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@307@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@303@01 r) g@157@01) (img@304@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@296@01 $Ref)) (!
  (and
    (=>
      (Set_in n@296@01 g@157@01)
      (and
        (Set_in n@296@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@298@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
          :pattern ((inv@298@01 r))
          :qid |quant-u-261|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@303@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) r) r))
              :pattern ((inv@303@01 r))
              :qid |quant-u-267|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))))
    (or (not (Set_in n@296@01 g@157@01)) (Set_in n@296@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@296@01 $Ref)) (!
  (and
    (=>
      (Set_in n@296@01 g@157@01)
      (and
        (Set_in n@296@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@298@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
          :pattern ((inv@298@01 r))
          :qid |quant-u-261|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@303@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@305@01  $FVF<next>) r) r))
              :pattern ((inv@303@01 r))
              :qid |quant-u-267|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))))
    (or (not (Set_in n@296@01 g@157@01)) (Set_in n@296@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01) $Ref.null n@296@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@296@01 $Ref)) (!
  (=>
    (Set_in n@296@01 g@157@01)
    (and
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01)
      (=>
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01) $Ref.null n@296@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147_precondition|)))
(push) ; 4
(assert (not (forall ((n@296@01 $Ref)) (!
  (=>
    (and
      (=>
        (Set_in n@296@01 g@157@01)
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01)
          (=>
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01))))
      (Set_in n@296@01 g@157@01))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01) $Ref.null n@296@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01) $Ref.null n@296@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@296@01 $Ref)) (!
  (=>
    (Set_in n@296@01 g@157@01)
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01) $Ref.null n@296@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@301@01  $FVF<next>)) g@157@01) xe@158@01 n@296@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@307@01  $FVF<next>)) g@157@01) $Ref.null n@296@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|)))
; [eval] acyclic_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@308@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@308@01 g@157@01))
(pop) ; 5
(declare-fun inv@309@01 ($Ref) $Ref)
(declare-fun img@310@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@308@01 $Ref) (n2@308@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@308@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n1@308@01) n1@308@01))
      (and
        (Set_in n2@308@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n2@308@01) n2@308@01))
      (= n1@308@01 n2@308@01))
    (= n1@308@01 n2@308@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@157@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@157@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@157@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@309@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@309@01 r))
  :qid |quant-u-272|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@311@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r) (= r (inv@309@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@311@01 r))
    $Perm.No)
  
  :qid |quant-u-274|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@311@01 r) $Perm.No)
  
  :qid |quant-u-275|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r) (= r (inv@309@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@311@01 r)) $Perm.No))
  
  :qid |quant-u-276|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@312@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))
      (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r))
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>))))
  :qid |qp.fvfDomDef205|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef204|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@157@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@157@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@157@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))
      (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r))
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>))))
  :qid |qp.fvfDomDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@157@01) (img@310@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef204|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@309@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
    :pattern ((inv@309@01 r))
    :qid |quant-u-272|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 4
(assert (not (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@157@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@157@01)))
; [eval] unshared_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@313@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@313@01 g@157@01))
(pop) ; 5
(declare-fun inv@314@01 ($Ref) $Ref)
(declare-fun img@315@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@316@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@316@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@316@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@316@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef207|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@313@01 $Ref) (n2@313@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@313@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@316@01  $FVF<next>) n1@313@01) n1@313@01))
      (and
        (Set_in n2@313@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@316@01  $FVF<next>) n2@313@01) n2@313@01))
      (= n1@313@01 n2@313@01))
    (= n1@313@01 n2@313@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@157@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@157@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@157@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@314@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@316@01  $FVF<next>) r) r))
  :pattern ((inv@314@01 r))
  :qid |quant-u-278|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@317@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r) (= r (inv@314@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@317@01 r))
    $Perm.No)
  
  :qid |quant-u-280|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@317@01 r) $Perm.No)
  
  :qid |quant-u-281|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r) (= r (inv@314@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@317@01 r)) $Perm.No))
  
  :qid |quant-u-282|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@318@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))
      (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r))
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>))))
  :qid |qp.fvfDomDef210|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@318@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@316@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@316@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@316@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef207|)))
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@157@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@157@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@157@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))
      (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r))
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>))))
  :qid |qp.fvfDomDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@157@01) (img@315@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@318@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@314@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@316@01  $FVF<next>) r) r))
    :pattern ((inv@314@01 r))
    :qid |quant-u-278|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 4
(assert (not (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>)) g@157@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>)) g@157@01)))
; [eval] func_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@319@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@319@01 g@157@01))
(pop) ; 5
(declare-fun inv@320@01 ($Ref) $Ref)
(declare-fun img@321@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@322@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@322@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@322@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@322@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@319@01 $Ref) (n2@319@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@319@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@322@01  $FVF<next>) n1@319@01) n1@319@01))
      (and
        (Set_in n2@319@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@322@01  $FVF<next>) n2@319@01) n2@319@01))
      (= n1@319@01 n2@319@01))
    (= n1@319@01 n2@319@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@319@01 $Ref)) (!
  (=>
    (Set_in n@319@01 g@157@01)
    (and (= (inv@320@01 n@319@01) n@319@01) (img@321@01 n@319@01)))
  :pattern ((Set_in n@319@01 g@157@01))
  :pattern ((inv@320@01 n@319@01))
  :pattern ((img@321@01 n@319@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@321@01 r) (Set_in (inv@320@01 r) g@157@01)) (= (inv@320@01 r) r))
  :pattern ((inv@320@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@320@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@322@01  $FVF<next>) r) r))
  :pattern ((inv@320@01 r))
  :qid |quant-u-284|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@323@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r) (= r (inv@320@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@323@01 r))
    $Perm.No)
  
  :qid |quant-u-286|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@323@01 r) $Perm.No)
  
  :qid |quant-u-287|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r) (= r (inv@320@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@323@01 r)) $Perm.No))
  
  :qid |quant-u-288|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@324@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@324@01  $FVF<next>)))
      (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r)))
    (=>
      (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r))
      (Set_in r ($FVF.domain_next (as sm@324@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@324@01  $FVF<next>))))
  :qid |qp.fvfDomDef215|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@324@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@322@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@322@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@322@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((n@319@01 $Ref)) (!
  (=>
    (Set_in n@319@01 g@157@01)
    (and (= (inv@320@01 n@319@01) n@319@01) (img@321@01 n@319@01)))
  :pattern ((Set_in n@319@01 g@157@01))
  :pattern ((inv@320@01 n@319@01))
  :pattern ((img@321@01 n@319@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@321@01 r) (Set_in (inv@320@01 r) g@157@01)) (= (inv@320@01 r) r))
  :pattern ((inv@320@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@324@01  $FVF<next>)))
      (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r)))
    (=>
      (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r))
      (Set_in r ($FVF.domain_next (as sm@324@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@324@01  $FVF<next>))))
  :qid |qp.fvfDomDef215|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@320@01 r) g@157@01) (img@321@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@320@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@322@01  $FVF<next>) r) r))
    :pattern ((inv@320@01 r))
    :qid |quant-u-284|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@324@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 4
(assert (not (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@324@01  $FVF<next>)) g@157@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@324@01  $FVF<next>)) g@157@01)))
; [eval] x != xe && x != null ==> !exists_path($$(g), x, xe)
; [eval] x != xe && x != null
; [eval] x != xe
(push) ; 4
; [then-branch: 52 | False | dead]
; [else-branch: 52 | True | live]
(push) ; 5
; [else-branch: 52 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] x != null ==> !edge($$(g), x, y)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= xe@158@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; [then-branch: 53 | xe@158@01 != Null | live]
; [else-branch: 53 | xe@158@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 53 | xe@158@01 != Null]
; [eval] !edge($$(g), x, y)
; [eval] edge($$(g), x, y)
; [eval] $$(g)
(push) ; 6
(declare-const n@325@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@325@01 g@157@01))
(pop) ; 7
(declare-fun inv@326@01 ($Ref) $Ref)
(declare-fun img@327@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@328@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef217|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@325@01 $Ref) (n2@325@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@325@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n1@325@01) n1@325@01))
      (and
        (Set_in n2@325@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n2@325@01) n2@325@01))
      (= n1@325@01 n2@325@01))
    (= n1@325@01 n2@325@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@325@01 $Ref)) (!
  (=>
    (Set_in n@325@01 g@157@01)
    (and (= (inv@326@01 n@325@01) n@325@01) (img@327@01 n@325@01)))
  :pattern ((Set_in n@325@01 g@157@01))
  :pattern ((inv@326@01 n@325@01))
  :pattern ((img@327@01 n@325@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@327@01 r) (Set_in (inv@326@01 r) g@157@01)) (= (inv@326@01 r) r))
  :pattern ((inv@326@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@326@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
  :pattern ((inv@326@01 r))
  :qid |quant-u-290|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@329@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r) (= r (inv@326@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@329@01 r))
    $Perm.No)
  
  :qid |quant-u-292|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@329@01 r) $Perm.No)
  
  :qid |quant-u-293|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r) (= r (inv@326@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@329@01 r)) $Perm.No))
  
  :qid |quant-u-294|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@330@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>)))
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r)))
    (=>
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r))
      (Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@330@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@330@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@330@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@330@01  $FVF<next>)) g@157@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef217|)))
(assert (forall ((n@325@01 $Ref)) (!
  (=>
    (Set_in n@325@01 g@157@01)
    (and (= (inv@326@01 n@325@01) n@325@01) (img@327@01 n@325@01)))
  :pattern ((Set_in n@325@01 g@157@01))
  :pattern ((inv@326@01 n@325@01))
  :pattern ((img@327@01 n@325@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@327@01 r) (Set_in (inv@326@01 r) g@157@01)) (= (inv@326@01 r) r))
  :pattern ((inv@326@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>)))
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r)))
    (=>
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r))
      (Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@330@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@330@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@330@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@326@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
    :pattern ((inv@326@01 r))
    :qid |quant-u-290|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@330@01  $FVF<next>)) g@157@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef217|)))
(assert (forall ((n@325@01 $Ref)) (!
  (=>
    (Set_in n@325@01 g@157@01)
    (and (= (inv@326@01 n@325@01) n@325@01) (img@327@01 n@325@01)))
  :pattern ((Set_in n@325@01 g@157@01))
  :pattern ((inv@326@01 n@325@01))
  :pattern ((img@327@01 n@325@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@327@01 r) (Set_in (inv@326@01 r) g@157@01)) (= (inv@326@01 r) r))
  :pattern ((inv@326@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>)))
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r)))
    (=>
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r))
      (Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@330@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@326@01 r) g@157@01) (img@327@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@330@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@330@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@330@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (=>
  (not (= xe@158@01 $Ref.null))
  (and
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@326@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
      :pattern ((inv@326@01 r))
      :qid |quant-u-290|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@330@01  $FVF<next>)) g@157@01))))
(set-option :timeout 0)
(push) ; 4
(assert (not (=>
  (not (= xe@158@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@330@01  $FVF<next>)) g@157@01) xe@158@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (not (= xe@158@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@330@01  $FVF<next>)) g@157@01) xe@158@01 $Ref.null))))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2))
(declare-const v1@331@01 $Ref)
(declare-const v2@332@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] exists_path($$(g), x, v1)
; [eval] $$(g)
(push) ; 5
(declare-const n@333@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@333@01 g@157@01))
(pop) ; 6
(declare-fun inv@334@01 ($Ref) $Ref)
(declare-fun img@335@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@336@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@336@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@336@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@336@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef222|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@333@01 $Ref) (n2@333@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@333@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@336@01  $FVF<next>) n1@333@01) n1@333@01))
      (and
        (Set_in n2@333@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@336@01  $FVF<next>) n2@333@01) n2@333@01))
      (= n1@333@01 n2@333@01))
    (= n1@333@01 n2@333@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@333@01 $Ref)) (!
  (=>
    (Set_in n@333@01 g@157@01)
    (and (= (inv@334@01 n@333@01) n@333@01) (img@335@01 n@333@01)))
  :pattern ((Set_in n@333@01 g@157@01))
  :pattern ((inv@334@01 n@333@01))
  :pattern ((img@335@01 n@333@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@335@01 r) (Set_in (inv@334@01 r) g@157@01)) (= (inv@334@01 r) r))
  :pattern ((inv@334@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@334@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@336@01  $FVF<next>) r) r))
  :pattern ((inv@334@01 r))
  :qid |quant-u-296|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@337@01 ((r $Ref) (v1@331@01 $Ref) (v2@332@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r) (= r (inv@334@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@337@01 r v1@331@01 v2@332@01))
    $Perm.No)
  
  :qid |quant-u-298|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@337@01 r v1@331@01 v2@332@01) $Perm.No)
  
  :qid |quant-u-299|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r) (= r (inv@334@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@337@01 r v1@331@01 v2@332@01))
      $Perm.No))
  
  :qid |quant-u-300|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@338@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r)))
    (=>
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@336@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@336@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@336@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef222|)))
(assert (forall ((n@333@01 $Ref)) (!
  (=>
    (Set_in n@333@01 g@157@01)
    (and (= (inv@334@01 n@333@01) n@333@01) (img@335@01 n@333@01)))
  :pattern ((Set_in n@333@01 g@157@01))
  :pattern ((inv@334@01 n@333@01))
  :pattern ((img@335@01 n@333@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@335@01 r) (Set_in (inv@334@01 r) g@157@01)) (= (inv@334@01 r) r))
  :pattern ((inv@334@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r)))
    (=>
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@334@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@336@01  $FVF<next>) r) r))
    :pattern ((inv@334@01 r))
    :qid |quant-u-296|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 5
; [then-branch: 54 | exists_path[Bool]($$(sm@338@01, g@157@01), xe@158@01, v1@331@01) | live]
; [else-branch: 54 | !(exists_path[Bool]($$(sm@338@01, g@157@01), xe@158@01, v1@331@01)) | live]
(push) ; 6
; [then-branch: 54 | exists_path[Bool]($$(sm@338@01, g@157@01), xe@158@01, v1@331@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01))
; [eval] edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 7
(declare-const n@339@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@339@01 g@157@01))
(pop) ; 8
(declare-fun inv@340@01 ($Ref) $Ref)
(declare-fun img@341@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@342@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@342@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@339@01 $Ref) (n2@339@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@339@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) n1@339@01) n1@339@01))
      (and
        (Set_in n2@339@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) n2@339@01) n2@339@01))
      (= n1@339@01 n2@339@01))
    (= n1@339@01 n2@339@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@157@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@157@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@157@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@340@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) r) r))
  :pattern ((inv@340@01 r))
  :qid |quant-u-302|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@343@01 ((r $Ref) (v1@331@01 $Ref) (v2@332@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r) (= r (inv@340@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@343@01 r v1@331@01 v2@332@01))
    $Perm.No)
  
  :qid |quant-u-304|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@343@01 r v1@331@01 v2@332@01) $Perm.No)
  
  :qid |quant-u-305|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r) (= r (inv@340@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@343@01 r v1@331@01 v2@332@01))
      $Perm.No))
  
  :qid |quant-u-306|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@344@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@342@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@157@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@157@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@157@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@340@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) r) r))
    :pattern ((inv@340@01 r))
    :qid |quant-u-302|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01)))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 54 | !(exists_path[Bool]($$(sm@338@01, g@157@01), xe@158@01, v1@331@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@342@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@157@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@157@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@157@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@340@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) r) r))
      :pattern ((inv@340@01 r))
      :qid |quant-u-302|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)))
; [eval] edge(old_g, v1, v2)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@336@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@336@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@336@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef222|)))
(assert (forall ((n@333@01 $Ref)) (!
  (=>
    (Set_in n@333@01 g@157@01)
    (and (= (inv@334@01 n@333@01) n@333@01) (img@335@01 n@333@01)))
  :pattern ((Set_in n@333@01 g@157@01))
  :pattern ((inv@334@01 n@333@01))
  :pattern ((img@335@01 n@333@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@335@01 r) (Set_in (inv@334@01 r) g@157@01)) (= (inv@334@01 r) r))
  :pattern ((inv@334@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r)))
    (=>
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@334@01 r) g@157@01) (img@335@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@342@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@342@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g@157@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g@157@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@341@01 r) (Set_in (inv@340@01 r) g@157@01)) (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g@157@01) (img@341@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@334@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@336@01  $FVF<next>) r) r))
  :pattern ((inv@334@01 r))
  :qid |quant-u-296|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@331@01 $Ref) (v2@332@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@340@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) r) r))
          :pattern ((inv@340@01 r))
          :qid |quant-u-302|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@331@01 v2@332@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@331@01 $Ref) (v2@332@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@340@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@342@01  $FVF<next>) r) r))
          :pattern ((inv@340@01 r))
          :qid |quant-u-302|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01) v1@331@01 v2@332@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@331@01 $Ref) (v2@332@01 $Ref)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@331@01 v2@332@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01) v1@331@01 v2@332@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166_precondition|)))
(push) ; 4
(assert (not (forall ((v1@331@01 $Ref) (v2@332@01 $Ref)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01)))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01))
    (=
      (edge<Bool> old_g@200@01 v1@331@01 v2@332@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01) v1@331@01 v2@332@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@331@01 v2@332@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01) v1@331@01 v2@332@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((v1@331@01 $Ref) (v2@332@01 $Ref)) (!
  (=>
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@157@01) xe@158@01 v1@331@01)
    (=
      (edge<Bool> old_g@200@01 v1@331@01 v2@332@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01) v1@331@01 v2@332@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@331@01 v2@332@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@157@01) v1@331@01 v2@332@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1))
(declare-const v1@345@01 $Ref)
(declare-const v2@346@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] exists_path($$(g), y, v2) && v1 != y
; [eval] exists_path($$(g), y, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@347@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@347@01 g@157@01))
(pop) ; 6
(declare-fun inv@348@01 ($Ref) $Ref)
(declare-fun img@349@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@350@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@347@01 $Ref) (n2@347@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@347@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@350@01  $FVF<next>) n1@347@01) n1@347@01))
      (and
        (Set_in n2@347@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@350@01  $FVF<next>) n2@347@01) n2@347@01))
      (= n1@347@01 n2@347@01))
    (= n1@347@01 n2@347@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@347@01 $Ref)) (!
  (=>
    (Set_in n@347@01 g@157@01)
    (and (= (inv@348@01 n@347@01) n@347@01) (img@349@01 n@347@01)))
  :pattern ((Set_in n@347@01 g@157@01))
  :pattern ((inv@348@01 n@347@01))
  :pattern ((img@349@01 n@347@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@349@01 r) (Set_in (inv@348@01 r) g@157@01)) (= (inv@348@01 r) r))
  :pattern ((inv@348@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@348@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@350@01  $FVF<next>) r) r))
  :pattern ((inv@348@01 r))
  :qid |quant-u-308|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@351@01 ((r $Ref) (v1@345@01 $Ref) (v2@346@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r) (= r (inv@348@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@351@01 r v1@345@01 v2@346@01))
    $Perm.No)
  
  :qid |quant-u-310|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@351@01 r v1@345@01 v2@346@01) $Perm.No)
  
  :qid |quant-u-311|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r) (= r (inv@348@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@351@01 r v1@345@01 v2@346@01))
      $Perm.No))
  
  :qid |quant-u-312|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@352@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>)))
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r)))
    (=>
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r))
      (Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>))))
  :qid |qp.fvfDomDef235|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((n@347@01 $Ref)) (!
  (=>
    (Set_in n@347@01 g@157@01)
    (and (= (inv@348@01 n@347@01) n@347@01) (img@349@01 n@347@01)))
  :pattern ((Set_in n@347@01 g@157@01))
  :pattern ((inv@348@01 n@347@01))
  :pattern ((img@349@01 n@347@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@349@01 r) (Set_in (inv@348@01 r) g@157@01)) (= (inv@348@01 r) r))
  :pattern ((inv@348@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>)))
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r)))
    (=>
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r))
      (Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>))))
  :qid |qp.fvfDomDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@348@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@350@01  $FVF<next>) r) r))
    :pattern ((inv@348@01 r))
    :qid |quant-u-308|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 5
; [then-branch: 55 | !(exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01)) | live]
; [else-branch: 55 | exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01) | live]
(push) ; 6
; [then-branch: 55 | !(exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 55 | exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01))
; [eval] v1 != y
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01))))
(push) ; 5
; [then-branch: 56 | exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01) && v1@345@01 != Null | live]
; [else-branch: 56 | !(exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01) && v1@345@01 != Null) | live]
(push) ; 6
; [then-branch: 56 | exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01) && v1@345@01 != Null]
(assert (and
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
  (not (= v1@345@01 $Ref.null))))
; [eval] edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v2, v1)
; [eval] $$(g)
(push) ; 7
(declare-const n@353@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@353@01 g@157@01))
(pop) ; 8
(declare-fun inv@354@01 ($Ref) $Ref)
(declare-fun img@355@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@356@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@356@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@353@01 $Ref) (n2@353@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@353@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) n1@353@01) n1@353@01))
      (and
        (Set_in n2@353@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) n2@353@01) n2@353@01))
      (= n1@353@01 n2@353@01))
    (= n1@353@01 n2@353@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (Set_in n@353@01 g@157@01)
    (and (= (inv@354@01 n@353@01) n@353@01) (img@355@01 n@353@01)))
  :pattern ((Set_in n@353@01 g@157@01))
  :pattern ((inv@354@01 n@353@01))
  :pattern ((img@355@01 n@353@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@355@01 r) (Set_in (inv@354@01 r) g@157@01)) (= (inv@354@01 r) r))
  :pattern ((inv@354@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@354@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) r) r))
  :pattern ((inv@354@01 r))
  :qid |quant-u-314|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@357@01 ((r $Ref) (v1@345@01 $Ref) (v2@346@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r) (= r (inv@354@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@357@01 r v1@345@01 v2@346@01))
    $Perm.No)
  
  :qid |quant-u-316|))))
(check-sat)
; unknown
(pop) ; 8
; 0,03s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@357@01 r v1@345@01 v2@346@01) $Perm.No)
  
  :qid |quant-u-317|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r) (= r (inv@354@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@357@01 r v1@345@01 v2@346@01))
      $Perm.No))
  
  :qid |quant-u-318|))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@358@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r)))
    (=>
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@356@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (Set_in n@353@01 g@157@01)
    (and (= (inv@354@01 n@353@01) n@353@01) (img@355@01 n@353@01)))
  :pattern ((Set_in n@353@01 g@157@01))
  :pattern ((inv@354@01 n@353@01))
  :pattern ((img@355@01 n@353@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@355@01 r) (Set_in (inv@354@01 r) g@157@01)) (= (inv@354@01 r) r))
  :pattern ((inv@354@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r)))
    (=>
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@354@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) r) r))
    :pattern ((inv@354@01 r))
    :qid |quant-u-314|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01)))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 56 | !(exists_path[Bool]($$(sm@352@01, g@157@01), Null, v2@346@01) && v1@345@01 != Null)]
(assert (not
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
    (not (= v1@345@01 $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@356@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (Set_in n@353@01 g@157@01)
    (and (= (inv@354@01 n@353@01) n@353@01) (img@355@01 n@353@01)))
  :pattern ((Set_in n@353@01 g@157@01))
  :pattern ((inv@354@01 n@353@01))
  :pattern ((img@355@01 n@353@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@355@01 r) (Set_in (inv@354@01 r) g@157@01)) (= (inv@354@01 r) r))
  :pattern ((inv@354@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r)))
    (=>
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (=>
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
    (not (= v1@345@01 $Ref.null)))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
    (not (= v1@345@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@354@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) r) r))
      :pattern ((inv@354@01 r))
      :qid |quant-u-314|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
      (not (= v1@345@01 $Ref.null))))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
    (not (= v1@345@01 $Ref.null)))))
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@359@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@359@01 g@157@01))
(pop) ; 6
(declare-fun inv@360@01 ($Ref) $Ref)
(declare-fun img@361@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@362@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@359@01 $Ref) (n2@359@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@359@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n1@359@01) n1@359@01))
      (and
        (Set_in n2@359@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n2@359@01) n2@359@01))
      (= n1@359@01 n2@359@01))
    (= n1@359@01 n2@359@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@157@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@157@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@157@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@360@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
  :pattern ((inv@360@01 r))
  :qid |quant-u-320|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@363@01 ((r $Ref) (v1@345@01 $Ref) (v2@346@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r) (= r (inv@360@01 r)))
    ($Perm.min
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@363@01 r v1@345@01 v2@346@01))
    $Perm.No)
  
  :qid |quant-u-322|))))
(check-sat)
; unknown
(pop) ; 6
; 0,03s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@363@01 r v1@345@01 v2@346@01) $Perm.No)
  
  :qid |quant-u-323|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r) (= r (inv@360@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@363@01 r v1@345@01 v2@346@01))
      $Perm.No))
  
  :qid |quant-u-324|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@364@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@364@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@157@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@157@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@157@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@364@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@360@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
    :pattern ((inv@360@01 r))
    :qid |quant-u-320|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@157@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@157@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@157@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@364@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@360@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
  :pattern ((inv@360@01 r))
  :qid |quant-u-320|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((n@347@01 $Ref)) (!
  (=>
    (Set_in n@347@01 g@157@01)
    (and (= (inv@348@01 n@347@01) n@347@01) (img@349@01 n@347@01)))
  :pattern ((Set_in n@347@01 g@157@01))
  :pattern ((inv@348@01 n@347@01))
  :pattern ((img@349@01 n@347@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@349@01 r) (Set_in (inv@348@01 r) g@157@01)) (= (inv@348@01 r) r))
  :pattern ((inv@348@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>)))
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r)))
    (=>
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r))
      (Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@352@01  $FVF<next>))))
  :qid |qp.fvfDomDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@348@01 r) g@157@01) (img@349@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@356@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@356@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (Set_in n@353@01 g@157@01)
    (and (= (inv@354@01 n@353@01) n@353@01) (img@355@01 n@353@01)))
  :pattern ((Set_in n@353@01 g@157@01))
  :pattern ((inv@354@01 n@353@01))
  :pattern ((img@355@01 n@353@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@355@01 r) (Set_in (inv@354@01 r) g@157@01)) (= (inv@354@01 r) r))
  :pattern ((inv@354@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r)))
    (=>
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@354@01 r) g@157@01) (img@355@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@157@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@157@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@157@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@364@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@157@01) (img@361@01 r))
      (and (img@164@01 r) (Set_in (inv@163@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@364@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r)))
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@160@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@364@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@348@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@350@01  $FVF<next>) r) r))
  :pattern ((inv@348@01 r))
  :qid |quant-u-308|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@360@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
  :pattern ((inv@360@01 r))
  :qid |quant-u-320|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@345@01 $Ref) (v2@346@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@354@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) r) r))
          :pattern ((inv@354@01 r))
          :qid |quant-u-314|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
          (not (= v1@345@01 $Ref.null))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null)))))
  :pattern ((edge<Bool> old_g@200@01 v1@345@01 v2@346@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@345@01 $Ref) (v2@346@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@354@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@356@01  $FVF<next>) r) r))
          :pattern ((inv@354@01 r))
          :qid |quant-u-314|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
          (not (= v1@345@01 $Ref.null))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null)))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01) v1@345@01 v2@346@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@345@01 $Ref) (v2@346@01 $Ref)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01)
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@345@01 v2@346@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01) v1@345@01 v2@346@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166_precondition|)))
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((v1@345@01 $Ref) (v2@346@01 $Ref)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01)
        (=>
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
            (not (= v1@345@01 $Ref.null)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
        (not (= v1@345@01 $Ref.null))))
    (=
      (edge<Bool> old_g@200@01 v1@345@01 v2@346@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01) v2@346@01 v1@345@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@345@01 v2@346@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01) v1@345@01 v2@346@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(assert (forall ((v1@345@01 $Ref) (v2@346@01 $Ref)) (!
  (=>
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@352@01  $FVF<next>)) g@157@01) $Ref.null v2@346@01)
      (not (= v1@345@01 $Ref.null)))
    (=
      (edge<Bool> old_g@200@01 v1@345@01 v2@346@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@157@01) v2@346@01 v1@345@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@345@01 v2@346@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@364@01  $FVF<next>)) g@157@01) v1@345@01 v2@346@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|)))
; [eval] y != null && x != null ==> edge(old_g, y, x)
; [eval] y != null && x != null
; [eval] y != null
(push) ; 4
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(push) ; 5
; [else-branch: 57 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (forall ((r $Ref)) (!
  (=> (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)) (= (inv@210@01 r) r))
  :pattern ((inv@210@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@212@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@212@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 g@157@01)
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 g@157@01))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@217@01 r) (Set_in (inv@216@01 r) g@157@01)) (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r)))
    (=>
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@219@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@216@01 r) g@157@01) (img@217@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@219@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@219@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@220@01 $Ref)) (!
  (=>
    (Set_in n@220@01 g@157@01)
    (and (= (inv@221@01 n@220@01) n@220@01) (img@222@01 n@220@01)))
  :pattern ((Set_in n@220@01 g@157@01))
  :pattern ((inv@221@01 n@220@01))
  :pattern ((img@222@01 n@220@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@222@01 r) (Set_in (inv@221@01 r) g@157@01)) (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r)))
    (=>
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@225@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@221@01 r) g@157@01) (img@222@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@225@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@225@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@226@01 $Ref)) (!
  (=>
    (Set_in n@226@01 g@157@01)
    (and (= (inv@227@01 n@226@01) n@226@01) (img@228@01 n@226@01)))
  :pattern ((Set_in n@226@01 g@157@01))
  :pattern ((inv@227@01 n@226@01))
  :pattern ((img@228@01 n@226@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@228@01 r) (Set_in (inv@227@01 r) g@157@01)) (= (inv@227@01 r) r))
  :pattern ((inv@227@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>)))
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r)))
    (=>
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r))
      (Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@230@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@227@01 r) g@157@01) (img@228@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@230@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@230@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@230@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((n@231@01 $Ref)) (!
  (=>
    (Set_in n@231@01 g@157@01)
    (and (= (inv@232@01 n@231@01) n@231@01) (img@233@01 n@231@01)))
  :pattern ((Set_in n@231@01 g@157@01))
  :pattern ((inv@232@01 n@231@01))
  :pattern ((img@233@01 n@231@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@233@01 r) (Set_in (inv@232@01 r) g@157@01)) (= (inv@232@01 r) r))
  :pattern ((inv@232@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r)))
    (=>
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r))
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g@157@01) (img@233@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (Set_in n@237@01 g@157@01)
    (and (= (inv@238@01 n@237@01) n@237@01) (img@239@01 n@237@01)))
  :pattern ((Set_in n@237@01 g@157@01))
  :pattern ((inv@238@01 n@237@01))
  :pattern ((img@239@01 n@237@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@239@01 r) (Set_in (inv@238@01 r) g@157@01)) (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r)))
    (=>
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g@157@01) (img@239@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@157@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@157@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@157@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@157@01) (img@245@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@249@01 $Ref)) (!
  (=>
    (Set_in n@249@01 g@157@01)
    (and (= (inv@250@01 n@249@01) n@249@01) (img@251@01 n@249@01)))
  :pattern ((Set_in n@249@01 g@157@01))
  :pattern ((inv@250@01 n@249@01))
  :pattern ((img@251@01 n@249@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@251@01 r) (Set_in (inv@250@01 r) g@157@01)) (= (inv@250@01 r) r))
  :pattern ((inv@250@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r)))
    (=>
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@254@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@250@01 r) g@157@01) (img@251@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@260@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@157@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@157@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@157@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@262@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@157@01) (img@259@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@262@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@262@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g@157@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g@157@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@265@01 r) (Set_in (inv@264@01 r) g@157@01)) (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@268@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g@157@01) (img@265@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@268@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@268@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@157@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@157@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@157@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@276@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@157@01) (img@273@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@276@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@276@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@277@01 $Ref)) (!
  (=>
    (Set_in n@277@01 g@157@01)
    (and (= (inv@278@01 n@277@01) n@277@01) (img@279@01 n@277@01)))
  :pattern ((Set_in n@277@01 g@157@01))
  :pattern ((inv@278@01 n@277@01))
  :pattern ((img@279@01 n@277@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@279@01 r) (Set_in (inv@278@01 r) g@157@01)) (= (inv@278@01 r) r))
  :pattern ((inv@278@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r)))
    (=>
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@278@01 r) g@157@01) (img@279@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@157@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@157@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@157@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@288@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@157@01) (img@285@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (forall ((n$1@208@01 $Ref)) (!
  (=>
    (Set_in n$1@208@01 g@157@01)
    (and (= (inv@210@01 n$1@208@01) n$1@208@01) (img@211@01 n$1@208@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) n$1@208@01) n$1@208@01))
  :qid |quant-u-181|)))
(assert (forall ((n$1@208@01 $Ref)) (!
  (=> (Set_in n$1@208@01 g@157@01) (not (= n$1@208@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) n$1@208@01) n$1@208@01))
  :qid |next-permImpliesNonNull|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@210@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
  :pattern ((inv@210@01 r))
  :qid |quant-u-182|)))
(assert (=
  ($Snap.second ($Snap.second $t@207@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@207@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@207@01))) $Snap.unit))
(assert (forall ((n$2@213@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@213@01 g@157@01)
      (and
        (Set_in n$2@213@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or (Set_in n$2@213@01 g@157@01) (not (Set_in n$2@213@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or
      (not
        (and
          (Set_in n$2@213@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01)
              $Ref.null))))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@213@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@213@01 g@157@01)
      (and
        (Set_in n$2@213@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or (Set_in n$2@213@01 g@157@01) (not (Set_in n$2@213@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01)))
    (or
      (not
        (and
          (Set_in n$2@213@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01)
              $Ref.null))))
      (and
        (Set_in n$2@213@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))))
  :pattern ((Set_in n$2@213@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@213@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@213@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) g@157@01))
  :pattern ((Set_in n$2@213@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) n$2@213@01) n$2@213@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@207@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
  $Snap.unit))
(assert (or (= x@206@01 $Ref.null) (not (= x@206@01 $Ref.null))))
(assert (=> (not (= x@206@01 $Ref.null)) (Set_in x@206@01 g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  $Snap.unit))
(assert (or (= y@205@01 $Ref.null) (not (= y@205@01 $Ref.null))))
(assert (=> (not (= y@205@01 $Ref.null)) (Set_in y@205@01 g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
  $Snap.unit))
(assert (forall ((n@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n@214@01 g@157@01)
      (and
        (Set_in n@214@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@216@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
          :pattern ((inv@216@01 r))
          :qid |quant-u-184|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@221@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
              :pattern ((inv@221@01 r))
              :qid |quant-u-190|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))))
    (or (not (Set_in n@214@01 g@157@01)) (Set_in n@214@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n@214@01 g@157@01)
      (and
        (Set_in n@214@01 g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@216@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
          :pattern ((inv@216@01 r))
          :qid |quant-u-184|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@221@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@223@01  $FVF<next>) r) r))
              :pattern ((inv@221@01 r))
              :qid |quant-u-190|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))))
    (or (not (Set_in n@214@01 g@157@01)) (Set_in n@214@01 g@157@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01) y@205@01 n@214@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@214@01 $Ref)) (!
  (=>
    (Set_in n@214@01 g@157@01)
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01) y@205@01 n@214@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@219@01  $FVF<next>)) g@157@01) x@206@01 n@214@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@225@01  $FVF<next>)) g@157@01) y@205@01 n@214@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@227@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@212@01  $FVF<next>) r) r))
  :pattern ((inv@227@01 r))
  :qid |quant-u-196|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@230@01  $FVF<next>)) g@157@01))
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@230@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@232@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@234@01  $FVF<next>) r) r))
  :pattern ((inv@232@01 r))
  :qid |quant-u-202|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g@157@01))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@238@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) r) r))
  :pattern ((inv@238@01 r))
  :qid |quant-u-208|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@157@01))
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@157@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
  $Snap.unit))
(assert (or (not (= x@206@01 xe@158@01)) (= x@206@01 xe@158@01)))
(assert (=>
  (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))
  (and
    (not (= x@206@01 xe@158@01))
    (not (= x@206@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@244@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
      :pattern ((inv@244@01 r))
      :qid |quant-u-214|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) g@157@01))))
(assert (or
  (not (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null))))
  (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))))
(assert (=>
  (and (not (= x@206@01 xe@158@01)) (not (= x@206@01 $Ref.null)))
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) g@157@01) x@206@01 xe@158@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
  $Snap.unit))
(assert (=>
  (not (= x@206@01 $Ref.null))
  (and
    (not (= x@206@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@250@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) r) r))
      :pattern ((inv@250@01 r))
      :qid |quant-u-220|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@254@01  $FVF<next>)) g@157@01))))
(assert (=>
  (not (= x@206@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@254@01  $FVF<next>)) g@157@01) x@206@01 y@205@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@258@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@260@01  $FVF<next>) r) r))
  :pattern ((inv@258@01 r))
  :qid |quant-u-226|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01))
(assert (forall ((v1@255@01 $Ref) (v2@256@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@264@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
          :pattern ((inv@264@01 r))
          :qid |quant-u-232|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@255@01 v2@256@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@255@01 $Ref) (v2@256@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@264@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
          :pattern ((inv@264@01 r))
          :qid |quant-u-232|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01) v1@255@01 v2@256@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@255@01 $Ref) (v2@256@01 $Ref)) (!
  (=>
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@262@01  $FVF<next>)) g@157@01) x@206@01 v1@255@01)
    (=
      (edge<Bool> old_g@200@01 v1@255@01 v2@256@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01) v1@255@01 v2@256@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@255@01 v2@256@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@268@01  $FVF<next>)) g@157@01) v1@255@01 v2@256@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-238|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@284@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-250|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01))
(assert (forall ((v1@269@01 $Ref) (v2@270@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@278@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
          :pattern ((inv@278@01 r))
          :qid |quant-u-244|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
          (not (= v1@269@01 y@205@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))))
  :pattern ((edge<Bool> old_g@200@01 v1@269@01 v2@270@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@269@01 $Ref) (v2@270@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@278@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
          :pattern ((inv@278@01 r))
          :qid |quant-u-244|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
          (not (= v1@269@01 y@205@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
        (not (= v1@269@01 y@205@01)))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01) v1@269@01 v2@270@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@269@01 $Ref) (v2@270@01 $Ref)) (!
  (=>
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@276@01  $FVF<next>)) g@157@01) y@205@01 v2@270@01)
      (not (= v1@269@01 y@205@01)))
    (=
      (edge<Bool> old_g@200@01 v1@269@01 v2@270@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@157@01) v2@270@01 v1@269@01)))
  :pattern ((edge<Bool> old_g@200@01 v1@269@01 v2@270@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@288@01  $FVF<next>)) g@157@01) v1@269@01 v2@270@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))))))
  $Snap.unit))
(assert (or (not (= y@205@01 $Ref.null)) (= y@205@01 $Ref.null)))
(assert (or
  (not (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null))))
  (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null)))))
(assert (=>
  (and (not (= y@205@01 $Ref.null)) (not (= x@206@01 $Ref.null)))
  (edge<Bool> old_g@200@01 y@205@01 x@206@01)))
(assert (= $t@207@01 ($Snap.combine ($Snap.first $t@207@01) ($Snap.second $t@207@01))))
(assert (= ($Snap.first $t@207@01) $Snap.unit))
(assert (=
  ($Snap.second $t@207@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@207@01))
    ($Snap.second ($Snap.second $t@207@01)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] x != null
(pop) ; 5
(push) ; 5
; [eval] !(x != null)
; [eval] x != null
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] x != null
(push) ; 5
(set-option :timeout 10)
(assert (not (= x@206@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x@206@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; [then-branch: 58 | x@206@01 != Null | live]
; [else-branch: 58 | x@206@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 58 | x@206@01 != Null]
(assert (not (= x@206@01 $Ref.null)))
; [exec]
; var save_g: Set[Edge]
(declare-const save_g@365@01 Set<Edge>)
; [exec]
; var save_y: Ref
(declare-const save_y@366@01 $Ref)
; [exec]
; var save_x: Ref
(declare-const save_x@367@01 $Ref)
; [exec]
; save_g := $$(g)
; [eval] $$(g)
(push) ; 6
(declare-const n@368@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@368@01 g@157@01))
(pop) ; 7
(declare-fun inv@369@01 ($Ref) $Ref)
(declare-fun img@370@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@371@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@371@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@371@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@371@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef247|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@368@01 $Ref) (n2@368@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@368@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@371@01  $FVF<next>) n1@368@01) n1@368@01))
      (and
        (Set_in n2@368@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@371@01  $FVF<next>) n2@368@01) n2@368@01))
      (= n1@368@01 n2@368@01))
    (= n1@368@01 n2@368@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@368@01 $Ref)) (!
  (=>
    (Set_in n@368@01 g@157@01)
    (and (= (inv@369@01 n@368@01) n@368@01) (img@370@01 n@368@01)))
  :pattern ((Set_in n@368@01 g@157@01))
  :pattern ((inv@369@01 n@368@01))
  :pattern ((img@370@01 n@368@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@370@01 r) (Set_in (inv@369@01 r) g@157@01)) (= (inv@369@01 r) r))
  :pattern ((inv@369@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@369@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@371@01  $FVF<next>) r) r))
  :pattern ((inv@369@01 r))
  :qid |quant-u-326|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@372@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r) (= r (inv@369@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@372@01 r))
    $Perm.No)
  
  :qid |quant-u-328|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@372@01 r) $Perm.No)
  
  :qid |quant-u-329|))))
(check-sat)
; unknown
(pop) ; 7
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r) (= r (inv@369@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@372@01 r)) $Perm.No))
  
  :qid |quant-u-330|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@373@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@373@01  $FVF<next>)))
      (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r)))
    (=>
      (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r))
      (Set_in r ($FVF.domain_next (as sm@373@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@373@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@373@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@373@01  $FVF<next>)) g@157@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@371@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@371@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@371@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (forall ((n@368@01 $Ref)) (!
  (=>
    (Set_in n@368@01 g@157@01)
    (and (= (inv@369@01 n@368@01) n@368@01) (img@370@01 n@368@01)))
  :pattern ((Set_in n@368@01 g@157@01))
  :pattern ((inv@369@01 n@368@01))
  :pattern ((img@370@01 n@368@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@370@01 r) (Set_in (inv@369@01 r) g@157@01)) (= (inv@369@01 r) r))
  :pattern ((inv@369@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@373@01  $FVF<next>)))
      (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r)))
    (=>
      (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r))
      (Set_in r ($FVF.domain_next (as sm@373@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@373@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@369@01 r) g@157@01) (img@370@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@373@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@369@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@371@01  $FVF<next>) r) r))
    :pattern ((inv@369@01 r))
    :qid |quant-u-326|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@373@01  $FVF<next>)) g@157@01)))
(declare-const save_g@374@01 Set<Edge>)
(assert (=
  save_g@374@01
  ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@373@01  $FVF<next>)) g@157@01)))
; [exec]
; save_y := y
; [exec]
; save_x := x
; [exec]
; t := x.next
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01) x@206@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(declare-const t@375@01 $Ref)
(assert (=
  t@375@01
  ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01)))
; [exec]
; unlink(g, x)
; [eval] (x in g)
(push) ; 6
(assert (not (Set_in x@206@01 g@157@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (Set_in x@206@01 g@157@01))
; [eval] !((null in g))
; [eval] (null in g)
; [eval] (x in g)
(declare-const sm@376@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) x@206@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@377@01 ((r $Ref)) $Perm
  (ite
    (= r x@206@01)
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@377@01 r))
    $Perm.No)
  
  :qid |quant-u-332|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@377@01 r) $Perm.No)
  
  :qid |quant-u-333|))))
(check-sat)
; unknown
(pop) ; 6
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r x@206@01) (= (- $Perm.Write (pTaken@377@01 r)) $Perm.No))
  
  :qid |quant-u-334|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))
  (=
    ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01)
    ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01))))
(declare-const n@378@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 7
; [then-branch: 59 | !(n@378@01 in g@157@01) | live]
; [else-branch: 59 | n@378@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 59 | !(n@378@01 in g@157@01)]
(assert (not (Set_in n@378@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 59 | n@378@01 in g@157@01]
(assert (Set_in n@378@01 g@157@01))
; [eval] n != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@378@01 g@157@01) (not (Set_in n@378@01 g@157@01))))
(assert (and (Set_in n@378@01 g@157@01) (not (= n@378@01 x@206@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@379@01 ($Ref) $Ref)
(declare-fun img@380@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@378@01 $Ref)) (!
  (=>
    (and (Set_in n@378@01 g@157@01) (not (= n@378@01 x@206@01)))
    (or (Set_in n@378@01 g@157@01) (not (Set_in n@378@01 g@157@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n@378@01) n@378@01))
  :qid |next-aux|)))
(declare-const sm@381@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- $Perm.Write (pTaken@377@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@381@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@381@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@381@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef254|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@378@01 $Ref) (n2@378@01 $Ref)) (!
  (=>
    (and
      (and
        (and (Set_in n1@378@01 g@157@01) (not (= n1@378@01 x@206@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@381@01  $FVF<next>) n1@378@01) n1@378@01))
      (and
        (and (Set_in n2@378@01 g@157@01) (not (= n2@378@01 x@206@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@381@01  $FVF<next>) n2@378@01) n2@378@01))
      (= n1@378@01 n2@378@01))
    (= n1@378@01 n2@378@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@378@01 $Ref)) (!
  (=>
    (and (Set_in n@378@01 g@157@01) (not (= n@378@01 x@206@01)))
    (and (= (inv@379@01 n@378@01) n@378@01) (img@380@01 n@378@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n@378@01) n@378@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@380@01 r)
      (and (Set_in (inv@379@01 r) g@157@01) (not (= (inv@379@01 r) x@206@01))))
    (= (inv@379@01 r) r))
  :pattern ((inv@379@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@379@01 r) g@157@01) (not (= (inv@379@01 r) x@206@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@381@01  $FVF<next>) r) r))
  :pattern ((inv@379@01 r))
  :qid |quant-u-336|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@382@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (Set_in (inv@379@01 r) g@157@01) (not (= (inv@379@01 r) x@206@01)))
      (img@380@01 r)
      (= r (inv@379@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- $Perm.Write (pTaken@377@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- $Perm.Write (pTaken@377@01 r))
        $Perm.No)
      (pTaken@382@01 r))
    $Perm.No)
  
  :qid |quant-u-338|))))
(check-sat)
; unknown
(pop) ; 6
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@382@01 r) $Perm.No)
  
  :qid |quant-u-339|))))
(check-sat)
; unknown
(pop) ; 6
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@379@01 r) g@157@01) (not (= (inv@379@01 r) x@206@01)))
      (img@380@01 r)
      (= r (inv@379@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@382@01 r)) $Perm.No))
  
  :qid |quant-u-340|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@383@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 7
; [then-branch: 60 | !(n$0@383@01 in g@157@01) | live]
; [else-branch: 60 | n$0@383@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 60 | !(n$0@383@01 in g@157@01)]
(assert (not (Set_in n$0@383@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 60 | n$0@383@01 in g@157@01]
(assert (Set_in n$0@383@01 g@157@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))
(push) ; 9
(assert (not (and (img@211@01 n$0@383@01) (Set_in (inv@210@01 n$0@383@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert (=>
  (Set_in n$0@383@01 g@157@01)
  (and
    (Set_in n$0@383@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))))
(assert (or (Set_in n$0@383@01 g@157@01) (not (Set_in n$0@383@01 g@157@01))))
(push) ; 7
; [then-branch: 61 | n$0@383@01 in g@157@01 && Lookup(next, sm@376@01, n$0@383@01) != Null | live]
; [else-branch: 61 | !(n$0@383@01 in g@157@01 && Lookup(next, sm@376@01, n$0@383@01) != Null) | live]
(push) ; 8
; [then-branch: 61 | n$0@383@01 in g@157@01 && Lookup(next, sm@376@01, n$0@383@01) != Null]
(assert (and
  (Set_in n$0@383@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))
(push) ; 9
(assert (not (and (img@211@01 n$0@383@01) (Set_in (inv@210@01 n$0@383@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 61 | !(n$0@383@01 in g@157@01 && Lookup(next, sm@376@01, n$0@383@01) != Null)]
(assert (not
  (and
    (Set_in n$0@383@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert (=>
  (and
    (Set_in n$0@383@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))
  (and
    (Set_in n$0@383@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@383@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null))))
  (and
    (Set_in n$0@383@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@383@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@383@01 g@157@01)
      (and
        (Set_in n$0@383@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01)))
    (or (Set_in n$0@383@01 g@157@01) (not (Set_in n$0@383@01 g@157@01)))
    (=>
      (and
        (Set_in n$0@383@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))
      (and
        (Set_in n$0@383@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01)))
    (or
      (not
        (and
          (Set_in n$0@383@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01)
              $Ref.null))))
      (and
        (Set_in n$0@383@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(assert (forall ((n$0@383@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@383@01 g@157@01)
      (and
        (Set_in n$0@383@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01)))
    (or (Set_in n$0@383@01 g@157@01) (not (Set_in n$0@383@01 g@157@01)))
    (=>
      (and
        (Set_in n$0@383@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))
      (and
        (Set_in n$0@383@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01)))
    (or
      (not
        (and
          (Set_in n$0@383@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01)
              $Ref.null))))
      (and
        (Set_in n$0@383@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))))
  :pattern ((Set_in n$0@383@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(push) ; 6
(assert (not (forall ((n$0@383@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@383@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) g@157@01))
  :pattern ((Set_in n$0@383@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$0@383@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@383@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) g@157@01))
  :pattern ((Set_in n$0@383@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n$0@383@01) n$0@383@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34|)))
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 ($Snap.combine ($Snap.first $t@384@01) ($Snap.second $t@384@01))))
(assert (= ($Snap.first $t@384@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@384@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@384@01))
    ($Snap.second ($Snap.second $t@384@01)))))
(assert (= ($Snap.first ($Snap.second $t@384@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@384@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@384@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))
(declare-const sm@385@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@385@01  $FVF<next>) x@206@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@384@01))))))
(declare-const sm@386@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@386@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@386@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@386@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@386@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern (($FVF.lookup_next (as sm@386@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@386@01  $FVF<next>) x@206@01) x@206@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@384@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))
(declare-const n$1@387@01 $Ref)
(push) ; 6
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 7
; [then-branch: 62 | !(n$1@387@01 in g@157@01) | live]
; [else-branch: 62 | n$1@387@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 62 | !(n$1@387@01 in g@157@01)]
(assert (not (Set_in n$1@387@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 62 | n$1@387@01 in g@157@01]
(assert (Set_in n$1@387@01 g@157@01))
; [eval] n$1 != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@387@01 g@157@01) (not (Set_in n$1@387@01 g@157@01))))
(assert (and (Set_in n$1@387@01 g@157@01) (not (= n$1@387@01 x@206@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@388@01 ($Ref) $Ref)
(declare-fun img@389@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@387@01 $Ref)) (!
  (=>
    (and (Set_in n$1@387@01 g@157@01) (not (= n$1@387@01 x@206@01)))
    (or (Set_in n$1@387@01 g@157@01) (not (Set_in n$1@387@01 g@157@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) n$1@387@01) n$1@387@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n$11@387@01 $Ref) (n$12@387@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@387@01 g@157@01) (not (= n$11@387@01 x@206@01)))
      (and (Set_in n$12@387@01 g@157@01) (not (= n$12@387@01 x@206@01)))
      (= n$11@387@01 n$12@387@01))
    (= n$11@387@01 n$12@387@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@387@01 $Ref)) (!
  (=>
    (and (Set_in n$1@387@01 g@157@01) (not (= n$1@387@01 x@206@01)))
    (and (= (inv@388@01 n$1@387@01) n$1@387@01) (img@389@01 n$1@387@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) n$1@387@01) n$1@387@01))
  :qid |quant-u-342|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@387@01 $Ref)) (!
  (=>
    (and (Set_in n$1@387@01 g@157@01) (not (= n$1@387@01 x@206@01)))
    (not (= n$1@387@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) n$1@387@01) n$1@387@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@387@01 n$1@208@01)
    (=
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))))
  
  :qid |quant-u-343|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
(declare-const sm@390@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
  :pattern ((inv@388@01 r))
  :qid |quant-u-344|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@391@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 7
; [then-branch: 63 | !(n$2@391@01 in g@157@01) | live]
; [else-branch: 63 | n$2@391@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 63 | !(n$2@391@01 in g@157@01)]
(assert (not (Set_in n$2@391@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 63 | n$2@391@01 in g@157@01]
(assert (Set_in n$2@391@01 g@157@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 n$2@391@01) (Set_in (inv@210@01 n$2@391@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 n$2@391@01)) (pTaken@382@01 n$2@391@01))
        $Perm.No)
      (ite (= n$2@391@01 x@206@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@389@01 n$2@391@01)
        (and
          (Set_in (inv@388@01 n$2@391@01) g@157@01)
          (not (= (inv@388@01 n$2@391@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (Set_in n$2@391@01 g@157@01)
  (and
    (Set_in n$2@391@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01))))
(assert (or (Set_in n$2@391@01 g@157@01) (not (Set_in n$2@391@01 g@157@01))))
(push) ; 7
; [then-branch: 64 | n$2@391@01 in g@157@01 && Lookup(next, sm@390@01, n$2@391@01) != Null | live]
; [else-branch: 64 | !(n$2@391@01 in g@157@01 && Lookup(next, sm@390@01, n$2@391@01) != Null) | live]
(push) ; 8
; [then-branch: 64 | n$2@391@01 in g@157@01 && Lookup(next, sm@390@01, n$2@391@01) != Null]
(assert (and
  (Set_in n$2@391@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 n$2@391@01) (Set_in (inv@210@01 n$2@391@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 n$2@391@01)) (pTaken@382@01 n$2@391@01))
        $Perm.No)
      (ite (= n$2@391@01 x@206@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@389@01 n$2@391@01)
        (and
          (Set_in (inv@388@01 n$2@391@01) g@157@01)
          (not (= (inv@388@01 n$2@391@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,06s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 64 | !(n$2@391@01 in g@157@01 && Lookup(next, sm@390@01, n$2@391@01) != Null)]
(assert (not
  (and
    (Set_in n$2@391@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (and
    (Set_in n$2@391@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))
  (and
    (Set_in n$2@391@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@391@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null))))
  (and
    (Set_in n$2@391@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@391@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@391@01 g@157@01)
      (and
        (Set_in n$2@391@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01)))
    (or (Set_in n$2@391@01 g@157@01) (not (Set_in n$2@391@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@391@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))
      (and
        (Set_in n$2@391@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01)))
    (or
      (not
        (and
          (Set_in n$2@391@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01)
              $Ref.null))))
      (and
        (Set_in n$2@391@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@391@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@391@01 g@157@01)
      (and
        (Set_in n$2@391@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01)))
    (or (Set_in n$2@391@01 g@157@01) (not (Set_in n$2@391@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@391@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))
      (and
        (Set_in n$2@391@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01)))
    (or
      (not
        (and
          (Set_in n$2@391@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01)
              $Ref.null))))
      (and
        (Set_in n$2@391@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))))
  :pattern ((Set_in n$2@391@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@391@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@391@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) g@157@01))
  :pattern ((Set_in n$2@391@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$2@391@01) n$2@391@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))
  $Snap.unit))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) x@206@01) x@206@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 x@206@01)) (pTaken@382@01 x@206@01))
        $Perm.No)
      $Perm.Write)
    (ite
      (and
        (img@389@01 x@206@01)
        (and
          (Set_in (inv@388@01 x@206@01) g@157@01)
          (not (= (inv@388@01 x@206@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,02s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) x@206@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))
  $Snap.unit))
; [eval] old(x.next) == null ==> $$(g) == old($$(g))
; [eval] old(x.next) == null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(push) ; 6
(assert (not (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 65 | Lookup(next, sm@376@01, x@206@01) == Null | live]
; [else-branch: 65 | Lookup(next, sm@376@01, x@206@01) != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 65 | Lookup(next, sm@376@01, x@206@01) == Null]
(assert (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@392@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@392@01 g@157@01))
(pop) ; 9
(declare-fun inv@393@01 ($Ref) $Ref)
(declare-fun img@394@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@392@01 $Ref) (n2@392@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@392@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n1@392@01) n1@392@01))
      (and
        (Set_in n2@392@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n2@392@01) n2@392@01))
      (= n1@392@01 n2@392@01))
    (= n1@392@01 n2@392@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@392@01 $Ref)) (!
  (=>
    (Set_in n@392@01 g@157@01)
    (and (= (inv@393@01 n@392@01) n@392@01) (img@394@01 n@392@01)))
  :pattern ((Set_in n@392@01 g@157@01))
  :pattern ((inv@393@01 n@392@01))
  :pattern ((img@394@01 n@392@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@394@01 r) (Set_in (inv@393@01 r) g@157@01)) (= (inv@393@01 r) r))
  :pattern ((inv@393@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@393@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
  :pattern ((inv@393@01 r))
  :qid |quant-u-346|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@395@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r) (= r (inv@393@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@396@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r) (= r (inv@393@01 r)))
    ($Perm.min
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@395@01 r)))
    $Perm.No))
(define-fun pTaken@397@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r) (= r (inv@393@01 r)))
    ($Perm.min
      (ite (= r x@206@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@395@01 r)) (pTaken@396@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (pTaken@395@01 r))
    $Perm.No)
  
  :qid |quant-u-348|))))
(check-sat)
; unsat
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r) (= r (inv@393@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@395@01 r)) $Perm.No))
  
  :qid |quant-u-349|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@396@01 r))
    $Perm.No)
  
  :qid |quant-u-350|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@396@01 r) $Perm.No)
  
  :qid |quant-u-351|))))
(check-sat)
; unknown
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r) (= r (inv@393@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@395@01 r)) (pTaken@396@01 r))
      $Perm.No))
  
  :qid |quant-u-352|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@397@01 x@206@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@397@01 r) $Perm.No)
  
  :qid |quant-u-354|))))
(check-sat)
; unknown
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r) (= r (inv@393@01 r)))
    (=
      (-
        (- (- (/ (to_real 1) (to_real 2)) (pTaken@395@01 r)) (pTaken@396@01 r))
        (pTaken@397@01 r))
      $Perm.No))
  
  :qid |quant-u-355|))))
(check-sat)
; unsat
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@398@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>)))
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r)))
    (=>
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>))))
  :qid |qp.fvfDomDef266|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@398@01  $FVF<next>)) g@157@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@392@01 $Ref)) (!
  (=>
    (Set_in n@392@01 g@157@01)
    (and (= (inv@393@01 n@392@01) n@392@01) (img@394@01 n@392@01)))
  :pattern ((Set_in n@392@01 g@157@01))
  :pattern ((inv@393@01 n@392@01))
  :pattern ((img@394@01 n@392@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@394@01 r) (Set_in (inv@393@01 r) g@157@01)) (= (inv@393@01 r) r))
  :pattern ((inv@393@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>)))
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r)))
    (=>
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>))))
  :qid |qp.fvfDomDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@393@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
    :pattern ((inv@393@01 r))
    :qid |quant-u-346|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@398@01  $FVF<next>)) g@157@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@399@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@399@01 g@157@01))
(pop) ; 9
(declare-fun inv@400@01 ($Ref) $Ref)
(declare-fun img@401@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@399@01 $Ref) (n2@399@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@399@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n1@399@01) n1@399@01))
      (and
        (Set_in n2@399@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n2@399@01) n2@399@01))
      (= n1@399@01 n2@399@01))
    (= n1@399@01 n2@399@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@399@01 $Ref)) (!
  (=>
    (Set_in n@399@01 g@157@01)
    (and (= (inv@400@01 n@399@01) n@399@01) (img@401@01 n@399@01)))
  :pattern ((Set_in n@399@01 g@157@01))
  :pattern ((inv@400@01 n@399@01))
  :pattern ((img@401@01 n@399@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@401@01 r) (Set_in (inv@400@01 r) g@157@01)) (= (inv@400@01 r) r))
  :pattern ((inv@400@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@400@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
  :pattern ((inv@400@01 r))
  :qid |quant-u-357|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@402@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r) (= r (inv@400@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@402@01 r))
    $Perm.No)
  
  :qid |quant-u-359|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@402@01 r) $Perm.No)
  
  :qid |quant-u-360|))))
(check-sat)
; unknown
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r) (= r (inv@400@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@402@01 r)) $Perm.No))
  
  :qid |quant-u-361|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@403@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>)))
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r)))
    (=>
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r))
      (Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>))))
  :qid |qp.fvfDomDef269|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@403@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@403@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@403@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@403@01  $FVF<next>)) g@157@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@399@01 $Ref)) (!
  (=>
    (Set_in n@399@01 g@157@01)
    (and (= (inv@400@01 n@399@01) n@399@01) (img@401@01 n@399@01)))
  :pattern ((Set_in n@399@01 g@157@01))
  :pattern ((inv@400@01 n@399@01))
  :pattern ((img@401@01 n@399@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@401@01 r) (Set_in (inv@400@01 r) g@157@01)) (= (inv@400@01 r) r))
  :pattern ((inv@400@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>)))
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r)))
    (=>
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r))
      (Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@403@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@403@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@403@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@400@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
    :pattern ((inv@400@01 r))
    :qid |quant-u-357|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@403@01  $FVF<next>)) g@157@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 65 | Lookup(next, sm@376@01, x@206@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@392@01 $Ref)) (!
  (=>
    (Set_in n@392@01 g@157@01)
    (and (= (inv@393@01 n@392@01) n@392@01) (img@394@01 n@392@01)))
  :pattern ((Set_in n@392@01 g@157@01))
  :pattern ((inv@393@01 n@392@01))
  :pattern ((img@394@01 n@392@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@394@01 r) (Set_in (inv@393@01 r) g@157@01)) (= (inv@393@01 r) r))
  :pattern ((inv@393@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>)))
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r)))
    (=>
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@398@01  $FVF<next>))))
  :qid |qp.fvfDomDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g@157@01) (img@394@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@398@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@398@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (forall ((n@399@01 $Ref)) (!
  (=>
    (Set_in n@399@01 g@157@01)
    (and (= (inv@400@01 n@399@01) n@399@01) (img@401@01 n@399@01)))
  :pattern ((Set_in n@399@01 g@157@01))
  :pattern ((inv@400@01 n@399@01))
  :pattern ((img@401@01 n@399@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@401@01 r) (Set_in (inv@400@01 r) g@157@01)) (= (inv@400@01 r) r))
  :pattern ((inv@400@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>)))
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r)))
    (=>
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r))
      (Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@403@01  $FVF<next>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@400@01 r) g@157@01) (img@401@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@403@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@403@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@403@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (=>
  (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)
  (and
    (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@393@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
      :pattern ((inv@393@01 r))
      :qid |quant-u-346|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@398@01  $FVF<next>)) g@157@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@400@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
      :pattern ((inv@400@01 r))
      :qid |quant-u-357|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@403@01  $FVF<next>)) g@157@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
  (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@398@01  $FVF<next>)) g@157@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@403@01  $FVF<next>)) g@157@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(push) ; 6
(assert (not (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 66 | Lookup(next, sm@376@01, x@206@01) != Null | live]
; [else-branch: 66 | Lookup(next, sm@376@01, x@206@01) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 66 | Lookup(next, sm@376@01, x@206@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
(declare-const v1@404@01 $Ref)
(declare-const v2@405@01 $Ref)
(push) ; 8
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 9
(declare-const n@406@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@406@01 g@157@01))
(pop) ; 10
(declare-fun inv@407@01 ($Ref) $Ref)
(declare-fun img@408@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@406@01 $Ref) (n2@406@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@406@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n1@406@01) n1@406@01))
      (and
        (Set_in n2@406@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n2@406@01) n2@406@01))
      (= n1@406@01 n2@406@01))
    (= n1@406@01 n2@406@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@406@01 $Ref)) (!
  (=>
    (Set_in n@406@01 g@157@01)
    (and (= (inv@407@01 n@406@01) n@406@01) (img@408@01 n@406@01)))
  :pattern ((Set_in n@406@01 g@157@01))
  :pattern ((inv@407@01 n@406@01))
  :pattern ((img@408@01 n@406@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@408@01 r) (Set_in (inv@407@01 r) g@157@01)) (= (inv@407@01 r) r))
  :pattern ((inv@407@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@407@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
  :pattern ((inv@407@01 r))
  :qid |quant-u-363|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@409@01 ((r $Ref) (v1@404@01 $Ref) (v2@405@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r) (= r (inv@407@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@410@01 ((r $Ref) (v1@404@01 $Ref) (v2@405@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r) (= r (inv@407@01 r)))
    ($Perm.min
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@409@01 r v1@404@01 v2@405@01)))
    $Perm.No))
(define-fun pTaken@411@01 ((r $Ref) (v1@404@01 $Ref) (v2@405@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r) (= r (inv@407@01 r)))
    ($Perm.min
      (ite (= r x@206@01) $Perm.Write $Perm.No)
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@409@01 r v1@404@01 v2@405@01))
        (pTaken@410@01 r v1@404@01 v2@405@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (pTaken@409@01 r v1@404@01 v2@405@01))
    $Perm.No)
  
  :qid |quant-u-365|))))
(check-sat)
; unsat
(pop) ; 10
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r) (= r (inv@407@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@409@01 r v1@404@01 v2@405@01))
      $Perm.No))
  
  :qid |quant-u-366|))))
(check-sat)
; unknown
(pop) ; 10
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@410@01 r v1@404@01 v2@405@01))
    $Perm.No)
  
  :qid |quant-u-367|))))
(check-sat)
; unknown
(pop) ; 10
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@410@01 r v1@404@01 v2@405@01) $Perm.No)
  
  :qid |quant-u-368|))))
(check-sat)
; unknown
(pop) ; 10
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r) (= r (inv@407@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@409@01 r v1@404@01 v2@405@01))
        (pTaken@410@01 r v1@404@01 v2@405@01))
      $Perm.No))
  
  :qid |quant-u-369|))))
(check-sat)
; unknown
(pop) ; 10
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@411@01 x@206@01 v1@404@01 v2@405@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@411@01 r v1@404@01 v2@405@01) $Perm.No)
  
  :qid |quant-u-371|))))
(check-sat)
; unknown
(pop) ; 10
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r) (= r (inv@407@01 r)))
    (=
      (-
        (-
          (- (/ (to_real 1) (to_real 2)) (pTaken@409@01 r v1@404@01 v2@405@01))
          (pTaken@410@01 r v1@404@01 v2@405@01))
        (pTaken@411@01 r v1@404@01 v2@405@01))
      $Perm.No))
  
  :qid |quant-u-372|))))
(check-sat)
; unsat
(pop) ; 10
; 0,02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@412@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)))
    (=>
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@406@01 $Ref)) (!
  (=>
    (Set_in n@406@01 g@157@01)
    (and (= (inv@407@01 n@406@01) n@406@01) (img@408@01 n@406@01)))
  :pattern ((Set_in n@406@01 g@157@01))
  :pattern ((inv@407@01 n@406@01))
  :pattern ((img@408@01 n@406@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@408@01 r) (Set_in (inv@407@01 r) g@157@01)) (= (inv@407@01 r) r))
  :pattern ((inv@407@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)))
    (=>
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@407@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
    :pattern ((inv@407@01 r))
    :qid |quant-u-363|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 9
(declare-const n@413@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@413@01 g@157@01))
(pop) ; 10
(declare-fun inv@414@01 ($Ref) $Ref)
(declare-fun img@415@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@413@01 $Ref) (n2@413@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@413@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n1@413@01) n1@413@01))
      (and
        (Set_in n2@413@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n2@413@01) n2@413@01))
      (= n1@413@01 n2@413@01))
    (= n1@413@01 n2@413@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@413@01 $Ref)) (!
  (=>
    (Set_in n@413@01 g@157@01)
    (and (= (inv@414@01 n@413@01) n@413@01) (img@415@01 n@413@01)))
  :pattern ((Set_in n@413@01 g@157@01))
  :pattern ((inv@414@01 n@413@01))
  :pattern ((img@415@01 n@413@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@415@01 r) (Set_in (inv@414@01 r) g@157@01)) (= (inv@414@01 r) r))
  :pattern ((inv@414@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@414@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
  :pattern ((inv@414@01 r))
  :qid |quant-u-374|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@416@01 ((r $Ref) (v1@404@01 $Ref) (v2@405@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r) (= r (inv@414@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@416@01 r v1@404@01 v2@405@01))
    $Perm.No)
  
  :qid |quant-u-376|))))
(check-sat)
; unknown
(pop) ; 10
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@416@01 r v1@404@01 v2@405@01) $Perm.No)
  
  :qid |quant-u-377|))))
(check-sat)
; unknown
(pop) ; 10
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r) (= r (inv@414@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@416@01 r v1@404@01 v2@405@01))
      $Perm.No))
  
  :qid |quant-u-378|))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@417@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r)))
    (=>
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@417@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@413@01 $Ref)) (!
  (=>
    (Set_in n@413@01 g@157@01)
    (and (= (inv@414@01 n@413@01) n@413@01) (img@415@01 n@413@01)))
  :pattern ((Set_in n@413@01 g@157@01))
  :pattern ((inv@414@01 n@413@01))
  :pattern ((img@415@01 n@413@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@415@01 r) (Set_in (inv@414@01 r) g@157@01)) (= (inv@414@01 r) r))
  :pattern ((inv@414@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r)))
    (=>
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@417@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@414@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
    :pattern ((inv@414@01 r))
    :qid |quant-u-374|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 67 | !(edge[Bool]($$(sm@417@01, g@157@01), v1@404@01, v2@405@01)) | live]
; [else-branch: 67 | edge[Bool]($$(sm@417@01, g@157@01), v1@404@01, v2@405@01) | live]
(push) ; 10
; [then-branch: 67 | !(edge[Bool]($$(sm@417@01, g@157@01), v1@404@01, v2@405@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 67 | edge[Bool]($$(sm@417@01, g@157@01), v1@404@01, v2@405@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))
; [eval] !(v1 == x && v2 == old(x.next))
; [eval] v1 == x && v2 == old(x.next)
; [eval] v1 == x
(push) ; 11
; [then-branch: 68 | v1@404@01 != x@206@01 | live]
; [else-branch: 68 | v1@404@01 == x@206@01 | live]
(push) ; 12
; [then-branch: 68 | v1@404@01 != x@206@01]
(assert (not (= v1@404@01 x@206@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 68 | v1@404@01 == x@206@01]
(assert (= v1@404@01 x@206@01))
; [eval] v2 == old(x.next)
; [eval] old(x.next)
(push) ; 13
(assert (not (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 13
; 0,00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (= v1@404@01 x@206@01) (not (= v1@404@01 x@206@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
  (and
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
    (or (= v1@404@01 x@206@01) (not (= v1@404@01 x@206@01))))))
(assert (or
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@406@01 $Ref)) (!
  (=>
    (Set_in n@406@01 g@157@01)
    (and (= (inv@407@01 n@406@01) n@406@01) (img@408@01 n@406@01)))
  :pattern ((Set_in n@406@01 g@157@01))
  :pattern ((inv@407@01 n@406@01))
  :pattern ((img@408@01 n@406@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@408@01 r) (Set_in (inv@407@01 r) g@157@01)) (= (inv@407@01 r) r))
  :pattern ((inv@407@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)))
    (=>
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (forall ((n@413@01 $Ref)) (!
  (=>
    (Set_in n@413@01 g@157@01)
    (and (= (inv@414@01 n@413@01) n@413@01) (img@415@01 n@413@01)))
  :pattern ((Set_in n@413@01 g@157@01))
  :pattern ((inv@414@01 n@413@01))
  :pattern ((img@415@01 n@413@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@415@01 r) (Set_in (inv@414@01 r) g@157@01)) (= (inv@414@01 r) r))
  :pattern ((inv@414@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r)))
    (=>
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@417@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@407@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
  :pattern ((inv@407@01 r))
  :qid |quant-u-363|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@414@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
  :pattern ((inv@414@01 r))
  :qid |quant-u-374|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@404@01 $Ref) (v2@405@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
        (or (= v1@404@01 x@206@01) (not (= v1@404@01 x@206@01)))))
    (or
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 66 | Lookup(next, sm@376@01, x@206@01) == Null]
(assert (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@406@01 $Ref)) (!
  (=>
    (Set_in n@406@01 g@157@01)
    (and (= (inv@407@01 n@406@01) n@406@01) (img@408@01 n@406@01)))
  :pattern ((Set_in n@406@01 g@157@01))
  :pattern ((inv@407@01 n@406@01))
  :pattern ((img@408@01 n@406@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@408@01 r) (Set_in (inv@407@01 r) g@157@01)) (= (inv@407@01 r) r))
  :pattern ((inv@407@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)))
    (=>
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@412@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@407@01 r) g@157@01) (img@408@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@412@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@412@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (forall ((n@413@01 $Ref)) (!
  (=>
    (Set_in n@413@01 g@157@01)
    (and (= (inv@414@01 n@413@01) n@413@01) (img@415@01 n@413@01)))
  :pattern ((Set_in n@413@01 g@157@01))
  :pattern ((inv@414@01 n@413@01))
  :pattern ((img@415@01 n@413@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@415@01 r) (Set_in (inv@414@01 r) g@157@01)) (= (inv@414@01 r) r))
  :pattern ((inv@414@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r)))
    (=>
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@417@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@414@01 r) g@157@01) (img@415@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@417@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@417@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@407@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
      :pattern ((inv@407@01 r))
      :qid |quant-u-363|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@414@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
      :pattern ((inv@414@01 r))
      :qid |quant-u-374|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01)
    (forall ((v1@404@01 $Ref) (v2@405@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
          (and
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
            (or (= v1@404@01 x@206@01) (not (= v1@404@01 x@206@01)))))
        (or
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
  (forall ((v1@404@01 $Ref) (v2@405@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@417@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01)
        (not
          (and
            (= v1@404@01 x@206@01)
            (=
              v2@405@01
              ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01))))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@412@01  $FVF<next>)) g@157@01) v1@404@01 v2@405@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (=
        ($FVF.lookup_next (as sm@376@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@376@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(push) ; 6
(assert (not (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 69 | Lookup(next, sm@376@01, x@206@01) != Null | live]
; [else-branch: 69 | Lookup(next, sm@376@01, x@206@01) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 69 | Lookup(next, sm@376@01, x@206@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
(declare-const v1@418@01 $Ref)
(declare-const v2@419@01 $Ref)
(push) ; 8
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] v1 != v2
(push) ; 9
; [then-branch: 70 | v1@418@01 != v2@419@01 | live]
; [else-branch: 70 | v1@418@01 == v2@419@01 | live]
(push) ; 10
; [then-branch: 70 | v1@418@01 != v2@419@01]
(assert (not (= v1@418@01 v2@419@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 11
(declare-const n@420@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@420@01 g@157@01))
(pop) ; 12
(declare-fun inv@421@01 ($Ref) $Ref)
(declare-fun img@422@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@420@01 $Ref) (n2@420@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@420@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n1@420@01) n1@420@01))
      (and
        (Set_in n2@420@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n2@420@01) n2@420@01))
      (= n1@420@01 n2@420@01))
    (= n1@420@01 n2@420@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@157@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@157@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@157@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@421@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
  :pattern ((inv@421@01 r))
  :qid |quant-u-380|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@423@01 ((r $Ref) (v1@418@01 $Ref) (v2@419@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r) (= r (inv@421@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@424@01 ((r $Ref) (v1@418@01 $Ref) (v2@419@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r) (= r (inv@421@01 r)))
    ($Perm.min
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@423@01 r v1@418@01 v2@419@01)))
    $Perm.No))
(define-fun pTaken@425@01 ((r $Ref) (v1@418@01 $Ref) (v2@419@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r) (= r (inv@421@01 r)))
    ($Perm.min
      (ite (= r x@206@01) $Perm.Write $Perm.No)
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@423@01 r v1@418@01 v2@419@01))
        (pTaken@424@01 r v1@418@01 v2@419@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (pTaken@423@01 r v1@418@01 v2@419@01))
    $Perm.No)
  
  :qid |quant-u-382|))))
(check-sat)
; unsat
(pop) ; 12
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r) (= r (inv@421@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@423@01 r v1@418@01 v2@419@01))
      $Perm.No))
  
  :qid |quant-u-383|))))
(check-sat)
; unknown
(pop) ; 12
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@424@01 r v1@418@01 v2@419@01))
    $Perm.No)
  
  :qid |quant-u-384|))))
(check-sat)
; unknown
(pop) ; 12
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@424@01 r v1@418@01 v2@419@01) $Perm.No)
  
  :qid |quant-u-385|))))
(check-sat)
; unknown
(pop) ; 12
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r) (= r (inv@421@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@423@01 r v1@418@01 v2@419@01))
        (pTaken@424@01 r v1@418@01 v2@419@01))
      $Perm.No))
  
  :qid |quant-u-386|))))
(check-sat)
; unknown
(pop) ; 12
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@425@01 x@206@01 v1@418@01 v2@419@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@425@01 r v1@418@01 v2@419@01) $Perm.No)
  
  :qid |quant-u-388|))))
(check-sat)
; unknown
(pop) ; 12
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r) (= r (inv@421@01 r)))
    (=
      (-
        (-
          (- (/ (to_real 1) (to_real 2)) (pTaken@423@01 r v1@418@01 v2@419@01))
          (pTaken@424@01 r v1@418@01 v2@419@01))
        (pTaken@425@01 r v1@418@01 v2@419@01))
      $Perm.No))
  
  :qid |quant-u-389|))))
(check-sat)
; unsat
(pop) ; 12
; 0,02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@426@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@157@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@157@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@157@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@421@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
    :pattern ((inv@421@01 r))
    :qid |quant-u-380|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 11
(declare-const n@427@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@427@01 g@157@01))
(pop) ; 12
(declare-fun inv@428@01 ($Ref) $Ref)
(declare-fun img@429@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@427@01 $Ref) (n2@427@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@427@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n1@427@01) n1@427@01))
      (and
        (Set_in n2@427@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) n2@427@01) n2@427@01))
      (= n1@427@01 n2@427@01))
    (= n1@427@01 n2@427@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@157@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@157@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@157@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@428@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
  :pattern ((inv@428@01 r))
  :qid |quant-u-391|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@430@01 ((r $Ref) (v1@418@01 $Ref) (v2@419@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r) (= r (inv@428@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@430@01 r v1@418@01 v2@419@01))
    $Perm.No)
  
  :qid |quant-u-393|))))
(check-sat)
; unknown
(pop) ; 12
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@430@01 r v1@418@01 v2@419@01) $Perm.No)
  
  :qid |quant-u-394|))))
(check-sat)
; unknown
(pop) ; 12
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r) (= r (inv@428@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@430@01 r v1@418@01 v2@419@01))
      $Perm.No))
  
  :qid |quant-u-395|))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@431@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@431@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@157@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@157@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@157@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@431@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@428@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
    :pattern ((inv@428@01 r))
    :qid |quant-u-391|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 71 | !(exists_path[Bool]($$(sm@431@01, g@157@01), v1@418@01, v2@419@01)) | live]
; [else-branch: 71 | exists_path[Bool]($$(sm@431@01, g@157@01), v1@418@01, v2@419@01) | live]
(push) ; 12
; [then-branch: 71 | !(exists_path[Bool]($$(sm@431@01, g@157@01), v1@418@01, v2@419@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 71 | exists_path[Bool]($$(sm@431@01, g@157@01), v1@418@01, v2@419@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 13
(declare-const n@432@01 $Ref)
(push) ; 14
; [eval] (n in refs)
(assert (Set_in n@432@01 g@157@01))
(pop) ; 14
(declare-fun inv@433@01 ($Ref) $Ref)
(declare-fun img@434@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@435@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@435@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
; Check receiver injectivity
(push) ; 14
(assert (not (forall ((n1@432@01 $Ref) (n2@432@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@432@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) n1@432@01) n1@432@01))
      (and
        (Set_in n2@432@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) n2@432@01) n2@432@01))
      (= n1@432@01 n2@432@01))
    (= n1@432@01 n2@432@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@432@01 $Ref)) (!
  (=>
    (Set_in n@432@01 g@157@01)
    (and (= (inv@433@01 n@432@01) n@432@01) (img@434@01 n@432@01)))
  :pattern ((Set_in n@432@01 g@157@01))
  :pattern ((inv@433@01 n@432@01))
  :pattern ((img@434@01 n@432@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@434@01 r) (Set_in (inv@433@01 r) g@157@01)) (= (inv@433@01 r) r))
  :pattern ((inv@433@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@433@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) r) r))
  :pattern ((inv@433@01 r))
  :qid |quant-u-397|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@436@01 ((r $Ref) (v1@418@01 $Ref) (v2@419@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r) (= r (inv@433@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@436@01 r v1@418@01 v2@419@01))
    $Perm.No)
  
  :qid |quant-u-399|))))
(check-sat)
; unknown
(pop) ; 14
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@436@01 r v1@418@01 v2@419@01) $Perm.No)
  
  :qid |quant-u-400|))))
(check-sat)
; unknown
(pop) ; 14
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r) (= r (inv@433@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@436@01 r v1@418@01 v2@419@01))
      $Perm.No))
  
  :qid |quant-u-401|))))
(check-sat)
; unsat
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@437@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r)))
    (=>
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@437@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01))
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@435@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@432@01 $Ref)) (!
  (=>
    (Set_in n@432@01 g@157@01)
    (and (= (inv@433@01 n@432@01) n@432@01) (img@434@01 n@432@01)))
  :pattern ((Set_in n@432@01 g@157@01))
  :pattern ((inv@433@01 n@432@01))
  :pattern ((img@434@01 n@432@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@434@01 r) (Set_in (inv@433@01 r) g@157@01)) (= (inv@433@01 r) r))
  :pattern ((inv@433@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r)))
    (=>
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@437@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@433@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) r) r))
    :pattern ((inv@433@01 r))
    :qid |quant-u-397|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01)))
(set-option :timeout 0)
(push) ; 13
; [then-branch: 72 | !(exists_path[Bool]($$(sm@437@01, g@157@01), v1@418@01, x@206@01)) | live]
; [else-branch: 72 | exists_path[Bool]($$(sm@437@01, g@157@01), v1@418@01, x@206@01) | live]
(push) ; 14
; [then-branch: 72 | !(exists_path[Bool]($$(sm@437@01, g@157@01), v1@418@01, x@206@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 72 | exists_path[Bool]($$(sm@437@01, g@157@01), v1@418@01, x@206@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01))
; [eval] exists_path(old($$(g)), old(x.next), v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 15
(declare-const n@438@01 $Ref)
(push) ; 16
; [eval] (n in refs)
(assert (Set_in n@438@01 g@157@01))
(pop) ; 16
(declare-fun inv@439@01 ($Ref) $Ref)
(declare-fun img@440@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@441@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
; Check receiver injectivity
(push) ; 16
(assert (not (forall ((n1@438@01 $Ref) (n2@438@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@438@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) n1@438@01) n1@438@01))
      (and
        (Set_in n2@438@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) n2@438@01) n2@438@01))
      (= n1@438@01 n2@438@01))
    (= n1@438@01 n2@438@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@439@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
  :pattern ((inv@439@01 r))
  :qid |quant-u-403|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@442@01 ((r $Ref) (v1@418@01 $Ref) (v2@419@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r) (= r (inv@439@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        $Perm.Write
        $Perm.No)
      (pTaken@442@01 r v1@418@01 v2@419@01))
    $Perm.No)
  
  :qid |quant-u-405|))))
(check-sat)
; unknown
(pop) ; 16
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@442@01 r v1@418@01 v2@419@01) $Perm.No)
  
  :qid |quant-u-406|))))
(check-sat)
; unknown
(pop) ; 16
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r) (= r (inv@439@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@442@01 r v1@418@01 v2@419@01))
      $Perm.No))
  
  :qid |quant-u-407|))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@443@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01))
(pop) ; 15
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@439@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
    :pattern ((inv@439@01 r))
    :qid |quant-u-403|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01)))
; [eval] old(x.next)
(set-option :timeout 0)
(push) ; 15
(assert (not (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))))
(check-sat)
; unsat
(pop) ; 15
; 0,00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@439@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
      :pattern ((inv@439@01 r))
      :qid |quant-u-403|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@435@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@432@01 $Ref)) (!
  (=>
    (Set_in n@432@01 g@157@01)
    (and (= (inv@433@01 n@432@01) n@432@01) (img@434@01 n@432@01)))
  :pattern ((Set_in n@432@01 g@157@01))
  :pattern ((inv@433@01 n@432@01))
  :pattern ((img@434@01 n@432@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@434@01 r) (Set_in (inv@433@01 r) g@157@01)) (= (inv@433@01 r) r))
  :pattern ((inv@433@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r)))
    (=>
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@437@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@433@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) r) r))
      :pattern ((inv@433@01 r))
      :qid |quant-u-397|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@439@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
          :pattern ((inv@439@01 r))
          :qid |quant-u-403|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01))))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 70 | v1@418@01 == v2@419@01]
(assert (= v1@418@01 v2@419@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@157@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@157@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@157@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@157@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@157@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@157@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@431@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@435@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@432@01 $Ref)) (!
  (=>
    (Set_in n@432@01 g@157@01)
    (and (= (inv@433@01 n@432@01) n@432@01) (img@434@01 n@432@01)))
  :pattern ((Set_in n@432@01 g@157@01))
  :pattern ((inv@433@01 n@432@01))
  :pattern ((img@434@01 n@432@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@434@01 r) (Set_in (inv@433@01 r) g@157@01)) (= (inv@433@01 r) r))
  :pattern ((inv@433@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r)))
    (=>
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@437@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (not (= v1@418@01 v2@419@01))
  (and
    (not (= v1@418@01 v2@419@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@421@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
      :pattern ((inv@421@01 r))
      :qid |quant-u-380|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@428@01 r) g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
      :pattern ((inv@428@01 r))
      :qid |quant-u-391|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@433@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) r) r))
          :pattern ((inv@433@01 r))
          :qid |quant-u-397|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@439@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
              :pattern ((inv@439@01 r))
              :qid |quant-u-403|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)))))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01))))))
; Joined path conditions
(assert (or (= v1@418@01 v2@419@01) (not (= v1@418@01 v2@419@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@157@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@157@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@157@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@157@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@157@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@157@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@431@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@435@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@432@01 $Ref)) (!
  (=>
    (Set_in n@432@01 g@157@01)
    (and (= (inv@433@01 n@432@01) n@432@01) (img@434@01 n@432@01)))
  :pattern ((Set_in n@432@01 g@157@01))
  :pattern ((inv@433@01 n@432@01))
  :pattern ((img@434@01 n@432@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@434@01 r) (Set_in (inv@433@01 r) g@157@01)) (= (inv@433@01 r) r))
  :pattern ((inv@433@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r)))
    (=>
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@437@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@418@01 $Ref) (v2@419@01 $Ref)) (!
  (and
    (=>
      (not (= v1@418@01 v2@419@01))
      (and
        (not (= v1@418@01 v2@419@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@421@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
          :pattern ((inv@421@01 r))
          :qid |quant-u-380|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@428@01 r) g@157@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
          :pattern ((inv@428@01 r))
          :qid |quant-u-391|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@433@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) r) r))
              :pattern ((inv@433@01 r))
              :qid |quant-u-397|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@439@01 r) g@157@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
                  :pattern ((inv@439@01 r))
                  :qid |quant-u-403|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)))))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)))))
    (or (= v1@418@01 v2@419@01) (not (= v1@418@01 v2@419@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 69 | Lookup(next, sm@376@01, x@206@01) == Null]
(assert (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@157@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@157@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@157@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@426@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@157@01) (img@422@01 r))
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@426@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@426@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@157@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@157@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@157@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@431@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@157@01) (img@429@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@431@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@431@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@435@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@435@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@432@01 $Ref)) (!
  (=>
    (Set_in n@432@01 g@157@01)
    (and (= (inv@433@01 n@432@01) n@432@01) (img@434@01 n@432@01)))
  :pattern ((Set_in n@432@01 g@157@01))
  :pattern ((inv@433@01 n@432@01))
  :pattern ((img@434@01 n@432@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@434@01 r) (Set_in (inv@433@01 r) g@157@01)) (= (inv@433@01 r) r))
  :pattern ((inv@433@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r)))
    (=>
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@437@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@433@01 r) g@157@01) (img@434@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@437@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@437@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
    (=
      ($FVF.lookup_next (as sm@441@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@441@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@157@01)
    (and (= (inv@439@01 n@438@01) n@438@01) (img@440@01 n@438@01)))
  :pattern ((Set_in n@438@01 g@157@01))
  :pattern ((inv@439@01 n@438@01))
  :pattern ((img@440@01 n@438@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@440@01 r) (Set_in (inv@439@01 r) g@157@01)) (= (inv@439@01 r) r))
  :pattern ((inv@439@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r)))
    (=>
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@443@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@439@01 r) g@157@01) (img@440@01 r))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01)))
    (=
      ($FVF.lookup_next (as sm@443@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@443@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
    (forall ((v1@418@01 $Ref) (v2@419@01 $Ref)) (!
      (and
        (=>
          (not (= v1@418@01 v2@419@01))
          (and
            (not (= v1@418@01 v2@419@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@421@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
              :pattern ((inv@421@01 r))
              :qid |quant-u-380|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@428@01 r) g@157@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@376@01  $FVF<next>) r) r))
              :pattern ((inv@428@01 r))
              :qid |quant-u-391|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@433@01 r) g@157@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@435@01  $FVF<next>) r) r))
                  :pattern ((inv@433@01 r))
                  :qid |quant-u-397|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@439@01 r) g@157@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@441@01  $FVF<next>) r) r))
                      :pattern ((inv@439@01 r))
                      :qid |quant-u-403|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)))))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)))))
        (or (= v1@418@01 v2@419@01) (not (= v1@418@01 v2@419@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_next (as sm@376@01  $FVF<next>) x@206@01) $Ref.null))
  (forall ((v1@418@01 $Ref) (v2@419@01 $Ref)) (!
    (=>
      (not (= v1@418@01 v2@419@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@431@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01)
          (not
            (and
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@437@01  $FVF<next>)) g@157@01) v1@418@01 x@206@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@443@01  $FVF<next>)) g@157@01) ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01) v2@419@01))))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@426@01  $FVF<next>)) g@157@01) v1@418@01 v2@419@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; link(g, x, y)
; [eval] (x in g)
; [eval] y != null ==> (y in g)
; [eval] y != null
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@205@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@205@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 73 | y@205@01 != Null | live]
; [else-branch: 73 | y@205@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 73 | y@205@01 != Null]
(assert (not (= y@205@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 7
(push) ; 7
; [else-branch: 73 | y@205@01 == Null]
(assert (= y@205@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] !((null in g))
; [eval] (null in g)
; [eval] (x in g)
; Definitional axioms for snapshot map values
; Precomputing data for removing quantified permissions
(define-fun pTaken@444@01 ((r $Ref)) $Perm
  (ite
    (= r x@206@01)
    ($Perm.min (ite (= r x@206@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@445@01 ((r $Ref)) $Perm
  (ite
    (= r x@206@01)
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@444@01 r)))
    $Perm.No))
(define-fun pTaken@446@01 ((r $Ref)) $Perm
  (ite
    (= r x@206@01)
    ($Perm.min
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (- $Perm.Write (pTaken@444@01 r)) (pTaken@445@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@444@01 x@206@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r x@206@01) (= (- $Perm.Write (pTaken@444@01 r)) $Perm.No))
  
  :qid |quant-u-410|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (ite
    (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))
    (<
      $Perm.No
      (- (- $Perm.Write (pTaken@377@01 x@206@01)) (pTaken@382@01 x@206@01)))
    false)
  (=
    ($FVF.lookup_next (as sm@390@01  $FVF<next>) x@206@01)
    ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01))))
(assert (=
  ($FVF.lookup_next (as sm@390@01  $FVF<next>) x@206@01)
  ($FVF.lookup_next (as sm@385@01  $FVF<next>) x@206@01)))
(assert (=>
  (and
    (img@389@01 x@206@01)
    (and
      (Set_in (inv@388@01 x@206@01) g@157@01)
      (not (= (inv@388@01 x@206@01) x@206@01))))
  (=
    ($FVF.lookup_next (as sm@390@01  $FVF<next>) x@206@01)
    ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) x@206@01))))
(assert (and
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) x@206@01) x@206@01)
  ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) x@206@01) x@206@01)
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) x@206@01) x@206@01)))
(declare-const n@447@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 7
; [then-branch: 74 | !(n@447@01 in g@157@01) | live]
; [else-branch: 74 | n@447@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 74 | !(n@447@01 in g@157@01)]
(assert (not (Set_in n@447@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 74 | n@447@01 in g@157@01]
(assert (Set_in n@447@01 g@157@01))
; [eval] n != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@447@01 g@157@01) (not (Set_in n@447@01 g@157@01))))
(assert (and (Set_in n@447@01 g@157@01) (not (= n@447@01 x@206@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@448@01 ($Ref) $Ref)
(declare-fun img@449@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@447@01 $Ref)) (!
  (=>
    (and (Set_in n@447@01 g@157@01) (not (= n@447@01 x@206@01)))
    (or (Set_in n@447@01 g@157@01) (not (Set_in n@447@01 g@157@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n@447@01) n@447@01))
  :qid |next-aux|)))
(declare-const sm@450@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@450@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@450@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef296|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@450@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@450@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@450@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef298|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@447@01 $Ref) (n2@447@01 $Ref)) (!
  (=>
    (and
      (and
        (and (Set_in n1@447@01 g@157@01) (not (= n1@447@01 x@206@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@450@01  $FVF<next>) n1@447@01) n1@447@01))
      (and
        (and (Set_in n2@447@01 g@157@01) (not (= n2@447@01 x@206@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@450@01  $FVF<next>) n2@447@01) n2@447@01))
      (= n1@447@01 n2@447@01))
    (= n1@447@01 n2@447@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@447@01 $Ref)) (!
  (=>
    (and (Set_in n@447@01 g@157@01) (not (= n@447@01 x@206@01)))
    (and (= (inv@448@01 n@447@01) n@447@01) (img@449@01 n@447@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n@447@01) n@447@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@449@01 r)
      (and (Set_in (inv@448@01 r) g@157@01) (not (= (inv@448@01 r) x@206@01))))
    (= (inv@448@01 r) r))
  :pattern ((inv@448@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@448@01 r) g@157@01) (not (= (inv@448@01 r) x@206@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@450@01  $FVF<next>) r) r))
  :pattern ((inv@448@01 r))
  :qid |quant-u-412|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@451@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (Set_in (inv@448@01 r) g@157@01) (not (= (inv@448@01 r) x@206@01)))
      (img@449@01 r)
      (= r (inv@448@01 r)))
    ($Perm.min
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@452@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (Set_in (inv@448@01 r) g@157@01) (not (= (inv@448@01 r) x@206@01)))
      (img@449@01 r)
      (= r (inv@448@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@451@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@451@01 r))
    $Perm.No)
  
  :qid |quant-u-414|))))
(check-sat)
; unsat
(pop) ; 6
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@448@01 r) g@157@01) (not (= (inv@448@01 r) x@206@01)))
      (img@449@01 r)
      (= r (inv@448@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@451@01 r)) $Perm.No))
  
  :qid |quant-u-415|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@453@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 7
; [then-branch: 75 | !(n$0@453@01 in g@157@01) | live]
; [else-branch: 75 | n$0@453@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 75 | !(n$0@453@01 in g@157@01)]
(assert (not (Set_in n$0@453@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 75 | n$0@453@01 in g@157@01]
(assert (Set_in n$0@453@01 g@157@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 n$0@453@01) (Set_in (inv@210@01 n$0@453@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 n$0@453@01)) (pTaken@382@01 n$0@453@01))
        $Perm.No)
      (ite (= n$0@453@01 x@206@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@389@01 n$0@453@01)
        (and
          (Set_in (inv@388@01 n$0@453@01) g@157@01)
          (not (= (inv@388@01 n$0@453@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (Set_in n$0@453@01 g@157@01)
  (and
    (Set_in n$0@453@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))))
(assert (or (Set_in n$0@453@01 g@157@01) (not (Set_in n$0@453@01 g@157@01))))
(push) ; 7
; [then-branch: 76 | n$0@453@01 in g@157@01 && Lookup(next, sm@390@01, n$0@453@01) != Null | live]
; [else-branch: 76 | !(n$0@453@01 in g@157@01 && Lookup(next, sm@390@01, n$0@453@01) != Null) | live]
(push) ; 8
; [then-branch: 76 | n$0@453@01 in g@157@01 && Lookup(next, sm@390@01, n$0@453@01) != Null]
(assert (and
  (Set_in n$0@453@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 n$0@453@01) (Set_in (inv@210@01 n$0@453@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 n$0@453@01)) (pTaken@382@01 n$0@453@01))
        $Perm.No)
      (ite (= n$0@453@01 x@206@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@389@01 n$0@453@01)
        (and
          (Set_in (inv@388@01 n$0@453@01) g@157@01)
          (not (= (inv@388@01 n$0@453@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 76 | !(n$0@453@01 in g@157@01 && Lookup(next, sm@390@01, n$0@453@01) != Null)]
(assert (not
  (and
    (Set_in n$0@453@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (and
    (Set_in n$0@453@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))
  (and
    (Set_in n$0@453@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@453@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null))))
  (and
    (Set_in n$0@453@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@389@01 r)
      (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@453@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@453@01 g@157@01)
      (and
        (Set_in n$0@453@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01)))
    (or (Set_in n$0@453@01 g@157@01) (not (Set_in n$0@453@01 g@157@01)))
    (=>
      (and
        (Set_in n$0@453@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))
      (and
        (Set_in n$0@453@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01)))
    (or
      (not
        (and
          (Set_in n$0@453@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01)
              $Ref.null))))
      (and
        (Set_in n$0@453@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(assert (forall ((n$0@453@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@453@01 g@157@01)
      (and
        (Set_in n$0@453@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01)))
    (or (Set_in n$0@453@01 g@157@01) (not (Set_in n$0@453@01 g@157@01)))
    (=>
      (and
        (Set_in n$0@453@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))
      (and
        (Set_in n$0@453@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01)))
    (or
      (not
        (and
          (Set_in n$0@453@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01)
              $Ref.null))))
      (and
        (Set_in n$0@453@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))))
  :pattern ((Set_in n$0@453@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(push) ; 6
(assert (not (forall ((n$0@453@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@453@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) g@157@01))
  :pattern ((Set_in n$0@453@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$0@453@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@453@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) g@157@01))
  :pattern ((Set_in n$0@453@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n$0@453@01) n$0@453@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34|)))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@389@01 r)
        (and (Set_in (inv@388@01 r) g@157@01) (not (= (inv@388@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 x@206@01)) (pTaken@382@01 x@206@01))
        $Perm.No)
      $Perm.Write)
    (ite
      (and
        (img@389@01 x@206@01)
        (and
          (Set_in (inv@388@01 x@206@01) g@157@01)
          (not (= (inv@388@01 x@206@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,04s
; (get-info :all-statistics)
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@454@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@454@01))
    ($Snap.second ($Snap.second $t@454@01)))))
(assert (= ($Snap.first ($Snap.second $t@454@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@454@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@454@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))
(declare-const sm@455@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@455@01  $FVF<next>) x@206@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@454@01))))))
(declare-const sm@456@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@456@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@456@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@456@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@456@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef300|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r))
  :pattern (($FVF.lookup_next (as sm@456@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef301|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@456@01  $FVF<next>) x@206@01) x@206@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@454@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))))
(declare-const n$1@457@01 $Ref)
(push) ; 6
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 7
; [then-branch: 77 | !(n$1@457@01 in g@157@01) | live]
; [else-branch: 77 | n$1@457@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 77 | !(n$1@457@01 in g@157@01)]
(assert (not (Set_in n$1@457@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 77 | n$1@457@01 in g@157@01]
(assert (Set_in n$1@457@01 g@157@01))
; [eval] n$1 != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@457@01 g@157@01) (not (Set_in n$1@457@01 g@157@01))))
(assert (and (Set_in n$1@457@01 g@157@01) (not (= n$1@457@01 x@206@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@458@01 ($Ref) $Ref)
(declare-fun img@459@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@457@01 $Ref)) (!
  (=>
    (and (Set_in n$1@457@01 g@157@01) (not (= n$1@457@01 x@206@01)))
    (or (Set_in n$1@457@01 g@157@01) (not (Set_in n$1@457@01 g@157@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) n$1@457@01) n$1@457@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n$11@457@01 $Ref) (n$12@457@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@457@01 g@157@01) (not (= n$11@457@01 x@206@01)))
      (and (Set_in n$12@457@01 g@157@01) (not (= n$12@457@01 x@206@01)))
      (= n$11@457@01 n$12@457@01))
    (= n$11@457@01 n$12@457@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@457@01 $Ref)) (!
  (=>
    (and (Set_in n$1@457@01 g@157@01) (not (= n$1@457@01 x@206@01)))
    (and (= (inv@458@01 n$1@457@01) n$1@457@01) (img@459@01 n$1@457@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) n$1@457@01) n$1@457@01))
  :qid |quant-u-417|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@459@01 r)
      (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
    (= (inv@458@01 r) r))
  :pattern ((inv@458@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@457@01 $Ref)) (!
  (=>
    (and (Set_in n$1@457@01 g@157@01) (not (= n$1@457@01 x@206@01)))
    (not (= n$1@457@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) n$1@457@01) n$1@457@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@457@01 n$1@208@01)
    (=
      (and
        (img@459@01 r)
        (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))))
  
  :qid |quant-u-418|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
(declare-const sm@460@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@459@01 r)
      (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) r) r))
  :pattern ((inv@458@01 r))
  :qid |quant-u-419|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@461@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 7
; [then-branch: 78 | !(n$2@461@01 in g@157@01) | live]
; [else-branch: 78 | n$2@461@01 in g@157@01 | live]
(push) ; 8
; [then-branch: 78 | !(n$2@461@01 in g@157@01)]
(assert (not (Set_in n$2@461@01 g@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 78 | n$2@461@01 in g@157@01]
(assert (Set_in n$2@461@01 g@157@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@459@01 r)
        (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 n$2@461@01) (Set_in (inv@210@01 n$2@461@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 n$2@461@01)) (pTaken@382@01 n$2@461@01))
        $Perm.No)
      (ite (= n$2@461@01 x@206@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@459@01 n$2@461@01)
        (and
          (Set_in (inv@458@01 n$2@461@01) g@157@01)
          (not (= (inv@458@01 n$2@461@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@459@01 r)
      (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (=>
  (Set_in n$2@461@01 g@157@01)
  (and
    (Set_in n$2@461@01 g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01))))
(assert (or (Set_in n$2@461@01 g@157@01) (not (Set_in n$2@461@01 g@157@01))))
(push) ; 7
; [then-branch: 79 | n$2@461@01 in g@157@01 && Lookup(next, sm@460@01, n$2@461@01) != Null | live]
; [else-branch: 79 | !(n$2@461@01 in g@157@01 && Lookup(next, sm@460@01, n$2@461@01) != Null) | live]
(push) ; 8
; [then-branch: 79 | n$2@461@01 in g@157@01 && Lookup(next, sm@460@01, n$2@461@01) != Null]
(assert (and
  (Set_in n$2@461@01 g@157@01)
  (not (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@459@01 r)
        (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 n$2@461@01) (Set_in (inv@210@01 n$2@461@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 n$2@461@01)) (pTaken@382@01 n$2@461@01))
        $Perm.No)
      (ite (= n$2@461@01 x@206@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@459@01 n$2@461@01)
        (and
          (Set_in (inv@458@01 n$2@461@01) g@157@01)
          (not (= (inv@458@01 n$2@461@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 79 | !(n$2@461@01 in g@157@01 && Lookup(next, sm@460@01, n$2@461@01) != Null)]
(assert (not
  (and
    (Set_in n$2@461@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@459@01 r)
      (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (=>
  (and
    (Set_in n$2@461@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))
  (and
    (Set_in n$2@461@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@461@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null))))
  (and
    (Set_in n$2@461@01 g@157@01)
    (not (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@206@01)
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@459@01 r)
      (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
    (=
      ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@461@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@461@01 g@157@01)
      (and
        (Set_in n$2@461@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01)))
    (or (Set_in n$2@461@01 g@157@01) (not (Set_in n$2@461@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@461@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))
      (and
        (Set_in n$2@461@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01)))
    (or
      (not
        (and
          (Set_in n$2@461@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01)
              $Ref.null))))
      (and
        (Set_in n$2@461@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) g@157@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@461@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@461@01 g@157@01)
      (and
        (Set_in n$2@461@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01)))
    (or (Set_in n$2@461@01 g@157@01) (not (Set_in n$2@461@01 g@157@01)))
    (=>
      (and
        (Set_in n$2@461@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))
      (and
        (Set_in n$2@461@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01)))
    (or
      (not
        (and
          (Set_in n$2@461@01 g@157@01)
          (not
            (=
              ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01)
              $Ref.null))))
      (and
        (Set_in n$2@461@01 g@157@01)
        (not
          (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))))
  :pattern ((Set_in n$2@461@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@461@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@461@01 g@157@01)
      (not
        (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) g@157@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) g@157@01))
  :pattern ((Set_in n$2@461@01 g@157@01) ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n$2@461@01) n$2@461@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))
  $Snap.unit))
; [eval] x.next == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@206@01)
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@459@01 r)
        (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01))))
      (=
        ($FVF.lookup_next (as sm@460@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@460@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) x@206@01) x@206@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@211@01 x@206@01) (Set_in (inv@210@01 x@206@01) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 x@206@01)) (pTaken@382@01 x@206@01))
        $Perm.No)
      $Perm.Write)
    (ite
      (and
        (img@459@01 x@206@01)
        (and
          (Set_in (inv@458@01 x@206@01) g@157@01)
          (not (= (inv@458@01 x@206@01) x@206@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,03s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@460@01  $FVF<next>) x@206@01) y@205@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@205@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@205@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 80 | y@205@01 == Null | live]
; [else-branch: 80 | y@205@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 80 | y@205@01 == Null]
(assert (= y@205@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@462@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@462@01 g@157@01))
(pop) ; 9
(declare-fun inv@463@01 ($Ref) $Ref)
(declare-fun img@464@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@462@01 $Ref) (n2@462@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@462@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n1@462@01) n1@462@01))
      (and
        (Set_in n2@462@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) n2@462@01) n2@462@01))
      (= n1@462@01 n2@462@01))
    (= n1@462@01 n2@462@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@462@01 $Ref)) (!
  (=>
    (Set_in n@462@01 g@157@01)
    (and (= (inv@463@01 n@462@01) n@462@01) (img@464@01 n@462@01)))
  :pattern ((Set_in n@462@01 g@157@01))
  :pattern ((inv@463@01 n@462@01))
  :pattern ((img@464@01 n@462@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@464@01 r) (Set_in (inv@463@01 r) g@157@01)) (= (inv@463@01 r) r))
  :pattern ((inv@463@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@463@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) r) r))
  :pattern ((inv@463@01 r))
  :qid |quant-u-421|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@465@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r) (= r (inv@463@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@466@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r) (= r (inv@463@01 r)))
    ($Perm.min
      (ite
        (and
          (img@459@01 r)
          (and
            (Set_in (inv@458@01 r) g@157@01)
            (not (= (inv@458@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@465@01 r)))
    $Perm.No))
(define-fun pTaken@467@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r) (= r (inv@463@01 r)))
    ($Perm.min
      (ite (= r x@206@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@465@01 r)) (pTaken@466@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (pTaken@465@01 r))
    $Perm.No)
  
  :qid |quant-u-423|))))
(check-sat)
; unsat
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r) (= r (inv@463@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@465@01 r)) $Perm.No))
  
  :qid |quant-u-424|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@459@01 r)
          (and
            (Set_in (inv@458@01 r) g@157@01)
            (not (= (inv@458@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@466@01 r))
    $Perm.No)
  
  :qid |quant-u-425|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@466@01 r) $Perm.No)
  
  :qid |quant-u-426|))))
(check-sat)
; unknown
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r) (= r (inv@463@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@465@01 r)) (pTaken@466@01 r))
      $Perm.No))
  
  :qid |quant-u-427|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@467@01 x@206@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@467@01 r) $Perm.No)
  
  :qid |quant-u-429|))))
(check-sat)
; unknown
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r) (= r (inv@463@01 r)))
    (=
      (-
        (- (- (/ (to_real 1) (to_real 2)) (pTaken@465@01 r)) (pTaken@466@01 r))
        (pTaken@467@01 r))
      $Perm.No))
  
  :qid |quant-u-430|))))
(check-sat)
; unsat
(pop) ; 9
; 0,04s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@468@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@468@01  $FVF<next>)))
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r)))
    (=>
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r))
      (Set_in r ($FVF.domain_next (as sm@468@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@468@01  $FVF<next>))))
  :qid |qp.fvfDomDef310|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@468@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@468@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r))
      (and
        (img@459@01 r)
        (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@468@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef309|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@468@01  $FVF<next>)) g@157@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@462@01 $Ref)) (!
  (=>
    (Set_in n@462@01 g@157@01)
    (and (= (inv@463@01 n@462@01) n@462@01) (img@464@01 n@462@01)))
  :pattern ((Set_in n@462@01 g@157@01))
  :pattern ((inv@463@01 n@462@01))
  :pattern ((img@464@01 n@462@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@464@01 r) (Set_in (inv@463@01 r) g@157@01)) (= (inv@463@01 r) r))
  :pattern ((inv@463@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@468@01  $FVF<next>)))
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r)))
    (=>
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r))
      (Set_in r ($FVF.domain_next (as sm@468@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@468@01  $FVF<next>))))
  :qid |qp.fvfDomDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r))
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@468@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r)))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r)) (= r x@206@01))
    (=
      ($FVF.lookup_next (as sm@468@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@455@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@455@01  $FVF<next>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@463@01 r) g@157@01) (img@464@01 r))
      (and
        (img@459@01 r)
        (and (Set_in (inv@458@01 r) g@157@01) (not (= (inv@458@01 r) x@206@01)))))
    (=
      ($FVF.lookup_next (as sm@468@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@207@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@455@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@468@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef309|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@463@01 r) g@157@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@460@01  $FVF<next>) r) r))
    :pattern ((inv@463@01 r))
    :qid |quant-u-421|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@468@01  $FVF<next>)) g@157@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 8
(declare-const n@469@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@469@01 g@157@01))
(pop) ; 9
(declare-fun inv@470@01 ($Ref) $Ref)
(declare-fun img@471@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@469@01 $Ref) (n2@469@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@469@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n1@469@01) n1@469@01))
      (and
        (Set_in n2@469@01 g@157@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) n2@469@01) n2@469@01))
      (= n1@469@01 n2@469@01))
    (= n1@469@01 n2@469@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@469@01 $Ref)) (!
  (=>
    (Set_in n@469@01 g@157@01)
    (and (= (inv@470@01 n@469@01) n@469@01) (img@471@01 n@469@01)))
  :pattern ((Set_in n@469@01 g@157@01))
  :pattern ((inv@470@01 n@469@01))
  :pattern ((img@471@01 n@469@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@471@01 r) (Set_in (inv@470@01 r) g@157@01)) (= (inv@470@01 r) r))
  :pattern ((inv@470@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@470@01 r) g@157@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@390@01  $FVF<next>) r) r))
  :pattern ((inv@470@01 r))
  :qid |quant-u-432|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@472@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@470@01 r) g@157@01) (img@471@01 r) (= r (inv@470@01 r)))
    ($Perm.min
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@473@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@470@01 r) g@157@01) (img@471@01 r) (= r (inv@470@01 r)))
    ($Perm.min
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@472@01 r)))
    $Perm.No))
(define-fun pTaken@474@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@470@01 r) g@157@01) (img@471@01 r) (= r (inv@470@01 r)))
    ($Perm.min
      (ite (= r x@206@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@472@01 r)) (pTaken@473@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@211@01 r) (Set_in (inv@210@01 r) g@157@01))
        (- (- $Perm.Write (pTaken@377@01 r)) (pTaken@382@01 r))
        $Perm.No)
      (pTaken@472@01 r))
    $Perm.No)
  
  :qid |quant-u-434|))))
(check-sat)
; unsat
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@470@01 r) g@157@01) (img@471@01 r) (= r (inv@470@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@472@01 r)) $Perm.No))
  
  :qid |quant-u-435|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@389@01 r)
          (and
            (Set_in (inv@388@01 r) g@157@01)
            (not (= (inv@388@01 r) x@206@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@473@01 r))
    $Perm.No)
  
  :qid |quant-u-436|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@473@01 r) $Perm.No)
  
  :qid |quant-u-437|))))
(check-sat)
; unknown
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@470@01 r) g@157@01) (img@471@01 r) (= r (inv@470@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@472@01 r)) (pTaken@473@01 r))
      $Perm.No))
  
  :qid |quant-u-438|))))
(check-sat)
