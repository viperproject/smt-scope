(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun val () T@U)
(declare-fun next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun List (T@U) T@U)
(declare-fun PredicateType_ListType () T@T)
(declare-fun |sum_rec'| (T@U T@U) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |sum_rec#triggerStateless| (T@U) Int)
(declare-fun |List#trigger| (T@U T@U) Bool)
(declare-fun |List#everUsed| (T@U) Bool)
(declare-fun sum_rec (T@U T@U) Int)
(declare-fun wand (Bool T@U Real T@U Int) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wandType () T@T)
(declare-fun |List#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |wand#ft| (Bool T@U Real T@U Int) T@U)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |wand#sm| (Bool T@U Real T@U Int) T@U)
(declare-fun FullPerm () Real)
(declare-fun |sum_rec#frame| (T@U T@U) Int)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type val) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated val next)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val@@0 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val@@0) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val@@0) x0 x1) val@@0)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@1 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@1) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@2 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@2) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@3 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@3) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@4 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@4) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@4) x0@@3 x1@@3) val@@4)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@5 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@5) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@6 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@6) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@7 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@7) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 11) (= (type null) RefType)) (forall ((arg0@@23 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@23))))
(= (type (PredicateMaskField arg0@@23)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@23))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@24 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@24))))
(= (type (WandMaskField arg0@@24)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@24))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_ListType) 12) (forall ((arg0@@25 T@U) ) (! (= (type (List arg0@@25)) (FieldType PredicateType_ListType FrameTypeType))
 :qid |funType:List|
 :pattern ( (List arg0@@25))
))))
(assert (forall ((ys T@U) ) (!  (=> (= (type ys) RefType) (IsPredicateField (List ys)))
 :qid |stdinbpl.375:15|
 :skolemid |35|
 :pattern ( (List ys))
)))
(assert (forall ((Heap@@2 T@U) (ys@@0 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ys@@0) RefType)) (dummyFunction (int_2_U (|sum_rec#triggerStateless| ys@@0))))
 :qid |stdinbpl.237:15|
 :skolemid |30|
 :pattern ( (|sum_rec'| Heap@@2 ys@@0))
)))
(assert (forall ((Heap@@3 T@U) (ys@@1 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ys@@1) RefType)) (|List#everUsed| (List ys@@1)))
 :qid |stdinbpl.394:15|
 :skolemid |39|
 :pattern ( (|List#trigger| Heap@@3 (List ys@@1)))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@4 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@5 T@U) (ys@@2 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ys@@2) RefType)) (and (= (sum_rec Heap@@5 ys@@2) (|sum_rec'| Heap@@5 ys@@2)) (dummyFunction (int_2_U (|sum_rec#triggerStateless| ys@@2)))))
 :qid |stdinbpl.233:15|
 :skolemid |29|
 :pattern ( (sum_rec Heap@@5 ys@@2))
)))
(assert  (and (= (Ctor WandType_wandType) 13) (forall ((arg0@@26 Bool) (arg1@@9 T@U) (arg2@@3 Real) (arg3@@1 T@U) (arg4 Int) ) (! (= (type (wand arg0@@26 arg1@@9 arg2@@3 arg3@@1 arg4)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@26 arg1@@9 arg2@@3 arg3@@1 arg4))
))))
(assert (forall ((arg1@@10 Bool) (arg2@@4 T@U) (arg3@@2 Real) (arg4@@0 T@U) (arg5 Int) ) (!  (=> (and (= (type arg2@@4) RefType) (= (type arg4@@0) RefType)) (= (getPredWandId (wand arg1@@10 arg2@@4 arg3@@2 arg4@@0 arg5)) 1))
 :qid |stdinbpl.206:15|
 :skolemid |27|
 :pattern ( (wand arg1@@10 arg2@@4 arg3@@2 arg4@@0 arg5))
)))
(assert (forall ((ys@@3 T@U) (ys2 T@U) ) (!  (=> (and (and (= (type ys@@3) RefType) (= (type ys2) RefType)) (= (List ys@@3) (List ys2))) (= ys@@3 ys2))
 :qid |stdinbpl.385:15|
 :skolemid |37|
 :pattern ( (List ys@@3) (List ys2))
)))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (|List#sm| arg0@@27)) (FieldType PredicateType_ListType (MapType1Type RefType boolType)))
 :qid |funType:List#sm|
 :pattern ( (|List#sm| arg0@@27))
)))
(assert (forall ((ys@@4 T@U) (ys2@@0 T@U) ) (!  (=> (and (and (= (type ys@@4) RefType) (= (type ys2@@0) RefType)) (= (|List#sm| ys@@4) (|List#sm| ys2@@0))) (= ys@@4 ys2@@0))
 :qid |stdinbpl.389:15|
 :skolemid |38|
 :pattern ( (|List#sm| ys@@4) (|List#sm| ys2@@0))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@6 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.173:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((Heap@@7 T@U) (Mask@@4 T@U) (ys@@5 T@U) ) (!  (=> (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type ys@@5) RefType)) (and (state Heap@@7 Mask@@4) (< AssumeFunctionsAbove 0))) (= (sum_rec Heap@@7 ys@@5) (+ (U_2_int (MapType0Select Heap@@7 ys@@5 val)) (ite (= (MapType0Select Heap@@7 ys@@5 next) null) 0 (|sum_rec'| Heap@@7 (MapType0Select Heap@@7 ys@@5 next))))))
 :qid |stdinbpl.243:15|
 :skolemid |31|
 :pattern ( (state Heap@@7 Mask@@4) (sum_rec Heap@@7 ys@@5))
 :pattern ( (state Heap@@7 Mask@@4) (|sum_rec#triggerStateless| ys@@5) (|List#trigger| Heap@@7 (List ys@@5)))
)))
(assert (forall ((arg1@@11 Bool) (arg2@@5 T@U) (arg3@@3 Real) (arg4@@1 T@U) (arg5@@0 Int) ) (!  (=> (and (= (type arg2@@5) RefType) (= (type arg4@@1) RefType)) (IsWandField (wand arg1@@11 arg2@@5 arg3@@3 arg4@@1 arg5@@0)))
 :qid |stdinbpl.186:15|
 :skolemid |22|
 :pattern ( (wand arg1@@11 arg2@@5 arg3@@3 arg4@@1 arg5@@0))
)))
(assert (forall ((arg0@@28 Bool) (arg1@@12 T@U) (arg2@@6 Real) (arg3@@4 T@U) (arg4@@2 Int) ) (! (= (type (|wand#ft| arg0@@28 arg1@@12 arg2@@6 arg3@@4 arg4@@2)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@28 arg1@@12 arg2@@6 arg3@@4 arg4@@2))
)))
(assert (forall ((arg1@@13 Bool) (arg2@@7 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@1 Int) ) (!  (=> (and (= (type arg2@@7) RefType) (= (type arg4@@3) RefType)) (IsWandField (|wand#ft| arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@1)))
 :qid |stdinbpl.190:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@1))
)))
(assert  (not (IsPredicateField val)))
(assert  (not (IsWandField val)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@3 T@U) (Mask@@5 T@U) ) (!  (=> (and (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@5) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@3 Mask@@5)) (succHeap Heap@@8 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@3 Mask@@5))
)))
(assert (forall ((arg1@@14 Bool) (arg2@@8 T@U) (arg3@@6 Real) (arg4@@4 T@U) (arg5@@2 Int) ) (!  (=> (and (= (type arg2@@8) RefType) (= (type arg4@@4) RefType)) (not (IsPredicateField (wand arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@2))))
 :qid |stdinbpl.194:15|
 :skolemid |24|
 :pattern ( (wand arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@2))
)))
(assert (forall ((arg1@@15 Bool) (arg2@@9 T@U) (arg3@@7 Real) (arg4@@5 T@U) (arg5@@3 Int) ) (!  (=> (and (= (type arg2@@9) RefType) (= (type arg4@@5) RefType)) (not (IsPredicateField (|wand#ft| arg1@@15 arg2@@9 arg3@@7 arg4@@5 arg5@@3))))
 :qid |stdinbpl.198:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@15 arg2@@9 arg3@@7 arg4@@5 arg5@@3))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@29 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@29 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@29 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.161:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@6 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@6) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@6 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@6 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@6 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@17 Bool) (arg2@@10 T@U) (arg3@@8 Real) (arg4@@6 T@U) (arg5@@4 Int) (arg1_2 Bool) (arg2_2 T@U) (arg3_2 Real) (arg4_2 T@U) (arg5_2 Int) ) (!  (=> (and (and (and (and (= (type arg2@@10) RefType) (= (type arg4@@6) RefType)) (= (type arg2_2) RefType)) (= (type arg4_2) RefType)) (= (wand arg1@@17 arg2@@10 arg3@@8 arg4@@6 arg5@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2))) (and (= arg1@@17 arg1_2) (and (= arg2@@10 arg2_2) (and (= arg3@@8 arg3_2) (and (= arg4@@6 arg4_2) (= arg5@@4 arg5_2))))))
 :qid |stdinbpl.210:15|
 :skolemid |28|
 :pattern ( (wand arg1@@17 arg2@@10 arg3@@8 arg4@@6 arg5@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2))
)))
(assert (forall ((arg0@@30 Bool) (arg1@@18 T@U) (arg2@@11 Real) (arg3@@9 T@U) (arg4@@7 Int) ) (! (= (type (|wand#sm| arg0@@30 arg1@@18 arg2@@11 arg3@@9 arg4@@7)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@30 arg1@@18 arg2@@11 arg3@@9 arg4@@7))
)))
(assert (forall ((arg1@@19 Bool) (arg2@@12 T@U) (arg3@@10 Real) (arg4@@8 T@U) (arg5@@5 Int) ) (!  (=> (and (= (type arg2@@12) RefType) (= (type arg4@@8) RefType)) (= (|wand#sm| arg1@@19 arg2@@12 arg3@@10 arg4@@8 arg5@@5) (WandMaskField (|wand#ft| arg1@@19 arg2@@12 arg3@@10 arg4@@8 arg5@@5))))
 :qid |stdinbpl.202:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@19 arg2@@12 arg3@@10 arg4@@8 arg5@@5)))
)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@4 T@U) (Mask@@7 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@4 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@9 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@9 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@4 Mask@@7) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@10 T@U) (ExhaleHeap@@5 T@U) (Mask@@8 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@10 ExhaleHeap@@5 Mask@@8)) (and (HasDirectPerm Mask@@8 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@10 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@10 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@10 ExhaleHeap@@5 Mask@@8) (IsWandField pm_f@@2))
)))
(assert (forall ((ys@@6 T@U) ) (!  (=> (= (type ys@@6) RefType) (= (getPredWandId (List ys@@6)) 0))
 :qid |stdinbpl.379:15|
 :skolemid |36|
 :pattern ( (List ys@@6))
)))
(assert (forall ((Mask@@9 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@9) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@9)) (and (>= (U_2_real (MapType1Select Mask@@9 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@9) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@9 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@9) (MapType1Select Mask@@9 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@11 T@U) (Mask@@10 T@U) (ys@@7 T@U) ) (!  (=> (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type ys@@7) RefType)) (state Heap@@11 Mask@@10)) (= (|sum_rec'| Heap@@11 ys@@7) (|sum_rec#frame| (MapType0Select Heap@@11 null (List ys@@7)) ys@@7)))
 :qid |stdinbpl.250:15|
 :skolemid |32|
 :pattern ( (state Heap@@11 Mask@@10) (|sum_rec'| Heap@@11 ys@@7))
 :pattern ( (state Heap@@11 Mask@@10) (|sum_rec#triggerStateless| ys@@7) (|List#trigger| Heap@@11 (List ys@@7)))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@12 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@12) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@12 o $allocated))) (U_2_bool (MapType0Select Heap@@12 (MapType0Select Heap@@12 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@12 o f))
)))
(assert (forall ((ys@@8 T@U) ) (!  (=> (= (type ys@@8) RefType) (= (PredicateMaskField (List ys@@8)) (|List#sm| ys@@8)))
 :qid |stdinbpl.371:15|
 :skolemid |34|
 :pattern ( (PredicateMaskField (List ys@@8)))
)))
(assert (forall ((Heap@@13 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@13) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@13 (MapType0Store Heap@@13 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@13 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.168:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Result_4Mask () T@U)
(declare-fun xs () T@U)
(declare-fun b_1_1@18 () Bool)
(declare-fun b_7@6 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun i@0 () Int)
(declare-fun Heap@11 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun b_1_1@17 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_2Mask@3 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_8@0 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun b_8@2 () Bool)
(declare-fun Ops_1Mask@10 () T@U)
(declare-fun b_8@3 () Bool)
(declare-fun Ops_1Heap@8 () T@U)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun b_8@4 () Bool)
(declare-fun takeTransfer@7 () Real)
(declare-fun neededTransfer@13 () Real)
(declare-fun Heap@9 () T@U)
(declare-fun b_7@3 () Bool)
(declare-fun Mask@13 () T@U)
(declare-fun Used_2Mask@1 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_2Mask@2 () T@U)
(declare-fun b_7@4 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_7@5 () Bool)
(declare-fun Mask@14 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_1Mask@8 () T@U)
(declare-fun b_7@0 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_2Mask@0 () T@U)
(declare-fun b_7@1 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun Ops_1Mask@9 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun b_7 () Bool)
(declare-fun Ops_1Heap@7 () T@U)
(declare-fun Ops_1Mask@7 () T@U)
(declare-fun b_1_1@16 () Bool)
(declare-fun b_1_1@15 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Ops_1Heap@5 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Ops_1Heap@6 () T@U)
(declare-fun Ops_1Heap@4 () T@U)
(declare-fun Ops_1Heap@3 () T@U)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun Ops_1Heap@1 () T@U)
(declare-fun Ops_1Heap@2 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun b_6@0 () Bool)
(declare-fun b_1_1@12 () Bool)
(declare-fun b_2_1@19 () Bool)
(declare-fun b_6@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_6@2 () Bool)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun Used_1Mask@12 () T@U)
(declare-fun b_6@3 () Bool)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_6@4 () Bool)
(declare-fun b_1_1@13 () Bool)
(declare-fun b_1_1@14 () Bool)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun b_1_1@8 () Bool)
(declare-fun b_2_1@18 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun Used_1Mask@11 () T@U)
(declare-fun arg@0 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_5@0 () Bool)
(declare-fun b_5@1 () Bool)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun b_5@3 () Bool)
(declare-fun b_5@4 () Bool)
(declare-fun b_1_1@9 () Bool)
(declare-fun b_1_1@10 () Bool)
(declare-fun b_1_1@11 () Bool)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun b_2_1@15 () Bool)
(declare-fun Mask@9 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Used_1Mask@9 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_1Mask@10 () T@U)
(declare-fun b_2_1@16 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_2_1@17 () Bool)
(declare-fun Mask@10 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun Used_1Mask@7 () T@U)
(declare-fun b_2_1@12 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_1Mask@8 () T@U)
(declare-fun b_2_1@13 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_2_1@14 () Bool)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_1_1@5 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_4@0 () Bool)
(declare-fun b_4@1 () Bool)
(declare-fun b_4@2 () Bool)
(declare-fun b_4@3 () Bool)
(declare-fun b_4@4 () Bool)
(declare-fun b_1_1@6 () Bool)
(declare-fun b_1_1@7 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun neededTransfer@5 () Real)
(declare-fun b_2_1@9 () Bool)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Used_1Mask@5 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_1Mask@6 () T@U)
(declare-fun b_2_1@10 () Bool)
(declare-fun b_2_1@11 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun b_2_1@6 () Bool)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_1Mask@4 () T@U)
(declare-fun b_2_1@7 () Bool)
(declare-fun b_2_1@8 () Bool)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_1_1@2 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_3@2 () Bool)
(declare-fun b_3@3 () Bool)
(declare-fun b_3@4 () Bool)
(declare-fun b_1_1@3 () Bool)
(declare-fun b_1_1@4 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@5 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@1 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@@14 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@0) (MapType1Type RefType realType)) (= (type xs) RefType)) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Used_2Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@10) (MapType1Type RefType realType))) (= (type Ops_1Heap@8) (MapType0Type RefType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Used_2Mask@1) (MapType1Type RefType realType))) (= (type Used_2Mask@2) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Ops_1Mask@8) (MapType1Type RefType realType))) (= (type Used_2Mask@0) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@9) (MapType1Type RefType realType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Ops_1Heap@7) (MapType0Type RefType))) (= (type Ops_1Mask@7) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Ops_1Heap@5) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Ops_1Heap@6) (MapType0Type RefType))) (= (type Ops_1Heap@4) (MapType0Type RefType))) (= (type Ops_1Heap@3) (MapType0Type RefType))) (= (type Ops_1Heap@1) (MapType0Type RefType))) (= (type Ops_1Heap@2) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@6) (MapType1Type RefType realType))) (= (type Used_1Mask@12) (MapType1Type RefType realType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (forall ((arg0@@31 T@U) (arg1@@20 T@U) ) (! (= (type (CombineFrames arg0@@31 arg1@@20)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@31 arg1@@20))
))) (forall ((arg0@@32 T@U) ) (! (= (type (FrameFragment arg0@@32)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@32))
))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Used_1Mask@7) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Ops_1Mask@3) (MapType1Type RefType realType))) (= (type Used_1Mask@11) (MapType1Type RefType realType))) (= (type arg@0) RefType)) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@5) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Used_1Mask@9) (MapType1Type RefType realType))) (= (type Used_1Mask@10) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Used_1Mask@8) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@4) (MapType1Type RefType realType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Used_1Mask@5) (MapType1Type RefType realType))) (= (type Used_1Mask@6) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@4) (MapType1Type RefType realType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type UsedHeap@0) (MapType0Type RefType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@@14) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)))
(set-info :boogie-vc-id t01)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 109) (let ((anon76_correct true))
(let ((anon117_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 13) 10)) anon76_correct)))
(let ((anon117_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= FullPerm (U_2_real (MapType1Select Result_4Mask null (List xs))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_4Mask null (List xs)))) (=> (= (ControlFlow 0 11) 10) anon76_correct))))))
(let ((anon77_correct  (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> (and (and b_1_1@18 b_1_1@18) b_7@6) (= (sum_rec Result_4Heap xs) i@0))) (=> (=> (and (and b_1_1@18 b_1_1@18) b_7@6) (= (sum_rec Result_4Heap xs) i@0)) (=> (and (state Heap@11 Mask@15) (= Mask@16 (MapType1Store Mask@15 null (wand true xs FullPerm xs i@0) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (wand true xs FullPerm xs i@0))) FullPerm))))) (=> (and (and (state Heap@11 Mask@16) (state Heap@11 Mask@16)) (and (state Heap@11 Mask@16) (= (ControlFlow 0 6) (- 0 5)))) false))))))
(let ((anon115_Then_correct  (=> b_1_1@18 (and (and (=> (= (ControlFlow 0 14) 6) anon77_correct) (=> (= (ControlFlow 0 14) 11) anon117_Then_correct)) (=> (= (ControlFlow 0 14) 13) anon117_Else_correct)))))
(let ((anon115_Else_correct  (=> (and (not b_1_1@18) (= (ControlFlow 0 9) 6)) anon77_correct)))
(let ((anon114_Then_correct  (=> (and (and b_1_1@18 b_1_1@18) b_7@6) (and (=> (= (ControlFlow 0 15) 14) anon115_Then_correct) (=> (= (ControlFlow 0 15) 9) anon115_Else_correct)))))
(let ((anon114_Else_correct  (=> (and (not (and (and b_1_1@18 b_1_1@18) b_7@6)) (= (ControlFlow 0 8) 6)) anon77_correct)))
(let ((anon71_correct  (and (=> (= (ControlFlow 0 16) (- 0 17)) (=> (and (and b_1_1@17 b_1_1@17) b_7@6) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null (List xs))) initNeededTransfer@3)))) (=> (=> (and (and b_1_1@17 b_1_1@17) b_7@6) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null (List xs))) initNeededTransfer@3))) (=> (and (= b_8@0  (and b_1_1@17 b_7@6)) (= b_8@1  (and b_8@0 (state Result_4Heap Result_4Mask)))) (=> (and (and (= b_8@2  (and b_8@1 (sumMask Result_4Mask Ops_1Mask@10 Used_2Mask@3))) (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_1Heap@8 Result_4Heap Ops_1Mask@10)) (IdenticalOnKnownLocations Used_2Heap@0 Result_4Heap Used_2Mask@3)))) (and (= b_8@4  (and b_8@3 (state Result_4Heap Result_4Mask))) (= b_1_1@18  (and b_1_1@17 b_8@4)))) (and (=> (= (ControlFlow 0 16) 15) anon114_Then_correct) (=> (= (ControlFlow 0 16) 8) anon114_Else_correct))))))))
(let ((anon113_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= neededTransfer@15 neededTransfer@13) (= Heap@11 Heap@9)) (=> (and (and (= b_7@6 b_7@3) (= Mask@15 Mask@13)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 20) 16))) anon71_correct)))))
(let ((anon113_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_2Mask@2 (MapType1Store Used_2Mask@1 null (List xs) (real_2_U (+ (U_2_real (MapType1Select Used_2Mask@1 null (List xs))) takeTransfer@7))))) (=> (and (and (= b_7@4  (and b_7@3 (state Used_2Heap@0 Used_2Mask@2))) (= TempMask@3 (MapType1Store ZeroMask null (List xs) (real_2_U FullPerm)))) (and (= b_7@5  (and b_7@4 (IdenticalOnKnownLocations Heap@9 Used_2Heap@0 TempMask@3))) (= Mask@14 (MapType1Store Mask@13 null (List xs) (real_2_U (- (U_2_real (MapType1Select Mask@13 null (List xs))) takeTransfer@7)))))) (=> (and (and (and (forall ((o_6 T@U) (f_10 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_10))))
(let ((A@@12 (FieldTypeInv0 (type f_10))))
 (=> (and (and (= (type o_6) RefType) (= (type f_10) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|wand#sm| true xs FullPerm xs i@0)) o_6 f_10)) (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|List#sm| xs)) o_6 f_10)))) (U_2_bool (MapType1Select newPMask@2 o_6 f_10)))))
 :qid |stdinbpl.884:35|
 :skolemid |42|
 :pattern ( (MapType1Select newPMask@2 o_6 f_10))
)) (= Heap@10 (MapType0Store Heap@9 null (|wand#sm| true xs FullPerm xs i@0) newPMask@2))) (and (= neededTransfer@15 neededTransfer@14) (= Heap@11 Heap@10))) (and (and (= b_7@6 b_7@5) (= Mask@15 Mask@14)) (and (= Used_2Mask@3 Used_2Mask@2) (= (ControlFlow 0 19) 16)))) anon71_correct))))))
(let ((anon112_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 22) 19) anon113_Then_correct) (=> (= (ControlFlow 0 22) 20) anon113_Else_correct)))))
(let ((anon112_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 21) 19) anon113_Then_correct) (=> (= (ControlFlow 0 21) 20) anon113_Else_correct)))))
(let ((anon111_Then_correct  (=> (and (and (and (and (and b_1_1@17 b_1_1@17) b_7@3) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@13 null (List xs))))) (and (=> (= (ControlFlow 0 23) 21) anon112_Then_correct) (=> (= (ControlFlow 0 23) 22) anon112_Else_correct)))))
(let ((anon111_Else_correct  (=> (not (and (and (and (and b_1_1@17 b_1_1@17) b_7@3) true) (> neededTransfer@13 0.0))) (=> (and (= neededTransfer@15 neededTransfer@13) (= Heap@11 Heap@9)) (=> (and (and (= b_7@6 b_7@3) (= Mask@15 Mask@13)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 18) 16))) anon71_correct)))))
(let ((anon110_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Used_2Mask@1 ZeroMask) (= Ops_1Mask@10 Ops_1Mask@8)) (and (= b_7@3 b_7@0) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 26) 23) anon111_Then_correct) (=> (= (ControlFlow 0 26) 18) anon111_Else_correct))))))
(let ((anon110_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Used_2Mask@0 (MapType1Store ZeroMask null (List xs) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List xs))) takeTransfer@6))))) (=> (and (and (and (= b_7@1  (and b_7@0 (state Used_2Heap@0 Used_2Mask@0))) (= TempMask@2 (MapType1Store ZeroMask null (List xs) (real_2_U FullPerm)))) (and (= b_7@2  (and b_7@1 (IdenticalOnKnownLocations Ops_1Heap@8 Used_2Heap@0 TempMask@2))) (= Ops_1Mask@9 (MapType1Store Ops_1Mask@8 null (List xs) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@8 null (List xs))) takeTransfer@6)))))) (and (and (= Used_2Mask@1 Used_2Mask@0) (= Ops_1Mask@10 Ops_1Mask@9)) (and (= b_7@3 b_7@2) (= neededTransfer@13 neededTransfer@12)))) (and (=> (= (ControlFlow 0 25) 23) anon111_Then_correct) (=> (= (ControlFlow 0 25) 18) anon111_Else_correct)))))))
(let ((anon109_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 28) 25) anon110_Then_correct) (=> (= (ControlFlow 0 28) 26) anon110_Else_correct)))))
(let ((anon109_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 27) 25) anon110_Then_correct) (=> (= (ControlFlow 0 27) 26) anon110_Else_correct)))))
(let ((anon108_Then_correct  (=> (and (and (and (and (and b_1_1@17 b_1_1@17) b_7@0) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_1Mask@8 null (List xs))))) (and (=> (= (ControlFlow 0 29) 27) anon109_Then_correct) (=> (= (ControlFlow 0 29) 28) anon109_Else_correct)))))
(let ((anon108_Else_correct  (=> (not (and (and (and (and b_1_1@17 b_1_1@17) b_7@0) true) (> FullPerm 0.0))) (=> (and (and (= Used_2Mask@1 ZeroMask) (= Ops_1Mask@10 Ops_1Mask@8)) (and (= b_7@3 b_7@0) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 24) 23) anon111_Then_correct) (=> (= (ControlFlow 0 24) 18) anon111_Else_correct))))))
(let ((anon59_correct  (=> (and (= b_7@0  (and b_7 (state Used_2Heap@0 ZeroMask))) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select ZeroMask null (List xs))) FullPerm))) (and (=> (= (ControlFlow 0 30) (- 0 31)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 30) 29) anon108_Then_correct) (=> (= (ControlFlow 0 30) 24) anon108_Else_correct)))))))
(let ((anon58_correct  (=> (and (and (and (state Ops_1Heap@7 Ops_1Mask@7) (= b_1_1@16  (and b_1_1@15 (state Ops_1Heap@7 Ops_1Mask@7)))) (and (= Ops_1Heap@8 Ops_1Heap@7) (= Mask@13 Mask@12))) (and (and (= Ops_1Mask@8 Ops_1Mask@7) (= b_1_1@17 b_1_1@16)) (and (= Heap@9 Heap@8) (= (ControlFlow 0 33) 30)))) anon59_correct)))
(let ((anon107_Else_correct  (=> (= (MapType0Select Ops_1Heap@5 xs next) null) (=> (and (= Ops_1Heap@7 Ops_1Heap@5) (= (ControlFlow 0 35) 33)) anon58_correct))))
(let ((anon107_Then_correct  (=> (not (= (MapType0Select Ops_1Heap@5 xs next) null)) (=> (and (and (forall ((o_5 T@U) (f_9 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_9))))
(let ((A@@13 (FieldTypeInv0 (type f_9))))
 (=> (and (and (= (type o_5) RefType) (= (type f_9) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Ops_1Heap@5 null (|List#sm| xs)) o_5 f_9)) (U_2_bool (MapType1Select (MapType0Select Ops_1Heap@5 null (|List#sm| (MapType0Select Ops_1Heap@5 xs next))) o_5 f_9)))) (U_2_bool (MapType1Select newPMask@1 o_5 f_9)))))
 :qid |stdinbpl.823:33|
 :skolemid |41|
 :pattern ( (MapType1Select newPMask@1 o_5 f_9))
)) (= Ops_1Heap@6 (MapType0Store Ops_1Heap@5 null (|List#sm| xs) newPMask@1))) (and (= Ops_1Heap@7 Ops_1Heap@6) (= (ControlFlow 0 34) 33))) anon58_correct))))
(let ((anon56_correct  (=> (and (= Ops_1Heap@4 (MapType0Store Ops_1Heap@3 null (|List#sm| xs) (MapType1Store (MapType0Select Ops_1Heap@3 null (|List#sm| xs)) xs val (bool_2_U true)))) (= Ops_1Heap@5 (MapType0Store Ops_1Heap@4 null (|List#sm| xs) (MapType1Store (MapType0Select Ops_1Heap@4 null (|List#sm| xs)) xs next (bool_2_U true))))) (and (=> (= (ControlFlow 0 36) 34) anon107_Then_correct) (=> (= (ControlFlow 0 36) 35) anon107_Else_correct)))))
(let ((anon106_Else_correct  (=> (HasDirectPerm Ops_1Mask@7 null (List xs)) (=> (and (= Ops_1Heap@3 Ops_1Heap@0) (= (ControlFlow 0 38) 36)) anon56_correct))))
(let ((anon106_Then_correct  (=> (not (HasDirectPerm Ops_1Mask@7 null (List xs))) (=> (and (and (= Ops_1Heap@1 (MapType0Store Ops_1Heap@0 null (|List#sm| xs) ZeroPMask)) (= Ops_1Heap@2 (MapType0Store Ops_1Heap@1 null (List xs) freshVersion@0))) (and (= Ops_1Heap@3 Ops_1Heap@2) (= (ControlFlow 0 37) 36))) anon56_correct))))
(let ((anon54_correct  (=> (= b_6@0  (and b_1_1@12 b_2_1@19)) (=> (and (= b_6@1  (and b_6@0 (state Result_3Heap Result_3Mask))) (= b_6@2  (and b_6@1 (sumMask Result_3Mask Ops_1Mask@6 Used_1Mask@12)))) (=> (and (and (and (= b_6@3  (and (and b_6@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_3Heap Ops_1Mask@6)) (IdenticalOnKnownLocations Used_1Heap@0 Result_3Heap Used_1Mask@12))) (= b_6@4  (and b_6@3 (state Result_3Heap Result_3Mask)))) (and (= b_1_1@13  (and b_1_1@12 b_6@4)) (= Ops_1Mask@7 (MapType1Store Ops_1Mask@6 null (List xs) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@6 null (List xs))) FullPerm)))))) (and (and (= b_1_1@14  (and b_1_1@13 (state Ops_1Heap@0 Ops_1Mask@7))) (= b_1_1@15  (and b_1_1@14 (state Ops_1Heap@0 Ops_1Mask@7)))) (and (|List#trigger| Ops_1Heap@0 (List xs)) (= (MapType0Select Ops_1Heap@0 null (List xs)) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@0 xs val)) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@0 xs next)) (FrameFragment (ite (not (= (MapType0Select Ops_1Heap@0 xs next) null)) (MapType0Select Ops_1Heap@0 null (List (MapType0Select Ops_1Heap@0 xs next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 39) 37) anon106_Then_correct) (=> (= (ControlFlow 0 39) 38) anon106_Else_correct)))))))
(let ((anon53_correct  (and (=> (= (ControlFlow 0 41) (- 0 42)) (=> (and b_1_1@8 b_2_1@18) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_1Mask@11 null (List arg@0))) initNeededTransfer@2)))) (=> (=> (and b_1_1@8 b_2_1@18) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_1Mask@11 null (List arg@0))) initNeededTransfer@2))) (=> (= b_5@0  (and b_1_1@8 b_2_1@18)) (=> (and (= b_5@1  (and b_5@0 (state Result_2Heap Result_2Mask))) (= b_5@2  (and b_5@1 (sumMask Result_2Mask Ops_1Mask@5 Used_1Mask@11)))) (=> (and (and (= b_5@3  (and (and b_5@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_2Heap Ops_1Mask@5)) (IdenticalOnKnownLocations Used_1Heap@0 Result_2Heap Used_1Mask@11))) (= b_5@4  (and b_5@3 (state Result_2Heap Result_2Mask)))) (and (= b_1_1@9  (and b_1_1@8 b_5@4)) (= b_1_1@10  (and b_1_1@9 b_2_1@18)))) (=> (and (and (and (= b_1_1@11  (and b_1_1@10 (= Used_1Heap@0 Ops_1Heap@0))) (= Used_1Mask@12 Used_1Mask@11)) (and (= Heap@8 Heap@7) (= Mask@12 Mask@11))) (and (and (= b_1_1@12 b_1_1@11) (= b_2_1@19 b_2_1@18)) (and (= Ops_1Mask@6 Ops_1Mask@5) (= (ControlFlow 0 41) 39)))) anon54_correct))))))))
(let ((anon105_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= b_2_1@18 b_2_1@15)) (=> (and (and (= Mask@11 Mask@9) (= Heap@7 Heap@5)) (and (= Used_1Mask@11 Used_1Mask@9) (= (ControlFlow 0 45) 41))) anon53_correct)))))
(let ((anon105_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_1Mask@10 (MapType1Store Used_1Mask@9 null (List arg@0) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@9 null (List arg@0))) takeTransfer@5))))) (=> (and (and (= b_2_1@16  (and b_2_1@15 (state Used_1Heap@0 Used_1Mask@10))) (= TempMask@1 (MapType1Store ZeroMask null (List arg@0) (real_2_U FullPerm)))) (and (= b_2_1@17  (and b_2_1@16 (IdenticalOnKnownLocations Heap@5 Used_1Heap@0 TempMask@1))) (= Mask@10 (MapType1Store Mask@9 null (List arg@0) (real_2_U (- (U_2_real (MapType1Select Mask@9 null (List arg@0))) takeTransfer@5)))))) (=> (and (and (and (forall ((o_4 T@U) (f_8 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_8))))
(let ((A@@14 (FieldTypeInv0 (type f_8))))
 (=> (and (and (= (type o_4) RefType) (= (type f_8) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|wand#sm| true xs FullPerm xs i@0)) o_4 f_8)) (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|List#sm| (MapType0Select Heap@5 xs next))) o_4 f_8)))) (U_2_bool (MapType1Select newPMask@0 o_4 f_8)))))
 :qid |stdinbpl.779:41|
 :skolemid |40|
 :pattern ( (MapType1Select newPMask@0 o_4 f_8))
)) (= Heap@6 (MapType0Store Heap@5 null (|wand#sm| true xs FullPerm xs i@0) newPMask@0))) (and (= neededTransfer@11 neededTransfer@10) (= b_2_1@18 b_2_1@17))) (and (and (= Mask@11 Mask@10) (= Heap@7 Heap@6)) (and (= Used_1Mask@11 Used_1Mask@10) (= (ControlFlow 0 44) 41)))) anon53_correct))))))
(let ((anon104_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 47) 44) anon105_Then_correct) (=> (= (ControlFlow 0 47) 45) anon105_Else_correct)))))
(let ((anon104_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 46) 44) anon105_Then_correct) (=> (= (ControlFlow 0 46) 45) anon105_Else_correct)))))
(let ((anon103_Then_correct  (=> (and (and (and (and b_1_1@8 b_2_1@15) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@9 null (List arg@0))))) (and (=> (= (ControlFlow 0 48) 46) anon104_Then_correct) (=> (= (ControlFlow 0 48) 47) anon104_Else_correct)))))
(let ((anon103_Else_correct  (=> (not (and (and (and b_1_1@8 b_2_1@15) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= b_2_1@18 b_2_1@15)) (=> (and (and (= Mask@11 Mask@9) (= Heap@7 Heap@5)) (and (= Used_1Mask@11 Used_1Mask@9) (= (ControlFlow 0 43) 41))) anon53_correct)))))
(let ((anon102_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_1Mask@5 Ops_1Mask@3) (= Used_1Mask@9 Used_1Mask@7)) (and (= b_2_1@15 b_2_1@12) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 51) 48) anon103_Then_correct) (=> (= (ControlFlow 0 51) 43) anon103_Else_correct))))))
(let ((anon102_Then_correct  (=> (> takeTransfer@4 0.0) (=> (and (= neededTransfer@8 (- FullPerm takeTransfer@4)) (= Used_1Mask@8 (MapType1Store Used_1Mask@7 null (List arg@0) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@7 null (List arg@0))) takeTransfer@4))))) (=> (and (and (and (= b_2_1@13  (and b_2_1@12 (state Used_1Heap@0 Used_1Mask@8))) (= TempMask@0 (MapType1Store ZeroMask null (List arg@0) (real_2_U FullPerm)))) (and (= b_2_1@14  (and b_2_1@13 (IdenticalOnKnownLocations Ops_1Heap@0 Used_1Heap@0 TempMask@0))) (= Ops_1Mask@4 (MapType1Store Ops_1Mask@3 null (List arg@0) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@3 null (List arg@0))) takeTransfer@4)))))) (and (and (= Ops_1Mask@5 Ops_1Mask@4) (= Used_1Mask@9 Used_1Mask@8)) (and (= b_2_1@15 b_2_1@14) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 50) 48) anon103_Then_correct) (=> (= (ControlFlow 0 50) 43) anon103_Else_correct)))))))
(let ((anon101_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 53) 50) anon102_Then_correct) (=> (= (ControlFlow 0 53) 51) anon102_Else_correct)))))
(let ((anon101_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 52) 50) anon102_Then_correct) (=> (= (ControlFlow 0 52) 51) anon102_Else_correct)))))
(let ((anon100_Then_correct  (=> (and (and (and (and b_1_1@8 b_2_1@12) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_1Mask@3 null (List arg@0))))) (and (=> (= (ControlFlow 0 54) 52) anon101_Then_correct) (=> (= (ControlFlow 0 54) 53) anon101_Else_correct)))))
(let ((anon100_Else_correct  (=> (not (and (and (and b_1_1@8 b_2_1@12) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@5 Ops_1Mask@3) (= Used_1Mask@9 Used_1Mask@7)) (and (= b_2_1@15 b_2_1@12) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 49) 48) anon103_Then_correct) (=> (= (ControlFlow 0 49) 43) anon103_Else_correct))))))
(let ((anon41_correct  (=> (and (= arg@0 (MapType0Select Result_1Heap xs next)) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select Used_1Mask@7 null (List arg@0))) FullPerm))) (and (=> (= (ControlFlow 0 55) (- 0 56)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 55) 54) anon100_Then_correct) (=> (= (ControlFlow 0 55) 49) anon100_Else_correct)))))))
(let ((anon99_Else_correct  (=> (and (not b_1_1@8) (= (ControlFlow 0 60) 55)) anon41_correct)))
(let ((anon99_Then_correct  (=> b_1_1@8 (and (=> (= (ControlFlow 0 58) (- 0 59)) (HasDirectPerm Result_1Mask xs next)) (=> (HasDirectPerm Result_1Mask xs next) (=> (= (ControlFlow 0 58) 55) anon41_correct))))))
(let ((anon98_Then_correct  (=> (and b_1_1@8 b_2_1@12) (and (=> (= (ControlFlow 0 61) 58) anon99_Then_correct) (=> (= (ControlFlow 0 61) 60) anon99_Else_correct)))))
(let ((anon98_Else_correct  (=> (and (not (and b_1_1@8 b_2_1@12)) (= (ControlFlow 0 57) 55)) anon41_correct)))
(let ((anon97_Then_correct  (=> (=> b_1_1@8 (not (= (MapType0Select Result_1Heap xs next) null))) (and (=> (= (ControlFlow 0 62) 61) anon98_Then_correct) (=> (= (ControlFlow 0 62) 57) anon98_Else_correct)))))
(let ((anon97_Else_correct  (=> (and (and (and (not (=> b_1_1@8 (not (= (MapType0Select Result_1Heap xs next) null)))) (= Used_1Mask@12 Used_1Mask@7)) (and (= Heap@8 Heap@5) (= Mask@12 Mask@9))) (and (and (= b_1_1@12 b_1_1@8) (= b_2_1@19 b_2_1@12)) (and (= Ops_1Mask@6 Ops_1Mask@3) (= (ControlFlow 0 40) 39)))) anon54_correct)))
(let ((anon37_correct  (and (=> (= (ControlFlow 0 63) (- 0 64)) (=> (and b_1_1@5 b_2_1@12) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_1Mask@7 xs next)) initNeededTransfer@1)))) (=> (=> (and b_1_1@5 b_2_1@12) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_1Mask@7 xs next)) initNeededTransfer@1))) (=> (and (and (and (= b_4@0  (and b_1_1@5 b_2_1@12)) (= b_4@1  (and b_4@0 (state Result_1Heap Result_1Mask)))) (and (= b_4@2  (and b_4@1 (sumMask Result_1Mask Ops_1Mask@3 Used_1Mask@7))) (= b_4@3  (and (and b_4@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_1Heap Ops_1Mask@3)) (IdenticalOnKnownLocations Used_1Heap@0 Result_1Heap Used_1Mask@7))))) (and (and (= b_4@4  (and b_4@3 (state Result_1Heap Result_1Mask))) (= b_1_1@6  (and b_1_1@5 b_4@4))) (and (= b_1_1@7  (and b_1_1@6 b_2_1@12)) (= b_1_1@8  (and b_1_1@7 (= Used_1Heap@0 Ops_1Heap@0)))))) (and (=> (= (ControlFlow 0 63) 62) anon97_Then_correct) (=> (= (ControlFlow 0 63) 40) anon97_Else_correct)))))))
(let ((anon96_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= neededTransfer@7 neededTransfer@5) (= b_2_1@12 b_2_1@9)) (=> (and (and (= Heap@5 Heap@3) (= Mask@9 Mask@7)) (and (= Used_1Mask@7 Used_1Mask@5) (= (ControlFlow 0 67) 63))) anon37_correct)))))
(let ((anon96_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_1Mask@6 (MapType1Store Used_1Mask@5 xs next (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@5 xs next)) takeTransfer@3))))) (and (= b_2_1@10  (and b_2_1@9 (state Used_1Heap@0 Used_1Mask@6))) (= b_2_1@11  (and b_2_1@10 (= (MapType0Select Heap@3 xs next) (MapType0Select Used_1Heap@0 xs next)))))) (=> (and (and (and (= Mask@8 (MapType1Store Mask@7 xs next (real_2_U (- (U_2_real (MapType1Select Mask@7 xs next)) takeTransfer@3)))) (= Heap@4 (MapType0Store Heap@3 null (|wand#sm| true xs FullPerm xs i@0) (MapType1Store (MapType0Select Heap@3 null (|wand#sm| true xs FullPerm xs i@0)) xs next (bool_2_U true))))) (and (= neededTransfer@7 neededTransfer@6) (= b_2_1@12 b_2_1@11))) (and (and (= Heap@5 Heap@4) (= Mask@9 Mask@8)) (and (= Used_1Mask@7 Used_1Mask@6) (= (ControlFlow 0 66) 63)))) anon37_correct)))))
(let ((anon95_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 69) 66) anon96_Then_correct) (=> (= (ControlFlow 0 69) 67) anon96_Else_correct)))))
(let ((anon95_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 68) 66) anon96_Then_correct) (=> (= (ControlFlow 0 68) 67) anon96_Else_correct)))))
(let ((anon94_Then_correct  (=> (and (and (and (and b_1_1@5 b_2_1@9) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@7 xs next)))) (and (=> (= (ControlFlow 0 70) 68) anon95_Then_correct) (=> (= (ControlFlow 0 70) 69) anon95_Else_correct)))))
(let ((anon94_Else_correct  (=> (not (and (and (and b_1_1@5 b_2_1@9) true) (> neededTransfer@5 0.0))) (=> (and (= neededTransfer@7 neededTransfer@5) (= b_2_1@12 b_2_1@9)) (=> (and (and (= Heap@5 Heap@3) (= Mask@9 Mask@7)) (and (= Used_1Mask@7 Used_1Mask@5) (= (ControlFlow 0 65) 63))) anon37_correct)))))
(let ((anon93_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Used_1Mask@5 Used_1Mask@3) (= b_2_1@9 b_2_1@6)) (and (= neededTransfer@5 FullPerm) (= Ops_1Mask@3 Ops_1Mask@1))) (and (=> (= (ControlFlow 0 73) 70) anon94_Then_correct) (=> (= (ControlFlow 0 73) 65) anon94_Else_correct))))))
(let ((anon93_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_1Mask@4 (MapType1Store Used_1Mask@3 xs next (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@3 xs next)) takeTransfer@2)))) (= b_2_1@7  (and b_2_1@6 (state Used_1Heap@0 Used_1Mask@4)))) (and (= b_2_1@8  (and b_2_1@7 (= (MapType0Select Ops_1Heap@0 xs next) (MapType0Select Used_1Heap@0 xs next)))) (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 xs next (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@1 xs next)) takeTransfer@2)))))) (and (and (= Used_1Mask@5 Used_1Mask@4) (= b_2_1@9 b_2_1@8)) (and (= neededTransfer@5 neededTransfer@4) (= Ops_1Mask@3 Ops_1Mask@2)))) (and (=> (= (ControlFlow 0 72) 70) anon94_Then_correct) (=> (= (ControlFlow 0 72) 65) anon94_Else_correct))))))
(let ((anon92_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 75) 72) anon93_Then_correct) (=> (= (ControlFlow 0 75) 73) anon93_Else_correct)))))
(let ((anon92_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 74) 72) anon93_Then_correct) (=> (= (ControlFlow 0 74) 73) anon93_Else_correct)))))
(let ((anon91_Then_correct  (=> (and (and (and (and b_1_1@5 b_2_1@6) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_1Mask@1 xs next)))) (and (=> (= (ControlFlow 0 76) 74) anon92_Then_correct) (=> (= (ControlFlow 0 76) 75) anon92_Else_correct)))))
(let ((anon91_Else_correct  (=> (not (and (and (and b_1_1@5 b_2_1@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_1Mask@5 Used_1Mask@3) (= b_2_1@9 b_2_1@6)) (and (= neededTransfer@5 FullPerm) (= Ops_1Mask@3 Ops_1Mask@1))) (and (=> (= (ControlFlow 0 71) 70) anon94_Then_correct) (=> (= (ControlFlow 0 71) 65) anon94_Else_correct))))))
(let ((anon25_correct  (and (=> (= (ControlFlow 0 77) (- 0 79)) (=> (and b_1_1@2 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 xs val)) initNeededTransfer@0)))) (=> (=> (and b_1_1@2 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 xs val)) initNeededTransfer@0))) (=> (= b_3@0  (and b_1_1@2 b_2_1@6)) (=> (and (and (and (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0))) (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask@1 Used_1Mask@3)))) (and (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@0 ResultHeap Ops_1Mask@1)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3))) (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0))))) (and (and (= b_1_1@3  (and b_1_1@2 b_3@4)) (= b_1_1@4  (and b_1_1@3 b_2_1@6))) (and (= b_1_1@5  (and b_1_1@4 (= Used_1Heap@0 Ops_1Heap@0))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select Used_1Mask@3 xs next)) FullPerm))))) (and (=> (= (ControlFlow 0 77) (- 0 78)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 77) 76) anon91_Then_correct) (=> (= (ControlFlow 0 77) 71) anon91_Else_correct))))))))))
(let ((anon90_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@7 Mask@5) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 82) 77))) anon25_correct)))))
(let ((anon90_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType1Store Used_1Mask@1 xs val (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 xs val)) takeTransfer@1))))) (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= b_2_1@5  (and b_2_1@4 (= (U_2_int (MapType0Select Heap@1 xs val)) (U_2_int (MapType0Select Used_1Heap@0 xs val))))))) (=> (and (and (and (= Mask@6 (MapType1Store Mask@5 xs val (real_2_U (- (U_2_real (MapType1Select Mask@5 xs val)) takeTransfer@1)))) (= Heap@2 (MapType0Store Heap@1 null (|wand#sm| true xs FullPerm xs i@0) (MapType1Store (MapType0Select Heap@1 null (|wand#sm| true xs FullPerm xs i@0)) xs val (bool_2_U true))))) (and (= Mask@7 Mask@6) (= Heap@3 Heap@2))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_2_1@6 b_2_1@5)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 81) 77)))) anon25_correct)))))
(let ((anon89_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 84) 81) anon90_Then_correct) (=> (= (ControlFlow 0 84) 82) anon90_Else_correct)))))
(let ((anon89_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 83) 81) anon90_Then_correct) (=> (= (ControlFlow 0 83) 82) anon90_Else_correct)))))
(let ((anon88_Then_correct  (=> (and (and (and (and b_1_1@2 b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@5 xs val)))) (and (=> (= (ControlFlow 0 85) 83) anon89_Then_correct) (=> (= (ControlFlow 0 85) 84) anon89_Else_correct)))))
(let ((anon88_Else_correct  (=> (not (and (and (and b_1_1@2 b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@7 Mask@5) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 80) 77))) anon25_correct)))))
(let ((anon87_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@1 ZeroMask) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 88) 85) anon88_Then_correct) (=> (= (ControlFlow 0 88) 80) anon88_Else_correct))))))
(let ((anon87_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@0 (- FullPerm takeTransfer@0))) (=> (and (and (and (= Used_1Mask@0 (MapType1Store ZeroMask xs val (real_2_U (+ (U_2_real (MapType1Select ZeroMask xs val)) takeTransfer@0)))) (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0)))) (and (= b_2_1@2  (and b_2_1@1 (= (U_2_int (MapType0Select Ops_1Heap@0 xs val)) (U_2_int (MapType0Select Used_1Heap@0 xs val))))) (= Ops_1Mask@0 (MapType1Store ZeroMask xs val (real_2_U (- (U_2_real (MapType1Select ZeroMask xs val)) takeTransfer@0)))))) (and (and (= Ops_1Mask@1 Ops_1Mask@0) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 87) 85) anon88_Then_correct) (=> (= (ControlFlow 0 87) 80) anon88_Else_correct))))))
(let ((anon86_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 90) 87) anon87_Then_correct) (=> (= (ControlFlow 0 90) 88) anon87_Else_correct)))))
(let ((anon86_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 89) 87) anon87_Then_correct) (=> (= (ControlFlow 0 89) 88) anon87_Else_correct)))))
(let ((anon85_Then_correct  (=> (and (and (and (and b_1_1@2 b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select ZeroMask xs val)))) (and (=> (= (ControlFlow 0 91) 89) anon86_Then_correct) (=> (= (ControlFlow 0 91) 90) anon86_Else_correct)))))
(let ((anon85_Else_correct  (=> (not (and (and (and b_1_1@2 b_2_1@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@1 ZeroMask) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 86) 85) anon88_Then_correct) (=> (= (ControlFlow 0 86) 80) anon88_Else_correct))))))
(let ((anon84_Then_correct  (=> b_1_1@2 (=> (and (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask xs val)) FullPerm))) (and (=> (= (ControlFlow 0 92) (- 0 93)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 92) 91) anon85_Then_correct) (=> (= (ControlFlow 0 92) 86) anon85_Else_correct))))))))
(let ((anon84_Else_correct  (=> (not b_1_1@2) (=> (and (= Ops_1Heap@8 Ops_1Heap@0) (= Mask@13 Mask@5)) (=> (and (and (= Ops_1Mask@8 ZeroMask) (= b_1_1@17 b_1_1@2)) (and (= Heap@9 Heap@1) (= (ControlFlow 0 32) 30))) anon59_correct)))))
(let ((anon12_correct  (=> (and (= b_1_1@1  (and b_1_1@0 (state Ops_1Heap@0 ZeroMask))) (= b_1_1@2  (and b_1_1@1 (state Ops_1Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 94) 92) anon84_Then_correct) (=> (= (ControlFlow 0 94) 32) anon84_Else_correct)))))
(let ((anon83_Else_correct  (=> (and (not b_1_1@0) (= (ControlFlow 0 96) 94)) anon12_correct)))
(let ((anon83_Then_correct  (=> (and b_1_1@0 (= (ControlFlow 0 95) 94)) anon12_correct)))
(let ((anon10_correct  (=> (and (and (state Heap@1 Mask@5) (state Heap@1 Mask@5)) (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 97) 95) anon83_Then_correct) (=> (= (ControlFlow 0 97) 96) anon83_Else_correct)))))
(let ((anon82_Else_correct  (=> (= (MapType0Select Heap@1 xs next) null) (=> (and (= Mask@5 Mask@3) (= (ControlFlow 0 99) 97)) anon10_correct))))
(let ((anon82_Then_correct  (=> (and (not (= (MapType0Select Heap@1 xs next) null)) (= Mask@4 (MapType1Store Mask@3 null (List (MapType0Select Heap@1 xs next)) (real_2_U (+ (U_2_real (MapType1Select Mask@3 null (List (MapType0Select Heap@1 xs next)))) FullPerm))))) (=> (and (and (InsidePredicate (List xs) (MapType0Select Heap@1 null (List xs)) (List (MapType0Select Heap@1 xs next)) (MapType0Select Heap@1 null (List (MapType0Select Heap@1 xs next)))) (state Heap@1 Mask@4)) (and (= Mask@5 Mask@4) (= (ControlFlow 0 98) 97))) anon10_correct))))
(let ((anon8_correct  (=> (and (not (= xs null)) (= Mask@2 (MapType1Store Mask@1 xs val (real_2_U (+ (U_2_real (MapType1Select Mask@1 xs val)) FullPerm))))) (=> (and (and (state Heap@1 Mask@2) (not (= xs null))) (and (= Mask@3 (MapType1Store Mask@2 xs next (real_2_U (+ (U_2_real (MapType1Select Mask@2 xs next)) FullPerm)))) (state Heap@1 Mask@3))) (and (=> (= (ControlFlow 0 100) 98) anon82_Then_correct) (=> (= (ControlFlow 0 100) 99) anon82_Else_correct))))))
(let ((anon81_Else_correct  (=> (HasDirectPerm Mask@1 null (List xs)) (=> (and (= Heap@1 Heap@@14) (= (ControlFlow 0 102) 100)) anon8_correct))))
(let ((anon81_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (List xs))) (= Heap@0 (MapType0Store Heap@@14 null (List xs) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 101) 100))) anon8_correct)))
(let ((anon6_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (List xs) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (List xs))) FullPerm)))) (and (=> (= (ControlFlow 0 103) 101) anon81_Then_correct) (=> (= (ControlFlow 0 103) 102) anon81_Else_correct)))))
(let ((anon80_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 106) 103)) anon6_correct)))
(let ((anon80_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 104) (- 0 105)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs)))) (=> (= (ControlFlow 0 104) 103) anon6_correct))))))
(let ((anon78_Else_correct  (=> (and (and (= i@0 (sum_rec Heap@@14 xs)) (state Heap@@14 Mask@0)) (and (|List#trigger| Heap@@14 (List xs)) (= (MapType0Select Heap@@14 null (List xs)) (CombineFrames (FrameFragment (MapType0Select Heap@@14 xs val)) (CombineFrames (FrameFragment (MapType0Select Heap@@14 xs next)) (FrameFragment (ite (not (= (MapType0Select Heap@@14 xs next) null)) (MapType0Select Heap@@14 null (List (MapType0Select Heap@@14 xs next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 107) 104) anon80_Then_correct) (=> (= (ControlFlow 0 107) 106) anon80_Else_correct)))))
(let ((anon3_correct true))
(let ((anon79_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon79_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (and (state Heap@@14 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType0Select Heap@@14 xs $allocated)) (= Mask@0 (MapType1Store ZeroMask null (List xs) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List xs))) FullPerm))))) (and (state Heap@@14 Mask@0) (state Heap@@14 Mask@0))) (and (and (=> (= (ControlFlow 0 108) 107) anon78_Else_correct) (=> (= (ControlFlow 0 108) 2) anon79_Then_correct)) (=> (= (ControlFlow 0 108) 4) anon79_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 109) 108) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
