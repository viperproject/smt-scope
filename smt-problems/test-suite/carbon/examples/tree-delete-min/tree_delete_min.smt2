(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun v_2 () T@U)
(declare-fun l () T@U)
(declare-fun r_1 () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun SeqType (T@T) T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U Real T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand#ft| (T@U Real T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand#sm| (T@U Real T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun vals (T@U T@U) T@U)
(declare-fun |vals#triggerStateless| (T@U) T@U)
(declare-fun |Tree#trigger| (T@U T@U) Bool)
(declare-fun Tree (T@U) T@U)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun null () T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |vals'| (T@U T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun PredicateType_TreeType () T@T)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Sub| (Int Int) Int)
(declare-fun |Seq#Add| (Int Int) Int)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun |val'| (T@U T@U) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |val#triggerStateless| (T@U) Int)
(declare-fun |Tree#everUsed| (T@U) Bool)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Range| (Int Int) T@U)
(declare-fun |Seq#Skolem| (T@U T@U) Int)
(declare-fun val@@7 (T@U T@U) Int)
(declare-fun |Tree#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#ContainsTrigger| (T@U T@U) Bool)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun |val#frame| (T@U T@U) Int)
(declare-fun |vals#frame| (T@U T@U) T@U)
(declare-fun ZeroPMask () T@U)
(declare-fun |Seq#SkolemDiff| (T@U T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type v_2) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type l) (FieldType NormalFieldType RefType))) (= (type r_1) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated v_2 l r_1)
)
(assert  (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (SeqType arg0@@14)) 9)
 :qid |ctor:SeqType|
)) (forall ((arg0@@15 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@15)) arg0@@15)
 :qid |typeInv:SeqTypeInv0|
 :pattern ( (SeqType arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 Int) ) (! (let ((T (SeqTypeInv0 (type arg0@@16))))
(= (type (|Seq#Drop| arg0@@16 arg1@@2)) (SeqType T)))
 :qid |funType:Seq#Drop|
 :pattern ( (|Seq#Drop| arg0@@16 arg1@@2))
))))
(assert (forall ((s T@U) (n Int) ) (! (let ((T@@0 (SeqTypeInv0 (type s))))
 (=> (= (type s) (SeqType T@@0)) (and (=> (<= 0 n) (and (=> (<= n (|Seq#Length| s)) (= (|Seq#Length| (|Seq#Drop| s n)) (- (|Seq#Length| s) n))) (=> (< (|Seq#Length| s) n) (= (|Seq#Length| (|Seq#Drop| s n)) 0)))) (=> (< n 0) (= (|Seq#Length| (|Seq#Drop| s n)) (|Seq#Length| s))))))
 :qid |stdinbpl.275:18|
 :skolemid |38|
 :pattern ( (|Seq#Length| (|Seq#Drop| s n)))
 :pattern ( (|Seq#Length| s) (|Seq#Drop| s n))
)))
(assert  (and (and (and (and (and (forall ((arg0@@17 T@T) ) (! (= (Ctor (MapType0Type arg0@@17)) 10)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@18 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@18)) arg0@@18)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@18))
))) (forall ((arg0@@19 T@U) (arg1@@3 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@19 arg1@@3 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@19 arg1@@3 arg2))
))) (forall ((arg0@@20 T@U) (arg1@@4 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@4)))
(= (type (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 11) (forall ((arg0@@21 T@U) (arg1@@5 Real) (arg2@@1 T@U) (arg3@@0 Real) (arg4 T@U) (arg5 T@U) (arg6 T@U) (arg7 Real) (arg8 T@U) (arg9 T@U) ) (! (= (type (wand arg0@@21 arg1@@5 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@21 arg1@@5 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9))
))))
(assert (forall ((arg1@@6 T@U) (arg2@@2 Real) (arg3@@1 T@U) (arg4@@0 Real) (arg5@@0 T@U) (arg6@@0 T@U) (arg7@@0 T@U) (arg8@@0 Real) (arg9@@0 T@U) (arg10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@6) RefType) (= (type arg3@@1) RefType)) (= (type arg5@@0) RefType)) (= (type arg6@@0) (SeqType intType))) (= (type arg7@@0) RefType)) (= (type arg9@@0) RefType)) (= (type arg10) (SeqType intType))) (IsWandField (wand arg1@@6 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10)))
 :qid |stdinbpl.549:15|
 :skolemid |58|
 :pattern ( (wand arg1@@6 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10))
)))
(assert  (and (= (Ctor FrameTypeType) 12) (forall ((arg0@@22 T@U) (arg1@@7 Real) (arg2@@3 T@U) (arg3@@2 Real) (arg4@@1 T@U) (arg5@@1 T@U) (arg6@@1 T@U) (arg7@@1 Real) (arg8@@1 T@U) (arg9@@1 T@U) ) (! (= (type (|wand#ft| arg0@@22 arg1@@7 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@22 arg1@@7 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1))
))))
(assert (forall ((arg1@@8 T@U) (arg2@@4 Real) (arg3@@3 T@U) (arg4@@2 Real) (arg5@@2 T@U) (arg6@@2 T@U) (arg7@@2 T@U) (arg8@@2 Real) (arg9@@2 T@U) (arg10@@0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@8) RefType) (= (type arg3@@3) RefType)) (= (type arg5@@2) RefType)) (= (type arg6@@2) (SeqType intType))) (= (type arg7@@2) RefType)) (= (type arg9@@2) RefType)) (= (type arg10@@0) (SeqType intType))) (IsWandField (|wand#ft| arg1@@8 arg2@@4 arg3@@3 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@0)))
 :qid |stdinbpl.553:15|
 :skolemid |59|
 :pattern ( (|wand#ft| arg1@@8 arg2@@4 arg3@@3 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@0))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@23 T@T) (arg1@@9 T@T) ) (! (= (Ctor (MapType1Type arg0@@23 arg1@@9)) 13)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@24 T@T) (arg1@@10 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@24 arg1@@10)) arg0@@24)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@24 arg1@@10))
))) (forall ((arg0@@25 T@T) (arg1@@11 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@25 arg1@@11)) arg1@@11)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@25 arg1@@11))
))) (forall ((arg0@@26 T@U) (arg1@@12 T@U) (arg2@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@26))))
(= (type (MapType1Select arg0@@26 arg1@@12 arg2@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@26 arg1@@12 arg2@@5))
))) (forall ((arg0@@27 T@U) (arg1@@13 T@U) (arg2@@6 T@U) (arg3@@4 T@U) ) (! (let ((aVar1@@0 (type arg3@@4)))
(let ((aVar0@@0 (type arg1@@13)))
(= (type (MapType1Store arg0@@27 arg1@@13 arg2@@6 arg3@@4)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@27 arg1@@13 arg2@@6 arg3@@4))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (forall ((arg0@@28 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
))) (forall ((arg0@@29 T@U) (arg1@@14 Real) (arg2@@7 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@3 T@U) (arg6@@3 T@U) (arg7@@3 Real) (arg8@@3 T@U) (arg9@@3 T@U) ) (! (= (type (|wand#sm| arg0@@29 arg1@@14 arg2@@7 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@29 arg1@@14 arg2@@7 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3))
))))
(assert (forall ((arg1@@15 T@U) (arg2@@8 Real) (arg3@@6 T@U) (arg4@@4 Real) (arg5@@4 T@U) (arg6@@4 T@U) (arg7@@4 T@U) (arg8@@4 Real) (arg9@@4 T@U) (arg10@@1 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@15) RefType) (= (type arg3@@6) RefType)) (= (type arg5@@4) RefType)) (= (type arg6@@4) (SeqType intType))) (= (type arg7@@4) RefType)) (= (type arg9@@4) RefType)) (= (type arg10@@1) (SeqType intType))) (= (|wand#sm| arg1@@15 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1) (WandMaskField (|wand#ft| arg1@@15 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1))))
 :qid |stdinbpl.565:15|
 :skolemid |62|
 :pattern ( (WandMaskField (|wand#ft| arg1@@15 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1)))
)))
(assert (forall ((arg1@@16 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@5 Real) (arg5@@5 T@U) (arg6@@5 T@U) (arg7@@5 T@U) (arg8@@5 Real) (arg9@@5 T@U) (arg10@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@16) RefType) (= (type arg3@@7) RefType)) (= (type arg5@@5) RefType)) (= (type arg6@@5) (SeqType intType))) (= (type arg7@@5) RefType)) (= (type arg9@@5) RefType)) (= (type arg10@@2) (SeqType intType))) (not (IsPredicateField (wand arg1@@16 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@2))))
 :qid |stdinbpl.557:15|
 :skolemid |60|
 :pattern ( (wand arg1@@16 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@2))
)))
(assert (forall ((arg1@@17 T@U) (arg2@@10 Real) (arg3@@8 T@U) (arg4@@6 Real) (arg5@@6 T@U) (arg6@@6 T@U) (arg7@@6 T@U) (arg8@@6 Real) (arg9@@6 T@U) (arg10@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@17) RefType) (= (type arg3@@8) RefType)) (= (type arg5@@6) RefType)) (= (type arg6@@6) (SeqType intType))) (= (type arg7@@6) RefType)) (= (type arg9@@6) RefType)) (= (type arg10@@3) (SeqType intType))) (not (IsPredicateField (|wand#ft| arg1@@17 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@3))))
 :qid |stdinbpl.561:15|
 :skolemid |61|
 :pattern ( (|wand#ft| arg1@@17 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@3))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@30 T@U) (arg1@@18 T@U) ) (! (= (type (vals arg0@@30 arg1@@18)) (SeqType intType))
 :qid |funType:vals|
 :pattern ( (vals arg0@@30 arg1@@18))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|vals#triggerStateless| arg0@@31)) (SeqType intType))
 :qid |funType:vals#triggerStateless|
 :pattern ( (|vals#triggerStateless| arg0@@31))
))) (= (Ctor PredicateType_TreeType) 14)) (forall ((arg0@@32 T@U) ) (! (= (type (Tree arg0@@32)) (FieldType PredicateType_TreeType FrameTypeType))
 :qid |funType:Tree|
 :pattern ( (Tree arg0@@32))
))) (= (type null) RefType)) (forall ((T@@1 T@T) ) (! (= (type (|Seq#Empty| T@@1)) (SeqType T@@1))
 :qid |funType:Seq#Empty|
 :pattern ( (|Seq#Empty| T@@1))
))) (forall ((arg0@@33 T@U) (arg1@@19 T@U) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@33))))
(= (type (|Seq#Append| arg0@@33 arg1@@19)) (SeqType T@@2)))
 :qid |funType:Seq#Append|
 :pattern ( (|Seq#Append| arg0@@33 arg1@@19))
))) (forall ((arg0@@34 T@U) (arg1@@20 T@U) ) (! (= (type (|vals'| arg0@@34 arg1@@20)) (SeqType intType))
 :qid |funType:vals'|
 :pattern ( (|vals'| arg0@@34 arg1@@20))
))) (forall ((arg0@@35 T@U) ) (! (let ((T@@3 (type arg0@@35)))
(= (type (|Seq#Singleton| arg0@@35)) (SeqType T@@3)))
 :qid |funType:Seq#Singleton|
 :pattern ( (|Seq#Singleton| arg0@@35))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (x@@8 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type x@@8) RefType)) (and (state Heap@@0 Mask@@0) (< AssumeFunctionsAbove 0))) (= (vals Heap@@0 x@@8) (ite (= x@@8 null) (|Seq#Empty| intType) (|Seq#Append| (|Seq#Append| (|vals'| Heap@@0 (MapType0Select Heap@@0 x@@8 l)) (|Seq#Singleton| (MapType0Select Heap@@0 x@@8 v_2))) (|vals'| Heap@@0 (MapType0Select Heap@@0 x@@8 r_1))))))
 :qid |stdinbpl.739:15|
 :skolemid |73|
 :pattern ( (state Heap@@0 Mask@@0) (vals Heap@@0 x@@8))
 :pattern ( (state Heap@@0 Mask@@0) (|vals#triggerStateless| x@@8) (|Tree#trigger| Heap@@0 (Tree x@@8)) (|Tree#trigger| Heap@@0 (Tree x@@8)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@21 Int) ) (! (let ((T@@4 (SeqTypeInv0 (type arg0@@36))))
(= (type (|Seq#Index| arg0@@36 arg1@@21)) T@@4))
 :qid |funType:Seq#Index|
 :pattern ( (|Seq#Index| arg0@@36 arg1@@21))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) (j Int) ) (! (let ((T@@5 (SeqTypeInv0 (type s@@0))))
 (=> (= (type s@@0) (SeqType T@@5)) (=> (and (and (< 0 n@@0) (<= 0 j)) (< j (- (|Seq#Length| s@@0) n@@0))) (and (= (|Seq#Sub| (|Seq#Add| j n@@0) n@@0) j) (= (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j) (|Seq#Index| s@@0 (|Seq#Add| j n@@0)))))))
 :qid |stdinbpl.296:18|
 :skolemid |39|
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j))
)))
(assert (forall ((arg0@@37 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@37))))
(= (type (PredicateMaskField arg0@@37)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@37))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap T@U) (Mask@@1 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@1 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@1) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@0 T@U) (Mask@@2 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@2)) (and (HasDirectPerm Mask@@2 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@2 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@2) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((x@@9 T@U) ) (!  (=> (= (type x@@9) RefType) (IsPredicateField (Tree x@@9)))
 :qid |stdinbpl.910:15|
 :skolemid |78|
 :pattern ( (Tree x@@9))
)))
(assert (forall ((Heap@@3 T@U) (x@@10 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType0Type RefType)) (= (type x@@10) RefType)) (dummyFunction (int_2_U (|val#triggerStateless| x@@10))))
 :qid |stdinbpl.603:15|
 :skolemid |66|
 :pattern ( (|val'| Heap@@3 x@@10))
)))
(assert (forall ((Heap@@4 T@U) (x@@11 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType0Type RefType)) (= (type x@@11) RefType)) (dummyFunction (|vals#triggerStateless| x@@11)))
 :qid |stdinbpl.733:15|
 :skolemid |72|
 :pattern ( (|vals'| Heap@@4 x@@11))
)))
(assert (forall ((Heap@@5 T@U) (x@@12 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType0Type RefType)) (= (type x@@12) RefType)) (|Tree#everUsed| (Tree x@@12)))
 :qid |stdinbpl.929:15|
 :skolemid |82|
 :pattern ( (|Tree#trigger| Heap@@5 (Tree x@@12)))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@22 Int) (arg2@@11 T@U) ) (! (let ((T@@6 (type arg2@@11)))
(= (type (|Seq#Update| arg0@@38 arg1@@22 arg2@@11)) (SeqType T@@6)))
 :qid |funType:Seq#Update|
 :pattern ( (|Seq#Update| arg0@@38 arg1@@22 arg2@@11))
)))
(assert (forall ((s@@1 T@U) (i Int) (v T@U) (n@@1 Int) ) (! (let ((T@@7 (type v)))
 (=> (= (type s@@1) (SeqType T@@7)) (=> (and (<= 0 n@@1) (< n@@1 (|Seq#Length| s@@1))) (and (=> (= i n@@1) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) v)) (=> (not (= i n@@1)) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) (|Seq#Index| s@@1 n@@1)))))))
 :qid |stdinbpl.251:18|
 :skolemid |35|
 :pattern ( (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1))
 :pattern ( (|Seq#Index| s@@1 n@@1) (|Seq#Update| s@@1 i v))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@23 Int) ) (! (let ((T@@8 (SeqTypeInv0 (type arg0@@39))))
(= (type (|Seq#Take| arg0@@39 arg1@@23)) (SeqType T@@8)))
 :qid |funType:Seq#Take|
 :pattern ( (|Seq#Take| arg0@@39 arg1@@23))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (! (let ((T@@9 (SeqTypeInv0 (type s@@2))))
 (=> (= (type s@@2) (SeqType T@@9)) (and (=> (<= 0 n@@2) (and (=> (<= n@@2 (|Seq#Length| s@@2)) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) n@@2)) (=> (< (|Seq#Length| s@@2) n@@2) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) (|Seq#Length| s@@2))))) (=> (< n@@2 0) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) 0)))))
 :qid |stdinbpl.262:18|
 :skolemid |36|
 :pattern ( (|Seq#Length| (|Seq#Take| s@@2 n@@2)))
 :pattern ( (|Seq#Take| s@@2 n@@2) (|Seq#Length| s@@2))
)))
(assert (forall ((arg0@@40 Int) (arg1@@24 Int) ) (! (= (type (|Seq#Range| arg0@@40 arg1@@24)) (SeqType intType))
 :qid |funType:Seq#Range|
 :pattern ( (|Seq#Range| arg0@@40 arg1@@24))
)))
(assert (forall ((q@min Int) (q@max Int) (v@@0 T@U) ) (!  (=> (= (type v@@0) intType) (= (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0)  (and (<= q@min (U_2_int v@@0)) (< (U_2_int v@@0) q@max))))
 :qid |stdinbpl.535:15|
 :skolemid |57|
 :pattern ( (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0))
)))
(assert (forall ((s@@3 T@U) (x@@13 T@U) ) (! (let ((T@@10 (type x@@13)))
 (=> (and (= (type s@@3) (SeqType T@@10)) (|Seq#Contains| s@@3 x@@13)) (and (and (<= 0 (|Seq#Skolem| s@@3 x@@13)) (< (|Seq#Skolem| s@@3 x@@13) (|Seq#Length| s@@3))) (= (|Seq#Index| s@@3 (|Seq#Skolem| s@@3 x@@13)) x@@13))))
 :qid |stdinbpl.393:18|
 :skolemid |47|
 :pattern ( (|Seq#Contains| s@@3 x@@13))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@1 T@U) (Mask@@3 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@1 Mask@@3)) (U_2_bool (MapType0Select Heap@@6 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@1 Mask@@3) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@7 T@U) (x@@14 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType0Type RefType)) (= (type x@@14) RefType)) (and (= (val@@7 Heap@@7 x@@14) (|val'| Heap@@7 x@@14)) (dummyFunction (int_2_U (|val#triggerStateless| x@@14)))))
 :qid |stdinbpl.599:15|
 :skolemid |65|
 :pattern ( (val@@7 Heap@@7 x@@14))
)))
(assert (forall ((Heap@@8 T@U) (x@@15 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType0Type RefType)) (= (type x@@15) RefType)) (and (= (vals Heap@@8 x@@15) (|vals'| Heap@@8 x@@15)) (dummyFunction (|vals#triggerStateless| x@@15))))
 :qid |stdinbpl.729:15|
 :skolemid |71|
 :pattern ( (vals Heap@@8 x@@15))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (! (let ((T@@11 (SeqTypeInv0 (type s@@4))))
 (=> (and (= (type s@@4) (SeqType T@@11)) (<= n@@3 0)) (= (|Seq#Drop| s@@4 n@@3) s@@4)))
 :qid |stdinbpl.377:18|
 :skolemid |45|
 :pattern ( (|Seq#Drop| s@@4 n@@3))
)))
(assert (forall ((i@@0 Int) (j@@0 Int) ) (! (= (|Seq#Sub| i@@0 j@@0) (- i@@0 j@@0))
 :qid |stdinbpl.231:15|
 :skolemid |30|
 :pattern ( (|Seq#Sub| i@@0 j@@0))
)))
(assert (forall ((i@@1 Int) (j@@1 Int) ) (! (= (|Seq#Add| i@@1 j@@1) (+ i@@1 j@@1))
 :qid |stdinbpl.229:15|
 :skolemid |29|
 :pattern ( (|Seq#Add| i@@1 j@@1))
)))
(assert (forall ((x@@16 T@U) (y@@1 T@U) ) (! (let ((T@@12 (type x@@16)))
 (=> (= (type y@@1) T@@12) (= (|Seq#Contains| (|Seq#Singleton| x@@16) y@@1) (= x@@16 y@@1))))
 :qid |stdinbpl.518:18|
 :skolemid |54|
 :pattern ( (|Seq#Contains| (|Seq#Singleton| x@@16) y@@1))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (j@@2 Int) ) (! (let ((T@@13 (SeqTypeInv0 (type s@@5))))
 (=> (= (type s@@5) (SeqType T@@13)) (=> (and (and (<= 0 j@@2) (< j@@2 n@@4)) (< j@@2 (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@2) (|Seq#Index| s@@5 j@@2)))))
 :qid |stdinbpl.270:18|
 :skolemid |37|
 :pattern ( (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@2))
 :pattern ( (|Seq#Index| s@@5 j@@2) (|Seq#Take| s@@5 n@@4))
)))
(assert (forall ((x@@17 T@U) (x2 T@U) ) (!  (=> (and (and (= (type x@@17) RefType) (= (type x2) RefType)) (= (Tree x@@17) (Tree x2))) (= x@@17 x2))
 :qid |stdinbpl.920:15|
 :skolemid |80|
 :pattern ( (Tree x@@17) (Tree x2))
)))
(assert (forall ((arg0@@41 T@U) ) (! (= (type (|Tree#sm| arg0@@41)) (FieldType PredicateType_TreeType (MapType1Type RefType boolType)))
 :qid |funType:Tree#sm|
 :pattern ( (|Tree#sm| arg0@@41))
)))
(assert (forall ((x@@18 T@U) (x2@@0 T@U) ) (!  (=> (and (and (= (type x@@18) RefType) (= (type x2@@0) RefType)) (= (|Tree#sm| x@@18) (|Tree#sm| x2@@0))) (= x@@18 x2@@0))
 :qid |stdinbpl.924:15|
 :skolemid |81|
 :pattern ( (|Tree#sm| x@@18) (|Tree#sm| x2@@0))
)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@2 T@U) (Mask@@4 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@2 Mask@@4)) (HasDirectPerm Mask@@4 o_1@@0 f_2)) (= (MapType0Select Heap@@9 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@2 Mask@@4) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((T@@14 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@14)) 0)
 :skolemid |23|
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.174:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((s0 T@U) (s1 T@U) (n@@5 Int) ) (! (let ((T@@15 (SeqTypeInv0 (type s0))))
 (=> (and (= (type s0) (SeqType T@@15)) (= (type s1) (SeqType T@@15))) (=> (and (and (and (not (= s0 (|Seq#Empty| T@@15))) (not (= s1 (|Seq#Empty| T@@15)))) (<= (|Seq#Length| s0) n@@5)) (< n@@5 (|Seq#Length| (|Seq#Append| s0 s1)))) (and (= (|Seq#Add| (|Seq#Sub| n@@5 (|Seq#Length| s0)) (|Seq#Length| s0)) n@@5) (= (|Seq#Index| (|Seq#Append| s0 s1) n@@5) (|Seq#Index| s1 (|Seq#Sub| n@@5 (|Seq#Length| s0))))))))
 :qid |stdinbpl.242:18|
 :skolemid |32|
 :pattern ( (|Seq#Index| (|Seq#Append| s0 s1) n@@5))
)))
(assert  (not (IsPredicateField v_2)))
(assert  (not (IsWandField v_2)))
(assert  (not (IsPredicateField l)))
(assert  (not (IsWandField l)))
(assert  (not (IsPredicateField r_1)))
(assert  (not (IsWandField r_1)))
(assert (forall ((Heap@@10 T@U) (ExhaleHeap@@3 T@U) (Mask@@5 T@U) ) (!  (=> (and (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@5) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@10 ExhaleHeap@@3 Mask@@5)) (succHeap Heap@@10 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@10 ExhaleHeap@@3 Mask@@5))
)))
(assert (forall ((Heap@@11 T@U) (Mask@@6 T@U) (x@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type x@@19) RefType)) (and (state Heap@@11 Mask@@6) (< AssumeFunctionsAbove 1))) (not (= x@@19 null))) (= (val@@7 Heap@@11 x@@19) (U_2_int (MapType0Select Heap@@11 x@@19 v_2))))
 :qid |stdinbpl.609:15|
 :skolemid |67|
 :pattern ( (state Heap@@11 Mask@@6) (val@@7 Heap@@11 x@@19))
 :pattern ( (state Heap@@11 Mask@@6) (|val#triggerStateless| x@@19) (|Tree#trigger| Heap@@11 (Tree x@@19)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@42 Real) (arg1@@25 T@U) ) (! (= (type (ConditionalFrame arg0@@42 arg1@@25)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@42 arg1@@25))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.162:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((q@min@@0 Int) (q@max@@0 Int) (j@@3 Int) ) (!  (=> (and (<= 0 j@@3) (< j@@3 (- q@max@@0 q@min@@0))) (= (U_2_int (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@3)) (+ q@min@@0 j@@3)))
 :qid |stdinbpl.533:15|
 :skolemid |56|
 :pattern ( (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@3))
)))
(assert (forall ((Mask@@7 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@7) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@7 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@7 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@7 o_2@@0 f_4@@0))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (let ((T@@16 (SeqTypeInv0 (type s0@@0))))
 (=> (and (and (= (type s0@@0) (SeqType T@@16)) (= (type s1@@0) (SeqType T@@16))) (and (not (= s0@@0 (|Seq#Empty| T@@16))) (not (= s1@@0 (|Seq#Empty| T@@16))))) (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))))
 :qid |stdinbpl.211:18|
 :skolemid |26|
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((s@@6 T@U) (t T@U) (n@@6 Int) ) (! (let ((T@@17 (SeqTypeInv0 (type s@@6))))
 (=> (and (and (= (type s@@6) (SeqType T@@17)) (= (type t) (SeqType T@@17))) (and (> n@@6 0) (> n@@6 (|Seq#Length| s@@6)))) (and (= (|Seq#Add| (|Seq#Sub| n@@6 (|Seq#Length| s@@6)) (|Seq#Length| s@@6)) n@@6) (= (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6) (|Seq#Drop| t (|Seq#Sub| n@@6 (|Seq#Length| s@@6)))))))
 :qid |stdinbpl.367:18|
 :skolemid |44|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@26 T@U) (arg2@@12 Real) (arg3@@9 T@U) (arg4@@7 Real) (arg5@@7 T@U) (arg6@@7 T@U) (arg7@@7 T@U) (arg8@@7 Real) (arg9@@7 T@U) (arg10@@4 T@U) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) (arg5_2 T@U) (arg6_2 T@U) (arg7_2 T@U) (arg8_2 Real) (arg9_2 T@U) (arg10_2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@26) RefType) (= (type arg3@@9) RefType)) (= (type arg5@@7) RefType)) (= (type arg6@@7) (SeqType intType))) (= (type arg7@@7) RefType)) (= (type arg9@@7) RefType)) (= (type arg10@@4) (SeqType intType))) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (type arg6_2) (SeqType intType))) (= (type arg7_2) RefType)) (= (type arg9_2) RefType)) (= (type arg10_2) (SeqType intType))) (= (wand arg1@@26 arg2@@12 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2))) (and (= arg1@@26 arg1_2) (and (= arg2@@12 arg2_2) (and (= arg3@@9 arg3_2) (and (= arg4@@7 arg4_2) (and (= arg5@@7 arg5_2) (and (= arg6@@7 arg6_2) (and (= arg7@@7 arg7_2) (and (= arg8@@7 arg8_2) (and (= arg9@@7 arg9_2) (= arg10@@4 arg10_2)))))))))))
 :qid |stdinbpl.573:15|
 :skolemid |64|
 :pattern ( (wand arg1@@26 arg2@@12 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2))
)))
(assert (forall ((s@@7 T@U) (t@@0 T@U) (n@@7 Int) ) (! (let ((T@@18 (SeqTypeInv0 (type s@@7))))
 (=> (and (and (= (type s@@7) (SeqType T@@18)) (= (type t@@0) (SeqType T@@18))) (and (> n@@7 0) (> n@@7 (|Seq#Length| s@@7)))) (and (= (|Seq#Add| (|Seq#Sub| n@@7 (|Seq#Length| s@@7)) (|Seq#Length| s@@7)) n@@7) (= (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7) (|Seq#Append| s@@7 (|Seq#Take| t@@0 (|Seq#Sub| n@@7 (|Seq#Length| s@@7))))))))
 :qid |stdinbpl.354:18|
 :skolemid |42|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7))
)))
(assert (forall ((q@min@@1 Int) (q@max@@1 Int) ) (!  (and (=> (< q@min@@1 q@max@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) (- q@max@@1 q@min@@1))) (=> (<= q@max@@1 q@min@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) 0)))
 :qid |stdinbpl.532:15|
 :skolemid |55|
 :pattern ( (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (let ((T@@19 (SeqTypeInv0 (type a))))
 (=> (and (and (= (type a) (SeqType T@@19)) (= (type b) (SeqType T@@19))) (|Seq#Equal| a b)) (= a b)))
 :qid |stdinbpl.505:18|
 :skolemid |53|
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@8 T@U) (i@@2 Int) ) (! (let ((T@@20 (SeqTypeInv0 (type s@@8))))
 (=> (= (type s@@8) (SeqType T@@20)) (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@8))) (|Seq#ContainsTrigger| s@@8 (|Seq#Index| s@@8 i@@2)))))
 :qid |stdinbpl.398:18|
 :skolemid |49|
 :pattern ( (|Seq#Index| s@@8 i@@2))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) ) (! (let ((T@@21 (SeqTypeInv0 (type s0@@1))))
 (=> (and (= (type s0@@1) (SeqType T@@21)) (= (type s1@@1) (SeqType T@@21))) (and (=> (= s0@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s1@@1)) (=> (= s1@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s0@@1)))))
 :qid |stdinbpl.217:18|
 :skolemid |27|
 :pattern ( (|Seq#Append| s0@@1 s1@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@1) 0) t@@1)
 :qid |stdinbpl.221:18|
 :skolemid |28|
 :pattern ( (|Seq#Singleton| t@@1))
)))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@22 (SeqTypeInv0 (type s@@9))))
 (=> (= (type s@@9) (SeqType T@@22)) (<= 0 (|Seq#Length| s@@9))))
 :qid |stdinbpl.200:18|
 :skolemid |22|
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@23 (SeqTypeInv0 (type s0@@2))))
 (=> (and (and (= (type s0@@2) (SeqType T@@23)) (= (type s1@@2) (SeqType T@@23))) (|Seq#Equal| s0@@2 s1@@2)) (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j@@4 Int) ) (!  (=> (and (<= 0 j@@4) (< j@@4 (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j@@4) (|Seq#Index| s1@@2 j@@4)))
 :qid |stdinbpl.495:13|
 :skolemid |50|
 :pattern ( (|Seq#Index| s0@@2 j@@4))
 :pattern ( (|Seq#Index| s1@@2 j@@4))
)))))
 :qid |stdinbpl.492:18|
 :skolemid |51|
 :pattern ( (|Seq#Equal| s0@@2 s1@@2))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@4 T@U) (Mask@@8 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@4 Mask@@8)) (and (HasDirectPerm Mask@@8 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@12 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@12 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@4 Mask@@8) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@13 T@U) (ExhaleHeap@@5 T@U) (Mask@@9 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@13) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@5 Mask@@9)) (and (HasDirectPerm Mask@@9 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@13 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@13 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@5 Mask@@9) (IsWandField pm_f@@2))
)))
(assert (forall ((x@@20 T@U) ) (!  (=> (= (type x@@20) RefType) (= (getPredWandId (Tree x@@20)) 0))
 :qid |stdinbpl.914:15|
 :skolemid |79|
 :pattern ( (Tree x@@20))
)))
(assert (forall ((t@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@2)) 1)
 :qid |stdinbpl.208:18|
 :skolemid |25|
 :pattern ( (|Seq#Singleton| t@@2))
)))
(assert (forall ((Mask@@10 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@10) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@10)) (and (>= (U_2_real (MapType1Select Mask@@10 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@10) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@10 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@10) (MapType1Select Mask@@10 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@14 T@U) (Mask@@11 T@U) (x@@21 T@U) ) (!  (=> (and (and (and (= (type Heap@@14) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type x@@21) RefType)) (state Heap@@14 Mask@@11)) (= (|val'| Heap@@14 x@@21) (|val#frame| (MapType0Select Heap@@14 null (Tree x@@21)) x@@21)))
 :qid |stdinbpl.616:15|
 :skolemid |68|
 :pattern ( (state Heap@@14 Mask@@11) (|val'| Heap@@14 x@@21))
)))
(assert (forall ((arg0@@43 T@U) (arg1@@27 T@U) ) (! (= (type (|vals#frame| arg0@@43 arg1@@27)) (SeqType intType))
 :qid |funType:vals#frame|
 :pattern ( (|vals#frame| arg0@@43 arg1@@27))
)))
(assert (forall ((Heap@@15 T@U) (Mask@@12 T@U) (x@@22 T@U) ) (!  (=> (and (and (and (= (type Heap@@15) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type x@@22) RefType)) (state Heap@@15 Mask@@12)) (= (|vals'| Heap@@15 x@@22) (|vals#frame| (MapType0Select Heap@@15 null (Tree x@@22)) x@@22)))
 :qid |stdinbpl.746:15|
 :skolemid |74|
 :pattern ( (state Heap@@15 Mask@@12) (|vals'| Heap@@15 x@@22))
 :pattern ( (state Heap@@15 Mask@@12) (|vals#triggerStateless| x@@22) (|Tree#trigger| Heap@@15 (Tree x@@22)) (|Tree#trigger| Heap@@15 (Tree x@@22)))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@16 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@16) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@16 o $allocated))) (U_2_bool (MapType0Select Heap@@16 (MapType0Select Heap@@16 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@16 o f))
)))
(assert (forall ((s@@10 T@U) (t@@3 T@U) (n@@8 Int) ) (! (let ((T@@24 (SeqTypeInv0 (type s@@10))))
 (=> (and (and (= (type s@@10) (SeqType T@@24)) (= (type t@@3) (SeqType T@@24))) (and (< 0 n@@8) (<= n@@8 (|Seq#Length| s@@10)))) (= (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8) (|Seq#Take| s@@10 n@@8))))
 :qid |stdinbpl.350:18|
 :skolemid |41|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8))
)))
(assert (forall ((s@@11 T@U) (i@@3 Int) (v@@1 T@U) ) (! (let ((T@@25 (type v@@1)))
 (=> (= (type s@@11) (SeqType T@@25)) (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Update| s@@11 i@@3 v@@1)) (|Seq#Length| s@@11)))))
 :qid |stdinbpl.249:18|
 :skolemid |34|
 :pattern ( (|Seq#Length| (|Seq#Update| s@@11 i@@3 v@@1)))
 :pattern ( (|Seq#Length| s@@11) (|Seq#Update| s@@11 i@@3 v@@1))
)))
(assert (forall ((x@@23 T@U) ) (!  (=> (= (type x@@23) RefType) (= (PredicateMaskField (Tree x@@23)) (|Tree#sm| x@@23)))
 :qid |stdinbpl.906:15|
 :skolemid |77|
 :pattern ( (PredicateMaskField (Tree x@@23)))
)))
(assert (forall ((s@@12 T@U) (t@@4 T@U) (n@@9 Int) ) (! (let ((T@@26 (SeqTypeInv0 (type s@@12))))
 (=> (and (and (= (type s@@12) (SeqType T@@26)) (= (type t@@4) (SeqType T@@26))) (and (< 0 n@@9) (<= n@@9 (|Seq#Length| s@@12)))) (= (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9) (|Seq#Append| (|Seq#Drop| s@@12 n@@9) t@@4))))
 :qid |stdinbpl.363:18|
 :skolemid |43|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9))
)))
(assert (forall ((s@@13 T@U) (n@@10 Int) (i@@4 Int) ) (! (let ((T@@27 (SeqTypeInv0 (type s@@13))))
 (=> (= (type s@@13) (SeqType T@@27)) (=> (and (and (< 0 n@@10) (<= n@@10 i@@4)) (< i@@4 (|Seq#Length| s@@13))) (and (= (|Seq#Add| (|Seq#Sub| i@@4 n@@10) n@@10) i@@4) (= (|Seq#Index| (|Seq#Drop| s@@13 n@@10) (|Seq#Sub| i@@4 n@@10)) (|Seq#Index| s@@13 i@@4))))))
 :qid |stdinbpl.300:18|
 :skolemid |40|
 :pattern ( (|Seq#Drop| s@@13 n@@10) (|Seq#Index| s@@13 i@@4))
)))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@11 Int) ) (! (let ((T@@28 (SeqTypeInv0 (type s0@@3))))
 (=> (and (= (type s0@@3) (SeqType T@@28)) (= (type s1@@3) (SeqType T@@28))) (=> (and (and (and (not (= s0@@3 (|Seq#Empty| T@@28))) (not (= s1@@3 (|Seq#Empty| T@@28)))) (<= 0 n@@11)) (< n@@11 (|Seq#Length| s0@@3))) (= (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11) (|Seq#Index| s0@@3 n@@11)))))
 :qid |stdinbpl.240:18|
 :skolemid |31|
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11))
 :pattern ( (|Seq#Index| s0@@3 n@@11) (|Seq#Append| s0@@3 s1@@3))
)))
(assert (forall ((Heap@@17 T@U) (o@@0 T@U) (f_3 T@U) (v@@2 T@U) ) (! (let ((B@@8 (type v@@2)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@17) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@17 (MapType0Store Heap@@17 o@@0 f_3 v@@2)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@17 o@@0 f_3 v@@2))
)))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (m@@7 Int) ) (! (let ((T@@29 (SeqTypeInv0 (type s0@@4))))
 (=> (and (= (type s0@@4) (SeqType T@@29)) (= (type s1@@4) (SeqType T@@29))) (=> (and (and (and (not (= s0@@4 (|Seq#Empty| T@@29))) (not (= s1@@4 (|Seq#Empty| T@@29)))) (<= 0 m@@7)) (< m@@7 (|Seq#Length| s1@@4))) (and (= (|Seq#Sub| (|Seq#Add| m@@7 (|Seq#Length| s0@@4)) (|Seq#Length| s0@@4)) m@@7) (= (|Seq#Index| (|Seq#Append| s0@@4 s1@@4) (|Seq#Add| m@@7 (|Seq#Length| s0@@4))) (|Seq#Index| s1@@4 m@@7))))))
 :qid |stdinbpl.245:18|
 :skolemid |33|
 :pattern ( (|Seq#Index| s1@@4 m@@7) (|Seq#Append| s0@@4 s1@@4))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((s@@14 T@U) (x@@24 T@U) (i@@5 Int) ) (! (let ((T@@30 (type x@@24)))
 (=> (= (type s@@14) (SeqType T@@30)) (=> (and (and (<= 0 i@@5) (< i@@5 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@5) x@@24)) (|Seq#Contains| s@@14 x@@24))))
 :qid |stdinbpl.396:18|
 :skolemid |48|
 :pattern ( (|Seq#Contains| s@@14 x@@24) (|Seq#Index| s@@14 i@@5))
)))
(assert (forall ((s0@@5 T@U) (s1@@5 T@U) ) (! (let ((T@@31 (SeqTypeInv0 (type s0@@5))))
 (=> (and (= (type s0@@5) (SeqType T@@31)) (= (type s1@@5) (SeqType T@@31))) (or (or (and (= s0@@5 s1@@5) (|Seq#Equal| s0@@5 s1@@5)) (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (not (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))))) (and (and (and (and (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))) (= (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#SkolemDiff| s1@@5 s0@@5))) (<= 0 (|Seq#SkolemDiff| s0@@5 s1@@5))) (< (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#Length| s0@@5))) (not (= (|Seq#Index| s0@@5 (|Seq#SkolemDiff| s0@@5 s1@@5)) (|Seq#Index| s1@@5 (|Seq#SkolemDiff| s0@@5 s1@@5))))))))
 :qid |stdinbpl.500:18|
 :skolemid |52|
 :pattern ( (|Seq#Equal| s0@@5 s1@@5))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.169:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@32 (SeqTypeInv0 (type s@@15))))
 (=> (and (= (type s@@15) (SeqType T@@32)) (= (|Seq#Length| s@@15) 0)) (= s@@15 (|Seq#Empty| T@@32))))
 :qid |stdinbpl.204:18|
 :skolemid |24|
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((s@@16 T@U) (n@@12 Int) ) (! (let ((T@@33 (SeqTypeInv0 (type s@@16))))
 (=> (and (= (type s@@16) (SeqType T@@33)) (<= n@@12 0)) (= (|Seq#Take| s@@16 n@@12) (|Seq#Empty| T@@33))))
 :qid |stdinbpl.379:18|
 :skolemid |46|
 :pattern ( (|Seq#Take| s@@16 n@@12))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@28 T@U) (arg2@@13 Real) (arg3@@10 T@U) (arg4@@8 Real) (arg5@@8 T@U) (arg6@@8 T@U) (arg7@@8 T@U) (arg8@@8 Real) (arg9@@8 T@U) (arg10@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@28) RefType) (= (type arg3@@10) RefType)) (= (type arg5@@8) RefType)) (= (type arg6@@8) (SeqType intType))) (= (type arg7@@8) RefType)) (= (type arg9@@8) RefType)) (= (type arg10@@5) (SeqType intType))) (= (getPredWandId (wand arg1@@28 arg2@@13 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@5)) 1))
 :qid |stdinbpl.569:15|
 :skolemid |63|
 :pattern ( (wand arg1@@28 arg2@@13 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@5))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@0 () T@U)
(declare-fun x@@25 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun z@@0 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Result_6Mask () T@U)
(declare-fun WandDefRHSMask@2 () T@U)
(declare-fun WandDefLHSHeap@1 () T@U)
(declare-fun p_1@0 () T@U)
(declare-fun plvs@1 () T@U)
(declare-fun WandDefLHSMask@4 () T@U)
(declare-fun WandDefRHSHeap@1 () T@U)
(declare-fun WandDefLHSMask@3 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun WandDefRHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun WandDefLHSMask@1 () T@U)
(declare-fun WandDefRHSHeap@0 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun Result_15Mask () T@U)
(declare-fun Result_15Heap () T@U)
(declare-fun Result_16Mask () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun p_1@1 () T@U)
(declare-fun plvs@2 () T@U)
(declare-fun Heap@@18 () T@U)
(declare-fun Mask@73 () T@U)
(declare-fun b_12@56 () Bool)
(declare-fun b_25@6 () Bool)
(declare-fun Result_16Heap () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun b_12@55 () Bool)
(declare-fun neededTransfer@59 () Real)
(declare-fun Used_7Mask@3 () T@U)
(declare-fun initNeededTransfer@14 () Real)
(declare-fun b_26@0 () Bool)
(declare-fun b_26@1 () Bool)
(declare-fun b_26@2 () Bool)
(declare-fun Ops_3Mask@29 () T@U)
(declare-fun b_26@3 () Bool)
(declare-fun Ops_3Heap@13 () T@U)
(declare-fun Used_7Heap@0 () T@U)
(declare-fun b_26@4 () Bool)
(declare-fun takeTransfer@29 () Real)
(declare-fun Mask@70 () T@U)
(declare-fun neededTransfer@57 () Real)
(declare-fun Heap@43 () T@U)
(declare-fun b_25@3 () Bool)
(declare-fun Used_7Mask@1 () T@U)
(declare-fun neededTransfer@58 () Real)
(declare-fun Used_7Mask@2 () T@U)
(declare-fun b_25@4 () Bool)
(declare-fun TempMask@13 () T@U)
(declare-fun b_25@5 () Bool)
(declare-fun Mask@71 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun maskTransfer@29 () Real)
(declare-fun takeTransfer@28 () Real)
(declare-fun Ops_3Mask@27 () T@U)
(declare-fun b_25@0 () Bool)
(declare-fun neededTransfer@56 () Real)
(declare-fun Used_7Mask@0 () T@U)
(declare-fun b_25@1 () Bool)
(declare-fun TempMask@12 () T@U)
(declare-fun b_25@2 () Bool)
(declare-fun Ops_3Mask@28 () T@U)
(declare-fun maskTransfer@28 () Real)
(declare-fun b_25 () Bool)
(declare-fun b_12@45 () Bool)
(declare-fun b_22@12 () Bool)
(declare-fun b_12@46 () Bool)
(declare-fun b_12@47 () Bool)
(declare-fun Used_6Heap@0 () T@U)
(declare-fun Ops_3Heap@12 () T@U)
(declare-fun b_12@48 () Bool)
(declare-fun Ops_3Mask@25 () T@U)
(declare-fun Ops_3Mask@26 () T@U)
(declare-fun b_12@49 () Bool)
(declare-fun b_12@50 () Bool)
(declare-fun b_12@51 () Bool)
(declare-fun b_12@52 () Bool)
(declare-fun ExhaleHeap@5 () T@U)
(declare-fun b_12@53 () Bool)
(declare-fun b_12@54 () Bool)
(declare-fun Heap@42 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun b_12@42 () Bool)
(declare-fun neededTransfer@55 () Real)
(declare-fun Used_6Mask@7 () T@U)
(declare-fun arg_5@0 () T@U)
(declare-fun initNeededTransfer@13 () Real)
(declare-fun b_24@0 () Bool)
(declare-fun b_24@1 () Bool)
(declare-fun b_24@2 () Bool)
(declare-fun b_24@3 () Bool)
(declare-fun b_24@4 () Bool)
(declare-fun b_12@43 () Bool)
(declare-fun b_12@44 () Bool)
(declare-fun takeTransfer@27 () Real)
(declare-fun b_22@9 () Bool)
(declare-fun Mask@67 () T@U)
(declare-fun Used_6Mask@5 () T@U)
(declare-fun neededTransfer@53 () Real)
(declare-fun Heap@40 () T@U)
(declare-fun neededTransfer@54 () Real)
(declare-fun Used_6Mask@6 () T@U)
(declare-fun b_22@10 () Bool)
(declare-fun TempMask@11 () T@U)
(declare-fun b_22@11 () Bool)
(declare-fun Mask@68 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun maskTransfer@27 () Real)
(declare-fun takeTransfer@26 () Real)
(declare-fun Used_6Mask@3 () T@U)
(declare-fun b_22@6 () Bool)
(declare-fun Ops_3Mask@23 () T@U)
(declare-fun neededTransfer@52 () Real)
(declare-fun Used_6Mask@4 () T@U)
(declare-fun b_22@7 () Bool)
(declare-fun TempMask@10 () T@U)
(declare-fun b_22@8 () Bool)
(declare-fun Ops_3Mask@24 () T@U)
(declare-fun maskTransfer@26 () Real)
(declare-fun Result_14Heap () T@U)
(declare-fun Result_14Mask () T@U)
(declare-fun b_12@39 () Bool)
(declare-fun neededTransfer@51 () Real)
(declare-fun initNeededTransfer@12 () Real)
(declare-fun b_23@0 () Bool)
(declare-fun b_23@1 () Bool)
(declare-fun b_23@2 () Bool)
(declare-fun b_23@3 () Bool)
(declare-fun b_23@4 () Bool)
(declare-fun b_12@40 () Bool)
(declare-fun b_12@41 () Bool)
(declare-fun takeTransfer@25 () Real)
(declare-fun Heap@38 () T@U)
(declare-fun b_22@3 () Bool)
(declare-fun Mask@65 () T@U)
(declare-fun Used_6Mask@1 () T@U)
(declare-fun neededTransfer@49 () Real)
(declare-fun neededTransfer@50 () Real)
(declare-fun Used_6Mask@2 () T@U)
(declare-fun b_22@4 () Bool)
(declare-fun b_22@5 () Bool)
(declare-fun Mask@66 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun maskTransfer@25 () Real)
(declare-fun takeTransfer@24 () Real)
(declare-fun Ops_3Mask@21 () T@U)
(declare-fun b_22@0 () Bool)
(declare-fun neededTransfer@48 () Real)
(declare-fun Used_6Mask@0 () T@U)
(declare-fun b_22@1 () Bool)
(declare-fun b_22@2 () Bool)
(declare-fun Ops_3Mask@22 () T@U)
(declare-fun maskTransfer@24 () Real)
(declare-fun b_12@35 () Bool)
(declare-fun b_20@4 () Bool)
(declare-fun neededTransfer@47 () Real)
(declare-fun Used_5Mask@3 () T@U)
(declare-fun initNeededTransfer@11 () Real)
(declare-fun b_21@0 () Bool)
(declare-fun b_21@1 () Bool)
(declare-fun Result_13Heap () T@U)
(declare-fun Result_13Mask () T@U)
(declare-fun b_21@2 () Bool)
(declare-fun b_21@3 () Bool)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun b_21@4 () Bool)
(declare-fun b_12@36 () Bool)
(declare-fun b_12@37 () Bool)
(declare-fun b_12@38 () Bool)
(declare-fun b_22 () Bool)
(declare-fun takeTransfer@23 () Real)
(declare-fun Mask@63 () T@U)
(declare-fun neededTransfer@45 () Real)
(declare-fun b_20@2 () Bool)
(declare-fun Used_5Mask@1 () T@U)
(declare-fun neededTransfer@46 () Real)
(declare-fun Used_5Mask@2 () T@U)
(declare-fun b_20@3 () Bool)
(declare-fun Mask@64 () T@U)
(declare-fun maskTransfer@23 () Real)
(declare-fun takeTransfer@22 () Real)
(declare-fun Ops_3Mask@19 () T@U)
(declare-fun b_20@0 () Bool)
(declare-fun neededTransfer@44 () Real)
(declare-fun Used_5Mask@0 () T@U)
(declare-fun b_20@1 () Bool)
(declare-fun Ops_3Mask@20 () T@U)
(declare-fun maskTransfer@22 () Real)
(declare-fun b_20 () Bool)
(declare-fun Ops_3Heap@11 () T@U)
(declare-fun Ops_3Mask@18 () T@U)
(declare-fun b_12@34 () Bool)
(declare-fun b_12@33 () Bool)
(declare-fun Mask@62 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Ops_3Heap@8 () T@U)
(declare-fun Ops_3Heap@9 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Ops_3Heap@10 () T@U)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun b_19@0 () Bool)
(declare-fun b_12@30 () Bool)
(declare-fun b_13@31 () Bool)
(declare-fun b_19@1 () Bool)
(declare-fun Result_12Heap () T@U)
(declare-fun Result_12Mask () T@U)
(declare-fun b_19@2 () Bool)
(declare-fun Ops_3Mask@17 () T@U)
(declare-fun Used_4Mask@20 () T@U)
(declare-fun b_19@3 () Bool)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_19@4 () Bool)
(declare-fun b_12@31 () Bool)
(declare-fun b_12@32 () Bool)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun b_12@26 () Bool)
(declare-fun b_13@30 () Bool)
(declare-fun neededTransfer@43 () Real)
(declare-fun Used_4Mask@19 () T@U)
(declare-fun arg_4@0 () T@U)
(declare-fun initNeededTransfer@10 () Real)
(declare-fun b_18@0 () Bool)
(declare-fun b_18@1 () Bool)
(declare-fun Result_11Heap () T@U)
(declare-fun Result_11Mask () T@U)
(declare-fun b_18@2 () Bool)
(declare-fun Ops_3Mask@16 () T@U)
(declare-fun b_18@3 () Bool)
(declare-fun b_18@4 () Bool)
(declare-fun b_12@27 () Bool)
(declare-fun b_12@28 () Bool)
(declare-fun b_12@29 () Bool)
(declare-fun Mask@61 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun takeTransfer@21 () Real)
(declare-fun b_13@27 () Bool)
(declare-fun Heap@34 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Used_4Mask@17 () T@U)
(declare-fun neededTransfer@41 () Real)
(declare-fun neededTransfer@42 () Real)
(declare-fun Used_4Mask@18 () T@U)
(declare-fun b_13@28 () Bool)
(declare-fun TempMask@9 () T@U)
(declare-fun b_13@29 () Bool)
(declare-fun Mask@60 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun maskTransfer@21 () Real)
(declare-fun takeTransfer@20 () Real)
(declare-fun Used_4Mask@15 () T@U)
(declare-fun Ops_3Mask@14 () T@U)
(declare-fun b_13@24 () Bool)
(declare-fun neededTransfer@40 () Real)
(declare-fun Used_4Mask@16 () T@U)
(declare-fun b_13@25 () Bool)
(declare-fun TempMask@8 () T@U)
(declare-fun b_13@26 () Bool)
(declare-fun Ops_3Mask@15 () T@U)
(declare-fun maskTransfer@20 () Real)
(declare-fun Result_10Heap () T@U)
(declare-fun Result_10Mask () T@U)
(declare-fun b_12@23 () Bool)
(declare-fun neededTransfer@39 () Real)
(declare-fun initNeededTransfer@9 () Real)
(declare-fun b_17@0 () Bool)
(declare-fun b_17@1 () Bool)
(declare-fun b_17@2 () Bool)
(declare-fun b_17@3 () Bool)
(declare-fun b_17@4 () Bool)
(declare-fun b_12@24 () Bool)
(declare-fun b_12@25 () Bool)
(declare-fun takeTransfer@19 () Real)
(declare-fun b_13@21 () Bool)
(declare-fun Used_4Mask@13 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun neededTransfer@37 () Real)
(declare-fun neededTransfer@38 () Real)
(declare-fun Used_4Mask@14 () T@U)
(declare-fun b_13@22 () Bool)
(declare-fun b_13@23 () Bool)
(declare-fun Mask@58 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun maskTransfer@19 () Real)
(declare-fun takeTransfer@18 () Real)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun Used_4Mask@11 () T@U)
(declare-fun b_13@18 () Bool)
(declare-fun neededTransfer@36 () Real)
(declare-fun Used_4Mask@12 () T@U)
(declare-fun b_13@19 () Bool)
(declare-fun b_13@20 () Bool)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun maskTransfer@18 () Real)
(declare-fun b_12@20 () Bool)
(declare-fun neededTransfer@35 () Real)
(declare-fun arg_3@0 () T@U)
(declare-fun initNeededTransfer@8 () Real)
(declare-fun b_16@0 () Bool)
(declare-fun b_16@1 () Bool)
(declare-fun Result_9Heap () T@U)
(declare-fun Result_9Mask () T@U)
(declare-fun b_16@2 () Bool)
(declare-fun b_16@3 () Bool)
(declare-fun b_16@4 () Bool)
(declare-fun b_12@21 () Bool)
(declare-fun b_12@22 () Bool)
(declare-fun takeTransfer@17 () Real)
(declare-fun b_13@15 () Bool)
(declare-fun Used_4Mask@9 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun neededTransfer@33 () Real)
(declare-fun neededTransfer@34 () Real)
(declare-fun Used_4Mask@10 () T@U)
(declare-fun b_13@16 () Bool)
(declare-fun TempMask@7 () T@U)
(declare-fun b_13@17 () Bool)
(declare-fun Mask@56 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun maskTransfer@17 () Real)
(declare-fun takeTransfer@16 () Real)
(declare-fun Used_4Mask@7 () T@U)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun b_13@12 () Bool)
(declare-fun neededTransfer@32 () Real)
(declare-fun Used_4Mask@8 () T@U)
(declare-fun b_13@13 () Bool)
(declare-fun TempMask@6 () T@U)
(declare-fun b_13@14 () Bool)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun maskTransfer@16 () Real)
(declare-fun Result_8Heap () T@U)
(declare-fun Result_8Mask () T@U)
(declare-fun b_12@17 () Bool)
(declare-fun neededTransfer@31 () Real)
(declare-fun initNeededTransfer@7 () Real)
(declare-fun b_15@0 () Bool)
(declare-fun b_15@1 () Bool)
(declare-fun b_15@2 () Bool)
(declare-fun b_15@3 () Bool)
(declare-fun b_15@4 () Bool)
(declare-fun b_12@18 () Bool)
(declare-fun b_12@19 () Bool)
(declare-fun takeTransfer@15 () Real)
(declare-fun b_13@9 () Bool)
(declare-fun Mask@53 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Used_4Mask@5 () T@U)
(declare-fun neededTransfer@29 () Real)
(declare-fun neededTransfer@30 () Real)
(declare-fun Used_4Mask@6 () T@U)
(declare-fun b_13@10 () Bool)
(declare-fun b_13@11 () Bool)
(declare-fun Mask@54 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun maskTransfer@15 () Real)
(declare-fun takeTransfer@14 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun b_13@6 () Bool)
(declare-fun neededTransfer@28 () Real)
(declare-fun Used_4Mask@4 () T@U)
(declare-fun b_13@7 () Bool)
(declare-fun b_13@8 () Bool)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun maskTransfer@14 () Real)
(declare-fun b_12@12 () Bool)
(declare-fun neededTransfer@27 () Real)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_14@0 () Bool)
(declare-fun b_14@1 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun b_14@2 () Bool)
(declare-fun b_14@3 () Bool)
(declare-fun b_14@4 () Bool)
(declare-fun b_12@15 () Bool)
(declare-fun b_12@16 () Bool)
(declare-fun takeTransfer@13 () Real)
(declare-fun b_13@3 () Bool)
(declare-fun Heap@26 () T@U)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_13@4 () Bool)
(declare-fun b_13@5 () Bool)
(declare-fun Mask@52 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun b_13@0 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_13@1 () Bool)
(declare-fun b_13@2 () Bool)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun b_12@13 () Bool)
(declare-fun b_12@14 () Bool)
(declare-fun b_13 () Bool)
(declare-fun b_12@11 () Bool)
(declare-fun b_12@10 () Bool)
(declare-fun b_12@9 () Bool)
(declare-fun b_12@8 () Bool)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun b_12@7 () Bool)
(declare-fun b_12@6 () Bool)
(declare-fun ExhaleHeap@4 () T@U)
(declare-fun b_12@5 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_12@4 () Bool)
(declare-fun b_12@3 () Bool)
(declare-fun b_12@0 () Bool)
(declare-fun b_12@1 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_12@2 () Bool)
(declare-fun b_12 () Bool)
(declare-fun b_11@0 () Bool)
(declare-fun b_11 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun oldP () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun z@1 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun z@0 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun plvs@0 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun b_1_1@36 () Bool)
(declare-fun b_9@6 () Bool)
(declare-fun Result_6Heap () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun b_1_1@35 () Bool)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_2Mask@3 () T@U)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_10@0 () Bool)
(declare-fun b_10@1 () Bool)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_1Mask@21 () T@U)
(declare-fun b_10@3 () Bool)
(declare-fun Ops_1Heap@12 () T@U)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun takeTransfer@11 () Real)
(declare-fun Heap@13 () T@U)
(declare-fun neededTransfer@21 () Real)
(declare-fun Mask@19 () T@U)
(declare-fun b_9@3 () Bool)
(declare-fun Used_2Mask@1 () T@U)
(declare-fun neededTransfer@22 () Real)
(declare-fun Used_2Mask@2 () T@U)
(declare-fun b_9@4 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_9@5 () Bool)
(declare-fun Mask@20 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_1Mask@19 () T@U)
(declare-fun b_9@0 () Bool)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_2Mask@0 () T@U)
(declare-fun b_9@1 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_1Mask@20 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun b_9 () Bool)
(declare-fun Ops_1Heap@11 () T@U)
(declare-fun Ops_1Mask@18 () T@U)
(declare-fun b_1_1@34 () Bool)
(declare-fun b_1_1@33 () Bool)
(declare-fun Mask@18 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Ops_1Heap@6 () T@U)
(declare-fun Ops_1Heap@5 () T@U)
(declare-fun Ops_1Heap@7 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Ops_1Heap@8 () T@U)
(declare-fun Ops_1Heap@9 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Ops_1Heap@10 () T@U)
(declare-fun Ops_1Heap@2 () T@U)
(declare-fun Ops_1Heap@3 () T@U)
(declare-fun Ops_1Heap@4 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun b_8@0 () Bool)
(declare-fun b_1_1@30 () Bool)
(declare-fun b_2_1@31 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun Result_5Heap () T@U)
(declare-fun Result_5Mask () T@U)
(declare-fun b_8@2 () Bool)
(declare-fun Ops_1Mask@17 () T@U)
(declare-fun Used_1Mask@20 () T@U)
(declare-fun b_8@3 () Bool)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_8@4 () Bool)
(declare-fun b_1_1@31 () Bool)
(declare-fun b_1_1@32 () Bool)
(declare-fun b_1_1@26 () Bool)
(declare-fun b_2_1@30 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_1Mask@19 () T@U)
(declare-fun arg_1@0 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun Ops_1Mask@16 () T@U)
(declare-fun b_7@3 () Bool)
(declare-fun b_7@4 () Bool)
(declare-fun b_1_1@27 () Bool)
(declare-fun b_1_1@28 () Bool)
(declare-fun b_1_1@29 () Bool)
(declare-fun Heap@11 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun takeTransfer@9 () Real)
(declare-fun neededTransfer@17 () Real)
(declare-fun b_2_1@27 () Bool)
(declare-fun Used_1Mask@17 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_1Mask@18 () T@U)
(declare-fun b_2_1@28 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_2_1@29 () Bool)
(declare-fun Mask@16 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Used_1Mask@15 () T@U)
(declare-fun Ops_1Mask@14 () T@U)
(declare-fun b_2_1@24 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_1Mask@16 () T@U)
(declare-fun b_2_1@25 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_2_1@26 () Bool)
(declare-fun Ops_1Mask@15 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_1_1@23 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_6@0 () Bool)
(declare-fun b_6@1 () Bool)
(declare-fun b_6@2 () Bool)
(declare-fun b_6@3 () Bool)
(declare-fun b_6@4 () Bool)
(declare-fun b_1_1@24 () Bool)
(declare-fun b_1_1@25 () Bool)
(declare-fun takeTransfer@7 () Real)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun b_2_1@21 () Bool)
(declare-fun Used_1Mask@13 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_1Mask@14 () T@U)
(declare-fun b_2_1@22 () Bool)
(declare-fun b_2_1@23 () Bool)
(declare-fun Mask@14 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Used_1Mask@11 () T@U)
(declare-fun b_2_1@18 () Bool)
(declare-fun Ops_1Mask@12 () T@U)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_1Mask@12 () T@U)
(declare-fun b_2_1@19 () Bool)
(declare-fun b_2_1@20 () Bool)
(declare-fun Ops_1Mask@13 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun b_1_1@20 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun arg@0 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_5@0 () Bool)
(declare-fun b_5@1 () Bool)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun b_5@3 () Bool)
(declare-fun b_5@4 () Bool)
(declare-fun b_1_1@21 () Bool)
(declare-fun b_1_1@22 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun b_2_1@15 () Bool)
(declare-fun Mask@11 () T@U)
(declare-fun Used_1Mask@9 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_1Mask@10 () T@U)
(declare-fun b_2_1@16 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_2_1@17 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_1Mask@10 () T@U)
(declare-fun Used_1Mask@7 () T@U)
(declare-fun b_2_1@12 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_1Mask@8 () T@U)
(declare-fun b_2_1@13 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_2_1@14 () Bool)
(declare-fun Ops_1Mask@11 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_1_1@17 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_4@0 () Bool)
(declare-fun b_4@1 () Bool)
(declare-fun b_4@2 () Bool)
(declare-fun b_4@3 () Bool)
(declare-fun b_4@4 () Bool)
(declare-fun b_1_1@18 () Bool)
(declare-fun b_1_1@19 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun neededTransfer@5 () Real)
(declare-fun Heap@3 () T@U)
(declare-fun b_2_1@9 () Bool)
(declare-fun Mask@9 () T@U)
(declare-fun Used_1Mask@5 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_1Mask@6 () T@U)
(declare-fun b_2_1@10 () Bool)
(declare-fun b_2_1@11 () Bool)
(declare-fun Mask@10 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun b_2_1@6 () Bool)
(declare-fun Ops_1Mask@8 () T@U)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_1Mask@4 () T@U)
(declare-fun b_2_1@7 () Bool)
(declare-fun b_2_1@8 () Bool)
(declare-fun Ops_1Mask@9 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_1_1@12 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_3@2 () Bool)
(declare-fun b_3@3 () Bool)
(declare-fun b_3@4 () Bool)
(declare-fun b_1_1@15 () Bool)
(declare-fun b_1_1@16 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@7 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_1_1@13 () Bool)
(declare-fun b_1_1@14 () Bool)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@11 () Bool)
(declare-fun b_1_1@10 () Bool)
(declare-fun b_1_1@9 () Bool)
(declare-fun b_1_1@8 () Bool)
(declare-fun Ops_1Heap@1 () T@U)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun b_1_1@7 () Bool)
(declare-fun b_1_1@6 () Bool)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_1_1@5 () Bool)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun b_1_1@4 () Bool)
(declare-fun b_1_1@3 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun b_1_1@1 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@2 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun p_1 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@7) (MapType1Type RefType realType)) (= (type Heap@1) (MapType0Type RefType))) (= (type x@@25) RefType)) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Heap@17) (MapType0Type RefType))) (= (type p_1@0) RefType)) (= (type Mask@81) (MapType1Type RefType realType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type z@1) RefType)) (= (type Heap@46) (MapType0Type RefType))) (= (type Heap@@18) (MapType0Type RefType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Heap@18) (MapType0Type RefType))) (= (type plvs@1) (SeqType intType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (forall ((arg0@@44 T@U) ) (! (= (type (FrameFragment arg0@@44)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@44))
))) (forall ((arg0@@45 T@U) (arg1@@29 T@U) ) (! (= (type (CombineFrames arg0@@45 arg1@@29)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@45 arg1@@29))
))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Heap@26) (MapType0Type RefType))) (= (type p_1@1) RefType)) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type Heap@45) (MapType0Type RefType))) (= (type plvs@2) (SeqType intType))) (= (type Mask@73) (MapType1Type RefType realType))) (= (type Result_16Heap) (MapType0Type RefType))) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Result_16Mask) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Used_7Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@29) (MapType1Type RefType realType))) (= (type Ops_3Heap@13) (MapType0Type RefType))) (= (type Used_7Heap@0) (MapType0Type RefType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Used_7Mask@1) (MapType1Type RefType realType))) (= (type Used_7Mask@2) (MapType1Type RefType realType))) (= (type TempMask@13) (MapType1Type RefType realType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Heap@44) (MapType0Type RefType))) (= (type Ops_3Mask@27) (MapType1Type RefType realType))) (= (type Used_7Mask@0) (MapType1Type RefType realType))) (= (type TempMask@12) (MapType1Type RefType realType))) (= (type Ops_3Mask@28) (MapType1Type RefType realType))) (= (type Ops_3Heap@12) (MapType0Type RefType))) (= (type Ops_3Mask@19) (MapType1Type RefType realType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Result_15Heap) (MapType0Type RefType))) (= (type Used_6Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@25) (MapType1Type RefType realType))) (= (type Ops_3Mask@26) (MapType1Type RefType realType))) (= (type ExhaleHeap@5) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Result_15Mask) (MapType1Type RefType realType))) (= (type Used_6Mask@7) (MapType1Type RefType realType))) (= (type arg_5@0) RefType)) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Used_6Mask@5) (MapType1Type RefType realType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Used_6Mask@6) (MapType1Type RefType realType))) (= (type TempMask@11) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Used_6Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@23) (MapType1Type RefType realType))) (= (type Used_6Mask@4) (MapType1Type RefType realType))) (= (type TempMask@10) (MapType1Type RefType realType))) (= (type Ops_3Mask@24) (MapType1Type RefType realType))) (= (type Result_14Heap) (MapType0Type RefType))) (= (type Result_14Mask) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Used_6Mask@1) (MapType1Type RefType realType))) (= (type Used_6Mask@2) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Heap@39) (MapType0Type RefType))) (= (type Ops_3Mask@21) (MapType1Type RefType realType))) (= (type Used_6Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@22) (MapType1Type RefType realType))) (= (type Used_5Mask@3) (MapType1Type RefType realType))) (= (type Result_13Heap) (MapType0Type RefType))) (= (type Result_13Mask) (MapType1Type RefType realType))) (= (type Used_5Heap@0) (MapType0Type RefType))) (= (type Used_5Mask@1) (MapType1Type RefType realType))) (= (type Used_5Mask@2) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Used_5Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@20) (MapType1Type RefType realType))) (= (type WandDefLHSMask@1) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType0Type RefType))) (= (type WandDefRHSMask@0) (MapType1Type RefType realType))) (= (type WandDefRHSHeap@0) (MapType0Type RefType))) (= (type WandDefLHSMask@0) (MapType1Type RefType realType))) (= (type Ops_3Heap@2) (MapType0Type RefType))) (= (type Ops_3Mask@6) (MapType1Type RefType realType))) (= (type Ops_3Heap@11) (MapType0Type RefType))) (= (type Ops_3Mask@18) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Ops_3Heap@5) (MapType0Type RefType))) (= (type Ops_3Heap@6) (MapType0Type RefType))) (= (type Ops_3Heap@7) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Ops_3Heap@8) (MapType0Type RefType))) (= (type Ops_3Heap@9) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Ops_3Heap@10) (MapType0Type RefType))) (= (type Ops_3Heap@3) (MapType0Type RefType))) (= (type Ops_3Heap@4) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Result_12Heap) (MapType0Type RefType))) (= (type Result_12Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@17) (MapType1Type RefType realType))) (= (type Used_4Mask@20) (MapType1Type RefType realType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Used_4Mask@19) (MapType1Type RefType realType))) (= (type arg_4@0) RefType)) (= (type Result_11Heap) (MapType0Type RefType))) (= (type Result_11Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@16) (MapType1Type RefType realType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Heap@36) (MapType0Type RefType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Used_4Mask@17) (MapType1Type RefType realType))) (= (type Used_4Mask@18) (MapType1Type RefType realType))) (= (type TempMask@9) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Used_4Mask@15) (MapType1Type RefType realType))) (= (type Ops_3Mask@14) (MapType1Type RefType realType))) (= (type Used_4Mask@16) (MapType1Type RefType realType))) (= (type TempMask@8) (MapType1Type RefType realType))) (= (type Ops_3Mask@15) (MapType1Type RefType realType))) (= (type Result_10Heap) (MapType0Type RefType))) (= (type Result_10Mask) (MapType1Type RefType realType))) (= (type Used_4Mask@13) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Used_4Mask@14) (MapType1Type RefType realType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Ops_3Mask@12) (MapType1Type RefType realType))) (= (type Used_4Mask@11) (MapType1Type RefType realType))) (= (type Used_4Mask@12) (MapType1Type RefType realType))) (= (type Ops_3Mask@13) (MapType1Type RefType realType))) (= (type arg_3@0) RefType)) (= (type Result_9Heap) (MapType0Type RefType))) (= (type Result_9Mask) (MapType1Type RefType realType))) (= (type Used_4Mask@9) (MapType1Type RefType realType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Used_4Mask@10) (MapType1Type RefType realType))) (= (type TempMask@7) (MapType1Type RefType realType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Used_4Mask@7) (MapType1Type RefType realType))) (= (type Ops_3Mask@10) (MapType1Type RefType realType))) (= (type Used_4Mask@8) (MapType1Type RefType realType))) (= (type TempMask@6) (MapType1Type RefType realType))) (= (type Ops_3Mask@11) (MapType1Type RefType realType))) (= (type Result_8Heap) (MapType0Type RefType))) (= (type Result_8Mask) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Used_4Mask@5) (MapType1Type RefType realType))) (= (type Used_4Mask@6) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Used_4Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@8) (MapType1Type RefType realType))) (= (type Used_4Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@9) (MapType1Type RefType realType))) (= (type Result_7Heap) (MapType0Type RefType))) (= (type Result_7Mask) (MapType1Type RefType realType))) (= (type Used_4Mask@1) (MapType1Type RefType realType))) (= (type Used_4Mask@2) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Used_4Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@7) (MapType1Type RefType realType))) (= (type Ops_3Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@1) (MapType1Type RefType realType))) (= (type Ops_3Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Heap@1) (MapType0Type RefType))) (= (type Ops_3Mask@5) (MapType1Type RefType realType))) (= (type Ops_3Mask@4) (MapType1Type RefType realType))) (= (type ExhaleHeap@4) (MapType0Type RefType))) (= (type Ops_3Mask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@0) (MapType1Type RefType realType))) (= (type Used_3Heap@0) (MapType0Type RefType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Heap@25) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Mask@30) (MapType1Type RefType realType))) (= (type oldP) RefType)) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@21) (MapType0Type RefType))) (= (type Heap@22) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@23) (MapType0Type RefType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type WandDefLHSMask@4) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@1) (MapType0Type RefType))) (= (type WandDefRHSMask@2) (MapType1Type RefType realType))) (= (type WandDefRHSHeap@1) (MapType0Type RefType))) (= (type WandDefLHSMask@3) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Heap@15) (MapType0Type RefType))) (= (type plvs@0) (SeqType intType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Result_6Heap) (MapType0Type RefType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Result_6Mask) (MapType1Type RefType realType))) (= (type Used_2Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@21) (MapType1Type RefType realType))) (= (type Ops_1Heap@12) (MapType0Type RefType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Used_2Mask@1) (MapType1Type RefType realType))) (= (type Used_2Mask@2) (MapType1Type RefType realType))) (= (type TempMask@5) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Ops_1Mask@19) (MapType1Type RefType realType))) (= (type Used_2Mask@0) (MapType1Type RefType realType))) (= (type TempMask@4) (MapType1Type RefType realType))) (= (type Ops_1Mask@20) (MapType1Type RefType realType))) (= (type Ops_1Heap@2) (MapType0Type RefType))) (= (type Ops_1Mask@6) (MapType1Type RefType realType))) (= (type Ops_1Heap@11) (MapType0Type RefType))) (= (type Ops_1Mask@18) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Ops_1Heap@5) (MapType0Type RefType))) (= (type Ops_1Heap@6) (MapType0Type RefType))) (= (type Ops_1Heap@7) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Ops_1Heap@8) (MapType0Type RefType))) (= (type Ops_1Heap@9) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Ops_1Heap@10) (MapType0Type RefType))) (= (type Ops_1Heap@3) (MapType0Type RefType))) (= (type Ops_1Heap@4) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Result_5Heap) (MapType0Type RefType))) (= (type Result_5Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@17) (MapType1Type RefType realType))) (= (type Used_1Mask@20) (MapType1Type RefType realType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (= (type Used_1Mask@19) (MapType1Type RefType realType))) (= (type arg_1@0) RefType)) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@16) (MapType1Type RefType realType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Used_1Mask@17) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Used_1Mask@18) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Used_1Mask@15) (MapType1Type RefType realType))) (= (type Ops_1Mask@14) (MapType1Type RefType realType))) (= (type Used_1Mask@16) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@15) (MapType1Type RefType realType))) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Used_1Mask@13) (MapType1Type RefType realType))) (= (type Used_1Mask@14) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Used_1Mask@11) (MapType1Type RefType realType))) (= (type Ops_1Mask@12) (MapType1Type RefType realType))) (= (type Used_1Mask@12) (MapType1Type RefType realType))) (= (type Ops_1Mask@13) (MapType1Type RefType realType))) (= (type arg@0) RefType)) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Used_1Mask@9) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Used_1Mask@10) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Ops_1Mask@10) (MapType1Type RefType realType))) (= (type Used_1Mask@7) (MapType1Type RefType realType))) (= (type Used_1Mask@8) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@11) (MapType1Type RefType realType))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Used_1Mask@5) (MapType1Type RefType realType))) (= (type Used_1Mask@6) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@8) (MapType1Type RefType realType))) (= (type Used_1Mask@4) (MapType1Type RefType realType))) (= (type Ops_1Mask@9) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@7) (MapType1Type RefType realType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Ops_1Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Heap@1) (MapType0Type RefType))) (= (type Ops_1Mask@5) (MapType1Type RefType realType))) (= (type Ops_1Mask@4) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type UsedHeap@0) (MapType0Type RefType))) (= (type z@0) RefType)) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type p_1) RefType)) (= (type PostMask@0) (MapType1Type RefType realType))) (= (type z@@0) RefType)) (= (type PostHeap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id tree_delete_min)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 551) (let ((anon8_correct true))
(let ((anon390_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 548) 545)) anon8_correct)))
(let ((anon390_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 546) (- 0 547)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 546) 545) anon8_correct))))))
(let ((anon4_correct true))
(let ((anon388_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 544) 541)) anon4_correct)))
(let ((anon388_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 542) (- 0 543)) (<= FullPerm (U_2_real (MapType1Select PostMask@0 null (Tree z@@0))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@0 null (Tree z@@0)))) (=> (= (ControlFlow 0 542) 541) anon4_correct))))))
(let ((anon389_Else_correct true))
(let ((anon386_Then_correct  (=> (state PostHeap@0 ZeroMask) (=> (and (and (= PostMask@0 (MapType1Store ZeroMask null (Tree z@@0) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Tree z@@0))) FullPerm)))) (state PostHeap@0 PostMask@0)) (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0))) (and (and (and (and (=> (= (ControlFlow 0 549) 540) anon389_Else_correct) (=> (= (ControlFlow 0 549) 546) anon390_Then_correct)) (=> (= (ControlFlow 0 549) 548) anon390_Else_correct)) (=> (= (ControlFlow 0 549) 542) anon388_Then_correct)) (=> (= (ControlFlow 0 549) 544) anon388_Else_correct))))))
(let ((anon25_correct true))
(let ((anon398_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 523) 520)) anon25_correct)))
(let ((anon398_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 521) (- 0 522)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (Tree (MapType0Select Heap@1 x@@25 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (Tree (MapType0Select Heap@1 x@@25 l))))) (=> (= (ControlFlow 0 521) 520) anon25_correct))))))
(let ((anon140_correct true))
(let ((anon458_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 375) 372)) anon140_correct)))
(let ((anon458_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 373) (- 0 374)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 373) 372) anon140_correct))))))
(let ((anon136_correct true))
(let ((anon456_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 371) 368)) anon136_correct)))
(let ((anon456_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 369) (- 0 370)) (<= FullPerm (U_2_real (MapType1Select Result_6Mask null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_6Mask null (Tree x@@25)))) (=> (= (ControlFlow 0 369) 368) anon136_correct))))))
(let ((anon162_correct true))
(let ((anon470_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 342) 339)) anon162_correct)))
(let ((anon470_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 340) (- 0 341)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 340) 339) anon162_correct))))))
(let ((anon158_correct true))
(let ((anon468_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 338) 335)) anon158_correct)))
(let ((anon468_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 336) (- 0 337)) (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@2 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@2 null (Tree x@@25)))) (=> (= (ControlFlow 0 336) 335) anon158_correct))))))
(let ((anon469_Else_correct true))
(let ((anon465_Else_correct  (=> (and (|Seq#Equal| (vals WandDefLHSHeap@1 (MapType0Select WandDefLHSHeap@1 p_1@0 l)) (|Seq#Drop| plvs@1 1)) (state WandDefLHSHeap@1 WandDefLHSMask@4)) (=> (and (and (state WandDefLHSHeap@1 WandDefLHSMask@4) (= WandDefRHSMask@2 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) FullPerm))))) (and (state WandDefRHSHeap@1 WandDefRHSMask@2) (state WandDefRHSHeap@1 WandDefRHSMask@2))) (and (and (and (and (=> (= (ControlFlow 0 343) 334) anon469_Else_correct) (=> (= (ControlFlow 0 343) 340) anon470_Then_correct)) (=> (= (ControlFlow 0 343) 342) anon470_Else_correct)) (=> (= (ControlFlow 0 343) 336) anon468_Then_correct)) (=> (= (ControlFlow 0 343) 338) anon468_Else_correct))))))
(let ((anon154_correct true))
(let ((anon466_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 333) 330)) anon154_correct)))
(let ((anon466_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 331) (- 0 332)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@4 null (Tree (MapType0Select WandDefLHSHeap@1 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@4 null (Tree (MapType0Select WandDefLHSHeap@1 p_1@0 l))))) (=> (= (ControlFlow 0 331) 330) anon154_correct))))))
(let ((anon464_Then_correct  (=> (not (= p_1@0 null)) (=> (and (= WandDefLHSMask@3 (MapType1Store ZeroMask p_1@0 l (real_2_U (+ (U_2_real (MapType1Select ZeroMask p_1@0 l)) FullPerm)))) (state WandDefLHSHeap@1 WandDefLHSMask@3)) (and (=> (= (ControlFlow 0 344) (- 0 346)) (HasDirectPerm WandDefLHSMask@3 p_1@0 l)) (=> (HasDirectPerm WandDefLHSMask@3 p_1@0 l) (=> (= WandDefLHSMask@4 (MapType1Store WandDefLHSMask@3 null (Tree (MapType0Select WandDefLHSHeap@1 p_1@0 l)) (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@3 null (Tree (MapType0Select WandDefLHSHeap@1 p_1@0 l)))) FullPerm)))) (=> (and (state WandDefLHSHeap@1 WandDefLHSMask@4) (state WandDefLHSHeap@1 WandDefLHSMask@4)) (and (=> (= (ControlFlow 0 344) (- 0 345)) (HasDirectPerm WandDefLHSMask@4 p_1@0 l)) (=> (HasDirectPerm WandDefLHSMask@4 p_1@0 l) (and (and (=> (= (ControlFlow 0 344) 343) anon465_Else_correct) (=> (= (ControlFlow 0 344) 331) anon466_Then_correct)) (=> (= (ControlFlow 0 344) 333) anon466_Else_correct))))))))))))
(let ((anon464_Else_correct true))
(let ((anon462_Else_correct  (=> (|Seq#Equal| plvs@1 (vals ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l))) (=> (and (state ExhaleHeap@1 Mask@27) (state ExhaleHeap@1 Mask@27)) (and (=> (= (ControlFlow 0 347) 344) anon464_Then_correct) (=> (= (ControlFlow 0 347) 329) anon464_Else_correct))))))
(let ((anon149_correct true))
(let ((anon463_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 328) 325)) anon149_correct)))
(let ((anon463_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 326) (- 0 327)) (<= FullPerm (U_2_real (MapType1Select Mask@27 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@27 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))))) (=> (= (ControlFlow 0 326) 325) anon149_correct))))))
(let ((anon461_Then_correct  (=> (and (and (not (= p_1@0 null)) (not (= p_1@0 null))) (and (= Mask@26 (MapType1Store Mask@25 p_1@0 l (real_2_U (+ (U_2_real (MapType1Select Mask@25 p_1@0 l)) FullPerm)))) (state ExhaleHeap@1 Mask@26))) (and (=> (= (ControlFlow 0 348) (- 0 351)) (HasDirectPerm Mask@26 p_1@0 l)) (=> (HasDirectPerm Mask@26 p_1@0 l) (=> (and (= Mask@27 (MapType1Store Mask@26 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (real_2_U (+ (U_2_real (MapType1Select Mask@26 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))) FullPerm)))) (state ExhaleHeap@1 Mask@27)) (and (=> (= (ControlFlow 0 348) (- 0 350)) (HasDirectPerm Mask@27 p_1@0 l)) (=> (HasDirectPerm Mask@27 p_1@0 l) (=> (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null)) (=> (and (state ExhaleHeap@1 Mask@27) (state ExhaleHeap@1 Mask@27)) (and (=> (= (ControlFlow 0 348) (- 0 349)) (HasDirectPerm Mask@27 p_1@0 l)) (=> (HasDirectPerm Mask@27 p_1@0 l) (and (and (=> (= (ControlFlow 0 348) 347) anon462_Else_correct) (=> (= (ControlFlow 0 348) 326) anon463_Then_correct)) (=> (= (ControlFlow 0 348) 328) anon463_Else_correct))))))))))))))
(let ((anon292_correct true))
(let ((anon537_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 167) 164)) anon292_correct)))
(let ((anon537_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 165) (- 0 166)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 165) 164) anon292_correct))))))
(let ((anon288_correct true))
(let ((anon535_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 163) 160)) anon288_correct)))
(let ((anon535_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 161) (- 0 162)) (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 161) 160) anon288_correct))))))
(let ((anon536_Else_correct true))
(let ((anon532_Else_correct  (=> (and (|Seq#Equal| (vals WandDefLHSHeap@0 (MapType0Select WandDefLHSHeap@0 p_1@0 l)) (|Seq#Drop| plvs@1 1)) (state WandDefLHSHeap@0 WandDefLHSMask@1)) (=> (and (and (state WandDefLHSHeap@0 WandDefLHSMask@1) (= WandDefRHSMask@0 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) FullPerm))))) (and (state WandDefRHSHeap@0 WandDefRHSMask@0) (state WandDefRHSHeap@0 WandDefRHSMask@0))) (and (and (and (and (=> (= (ControlFlow 0 168) 159) anon536_Else_correct) (=> (= (ControlFlow 0 168) 165) anon537_Then_correct)) (=> (= (ControlFlow 0 168) 167) anon537_Else_correct)) (=> (= (ControlFlow 0 168) 161) anon535_Then_correct)) (=> (= (ControlFlow 0 168) 163) anon535_Else_correct))))))
(let ((anon284_correct true))
(let ((anon533_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 158) 155)) anon284_correct)))
(let ((anon533_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 156) (- 0 157)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@1 null (Tree (MapType0Select WandDefLHSHeap@0 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@1 null (Tree (MapType0Select WandDefLHSHeap@0 p_1@0 l))))) (=> (= (ControlFlow 0 156) 155) anon284_correct))))))
(let ((anon531_Then_correct  (=> (not (= p_1@0 null)) (=> (and (= WandDefLHSMask@0 (MapType1Store ZeroMask p_1@0 l (real_2_U (+ (U_2_real (MapType1Select ZeroMask p_1@0 l)) FullPerm)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (=> (= (ControlFlow 0 169) (- 0 171)) (HasDirectPerm WandDefLHSMask@0 p_1@0 l)) (=> (HasDirectPerm WandDefLHSMask@0 p_1@0 l) (=> (= WandDefLHSMask@1 (MapType1Store WandDefLHSMask@0 null (Tree (MapType0Select WandDefLHSHeap@0 p_1@0 l)) (real_2_U (+ (U_2_real (MapType1Select WandDefLHSMask@0 null (Tree (MapType0Select WandDefLHSHeap@0 p_1@0 l)))) FullPerm)))) (=> (and (state WandDefLHSHeap@0 WandDefLHSMask@1) (state WandDefLHSHeap@0 WandDefLHSMask@1)) (and (=> (= (ControlFlow 0 169) (- 0 170)) (HasDirectPerm WandDefLHSMask@1 p_1@0 l)) (=> (HasDirectPerm WandDefLHSMask@1 p_1@0 l) (and (and (=> (= (ControlFlow 0 169) 168) anon532_Else_correct) (=> (= (ControlFlow 0 169) 156) anon533_Then_correct)) (=> (= (ControlFlow 0 169) 158) anon533_Else_correct))))))))))))
(let ((anon338_correct true))
(let ((anon561_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 97) 94)) anon338_correct)))
(let ((anon561_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 95) (- 0 96)) (<= FullPerm (U_2_real (MapType1Select Result_15Mask null (Tree (MapType0Select Result_15Heap p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_15Mask null (Tree (MapType0Select Result_15Heap p_1@0 l))))) (=> (= (ControlFlow 0 95) 94) anon338_correct))))))
(let ((anon361_correct true))
(let ((anon573_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 70) 67)) anon361_correct)))
(let ((anon573_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 68) (- 0 69)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 68) 67) anon361_correct))))))
(let ((anon357_correct true))
(let ((anon571_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 66) 63)) anon357_correct)))
(let ((anon571_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 64) (- 0 65)) (<= FullPerm (U_2_real (MapType1Select Result_16Mask null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_16Mask null (Tree x@@25)))) (=> (= (ControlFlow 0 64) 63) anon357_correct))))))
(let ((anon366_correct  (=> (= Mask@75 (MapType1Store Mask@74 null (Tree (MapType0Select Heap@45 p_1@1 l)) (real_2_U (- (U_2_real (MapType1Select Mask@74 null (Tree (MapType0Select Heap@45 p_1@1 l)))) FullPerm)))) (and (=> (= (ControlFlow 0 48) (- 0 50)) (not (= (MapType0Select Heap@45 p_1@1 l) null))) (=> (not (= (MapType0Select Heap@45 p_1@1 l) null)) (and (=> (= (ControlFlow 0 48) (- 0 49)) (|Seq#Equal| plvs@2 (vals Heap@45 (MapType0Select Heap@45 p_1@1 l)))) (=> (|Seq#Equal| plvs@2 (vals Heap@45 (MapType0Select Heap@45 p_1@1 l))) (=> (= (ControlFlow 0 48) (- 0 47)) (<= FullPerm (U_2_real (MapType1Select Mask@75 null (wand p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))))))))))))
(let ((anon575_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 53) 48)) anon366_correct)))
(let ((anon575_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 51) (- 0 52)) (<= FullPerm (U_2_real (MapType1Select Mask@74 null (Tree (MapType0Select Heap@45 p_1@1 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@74 null (Tree (MapType0Select Heap@45 p_1@1 l))))) (=> (= (ControlFlow 0 51) 48) anon366_correct))))))
(let ((anon364_correct  (=> (= Mask@74 (MapType1Store Mask@73 p_1@1 l (real_2_U (- (U_2_real (MapType1Select Mask@73 p_1@1 l)) FullPerm)))) (and (=> (= (ControlFlow 0 54) 51) anon575_Then_correct) (=> (= (ControlFlow 0 54) 53) anon575_Else_correct)))))
(let ((anon574_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 57) 54)) anon364_correct)))
(let ((anon574_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 55) (- 0 56)) (<= FullPerm (U_2_real (MapType1Select Mask@73 p_1@1 l)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@73 p_1@1 l))) (=> (= (ControlFlow 0 55) 54) anon364_correct))))))
(let ((anon362_correct  (and (=> (= (ControlFlow 0 58) (- 0 60)) (=> (and (and b_12@56 b_12@56) b_25@6) (|Seq#Equal| (vals Result_16Heap x@@25) (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) (=> (=> (and (and b_12@56 b_12@56) b_25@6) (|Seq#Equal| (vals Result_16Heap x@@25) (|Seq#Drop| (vals Heap@@18 x@@25) 1))) (=> (state Heap@45 Mask@72) (=> (and (and (= Mask@73 (MapType1Store Mask@72 null (wand p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (+ (U_2_real (MapType1Select Mask@72 null (wand p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) FullPerm)))) (state Heap@45 Mask@73)) (and (state Heap@45 Mask@73) (state Heap@45 Mask@73))) (and (=> (= (ControlFlow 0 58) (- 0 59)) (not (= p_1@1 null))) (=> (not (= p_1@1 null)) (and (=> (= (ControlFlow 0 58) 55) anon574_Then_correct) (=> (= (ControlFlow 0 58) 57) anon574_Else_correct))))))))))
(let ((anon569_Then_correct  (=> b_12@56 (and (and (and (and (=> (= (ControlFlow 0 71) 58) anon362_correct) (=> (= (ControlFlow 0 71) 68) anon573_Then_correct)) (=> (= (ControlFlow 0 71) 70) anon573_Else_correct)) (=> (= (ControlFlow 0 71) 64) anon571_Then_correct)) (=> (= (ControlFlow 0 71) 66) anon571_Else_correct)))))
(let ((anon569_Else_correct  (=> (and (not b_12@56) (= (ControlFlow 0 62) 58)) anon362_correct)))
(let ((anon568_Then_correct  (=> (and (and b_12@56 b_12@56) b_25@6) (and (=> (= (ControlFlow 0 72) 71) anon569_Then_correct) (=> (= (ControlFlow 0 72) 62) anon569_Else_correct)))))
(let ((anon568_Else_correct  (=> (and (not (and (and b_12@56 b_12@56) b_25@6)) (= (ControlFlow 0 61) 58)) anon362_correct)))
(let ((anon352_correct  (and (=> (= (ControlFlow 0 73) (- 0 74)) (=> (and (and b_12@55 b_12@55) b_25@6) (and (= neededTransfer@59 0.0) (= (U_2_real (MapType1Select Used_7Mask@3 null (Tree x@@25))) initNeededTransfer@14)))) (=> (=> (and (and b_12@55 b_12@55) b_25@6) (and (= neededTransfer@59 0.0) (= (U_2_real (MapType1Select Used_7Mask@3 null (Tree x@@25))) initNeededTransfer@14))) (=> (and (= b_26@0  (and b_12@55 b_25@6)) (= b_26@1  (and b_26@0 (state Result_16Heap Result_16Mask)))) (=> (and (and (= b_26@2  (and b_26@1 (sumMask Result_16Mask Ops_3Mask@29 Used_7Mask@3))) (= b_26@3  (and (and b_26@2 (IdenticalOnKnownLocations Ops_3Heap@13 Result_16Heap Ops_3Mask@29)) (IdenticalOnKnownLocations Used_7Heap@0 Result_16Heap Used_7Mask@3)))) (and (= b_26@4  (and b_26@3 (state Result_16Heap Result_16Mask))) (= b_12@56  (and b_12@55 b_26@4)))) (and (=> (= (ControlFlow 0 73) 72) anon568_Then_correct) (=> (= (ControlFlow 0 73) 61) anon568_Else_correct))))))))
(let ((anon567_Else_correct  (=> (>= 0.0 takeTransfer@29) (=> (and (= Mask@72 Mask@70) (= neededTransfer@59 neededTransfer@57)) (=> (and (and (= Heap@45 Heap@43) (= b_25@6 b_25@3)) (and (= Used_7Mask@3 Used_7Mask@1) (= (ControlFlow 0 77) 73))) anon352_correct)))))
(let ((anon567_Then_correct  (=> (> takeTransfer@29 0.0) (=> (and (= neededTransfer@58 (- neededTransfer@57 takeTransfer@29)) (= Used_7Mask@2 (MapType1Store Used_7Mask@1 null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select Used_7Mask@1 null (Tree x@@25))) takeTransfer@29))))) (=> (and (and (= b_25@4  (and b_25@3 (state Used_7Heap@0 Used_7Mask@2))) (= TempMask@13 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U FullPerm)))) (and (= b_25@5  (and b_25@4 (IdenticalOnKnownLocations Heap@43 Used_7Heap@0 TempMask@13))) (= Mask@71 (MapType1Store Mask@70 null (Tree x@@25) (real_2_U (- (U_2_real (MapType1Select Mask@70 null (Tree x@@25))) takeTransfer@29)))))) (=> (and (and (and (forall ((o_19 T@U) (f_23 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_23))))
(let ((A@@12 (FieldTypeInv0 (type f_23))))
 (=> (and (and (= (type o_19) RefType) (= (type f_23) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@43 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_19 f_23)) (U_2_bool (MapType1Select (MapType0Select Heap@43 null (|Tree#sm| x@@25)) o_19 f_23)))) (U_2_bool (MapType1Select newPMask@12 o_19 f_23)))))
 :qid |stdinbpl.3115:47|
 :skolemid |95|
 :pattern ( (MapType1Select newPMask@12 o_19 f_23))
)) (= Heap@44 (MapType0Store Heap@43 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@12))) (and (= Mask@72 Mask@71) (= neededTransfer@59 neededTransfer@58))) (and (and (= Heap@45 Heap@44) (= b_25@6 b_25@5)) (and (= Used_7Mask@3 Used_7Mask@2) (= (ControlFlow 0 76) 73)))) anon352_correct))))))
(let ((anon566_Else_correct  (=> (and (< maskTransfer@29 neededTransfer@57) (= takeTransfer@29 maskTransfer@29)) (and (=> (= (ControlFlow 0 79) 76) anon567_Then_correct) (=> (= (ControlFlow 0 79) 77) anon567_Else_correct)))))
(let ((anon566_Then_correct  (=> (and (<= neededTransfer@57 maskTransfer@29) (= takeTransfer@29 neededTransfer@57)) (and (=> (= (ControlFlow 0 78) 76) anon567_Then_correct) (=> (= (ControlFlow 0 78) 77) anon567_Else_correct)))))
(let ((anon565_Then_correct  (=> (and (and (and (and (and b_12@55 b_12@55) b_25@3) true) (> neededTransfer@57 0.0)) (= maskTransfer@29 (U_2_real (MapType1Select Mask@70 null (Tree x@@25))))) (and (=> (= (ControlFlow 0 80) 78) anon566_Then_correct) (=> (= (ControlFlow 0 80) 79) anon566_Else_correct)))))
(let ((anon565_Else_correct  (=> (not (and (and (and (and b_12@55 b_12@55) b_25@3) true) (> neededTransfer@57 0.0))) (=> (and (= Mask@72 Mask@70) (= neededTransfer@59 neededTransfer@57)) (=> (and (and (= Heap@45 Heap@43) (= b_25@6 b_25@3)) (and (= Used_7Mask@3 Used_7Mask@1) (= (ControlFlow 0 75) 73))) anon352_correct)))))
(let ((anon564_Else_correct  (=> (>= 0.0 takeTransfer@28) (=> (and (and (= Ops_3Mask@29 Ops_3Mask@27) (= Used_7Mask@1 ZeroMask)) (and (= b_25@3 b_25@0) (= neededTransfer@57 FullPerm))) (and (=> (= (ControlFlow 0 83) 80) anon565_Then_correct) (=> (= (ControlFlow 0 83) 75) anon565_Else_correct))))))
(let ((anon564_Then_correct  (=> (> takeTransfer@28 0.0) (=> (and (= neededTransfer@56 (- FullPerm takeTransfer@28)) (= Used_7Mask@0 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) takeTransfer@28))))) (=> (and (and (and (= b_25@1  (and b_25@0 (state Used_7Heap@0 Used_7Mask@0))) (= TempMask@12 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U FullPerm)))) (and (= b_25@2  (and b_25@1 (IdenticalOnKnownLocations Ops_3Heap@13 Used_7Heap@0 TempMask@12))) (= Ops_3Mask@28 (MapType1Store Ops_3Mask@27 null (Tree x@@25) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@27 null (Tree x@@25))) takeTransfer@28)))))) (and (and (= Ops_3Mask@29 Ops_3Mask@28) (= Used_7Mask@1 Used_7Mask@0)) (and (= b_25@3 b_25@2) (= neededTransfer@57 neededTransfer@56)))) (and (=> (= (ControlFlow 0 82) 80) anon565_Then_correct) (=> (= (ControlFlow 0 82) 75) anon565_Else_correct)))))))
(let ((anon563_Else_correct  (=> (and (< maskTransfer@28 FullPerm) (= takeTransfer@28 maskTransfer@28)) (and (=> (= (ControlFlow 0 85) 82) anon564_Then_correct) (=> (= (ControlFlow 0 85) 83) anon564_Else_correct)))))
(let ((anon563_Then_correct  (=> (and (<= FullPerm maskTransfer@28) (= takeTransfer@28 FullPerm)) (and (=> (= (ControlFlow 0 84) 82) anon564_Then_correct) (=> (= (ControlFlow 0 84) 83) anon564_Else_correct)))))
(let ((anon562_Then_correct  (=> (and (and (and (and (and b_12@55 b_12@55) b_25@0) true) (> FullPerm 0.0)) (= maskTransfer@28 (U_2_real (MapType1Select Ops_3Mask@27 null (Tree x@@25))))) (and (=> (= (ControlFlow 0 86) 84) anon563_Then_correct) (=> (= (ControlFlow 0 86) 85) anon563_Else_correct)))))
(let ((anon562_Else_correct  (=> (not (and (and (and (and b_12@55 b_12@55) b_25@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@29 Ops_3Mask@27) (= Used_7Mask@1 ZeroMask)) (and (= b_25@3 b_25@0) (= neededTransfer@57 FullPerm))) (and (=> (= (ControlFlow 0 81) 80) anon565_Then_correct) (=> (= (ControlFlow 0 81) 75) anon565_Else_correct))))))
(let ((anon340_correct  (=> (and (= b_25@0  (and b_25 (state Used_7Heap@0 ZeroMask))) (= initNeededTransfer@14 (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) FullPerm))) (and (=> (= (ControlFlow 0 87) (- 0 88)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 87) 86) anon562_Then_correct) (=> (= (ControlFlow 0 87) 81) anon562_Else_correct)))))))
(let ((anon339_correct  (and (=> (= (ControlFlow 0 90) (- 0 91)) (=> (and b_12@45 b_22@12) (|Seq#Equal| (vals Result_15Heap (MapType0Select Result_15Heap p_1@0 l)) (|Seq#Drop| plvs@1 1)))) (=> (=> (and b_12@45 b_22@12) (|Seq#Equal| (vals Result_15Heap (MapType0Select Result_15Heap p_1@0 l)) (|Seq#Drop| plvs@1 1))) (=> (= b_12@46  (and b_12@45 b_22@12)) (=> (and (and (and (and (= b_12@47  (and b_12@46 (= Used_6Heap@0 Ops_3Heap@12))) (= b_12@48  (and b_12@47 (state Ops_3Heap@12 Ops_3Mask@25)))) (and (= Ops_3Mask@26 (MapType1Store Ops_3Mask@25 null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@25 null (Tree x@@25))) FullPerm)))) (= b_12@49  (and b_12@48 (state Ops_3Heap@12 Ops_3Mask@26))))) (and (and (= b_12@50  (and b_12@49 (state Ops_3Heap@12 Ops_3Mask@26))) (= b_12@51  (and b_12@50 (|Seq#Equal| (vals Ops_3Heap@12 x@@25) (|Seq#Drop| (vals Heap@@18 x@@25) 1))))) (and (= b_12@52  (and b_12@51 (state Ops_3Heap@12 Ops_3Mask@26))) (IdenticalOnKnownLocations Ops_3Heap@12 ExhaleHeap@5 Ops_3Mask@26)))) (and (and (and (= b_12@53  (and b_12@52 (state ExhaleHeap@5 Ops_3Mask@26))) (= b_12@54  (and b_12@53 (state ExhaleHeap@5 Ops_3Mask@26)))) (and (= Ops_3Heap@13 ExhaleHeap@5) (= Ops_3Mask@27 Ops_3Mask@26))) (and (and (= b_12@55 b_12@54) (= Heap@43 Heap@42)) (and (= Mask@70 Mask@69) (= (ControlFlow 0 90) 87))))) anon340_correct))))))
(let ((anon559_Then_correct  (=> b_12@45 (and (=> (= (ControlFlow 0 98) (- 0 99)) (HasDirectPerm Result_15Mask p_1@0 l)) (=> (HasDirectPerm Result_15Mask p_1@0 l) (and (and (=> (= (ControlFlow 0 98) 90) anon339_correct) (=> (= (ControlFlow 0 98) 95) anon561_Then_correct)) (=> (= (ControlFlow 0 98) 97) anon561_Else_correct)))))))
(let ((anon559_Else_correct  (=> (and (not b_12@45) (= (ControlFlow 0 93) 90)) anon339_correct)))
(let ((anon558_Then_correct  (=> (and b_12@45 b_22@12) (and (=> (= (ControlFlow 0 100) 98) anon559_Then_correct) (=> (= (ControlFlow 0 100) 93) anon559_Else_correct)))))
(let ((anon558_Else_correct  (=> (and (not (and b_12@45 b_22@12)) (= (ControlFlow 0 92) 90)) anon339_correct)))
(let ((anon333_correct  (and (=> (= (ControlFlow 0 101) (- 0 102)) (=> (and b_12@42 b_22@12) (and (= neededTransfer@55 0.0) (= (U_2_real (MapType1Select Used_6Mask@7 null (Tree arg_5@0))) initNeededTransfer@13)))) (=> (=> (and b_12@42 b_22@12) (and (= neededTransfer@55 0.0) (= (U_2_real (MapType1Select Used_6Mask@7 null (Tree arg_5@0))) initNeededTransfer@13))) (=> (and (and (and (= b_24@0  (and b_12@42 b_22@12)) (= b_24@1  (and b_24@0 (state Result_15Heap Result_15Mask)))) (and (= b_24@2  (and b_24@1 (sumMask Result_15Mask Ops_3Mask@25 Used_6Mask@7))) (= b_24@3  (and (and b_24@2 (IdenticalOnKnownLocations Ops_3Heap@12 Result_15Heap Ops_3Mask@25)) (IdenticalOnKnownLocations Used_6Heap@0 Result_15Heap Used_6Mask@7))))) (and (and (= b_24@4  (and b_24@3 (state Result_15Heap Result_15Mask))) (= b_12@43  (and b_12@42 b_24@4))) (and (= b_12@44  (and b_12@43 b_22@12)) (= b_12@45  (and b_12@44 (= Used_6Heap@0 Ops_3Heap@12)))))) (and (=> (= (ControlFlow 0 101) 100) anon558_Then_correct) (=> (= (ControlFlow 0 101) 92) anon558_Else_correct)))))))
(let ((anon557_Else_correct  (=> (>= 0.0 takeTransfer@27) (=> (and (= b_22@12 b_22@9) (= Mask@69 Mask@67)) (=> (and (and (= Used_6Mask@7 Used_6Mask@5) (= neededTransfer@55 neededTransfer@53)) (and (= Heap@42 Heap@40) (= (ControlFlow 0 105) 101))) anon333_correct)))))
(let ((anon557_Then_correct  (=> (> takeTransfer@27 0.0) (=> (and (= neededTransfer@54 (- neededTransfer@53 takeTransfer@27)) (= Used_6Mask@6 (MapType1Store Used_6Mask@5 null (Tree arg_5@0) (real_2_U (+ (U_2_real (MapType1Select Used_6Mask@5 null (Tree arg_5@0))) takeTransfer@27))))) (=> (and (and (= b_22@10  (and b_22@9 (state Used_6Heap@0 Used_6Mask@6))) (= TempMask@11 (MapType1Store ZeroMask null (Tree arg_5@0) (real_2_U FullPerm)))) (and (= b_22@11  (and b_22@10 (IdenticalOnKnownLocations Heap@40 Used_6Heap@0 TempMask@11))) (= Mask@68 (MapType1Store Mask@67 null (Tree arg_5@0) (real_2_U (- (U_2_real (MapType1Select Mask@67 null (Tree arg_5@0))) takeTransfer@27)))))) (=> (and (and (and (forall ((o_18 T@U) (f_22 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_22))))
(let ((A@@13 (FieldTypeInv0 (type f_22))))
 (=> (and (and (= (type o_18) RefType) (= (type f_22) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@40 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_18 f_22)) (U_2_bool (MapType1Select (MapType0Select Heap@40 null (|Tree#sm| (MapType0Select Heap@40 p_1@0 l))) o_18 f_22)))) (U_2_bool (MapType1Select newPMask@11 o_18 f_22)))))
 :qid |stdinbpl.2999:53|
 :skolemid |94|
 :pattern ( (MapType1Select newPMask@11 o_18 f_22))
)) (= Heap@41 (MapType0Store Heap@40 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@11))) (and (= b_22@12 b_22@11) (= Mask@69 Mask@68))) (and (and (= Used_6Mask@7 Used_6Mask@6) (= neededTransfer@55 neededTransfer@54)) (and (= Heap@42 Heap@41) (= (ControlFlow 0 104) 101)))) anon333_correct))))))
(let ((anon556_Else_correct  (=> (and (< maskTransfer@27 neededTransfer@53) (= takeTransfer@27 maskTransfer@27)) (and (=> (= (ControlFlow 0 107) 104) anon557_Then_correct) (=> (= (ControlFlow 0 107) 105) anon557_Else_correct)))))
(let ((anon556_Then_correct  (=> (and (<= neededTransfer@53 maskTransfer@27) (= takeTransfer@27 neededTransfer@53)) (and (=> (= (ControlFlow 0 106) 104) anon557_Then_correct) (=> (= (ControlFlow 0 106) 105) anon557_Else_correct)))))
(let ((anon555_Then_correct  (=> (and (and (and (and b_12@42 b_22@9) true) (> neededTransfer@53 0.0)) (= maskTransfer@27 (U_2_real (MapType1Select Mask@67 null (Tree arg_5@0))))) (and (=> (= (ControlFlow 0 108) 106) anon556_Then_correct) (=> (= (ControlFlow 0 108) 107) anon556_Else_correct)))))
(let ((anon555_Else_correct  (=> (not (and (and (and b_12@42 b_22@9) true) (> neededTransfer@53 0.0))) (=> (and (= b_22@12 b_22@9) (= Mask@69 Mask@67)) (=> (and (and (= Used_6Mask@7 Used_6Mask@5) (= neededTransfer@55 neededTransfer@53)) (and (= Heap@42 Heap@40) (= (ControlFlow 0 103) 101))) anon333_correct)))))
(let ((anon554_Else_correct  (=> (>= 0.0 takeTransfer@26) (=> (and (and (= neededTransfer@53 FullPerm) (= Used_6Mask@5 Used_6Mask@3)) (and (= b_22@9 b_22@6) (= Ops_3Mask@25 Ops_3Mask@23))) (and (=> (= (ControlFlow 0 111) 108) anon555_Then_correct) (=> (= (ControlFlow 0 111) 103) anon555_Else_correct))))))
(let ((anon554_Then_correct  (=> (> takeTransfer@26 0.0) (=> (and (= neededTransfer@52 (- FullPerm takeTransfer@26)) (= Used_6Mask@4 (MapType1Store Used_6Mask@3 null (Tree arg_5@0) (real_2_U (+ (U_2_real (MapType1Select Used_6Mask@3 null (Tree arg_5@0))) takeTransfer@26))))) (=> (and (and (and (= b_22@7  (and b_22@6 (state Used_6Heap@0 Used_6Mask@4))) (= TempMask@10 (MapType1Store ZeroMask null (Tree arg_5@0) (real_2_U FullPerm)))) (and (= b_22@8  (and b_22@7 (IdenticalOnKnownLocations Ops_3Heap@12 Used_6Heap@0 TempMask@10))) (= Ops_3Mask@24 (MapType1Store Ops_3Mask@23 null (Tree arg_5@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@23 null (Tree arg_5@0))) takeTransfer@26)))))) (and (and (= neededTransfer@53 neededTransfer@52) (= Used_6Mask@5 Used_6Mask@4)) (and (= b_22@9 b_22@8) (= Ops_3Mask@25 Ops_3Mask@24)))) (and (=> (= (ControlFlow 0 110) 108) anon555_Then_correct) (=> (= (ControlFlow 0 110) 103) anon555_Else_correct)))))))
(let ((anon553_Else_correct  (=> (and (< maskTransfer@26 FullPerm) (= takeTransfer@26 maskTransfer@26)) (and (=> (= (ControlFlow 0 113) 110) anon554_Then_correct) (=> (= (ControlFlow 0 113) 111) anon554_Else_correct)))))
(let ((anon553_Then_correct  (=> (and (<= FullPerm maskTransfer@26) (= takeTransfer@26 FullPerm)) (and (=> (= (ControlFlow 0 112) 110) anon554_Then_correct) (=> (= (ControlFlow 0 112) 111) anon554_Else_correct)))))
(let ((anon552_Then_correct  (=> (and (and (and (and b_12@42 b_22@6) true) (> FullPerm 0.0)) (= maskTransfer@26 (U_2_real (MapType1Select Ops_3Mask@23 null (Tree arg_5@0))))) (and (=> (= (ControlFlow 0 114) 112) anon553_Then_correct) (=> (= (ControlFlow 0 114) 113) anon553_Else_correct)))))
(let ((anon552_Else_correct  (=> (not (and (and (and b_12@42 b_22@6) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@53 FullPerm) (= Used_6Mask@5 Used_6Mask@3)) (and (= b_22@9 b_22@6) (= Ops_3Mask@25 Ops_3Mask@23))) (and (=> (= (ControlFlow 0 109) 108) anon555_Then_correct) (=> (= (ControlFlow 0 109) 103) anon555_Else_correct))))))
(let ((anon321_correct  (=> (and (= arg_5@0 (MapType0Select Result_14Heap p_1@0 l)) (= initNeededTransfer@13 (+ (U_2_real (MapType1Select Used_6Mask@3 null (Tree arg_5@0))) FullPerm))) (and (=> (= (ControlFlow 0 115) (- 0 116)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 115) 114) anon552_Then_correct) (=> (= (ControlFlow 0 115) 109) anon552_Else_correct)))))))
(let ((anon551_Else_correct  (=> (and (not b_12@42) (= (ControlFlow 0 120) 115)) anon321_correct)))
(let ((anon551_Then_correct  (=> b_12@42 (and (=> (= (ControlFlow 0 118) (- 0 119)) (HasDirectPerm Result_14Mask p_1@0 l)) (=> (HasDirectPerm Result_14Mask p_1@0 l) (=> (= (ControlFlow 0 118) 115) anon321_correct))))))
(let ((anon550_Then_correct  (=> (and b_12@42 b_22@6) (and (=> (= (ControlFlow 0 121) 118) anon551_Then_correct) (=> (= (ControlFlow 0 121) 120) anon551_Else_correct)))))
(let ((anon550_Else_correct  (=> (and (not (and b_12@42 b_22@6)) (= (ControlFlow 0 117) 115)) anon321_correct)))
(let ((anon318_correct  (and (=> (= (ControlFlow 0 122) (- 0 123)) (=> (and b_12@39 b_22@6) (and (= neededTransfer@51 0.0) (= (U_2_real (MapType1Select Used_6Mask@3 p_1@0 l)) initNeededTransfer@12)))) (=> (=> (and b_12@39 b_22@6) (and (= neededTransfer@51 0.0) (= (U_2_real (MapType1Select Used_6Mask@3 p_1@0 l)) initNeededTransfer@12))) (=> (and (and (and (= b_23@0  (and b_12@39 b_22@6)) (= b_23@1  (and b_23@0 (state Result_14Heap Result_14Mask)))) (and (= b_23@2  (and b_23@1 (sumMask Result_14Mask Ops_3Mask@23 Used_6Mask@3))) (= b_23@3  (and (and b_23@2 (IdenticalOnKnownLocations Ops_3Heap@12 Result_14Heap Ops_3Mask@23)) (IdenticalOnKnownLocations Used_6Heap@0 Result_14Heap Used_6Mask@3))))) (and (and (= b_23@4  (and b_23@3 (state Result_14Heap Result_14Mask))) (= b_12@40  (and b_12@39 b_23@4))) (and (= b_12@41  (and b_12@40 b_22@6)) (= b_12@42  (and b_12@41 (= Used_6Heap@0 Ops_3Heap@12)))))) (and (=> (= (ControlFlow 0 122) 121) anon550_Then_correct) (=> (= (ControlFlow 0 122) 117) anon550_Else_correct)))))))
(let ((anon549_Else_correct  (=> (>= 0.0 takeTransfer@25) (=> (and (= Heap@40 Heap@38) (= b_22@6 b_22@3)) (=> (and (and (= Mask@67 Mask@65) (= Used_6Mask@3 Used_6Mask@1)) (and (= neededTransfer@51 neededTransfer@49) (= (ControlFlow 0 126) 122))) anon318_correct)))))
(let ((anon549_Then_correct  (=> (> takeTransfer@25 0.0) (=> (and (and (= neededTransfer@50 (- neededTransfer@49 takeTransfer@25)) (= Used_6Mask@2 (MapType1Store Used_6Mask@1 p_1@0 l (real_2_U (+ (U_2_real (MapType1Select Used_6Mask@1 p_1@0 l)) takeTransfer@25))))) (and (= b_22@4  (and b_22@3 (state Used_6Heap@0 Used_6Mask@2))) (= b_22@5  (and b_22@4 (= (MapType0Select Heap@38 p_1@0 l) (MapType0Select Used_6Heap@0 p_1@0 l)))))) (=> (and (and (and (= Mask@66 (MapType1Store Mask@65 p_1@0 l (real_2_U (- (U_2_real (MapType1Select Mask@65 p_1@0 l)) takeTransfer@25)))) (= Heap@39 (MapType0Store Heap@38 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@38 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) p_1@0 l (bool_2_U true))))) (and (= Heap@40 Heap@39) (= b_22@6 b_22@5))) (and (and (= Mask@67 Mask@66) (= Used_6Mask@3 Used_6Mask@2)) (and (= neededTransfer@51 neededTransfer@50) (= (ControlFlow 0 125) 122)))) anon318_correct)))))
(let ((anon548_Else_correct  (=> (and (< maskTransfer@25 neededTransfer@49) (= takeTransfer@25 maskTransfer@25)) (and (=> (= (ControlFlow 0 128) 125) anon549_Then_correct) (=> (= (ControlFlow 0 128) 126) anon549_Else_correct)))))
(let ((anon548_Then_correct  (=> (and (<= neededTransfer@49 maskTransfer@25) (= takeTransfer@25 neededTransfer@49)) (and (=> (= (ControlFlow 0 127) 125) anon549_Then_correct) (=> (= (ControlFlow 0 127) 126) anon549_Else_correct)))))
(let ((anon547_Then_correct  (=> (and (and (and (and b_12@39 b_22@3) true) (> neededTransfer@49 0.0)) (= maskTransfer@25 (U_2_real (MapType1Select Mask@65 p_1@0 l)))) (and (=> (= (ControlFlow 0 129) 127) anon548_Then_correct) (=> (= (ControlFlow 0 129) 128) anon548_Else_correct)))))
(let ((anon547_Else_correct  (=> (not (and (and (and b_12@39 b_22@3) true) (> neededTransfer@49 0.0))) (=> (and (= Heap@40 Heap@38) (= b_22@6 b_22@3)) (=> (and (and (= Mask@67 Mask@65) (= Used_6Mask@3 Used_6Mask@1)) (and (= neededTransfer@51 neededTransfer@49) (= (ControlFlow 0 124) 122))) anon318_correct)))))
(let ((anon546_Else_correct  (=> (>= 0.0 takeTransfer@24) (=> (and (and (= neededTransfer@49 FullPerm) (= Ops_3Mask@23 Ops_3Mask@21)) (and (= Used_6Mask@1 ZeroMask) (= b_22@3 b_22@0))) (and (=> (= (ControlFlow 0 132) 129) anon547_Then_correct) (=> (= (ControlFlow 0 132) 124) anon547_Else_correct))))))
(let ((anon546_Then_correct  (=> (and (> takeTransfer@24 0.0) (= neededTransfer@48 (- FullPerm takeTransfer@24))) (=> (and (and (and (= Used_6Mask@0 (MapType1Store ZeroMask p_1@0 l (real_2_U (+ (U_2_real (MapType1Select ZeroMask p_1@0 l)) takeTransfer@24)))) (= b_22@1  (and b_22@0 (state Used_6Heap@0 Used_6Mask@0)))) (and (= b_22@2  (and b_22@1 (= (MapType0Select Ops_3Heap@12 p_1@0 l) (MapType0Select Used_6Heap@0 p_1@0 l)))) (= Ops_3Mask@22 (MapType1Store Ops_3Mask@21 p_1@0 l (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@21 p_1@0 l)) takeTransfer@24)))))) (and (and (= neededTransfer@49 neededTransfer@48) (= Ops_3Mask@23 Ops_3Mask@22)) (and (= Used_6Mask@1 Used_6Mask@0) (= b_22@3 b_22@2)))) (and (=> (= (ControlFlow 0 131) 129) anon547_Then_correct) (=> (= (ControlFlow 0 131) 124) anon547_Else_correct))))))
(let ((anon545_Else_correct  (=> (and (< maskTransfer@24 FullPerm) (= takeTransfer@24 maskTransfer@24)) (and (=> (= (ControlFlow 0 134) 131) anon546_Then_correct) (=> (= (ControlFlow 0 134) 132) anon546_Else_correct)))))
(let ((anon545_Then_correct  (=> (and (<= FullPerm maskTransfer@24) (= takeTransfer@24 FullPerm)) (and (=> (= (ControlFlow 0 133) 131) anon546_Then_correct) (=> (= (ControlFlow 0 133) 132) anon546_Else_correct)))))
(let ((anon544_Then_correct  (=> (and (and (and (and b_12@39 b_22@0) true) (> FullPerm 0.0)) (= maskTransfer@24 (U_2_real (MapType1Select Ops_3Mask@21 p_1@0 l)))) (and (=> (= (ControlFlow 0 135) 133) anon545_Then_correct) (=> (= (ControlFlow 0 135) 134) anon545_Else_correct)))))
(let ((anon544_Else_correct  (=> (not (and (and (and b_12@39 b_22@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@49 FullPerm) (= Ops_3Mask@23 Ops_3Mask@21)) (and (= Used_6Mask@1 ZeroMask) (= b_22@3 b_22@0))) (and (=> (= (ControlFlow 0 130) 129) anon547_Then_correct) (=> (= (ControlFlow 0 130) 124) anon547_Else_correct))))))
(let ((anon306_correct  (and (=> (= (ControlFlow 0 136) (- 0 138)) (=> (and b_12@35 b_20@4) (and (= neededTransfer@47 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) initNeededTransfer@11)))) (=> (=> (and b_12@35 b_20@4) (and (= neededTransfer@47 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) initNeededTransfer@11))) (=> (= b_21@0  (and b_12@35 b_20@4)) (=> (and (= b_21@1  (and b_21@0 (state Result_13Heap Result_13Mask))) (= b_21@2  (and b_21@1 (sumMask Result_13Mask Ops_3Mask@21 Used_5Mask@3)))) (=> (and (and (and (= b_21@3  (and (and b_21@2 (IdenticalOnKnownLocations Ops_3Heap@12 Result_13Heap Ops_3Mask@21)) (IdenticalOnKnownLocations Used_5Heap@0 Result_13Heap Used_5Mask@3))) (= b_21@4  (and b_21@3 (state Result_13Heap Result_13Mask)))) (and (= b_12@36  (and b_12@35 b_21@4)) (= b_12@37  (and b_12@36 b_20@4)))) (and (and (= b_12@38  (and b_12@37 (= Used_5Heap@0 Ops_3Heap@12))) (= b_12@39  (and b_12@38 (state Ops_3Heap@12 Ops_3Mask@21)))) (and (= b_22@0  (and b_22 (state Used_6Heap@0 ZeroMask))) (= initNeededTransfer@12 (+ (U_2_real (MapType1Select ZeroMask p_1@0 l)) FullPerm))))) (and (=> (= (ControlFlow 0 136) (- 0 137)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 136) 135) anon544_Then_correct) (=> (= (ControlFlow 0 136) 130) anon544_Else_correct)))))))))))
(let ((anon543_Else_correct  (=> (and (>= 0.0 takeTransfer@23) (= Mask@65 Mask@63)) (=> (and (and (= neededTransfer@47 neededTransfer@45) (= b_20@4 b_20@2)) (and (= Used_5Mask@3 Used_5Mask@1) (= (ControlFlow 0 141) 136))) anon306_correct))))
(let ((anon543_Then_correct  (=> (and (> takeTransfer@23 0.0) (= neededTransfer@46 (- neededTransfer@45 takeTransfer@23))) (=> (and (and (and (= Used_5Mask@2 (MapType1Store Used_5Mask@1 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (+ (U_2_real (MapType1Select Used_5Mask@1 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) takeTransfer@23)))) (= b_20@3  (and b_20@2 (state Used_5Heap@0 Used_5Mask@2)))) (and (= Mask@64 (MapType1Store Mask@63 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (- (U_2_real (MapType1Select Mask@63 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) takeTransfer@23)))) (= Mask@65 Mask@64))) (and (and (= neededTransfer@47 neededTransfer@46) (= b_20@4 b_20@3)) (and (= Used_5Mask@3 Used_5Mask@2) (= (ControlFlow 0 140) 136)))) anon306_correct))))
(let ((anon542_Else_correct  (=> (and (< maskTransfer@23 neededTransfer@45) (= takeTransfer@23 maskTransfer@23)) (and (=> (= (ControlFlow 0 143) 140) anon543_Then_correct) (=> (= (ControlFlow 0 143) 141) anon543_Else_correct)))))
(let ((anon542_Then_correct  (=> (and (<= neededTransfer@45 maskTransfer@23) (= takeTransfer@23 neededTransfer@45)) (and (=> (= (ControlFlow 0 142) 140) anon543_Then_correct) (=> (= (ControlFlow 0 142) 141) anon543_Else_correct)))))
(let ((anon541_Then_correct  (=> (and (and (and (and b_12@35 b_20@2) true) (> neededTransfer@45 0.0)) (= maskTransfer@23 (U_2_real (MapType1Select Mask@63 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))))) (and (=> (= (ControlFlow 0 144) 142) anon542_Then_correct) (=> (= (ControlFlow 0 144) 143) anon542_Else_correct)))))
(let ((anon541_Else_correct  (=> (and (not (and (and (and b_12@35 b_20@2) true) (> neededTransfer@45 0.0))) (= Mask@65 Mask@63)) (=> (and (and (= neededTransfer@47 neededTransfer@45) (= b_20@4 b_20@2)) (and (= Used_5Mask@3 Used_5Mask@1) (= (ControlFlow 0 139) 136))) anon306_correct))))
(let ((anon540_Else_correct  (=> (>= 0.0 takeTransfer@22) (=> (and (and (= Ops_3Mask@21 Ops_3Mask@19) (= Used_5Mask@1 ZeroMask)) (and (= b_20@2 b_20@0) (= neededTransfer@45 1.0))) (and (=> (= (ControlFlow 0 147) 144) anon541_Then_correct) (=> (= (ControlFlow 0 147) 139) anon541_Else_correct))))))
(let ((anon540_Then_correct  (=> (> takeTransfer@22 0.0) (=> (and (and (and (= neededTransfer@44 (- 1.0 takeTransfer@22)) (= Used_5Mask@0 (MapType1Store ZeroMask null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) takeTransfer@22))))) (and (= b_20@1  (and b_20@0 (state Used_5Heap@0 Used_5Mask@0))) (= Ops_3Mask@20 (MapType1Store Ops_3Mask@19 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@19 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) takeTransfer@22)))))) (and (and (= Ops_3Mask@21 Ops_3Mask@20) (= Used_5Mask@1 Used_5Mask@0)) (and (= b_20@2 b_20@1) (= neededTransfer@45 neededTransfer@44)))) (and (=> (= (ControlFlow 0 146) 144) anon541_Then_correct) (=> (= (ControlFlow 0 146) 139) anon541_Else_correct))))))
(let ((anon539_Else_correct  (=> (and (< maskTransfer@22 1.0) (= takeTransfer@22 maskTransfer@22)) (and (=> (= (ControlFlow 0 149) 146) anon540_Then_correct) (=> (= (ControlFlow 0 149) 147) anon540_Else_correct)))))
(let ((anon539_Then_correct  (=> (and (<= 1.0 maskTransfer@22) (= takeTransfer@22 1.0)) (and (=> (= (ControlFlow 0 148) 146) anon540_Then_correct) (=> (= (ControlFlow 0 148) 147) anon540_Else_correct)))))
(let ((anon538_Then_correct  (=> (and (and (and (and b_12@35 b_20@0) true) (> 1.0 0.0)) (= maskTransfer@22 (U_2_real (MapType1Select Ops_3Mask@19 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))))) (and (=> (= (ControlFlow 0 150) 148) anon539_Then_correct) (=> (= (ControlFlow 0 150) 149) anon539_Else_correct)))))
(let ((anon538_Else_correct  (=> (not (and (and (and b_12@35 b_20@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_3Mask@21 Ops_3Mask@19) (= Used_5Mask@1 ZeroMask)) (and (= b_20@2 b_20@0) (= neededTransfer@45 1.0))) (and (=> (= (ControlFlow 0 145) 144) anon541_Then_correct) (=> (= (ControlFlow 0 145) 139) anon541_Else_correct))))))
(let ((anon294_correct  (=> (= initNeededTransfer@11 (+ (U_2_real (MapType1Select ZeroMask null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) 1.0)) (and (=> (= (ControlFlow 0 151) (- 0 152)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 151) 150) anon538_Then_correct) (=> (= (ControlFlow 0 151) 145) anon538_Else_correct)))))))
(let ((anon530_Then_correct  (=> b_12@35 (and (=> (= (ControlFlow 0 172) 169) anon531_Then_correct) (=> (= (ControlFlow 0 172) 151) anon294_correct)))))
(let ((anon530_Else_correct  (=> (and (not b_12@35) (= (ControlFlow 0 154) 151)) anon294_correct)))
(let ((anon529_Then_correct  (=> (and b_12@35 b_20@0) (and (=> (= (ControlFlow 0 173) 172) anon530_Then_correct) (=> (= (ControlFlow 0 173) 154) anon530_Else_correct)))))
(let ((anon529_Else_correct  (=> (and (not (and b_12@35 b_20@0)) (= (ControlFlow 0 153) 151)) anon294_correct)))
(let ((anon528_Then_correct  (=> (and b_12@35 (= b_20@0  (and b_20 (state Used_5Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 174) 173) anon529_Then_correct) (=> (= (ControlFlow 0 174) 153) anon529_Else_correct)))))
(let ((anon528_Else_correct  (=> (not b_12@35) (=> (and (= Ops_3Heap@13 Ops_3Heap@12) (= Ops_3Mask@27 Ops_3Mask@19)) (=> (and (and (= b_12@55 b_12@35) (= Heap@43 Heap@38)) (and (= Mask@70 Mask@63) (= (ControlFlow 0 89) 87))) anon340_correct)))))
(let ((anon276_correct  (=> (state Ops_3Heap@11 Ops_3Mask@18) (=> (and (= b_12@34  (and b_12@33 (state Ops_3Heap@11 Ops_3Mask@18))) (= Mask@63 Mask@62)) (=> (and (and (= Ops_3Heap@12 Ops_3Heap@11) (= b_12@35 b_12@34)) (and (= Heap@38 Heap@37) (= Ops_3Mask@19 Ops_3Mask@18))) (and (=> (= (ControlFlow 0 176) 174) anon528_Then_correct) (=> (= (ControlFlow 0 176) 89) anon528_Else_correct)))))))
(let ((anon527_Else_correct  (=> (and (not (= p_1@1 null)) (= Ops_3Heap@6 (MapType0Store Ops_3Heap@5 null (|Tree#sm| p_1@1) (MapType1Store (MapType0Select Ops_3Heap@5 null (|Tree#sm| p_1@1)) p_1@1 v_2 (bool_2_U true))))) (=> (and (and (and (= Ops_3Heap@7 (MapType0Store Ops_3Heap@6 null (|Tree#sm| p_1@1) (MapType1Store (MapType0Select Ops_3Heap@6 null (|Tree#sm| p_1@1)) p_1@1 l (bool_2_U true)))) (forall ((o_16 T@U) (f_20 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_20))))
(let ((A@@14 (FieldTypeInv0 (type f_20))))
 (=> (and (and (= (type o_16) RefType) (= (type f_20) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@7 null (|Tree#sm| p_1@1)) o_16 f_20)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@7 null (|Tree#sm| (MapType0Select Ops_3Heap@7 p_1@1 l))) o_16 f_20)))) (U_2_bool (MapType1Select newPMask@9 o_16 f_20)))))
 :qid |stdinbpl.2695:45|
 :skolemid |92|
 :pattern ( (MapType1Select newPMask@9 o_16 f_20))
))) (and (= Ops_3Heap@8 (MapType0Store Ops_3Heap@7 null (|Tree#sm| p_1@1) newPMask@9)) (= Ops_3Heap@9 (MapType0Store Ops_3Heap@8 null (|Tree#sm| p_1@1) (MapType1Store (MapType0Select Ops_3Heap@8 null (|Tree#sm| p_1@1)) p_1@1 r_1 (bool_2_U true)))))) (and (and (forall ((o_17 T@U) (f_21 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_21))))
(let ((A@@15 (FieldTypeInv0 (type f_21))))
 (=> (and (and (= (type o_17) RefType) (= (type f_21) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@9 null (|Tree#sm| p_1@1)) o_17 f_21)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@9 null (|Tree#sm| (MapType0Select Ops_3Heap@9 p_1@1 r_1))) o_17 f_21)))) (U_2_bool (MapType1Select newPMask@10 o_17 f_21)))))
 :qid |stdinbpl.2702:45|
 :skolemid |93|
 :pattern ( (MapType1Select newPMask@10 o_17 f_21))
)) (= Ops_3Heap@10 (MapType0Store Ops_3Heap@9 null (|Tree#sm| p_1@1) newPMask@10))) (and (= Ops_3Heap@11 Ops_3Heap@10) (= (ControlFlow 0 178) 176)))) anon276_correct))))
(let ((anon527_Then_correct  (=> (= p_1@1 null) (=> (and (= Ops_3Heap@11 Ops_3Heap@5) (= (ControlFlow 0 177) 176)) anon276_correct))))
(let ((anon526_Else_correct  (=> (and (HasDirectPerm Ops_3Mask@18 null (Tree p_1@1)) (= Ops_3Heap@5 Ops_3Heap@2)) (and (=> (= (ControlFlow 0 180) 177) anon527_Then_correct) (=> (= (ControlFlow 0 180) 178) anon527_Else_correct)))))
(let ((anon526_Then_correct  (=> (and (and (not (HasDirectPerm Ops_3Mask@18 null (Tree p_1@1))) (= Ops_3Heap@3 (MapType0Store Ops_3Heap@2 null (|Tree#sm| p_1@1) ZeroPMask))) (and (= Ops_3Heap@4 (MapType0Store Ops_3Heap@3 null (Tree p_1@1) freshVersion@1)) (= Ops_3Heap@5 Ops_3Heap@4))) (and (=> (= (ControlFlow 0 179) 177) anon527_Then_correct) (=> (= (ControlFlow 0 179) 178) anon527_Else_correct)))))
(let ((anon271_correct  (=> (= b_19@0  (and b_12@30 b_13@31)) (=> (and (= b_19@1  (and b_19@0 (state Result_12Heap Result_12Mask))) (= b_19@2  (and b_19@1 (sumMask Result_12Mask Ops_3Mask@17 Used_4Mask@20)))) (=> (and (and (and (= b_19@3  (and (and b_19@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_12Heap Ops_3Mask@17)) (IdenticalOnKnownLocations Used_4Heap@0 Result_12Heap Used_4Mask@20))) (= b_19@4  (and b_19@3 (state Result_12Heap Result_12Mask)))) (and (= b_12@31  (and b_12@30 b_19@4)) (= Ops_3Mask@18 (MapType1Store Ops_3Mask@17 null (Tree p_1@1) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@17 null (Tree p_1@1))) FullPerm)))))) (and (and (= b_12@32  (and b_12@31 (state Ops_3Heap@2 Ops_3Mask@18))) (= b_12@33  (and b_12@32 (state Ops_3Heap@2 Ops_3Mask@18)))) (and (|Tree#trigger| Ops_3Heap@2 (Tree p_1@1)) (= (MapType0Select Ops_3Heap@2 null (Tree p_1@1)) (FrameFragment (ite (= p_1@1 null) EmptyFrame (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@2 p_1@1 v_2)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@2 p_1@1 l)) (CombineFrames (MapType0Select Ops_3Heap@2 null (Tree (MapType0Select Ops_3Heap@2 p_1@1 l))) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@2 p_1@1 r_1)) (MapType0Select Ops_3Heap@2 null (Tree (MapType0Select Ops_3Heap@2 p_1@1 r_1))))))))))))) (and (=> (= (ControlFlow 0 181) 179) anon526_Then_correct) (=> (= (ControlFlow 0 181) 180) anon526_Else_correct)))))))
(let ((anon270_correct  (and (=> (= (ControlFlow 0 184) (- 0 185)) (=> (and b_12@26 b_13@30) (and (= neededTransfer@43 0.0) (= (U_2_real (MapType1Select Used_4Mask@19 null (Tree arg_4@0))) initNeededTransfer@10)))) (=> (=> (and b_12@26 b_13@30) (and (= neededTransfer@43 0.0) (= (U_2_real (MapType1Select Used_4Mask@19 null (Tree arg_4@0))) initNeededTransfer@10))) (=> (= b_18@0  (and b_12@26 b_13@30)) (=> (and (= b_18@1  (and b_18@0 (state Result_11Heap Result_11Mask))) (= b_18@2  (and b_18@1 (sumMask Result_11Mask Ops_3Mask@16 Used_4Mask@19)))) (=> (and (and (= b_18@3  (and (and b_18@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_11Heap Ops_3Mask@16)) (IdenticalOnKnownLocations Used_4Heap@0 Result_11Heap Used_4Mask@19))) (= b_18@4  (and b_18@3 (state Result_11Heap Result_11Mask)))) (and (= b_12@27  (and b_12@26 b_18@4)) (= b_12@28  (and b_12@27 b_13@30)))) (=> (and (and (and (= b_12@29  (and b_12@28 (= Used_4Heap@0 Ops_3Heap@2))) (= Used_4Mask@20 Used_4Mask@19)) (and (= Mask@62 Mask@61) (= Ops_3Mask@17 Ops_3Mask@16))) (and (and (= b_12@30 b_12@29) (= Heap@37 Heap@36)) (and (= b_13@31 b_13@30) (= (ControlFlow 0 184) 181)))) anon271_correct))))))))
(let ((anon525_Else_correct  (=> (>= 0.0 takeTransfer@21) (=> (and (= b_13@30 b_13@27) (= Heap@36 Heap@34)) (=> (and (and (= Mask@61 Mask@59) (= Used_4Mask@19 Used_4Mask@17)) (and (= neededTransfer@43 neededTransfer@41) (= (ControlFlow 0 188) 184))) anon270_correct)))))
(let ((anon525_Then_correct  (=> (> takeTransfer@21 0.0) (=> (and (= neededTransfer@42 (- neededTransfer@41 takeTransfer@21)) (= Used_4Mask@18 (MapType1Store Used_4Mask@17 null (Tree arg_4@0) (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@17 null (Tree arg_4@0))) takeTransfer@21))))) (=> (and (and (= b_13@28  (and b_13@27 (state Used_4Heap@0 Used_4Mask@18))) (= TempMask@9 (MapType1Store ZeroMask null (Tree arg_4@0) (real_2_U FullPerm)))) (and (= b_13@29  (and b_13@28 (IdenticalOnKnownLocations Heap@34 Used_4Heap@0 TempMask@9))) (= Mask@60 (MapType1Store Mask@59 null (Tree arg_4@0) (real_2_U (- (U_2_real (MapType1Select Mask@59 null (Tree arg_4@0))) takeTransfer@21)))))) (=> (and (and (and (forall ((o_15 T@U) (f_19 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_19))))
(let ((A@@16 (FieldTypeInv0 (type f_19))))
 (=> (and (and (= (type o_15) RefType) (= (type f_19) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@34 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_15 f_19)) (U_2_bool (MapType1Select (MapType0Select Heap@34 null (|Tree#sm| (MapType0Select Heap@34 p_1@1 r_1))) o_15 f_19)))) (U_2_bool (MapType1Select newPMask@8 o_15 f_19)))))
 :qid |stdinbpl.2649:55|
 :skolemid |91|
 :pattern ( (MapType1Select newPMask@8 o_15 f_19))
)) (= Heap@35 (MapType0Store Heap@34 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@8))) (and (= b_13@30 b_13@29) (= Heap@36 Heap@35))) (and (and (= Mask@61 Mask@60) (= Used_4Mask@19 Used_4Mask@18)) (and (= neededTransfer@43 neededTransfer@42) (= (ControlFlow 0 187) 184)))) anon270_correct))))))
(let ((anon524_Else_correct  (=> (and (< maskTransfer@21 neededTransfer@41) (= takeTransfer@21 maskTransfer@21)) (and (=> (= (ControlFlow 0 190) 187) anon525_Then_correct) (=> (= (ControlFlow 0 190) 188) anon525_Else_correct)))))
(let ((anon524_Then_correct  (=> (and (<= neededTransfer@41 maskTransfer@21) (= takeTransfer@21 neededTransfer@41)) (and (=> (= (ControlFlow 0 189) 187) anon525_Then_correct) (=> (= (ControlFlow 0 189) 188) anon525_Else_correct)))))
(let ((anon523_Then_correct  (=> (and (and (and (and b_12@26 b_13@27) true) (> neededTransfer@41 0.0)) (= maskTransfer@21 (U_2_real (MapType1Select Mask@59 null (Tree arg_4@0))))) (and (=> (= (ControlFlow 0 191) 189) anon524_Then_correct) (=> (= (ControlFlow 0 191) 190) anon524_Else_correct)))))
(let ((anon523_Else_correct  (=> (not (and (and (and b_12@26 b_13@27) true) (> neededTransfer@41 0.0))) (=> (and (= b_13@30 b_13@27) (= Heap@36 Heap@34)) (=> (and (and (= Mask@61 Mask@59) (= Used_4Mask@19 Used_4Mask@17)) (and (= neededTransfer@43 neededTransfer@41) (= (ControlFlow 0 186) 184))) anon270_correct)))))
(let ((anon522_Else_correct  (=> (>= 0.0 takeTransfer@20) (=> (and (and (= neededTransfer@41 FullPerm) (= Used_4Mask@17 Used_4Mask@15)) (and (= Ops_3Mask@16 Ops_3Mask@14) (= b_13@27 b_13@24))) (and (=> (= (ControlFlow 0 194) 191) anon523_Then_correct) (=> (= (ControlFlow 0 194) 186) anon523_Else_correct))))))
(let ((anon522_Then_correct  (=> (> takeTransfer@20 0.0) (=> (and (= neededTransfer@40 (- FullPerm takeTransfer@20)) (= Used_4Mask@16 (MapType1Store Used_4Mask@15 null (Tree arg_4@0) (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@15 null (Tree arg_4@0))) takeTransfer@20))))) (=> (and (and (and (= b_13@25  (and b_13@24 (state Used_4Heap@0 Used_4Mask@16))) (= TempMask@8 (MapType1Store ZeroMask null (Tree arg_4@0) (real_2_U FullPerm)))) (and (= b_13@26  (and b_13@25 (IdenticalOnKnownLocations Ops_3Heap@2 Used_4Heap@0 TempMask@8))) (= Ops_3Mask@15 (MapType1Store Ops_3Mask@14 null (Tree arg_4@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@14 null (Tree arg_4@0))) takeTransfer@20)))))) (and (and (= neededTransfer@41 neededTransfer@40) (= Used_4Mask@17 Used_4Mask@16)) (and (= Ops_3Mask@16 Ops_3Mask@15) (= b_13@27 b_13@26)))) (and (=> (= (ControlFlow 0 193) 191) anon523_Then_correct) (=> (= (ControlFlow 0 193) 186) anon523_Else_correct)))))))
(let ((anon521_Else_correct  (=> (and (< maskTransfer@20 FullPerm) (= takeTransfer@20 maskTransfer@20)) (and (=> (= (ControlFlow 0 196) 193) anon522_Then_correct) (=> (= (ControlFlow 0 196) 194) anon522_Else_correct)))))
(let ((anon521_Then_correct  (=> (and (<= FullPerm maskTransfer@20) (= takeTransfer@20 FullPerm)) (and (=> (= (ControlFlow 0 195) 193) anon522_Then_correct) (=> (= (ControlFlow 0 195) 194) anon522_Else_correct)))))
(let ((anon520_Then_correct  (=> (and (and (and (and b_12@26 b_13@24) true) (> FullPerm 0.0)) (= maskTransfer@20 (U_2_real (MapType1Select Ops_3Mask@14 null (Tree arg_4@0))))) (and (=> (= (ControlFlow 0 197) 195) anon521_Then_correct) (=> (= (ControlFlow 0 197) 196) anon521_Else_correct)))))
(let ((anon520_Else_correct  (=> (not (and (and (and b_12@26 b_13@24) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@41 FullPerm) (= Used_4Mask@17 Used_4Mask@15)) (and (= Ops_3Mask@16 Ops_3Mask@14) (= b_13@27 b_13@24))) (and (=> (= (ControlFlow 0 192) 191) anon523_Then_correct) (=> (= (ControlFlow 0 192) 186) anon523_Else_correct))))))
(let ((anon258_correct  (=> (and (= arg_4@0 (MapType0Select Result_10Heap p_1@1 r_1)) (= initNeededTransfer@10 (+ (U_2_real (MapType1Select Used_4Mask@15 null (Tree arg_4@0))) FullPerm))) (and (=> (= (ControlFlow 0 198) (- 0 199)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 198) 197) anon520_Then_correct) (=> (= (ControlFlow 0 198) 192) anon520_Else_correct)))))))
(let ((anon519_Else_correct  (=> (and (not b_12@26) (= (ControlFlow 0 203) 198)) anon258_correct)))
(let ((anon519_Then_correct  (=> b_12@26 (and (=> (= (ControlFlow 0 201) (- 0 202)) (HasDirectPerm Result_10Mask p_1@1 r_1)) (=> (HasDirectPerm Result_10Mask p_1@1 r_1) (=> (= (ControlFlow 0 201) 198) anon258_correct))))))
(let ((anon518_Then_correct  (=> (and b_12@26 b_13@24) (and (=> (= (ControlFlow 0 204) 201) anon519_Then_correct) (=> (= (ControlFlow 0 204) 203) anon519_Else_correct)))))
(let ((anon518_Else_correct  (=> (and (not (and b_12@26 b_13@24)) (= (ControlFlow 0 200) 198)) anon258_correct)))
(let ((anon255_correct  (and (=> (= (ControlFlow 0 205) (- 0 206)) (=> (and b_12@23 b_13@24) (and (= neededTransfer@39 0.0) (= (U_2_real (MapType1Select Used_4Mask@15 p_1@1 r_1)) initNeededTransfer@9)))) (=> (=> (and b_12@23 b_13@24) (and (= neededTransfer@39 0.0) (= (U_2_real (MapType1Select Used_4Mask@15 p_1@1 r_1)) initNeededTransfer@9))) (=> (and (and (and (= b_17@0  (and b_12@23 b_13@24)) (= b_17@1  (and b_17@0 (state Result_10Heap Result_10Mask)))) (and (= b_17@2  (and b_17@1 (sumMask Result_10Mask Ops_3Mask@14 Used_4Mask@15))) (= b_17@3  (and (and b_17@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_10Heap Ops_3Mask@14)) (IdenticalOnKnownLocations Used_4Heap@0 Result_10Heap Used_4Mask@15))))) (and (and (= b_17@4  (and b_17@3 (state Result_10Heap Result_10Mask))) (= b_12@24  (and b_12@23 b_17@4))) (and (= b_12@25  (and b_12@24 b_13@24)) (= b_12@26  (and b_12@25 (= Used_4Heap@0 Ops_3Heap@2)))))) (and (=> (= (ControlFlow 0 205) 204) anon518_Then_correct) (=> (= (ControlFlow 0 205) 200) anon518_Else_correct)))))))
(let ((anon517_Else_correct  (=> (>= 0.0 takeTransfer@19) (=> (and (= b_13@24 b_13@21) (= Used_4Mask@15 Used_4Mask@13)) (=> (and (and (= Mask@59 Mask@57) (= Heap@34 Heap@32)) (and (= neededTransfer@39 neededTransfer@37) (= (ControlFlow 0 209) 205))) anon255_correct)))))
(let ((anon517_Then_correct  (=> (> takeTransfer@19 0.0) (=> (and (and (= neededTransfer@38 (- neededTransfer@37 takeTransfer@19)) (= Used_4Mask@14 (MapType1Store Used_4Mask@13 p_1@1 r_1 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@13 p_1@1 r_1)) takeTransfer@19))))) (and (= b_13@22  (and b_13@21 (state Used_4Heap@0 Used_4Mask@14))) (= b_13@23  (and b_13@22 (= (MapType0Select Heap@32 p_1@1 r_1) (MapType0Select Used_4Heap@0 p_1@1 r_1)))))) (=> (and (and (and (= Mask@58 (MapType1Store Mask@57 p_1@1 r_1 (real_2_U (- (U_2_real (MapType1Select Mask@57 p_1@1 r_1)) takeTransfer@19)))) (= Heap@33 (MapType0Store Heap@32 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@32 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) p_1@1 r_1 (bool_2_U true))))) (and (= b_13@24 b_13@23) (= Used_4Mask@15 Used_4Mask@14))) (and (and (= Mask@59 Mask@58) (= Heap@34 Heap@33)) (and (= neededTransfer@39 neededTransfer@38) (= (ControlFlow 0 208) 205)))) anon255_correct)))))
(let ((anon516_Else_correct  (=> (and (< maskTransfer@19 neededTransfer@37) (= takeTransfer@19 maskTransfer@19)) (and (=> (= (ControlFlow 0 211) 208) anon517_Then_correct) (=> (= (ControlFlow 0 211) 209) anon517_Else_correct)))))
(let ((anon516_Then_correct  (=> (and (<= neededTransfer@37 maskTransfer@19) (= takeTransfer@19 neededTransfer@37)) (and (=> (= (ControlFlow 0 210) 208) anon517_Then_correct) (=> (= (ControlFlow 0 210) 209) anon517_Else_correct)))))
(let ((anon515_Then_correct  (=> (and (and (and (and b_12@23 b_13@21) true) (> neededTransfer@37 0.0)) (= maskTransfer@19 (U_2_real (MapType1Select Mask@57 p_1@1 r_1)))) (and (=> (= (ControlFlow 0 212) 210) anon516_Then_correct) (=> (= (ControlFlow 0 212) 211) anon516_Else_correct)))))
(let ((anon515_Else_correct  (=> (not (and (and (and b_12@23 b_13@21) true) (> neededTransfer@37 0.0))) (=> (and (= b_13@24 b_13@21) (= Used_4Mask@15 Used_4Mask@13)) (=> (and (and (= Mask@59 Mask@57) (= Heap@34 Heap@32)) (and (= neededTransfer@39 neededTransfer@37) (= (ControlFlow 0 207) 205))) anon255_correct)))))
(let ((anon514_Else_correct  (=> (>= 0.0 takeTransfer@18) (=> (and (and (= neededTransfer@37 FullPerm) (= Ops_3Mask@14 Ops_3Mask@12)) (and (= Used_4Mask@13 Used_4Mask@11) (= b_13@21 b_13@18))) (and (=> (= (ControlFlow 0 215) 212) anon515_Then_correct) (=> (= (ControlFlow 0 215) 207) anon515_Else_correct))))))
(let ((anon514_Then_correct  (=> (and (> takeTransfer@18 0.0) (= neededTransfer@36 (- FullPerm takeTransfer@18))) (=> (and (and (and (= Used_4Mask@12 (MapType1Store Used_4Mask@11 p_1@1 r_1 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@11 p_1@1 r_1)) takeTransfer@18)))) (= b_13@19  (and b_13@18 (state Used_4Heap@0 Used_4Mask@12)))) (and (= b_13@20  (and b_13@19 (= (MapType0Select Ops_3Heap@2 p_1@1 r_1) (MapType0Select Used_4Heap@0 p_1@1 r_1)))) (= Ops_3Mask@13 (MapType1Store Ops_3Mask@12 p_1@1 r_1 (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@12 p_1@1 r_1)) takeTransfer@18)))))) (and (and (= neededTransfer@37 neededTransfer@36) (= Ops_3Mask@14 Ops_3Mask@13)) (and (= Used_4Mask@13 Used_4Mask@12) (= b_13@21 b_13@20)))) (and (=> (= (ControlFlow 0 214) 212) anon515_Then_correct) (=> (= (ControlFlow 0 214) 207) anon515_Else_correct))))))
(let ((anon513_Else_correct  (=> (and (< maskTransfer@18 FullPerm) (= takeTransfer@18 maskTransfer@18)) (and (=> (= (ControlFlow 0 217) 214) anon514_Then_correct) (=> (= (ControlFlow 0 217) 215) anon514_Else_correct)))))
(let ((anon513_Then_correct  (=> (and (<= FullPerm maskTransfer@18) (= takeTransfer@18 FullPerm)) (and (=> (= (ControlFlow 0 216) 214) anon514_Then_correct) (=> (= (ControlFlow 0 216) 215) anon514_Else_correct)))))
(let ((anon512_Then_correct  (=> (and (and (and (and b_12@23 b_13@18) true) (> FullPerm 0.0)) (= maskTransfer@18 (U_2_real (MapType1Select Ops_3Mask@12 p_1@1 r_1)))) (and (=> (= (ControlFlow 0 218) 216) anon513_Then_correct) (=> (= (ControlFlow 0 218) 217) anon513_Else_correct)))))
(let ((anon512_Else_correct  (=> (not (and (and (and b_12@23 b_13@18) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@37 FullPerm) (= Ops_3Mask@14 Ops_3Mask@12)) (and (= Used_4Mask@13 Used_4Mask@11) (= b_13@21 b_13@18))) (and (=> (= (ControlFlow 0 213) 212) anon515_Then_correct) (=> (= (ControlFlow 0 213) 207) anon515_Else_correct))))))
(let ((anon243_correct  (and (=> (= (ControlFlow 0 219) (- 0 221)) (=> (and b_12@20 b_13@18) (and (= neededTransfer@35 0.0) (= (U_2_real (MapType1Select Used_4Mask@11 null (Tree arg_3@0))) initNeededTransfer@8)))) (=> (=> (and b_12@20 b_13@18) (and (= neededTransfer@35 0.0) (= (U_2_real (MapType1Select Used_4Mask@11 null (Tree arg_3@0))) initNeededTransfer@8))) (=> (= b_16@0  (and b_12@20 b_13@18)) (=> (and (and (and (= b_16@1  (and b_16@0 (state Result_9Heap Result_9Mask))) (= b_16@2  (and b_16@1 (sumMask Result_9Mask Ops_3Mask@12 Used_4Mask@11)))) (and (= b_16@3  (and (and b_16@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_9Heap Ops_3Mask@12)) (IdenticalOnKnownLocations Used_4Heap@0 Result_9Heap Used_4Mask@11))) (= b_16@4  (and b_16@3 (state Result_9Heap Result_9Mask))))) (and (and (= b_12@21  (and b_12@20 b_16@4)) (= b_12@22  (and b_12@21 b_13@18))) (and (= b_12@23  (and b_12@22 (= Used_4Heap@0 Ops_3Heap@2))) (= initNeededTransfer@9 (+ (U_2_real (MapType1Select Used_4Mask@11 p_1@1 r_1)) FullPerm))))) (and (=> (= (ControlFlow 0 219) (- 0 220)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 219) 218) anon512_Then_correct) (=> (= (ControlFlow 0 219) 213) anon512_Else_correct))))))))))
(let ((anon511_Else_correct  (=> (>= 0.0 takeTransfer@17) (=> (and (= b_13@18 b_13@15) (= Used_4Mask@11 Used_4Mask@9)) (=> (and (and (= Heap@32 Heap@30) (= Mask@57 Mask@55)) (and (= neededTransfer@35 neededTransfer@33) (= (ControlFlow 0 224) 219))) anon243_correct)))))
(let ((anon511_Then_correct  (=> (> takeTransfer@17 0.0) (=> (and (= neededTransfer@34 (- neededTransfer@33 takeTransfer@17)) (= Used_4Mask@10 (MapType1Store Used_4Mask@9 null (Tree arg_3@0) (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@9 null (Tree arg_3@0))) takeTransfer@17))))) (=> (and (and (= b_13@16  (and b_13@15 (state Used_4Heap@0 Used_4Mask@10))) (= TempMask@7 (MapType1Store ZeroMask null (Tree arg_3@0) (real_2_U FullPerm)))) (and (= b_13@17  (and b_13@16 (IdenticalOnKnownLocations Heap@30 Used_4Heap@0 TempMask@7))) (= Mask@56 (MapType1Store Mask@55 null (Tree arg_3@0) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (Tree arg_3@0))) takeTransfer@17)))))) (=> (and (and (and (forall ((o_14 T@U) (f_18 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_18))))
(let ((A@@17 (FieldTypeInv0 (type f_18))))
 (=> (and (and (= (type o_14) RefType) (= (type f_18) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_14 f_18)) (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|Tree#sm| (MapType0Select Heap@30 p_1@1 l))) o_14 f_18)))) (U_2_bool (MapType1Select newPMask@7 o_14 f_18)))))
 :qid |stdinbpl.2512:55|
 :skolemid |90|
 :pattern ( (MapType1Select newPMask@7 o_14 f_18))
)) (= Heap@31 (MapType0Store Heap@30 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@7))) (and (= b_13@18 b_13@17) (= Used_4Mask@11 Used_4Mask@10))) (and (and (= Heap@32 Heap@31) (= Mask@57 Mask@56)) (and (= neededTransfer@35 neededTransfer@34) (= (ControlFlow 0 223) 219)))) anon243_correct))))))
(let ((anon510_Else_correct  (=> (and (< maskTransfer@17 neededTransfer@33) (= takeTransfer@17 maskTransfer@17)) (and (=> (= (ControlFlow 0 226) 223) anon511_Then_correct) (=> (= (ControlFlow 0 226) 224) anon511_Else_correct)))))
(let ((anon510_Then_correct  (=> (and (<= neededTransfer@33 maskTransfer@17) (= takeTransfer@17 neededTransfer@33)) (and (=> (= (ControlFlow 0 225) 223) anon511_Then_correct) (=> (= (ControlFlow 0 225) 224) anon511_Else_correct)))))
(let ((anon509_Then_correct  (=> (and (and (and (and b_12@20 b_13@15) true) (> neededTransfer@33 0.0)) (= maskTransfer@17 (U_2_real (MapType1Select Mask@55 null (Tree arg_3@0))))) (and (=> (= (ControlFlow 0 227) 225) anon510_Then_correct) (=> (= (ControlFlow 0 227) 226) anon510_Else_correct)))))
(let ((anon509_Else_correct  (=> (not (and (and (and b_12@20 b_13@15) true) (> neededTransfer@33 0.0))) (=> (and (= b_13@18 b_13@15) (= Used_4Mask@11 Used_4Mask@9)) (=> (and (and (= Heap@32 Heap@30) (= Mask@57 Mask@55)) (and (= neededTransfer@35 neededTransfer@33) (= (ControlFlow 0 222) 219))) anon243_correct)))))
(let ((anon508_Else_correct  (=> (>= 0.0 takeTransfer@16) (=> (and (and (= neededTransfer@33 FullPerm) (= Used_4Mask@9 Used_4Mask@7)) (and (= Ops_3Mask@12 Ops_3Mask@10) (= b_13@15 b_13@12))) (and (=> (= (ControlFlow 0 230) 227) anon509_Then_correct) (=> (= (ControlFlow 0 230) 222) anon509_Else_correct))))))
(let ((anon508_Then_correct  (=> (> takeTransfer@16 0.0) (=> (and (= neededTransfer@32 (- FullPerm takeTransfer@16)) (= Used_4Mask@8 (MapType1Store Used_4Mask@7 null (Tree arg_3@0) (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@7 null (Tree arg_3@0))) takeTransfer@16))))) (=> (and (and (and (= b_13@13  (and b_13@12 (state Used_4Heap@0 Used_4Mask@8))) (= TempMask@6 (MapType1Store ZeroMask null (Tree arg_3@0) (real_2_U FullPerm)))) (and (= b_13@14  (and b_13@13 (IdenticalOnKnownLocations Ops_3Heap@2 Used_4Heap@0 TempMask@6))) (= Ops_3Mask@11 (MapType1Store Ops_3Mask@10 null (Tree arg_3@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@10 null (Tree arg_3@0))) takeTransfer@16)))))) (and (and (= neededTransfer@33 neededTransfer@32) (= Used_4Mask@9 Used_4Mask@8)) (and (= Ops_3Mask@12 Ops_3Mask@11) (= b_13@15 b_13@14)))) (and (=> (= (ControlFlow 0 229) 227) anon509_Then_correct) (=> (= (ControlFlow 0 229) 222) anon509_Else_correct)))))))
(let ((anon507_Else_correct  (=> (and (< maskTransfer@16 FullPerm) (= takeTransfer@16 maskTransfer@16)) (and (=> (= (ControlFlow 0 232) 229) anon508_Then_correct) (=> (= (ControlFlow 0 232) 230) anon508_Else_correct)))))
(let ((anon507_Then_correct  (=> (and (<= FullPerm maskTransfer@16) (= takeTransfer@16 FullPerm)) (and (=> (= (ControlFlow 0 231) 229) anon508_Then_correct) (=> (= (ControlFlow 0 231) 230) anon508_Else_correct)))))
(let ((anon506_Then_correct  (=> (and (and (and (and b_12@20 b_13@12) true) (> FullPerm 0.0)) (= maskTransfer@16 (U_2_real (MapType1Select Ops_3Mask@10 null (Tree arg_3@0))))) (and (=> (= (ControlFlow 0 233) 231) anon507_Then_correct) (=> (= (ControlFlow 0 233) 232) anon507_Else_correct)))))
(let ((anon506_Else_correct  (=> (not (and (and (and b_12@20 b_13@12) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@33 FullPerm) (= Used_4Mask@9 Used_4Mask@7)) (and (= Ops_3Mask@12 Ops_3Mask@10) (= b_13@15 b_13@12))) (and (=> (= (ControlFlow 0 228) 227) anon509_Then_correct) (=> (= (ControlFlow 0 228) 222) anon509_Else_correct))))))
(let ((anon231_correct  (=> (and (= arg_3@0 (MapType0Select Result_8Heap p_1@1 l)) (= initNeededTransfer@8 (+ (U_2_real (MapType1Select Used_4Mask@7 null (Tree arg_3@0))) FullPerm))) (and (=> (= (ControlFlow 0 234) (- 0 235)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 234) 233) anon506_Then_correct) (=> (= (ControlFlow 0 234) 228) anon506_Else_correct)))))))
(let ((anon505_Else_correct  (=> (and (not b_12@20) (= (ControlFlow 0 239) 234)) anon231_correct)))
(let ((anon505_Then_correct  (=> b_12@20 (and (=> (= (ControlFlow 0 237) (- 0 238)) (HasDirectPerm Result_8Mask p_1@1 l)) (=> (HasDirectPerm Result_8Mask p_1@1 l) (=> (= (ControlFlow 0 237) 234) anon231_correct))))))
(let ((anon504_Then_correct  (=> (and b_12@20 b_13@12) (and (=> (= (ControlFlow 0 240) 237) anon505_Then_correct) (=> (= (ControlFlow 0 240) 239) anon505_Else_correct)))))
(let ((anon504_Else_correct  (=> (and (not (and b_12@20 b_13@12)) (= (ControlFlow 0 236) 234)) anon231_correct)))
(let ((anon228_correct  (and (=> (= (ControlFlow 0 241) (- 0 242)) (=> (and b_12@17 b_13@12) (and (= neededTransfer@31 0.0) (= (U_2_real (MapType1Select Used_4Mask@7 p_1@1 l)) initNeededTransfer@7)))) (=> (=> (and b_12@17 b_13@12) (and (= neededTransfer@31 0.0) (= (U_2_real (MapType1Select Used_4Mask@7 p_1@1 l)) initNeededTransfer@7))) (=> (and (and (and (= b_15@0  (and b_12@17 b_13@12)) (= b_15@1  (and b_15@0 (state Result_8Heap Result_8Mask)))) (and (= b_15@2  (and b_15@1 (sumMask Result_8Mask Ops_3Mask@10 Used_4Mask@7))) (= b_15@3  (and (and b_15@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_8Heap Ops_3Mask@10)) (IdenticalOnKnownLocations Used_4Heap@0 Result_8Heap Used_4Mask@7))))) (and (and (= b_15@4  (and b_15@3 (state Result_8Heap Result_8Mask))) (= b_12@18  (and b_12@17 b_15@4))) (and (= b_12@19  (and b_12@18 b_13@12)) (= b_12@20  (and b_12@19 (= Used_4Heap@0 Ops_3Heap@2)))))) (and (=> (= (ControlFlow 0 241) 240) anon504_Then_correct) (=> (= (ControlFlow 0 241) 236) anon504_Else_correct)))))))
(let ((anon503_Else_correct  (=> (>= 0.0 takeTransfer@15) (=> (and (= b_13@12 b_13@9) (= Mask@55 Mask@53)) (=> (and (and (= Heap@30 Heap@28) (= Used_4Mask@7 Used_4Mask@5)) (and (= neededTransfer@31 neededTransfer@29) (= (ControlFlow 0 245) 241))) anon228_correct)))))
(let ((anon503_Then_correct  (=> (> takeTransfer@15 0.0) (=> (and (and (= neededTransfer@30 (- neededTransfer@29 takeTransfer@15)) (= Used_4Mask@6 (MapType1Store Used_4Mask@5 p_1@1 l (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@5 p_1@1 l)) takeTransfer@15))))) (and (= b_13@10  (and b_13@9 (state Used_4Heap@0 Used_4Mask@6))) (= b_13@11  (and b_13@10 (= (MapType0Select Heap@28 p_1@1 l) (MapType0Select Used_4Heap@0 p_1@1 l)))))) (=> (and (and (and (= Mask@54 (MapType1Store Mask@53 p_1@1 l (real_2_U (- (U_2_real (MapType1Select Mask@53 p_1@1 l)) takeTransfer@15)))) (= Heap@29 (MapType0Store Heap@28 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@28 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) p_1@1 l (bool_2_U true))))) (and (= b_13@12 b_13@11) (= Mask@55 Mask@54))) (and (and (= Heap@30 Heap@29) (= Used_4Mask@7 Used_4Mask@6)) (and (= neededTransfer@31 neededTransfer@30) (= (ControlFlow 0 244) 241)))) anon228_correct)))))
(let ((anon502_Else_correct  (=> (and (< maskTransfer@15 neededTransfer@29) (= takeTransfer@15 maskTransfer@15)) (and (=> (= (ControlFlow 0 247) 244) anon503_Then_correct) (=> (= (ControlFlow 0 247) 245) anon503_Else_correct)))))
(let ((anon502_Then_correct  (=> (and (<= neededTransfer@29 maskTransfer@15) (= takeTransfer@15 neededTransfer@29)) (and (=> (= (ControlFlow 0 246) 244) anon503_Then_correct) (=> (= (ControlFlow 0 246) 245) anon503_Else_correct)))))
(let ((anon501_Then_correct  (=> (and (and (and (and b_12@17 b_13@9) true) (> neededTransfer@29 0.0)) (= maskTransfer@15 (U_2_real (MapType1Select Mask@53 p_1@1 l)))) (and (=> (= (ControlFlow 0 248) 246) anon502_Then_correct) (=> (= (ControlFlow 0 248) 247) anon502_Else_correct)))))
(let ((anon501_Else_correct  (=> (not (and (and (and b_12@17 b_13@9) true) (> neededTransfer@29 0.0))) (=> (and (= b_13@12 b_13@9) (= Mask@55 Mask@53)) (=> (and (and (= Heap@30 Heap@28) (= Used_4Mask@7 Used_4Mask@5)) (and (= neededTransfer@31 neededTransfer@29) (= (ControlFlow 0 243) 241))) anon228_correct)))))
(let ((anon500_Else_correct  (=> (>= 0.0 takeTransfer@14) (=> (and (and (= neededTransfer@29 FullPerm) (= Used_4Mask@5 Used_4Mask@3)) (and (= Ops_3Mask@10 Ops_3Mask@8) (= b_13@9 b_13@6))) (and (=> (= (ControlFlow 0 251) 248) anon501_Then_correct) (=> (= (ControlFlow 0 251) 243) anon501_Else_correct))))))
(let ((anon500_Then_correct  (=> (and (> takeTransfer@14 0.0) (= neededTransfer@28 (- FullPerm takeTransfer@14))) (=> (and (and (and (= Used_4Mask@4 (MapType1Store Used_4Mask@3 p_1@1 l (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@3 p_1@1 l)) takeTransfer@14)))) (= b_13@7  (and b_13@6 (state Used_4Heap@0 Used_4Mask@4)))) (and (= b_13@8  (and b_13@7 (= (MapType0Select Ops_3Heap@2 p_1@1 l) (MapType0Select Used_4Heap@0 p_1@1 l)))) (= Ops_3Mask@9 (MapType1Store Ops_3Mask@8 p_1@1 l (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@8 p_1@1 l)) takeTransfer@14)))))) (and (and (= neededTransfer@29 neededTransfer@28) (= Used_4Mask@5 Used_4Mask@4)) (and (= Ops_3Mask@10 Ops_3Mask@9) (= b_13@9 b_13@8)))) (and (=> (= (ControlFlow 0 250) 248) anon501_Then_correct) (=> (= (ControlFlow 0 250) 243) anon501_Else_correct))))))
(let ((anon499_Else_correct  (=> (and (< maskTransfer@14 FullPerm) (= takeTransfer@14 maskTransfer@14)) (and (=> (= (ControlFlow 0 253) 250) anon500_Then_correct) (=> (= (ControlFlow 0 253) 251) anon500_Else_correct)))))
(let ((anon499_Then_correct  (=> (and (<= FullPerm maskTransfer@14) (= takeTransfer@14 FullPerm)) (and (=> (= (ControlFlow 0 252) 250) anon500_Then_correct) (=> (= (ControlFlow 0 252) 251) anon500_Else_correct)))))
(let ((anon498_Then_correct  (=> (and (and (and (and b_12@17 b_13@6) true) (> FullPerm 0.0)) (= maskTransfer@14 (U_2_real (MapType1Select Ops_3Mask@8 p_1@1 l)))) (and (=> (= (ControlFlow 0 254) 252) anon499_Then_correct) (=> (= (ControlFlow 0 254) 253) anon499_Else_correct)))))
(let ((anon498_Else_correct  (=> (not (and (and (and b_12@17 b_13@6) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@29 FullPerm) (= Used_4Mask@5 Used_4Mask@3)) (and (= Ops_3Mask@10 Ops_3Mask@8) (= b_13@9 b_13@6))) (and (=> (= (ControlFlow 0 249) 248) anon501_Then_correct) (=> (= (ControlFlow 0 249) 243) anon501_Else_correct))))))
(let ((anon216_correct  (and (=> (= (ControlFlow 0 255) (- 0 257)) (=> (and b_12@12 b_13@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 p_1@1 v_2)) initNeededTransfer@6)))) (=> (=> (and b_12@12 b_13@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 p_1@1 v_2)) initNeededTransfer@6))) (=> (= b_14@0  (and b_12@12 b_13@6)) (=> (and (and (and (= b_14@1  (and b_14@0 (state Result_7Heap Result_7Mask))) (= b_14@2  (and b_14@1 (sumMask Result_7Mask Ops_3Mask@8 Used_4Mask@3)))) (and (= b_14@3  (and (and b_14@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_7Heap Ops_3Mask@8)) (IdenticalOnKnownLocations Used_4Heap@0 Result_7Heap Used_4Mask@3))) (= b_14@4  (and b_14@3 (state Result_7Heap Result_7Mask))))) (and (and (= b_12@15  (and b_12@12 b_14@4)) (= b_12@16  (and b_12@15 b_13@6))) (and (= b_12@17  (and b_12@16 (= Used_4Heap@0 Ops_3Heap@2))) (= initNeededTransfer@7 (+ (U_2_real (MapType1Select Used_4Mask@3 p_1@1 l)) FullPerm))))) (and (=> (= (ControlFlow 0 255) (- 0 256)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 255) 254) anon498_Then_correct) (=> (= (ControlFlow 0 255) 249) anon498_Else_correct))))))))))
(let ((anon497_Else_correct  (=> (>= 0.0 takeTransfer@13) (=> (and (= b_13@6 b_13@3) (= Heap@28 Heap@26)) (=> (and (and (= Used_4Mask@3 Used_4Mask@1) (= Mask@53 Mask@51)) (and (= neededTransfer@27 neededTransfer@25) (= (ControlFlow 0 260) 255))) anon216_correct)))))
(let ((anon497_Then_correct  (=> (> takeTransfer@13 0.0) (=> (and (and (= neededTransfer@26 (- neededTransfer@25 takeTransfer@13)) (= Used_4Mask@2 (MapType1Store Used_4Mask@1 p_1@1 v_2 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@1 p_1@1 v_2)) takeTransfer@13))))) (and (= b_13@4  (and b_13@3 (state Used_4Heap@0 Used_4Mask@2))) (= b_13@5  (and b_13@4 (= (U_2_int (MapType0Select Heap@26 p_1@1 v_2)) (U_2_int (MapType0Select Used_4Heap@0 p_1@1 v_2))))))) (=> (and (and (and (= Mask@52 (MapType1Store Mask@51 p_1@1 v_2 (real_2_U (- (U_2_real (MapType1Select Mask@51 p_1@1 v_2)) takeTransfer@13)))) (= Heap@27 (MapType0Store Heap@26 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@26 null (|wand#sm| p_1@1 FullPerm p_1@1 FullPerm p_1@1 (|Seq#Drop| plvs@2 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) p_1@1 v_2 (bool_2_U true))))) (and (= b_13@6 b_13@5) (= Heap@28 Heap@27))) (and (and (= Used_4Mask@3 Used_4Mask@2) (= Mask@53 Mask@52)) (and (= neededTransfer@27 neededTransfer@26) (= (ControlFlow 0 259) 255)))) anon216_correct)))))
(let ((anon496_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@25) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 262) 259) anon497_Then_correct) (=> (= (ControlFlow 0 262) 260) anon497_Else_correct)))))
(let ((anon496_Then_correct  (=> (and (<= neededTransfer@25 maskTransfer@13) (= takeTransfer@13 neededTransfer@25)) (and (=> (= (ControlFlow 0 261) 259) anon497_Then_correct) (=> (= (ControlFlow 0 261) 260) anon497_Else_correct)))))
(let ((anon495_Then_correct  (=> (and (and (and (and b_12@12 b_13@3) true) (> neededTransfer@25 0.0)) (= maskTransfer@13 (U_2_real (MapType1Select Mask@51 p_1@1 v_2)))) (and (=> (= (ControlFlow 0 263) 261) anon496_Then_correct) (=> (= (ControlFlow 0 263) 262) anon496_Else_correct)))))
(let ((anon495_Else_correct  (=> (not (and (and (and b_12@12 b_13@3) true) (> neededTransfer@25 0.0))) (=> (and (= b_13@6 b_13@3) (= Heap@28 Heap@26)) (=> (and (and (= Used_4Mask@3 Used_4Mask@1) (= Mask@53 Mask@51)) (and (= neededTransfer@27 neededTransfer@25) (= (ControlFlow 0 258) 255))) anon216_correct)))))
(let ((anon494_Else_correct  (=> (>= 0.0 takeTransfer@12) (=> (and (and (= neededTransfer@25 FullPerm) (= Ops_3Mask@8 Ops_3Mask@6)) (and (= Used_4Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 266) 263) anon495_Then_correct) (=> (= (ControlFlow 0 266) 258) anon495_Else_correct))))))
(let ((anon494_Then_correct  (=> (and (> takeTransfer@12 0.0) (= neededTransfer@24 (- FullPerm takeTransfer@12))) (=> (and (and (and (= Used_4Mask@0 (MapType1Store ZeroMask p_1@1 v_2 (real_2_U (+ (U_2_real (MapType1Select ZeroMask p_1@1 v_2)) takeTransfer@12)))) (= b_13@1  (and b_13@0 (state Used_4Heap@0 Used_4Mask@0)))) (and (= b_13@2  (and b_13@1 (= (U_2_int (MapType0Select Ops_3Heap@2 p_1@1 v_2)) (U_2_int (MapType0Select Used_4Heap@0 p_1@1 v_2))))) (= Ops_3Mask@7 (MapType1Store Ops_3Mask@6 p_1@1 v_2 (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@6 p_1@1 v_2)) takeTransfer@12)))))) (and (and (= neededTransfer@25 neededTransfer@24) (= Ops_3Mask@8 Ops_3Mask@7)) (and (= Used_4Mask@1 Used_4Mask@0) (= b_13@3 b_13@2)))) (and (=> (= (ControlFlow 0 265) 263) anon495_Then_correct) (=> (= (ControlFlow 0 265) 258) anon495_Else_correct))))))
(let ((anon493_Else_correct  (=> (and (< maskTransfer@12 FullPerm) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 268) 265) anon494_Then_correct) (=> (= (ControlFlow 0 268) 266) anon494_Else_correct)))))
(let ((anon493_Then_correct  (=> (and (<= FullPerm maskTransfer@12) (= takeTransfer@12 FullPerm)) (and (=> (= (ControlFlow 0 267) 265) anon494_Then_correct) (=> (= (ControlFlow 0 267) 266) anon494_Else_correct)))))
(let ((anon492_Then_correct  (=> (and (and (and (and b_12@12 b_13@0) true) (> FullPerm 0.0)) (= maskTransfer@12 (U_2_real (MapType1Select Ops_3Mask@6 p_1@1 v_2)))) (and (=> (= (ControlFlow 0 269) 267) anon493_Then_correct) (=> (= (ControlFlow 0 269) 268) anon493_Else_correct)))))
(let ((anon492_Else_correct  (=> (not (and (and (and b_12@12 b_13@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@25 FullPerm) (= Ops_3Mask@8 Ops_3Mask@6)) (and (= Used_4Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 264) 263) anon495_Then_correct) (=> (= (ControlFlow 0 264) 258) anon495_Else_correct))))))
(let ((anon491_Else_correct  (=> (and (not (= p_1@1 null)) (= initNeededTransfer@6 (+ (U_2_real (MapType1Select ZeroMask p_1@1 v_2)) FullPerm))) (and (=> (= (ControlFlow 0 270) (- 0 271)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 270) 269) anon492_Then_correct) (=> (= (ControlFlow 0 270) 264) anon492_Else_correct)))))))
(let ((anon491_Then_correct  (=> (and (= p_1@1 null) (= b_12@13  (and b_12@12 b_13@0))) (=> (and (and (and (= b_12@14  (and b_12@13 (= Used_4Heap@0 Ops_3Heap@2))) (= Used_4Mask@20 ZeroMask)) (and (= Mask@62 Mask@51) (= Ops_3Mask@17 Ops_3Mask@6))) (and (and (= b_12@30 b_12@14) (= Heap@37 Heap@26)) (and (= b_13@31 b_13@0) (= (ControlFlow 0 183) 181)))) anon271_correct))))
(let ((anon490_Then_correct  (=> b_12@12 (and (=> (= (ControlFlow 0 272) 183) anon491_Then_correct) (=> (= (ControlFlow 0 272) 270) anon491_Else_correct)))))
(let ((anon490_Else_correct  (=> (and (and (and (not b_12@12) (= Used_4Mask@20 ZeroMask)) (and (= Mask@62 Mask@51) (= Ops_3Mask@17 Ops_3Mask@6))) (and (and (= b_12@30 b_12@12) (= Heap@37 Heap@26)) (and (= b_13@31 b_13@0) (= (ControlFlow 0 182) 181)))) anon271_correct)))
(let ((anon489_Then_correct  (=> (and b_12@12 (= b_13@0  (and b_13 (state Used_4Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 273) 272) anon490_Then_correct) (=> (= (ControlFlow 0 273) 182) anon490_Else_correct)))))
(let ((anon489_Else_correct  (=> (and (not b_12@12) (= Mask@63 Mask@51)) (=> (and (and (= Ops_3Heap@12 Ops_3Heap@2) (= b_12@35 b_12@12)) (and (= Heap@38 Heap@26) (= Ops_3Mask@19 Ops_3Mask@6))) (and (=> (= (ControlFlow 0 175) 174) anon528_Then_correct) (=> (= (ControlFlow 0 175) 89) anon528_Else_correct))))))
(let ((anon200_correct  (=> (and (= b_12@11  (and b_12@10 (state Ops_3Heap@2 Ops_3Mask@6))) (= b_12@12  (and b_12@11 (state Ops_3Heap@2 Ops_3Mask@6)))) (and (=> (= (ControlFlow 0 274) 273) anon489_Then_correct) (=> (= (ControlFlow 0 274) 175) anon489_Else_correct)))))
(let ((anon199_correct  (=> (= b_12@9  (and b_12@8 (|Seq#Equal| (vals Ops_3Heap@1 (MapType0Select Ops_3Heap@1 p_1@1 l)) (|Seq#Drop| plvs@2 1)))) (=> (and (and (= b_12@10 b_12@9) (= Ops_3Mask@6 Ops_3Mask@5)) (and (= Ops_3Heap@2 Ops_3Heap@1) (= (ControlFlow 0 278) 274))) anon200_correct))))
(let ((anon198_correct  (=> (and (= Ops_3Mask@4 (MapType1Store Ops_3Mask@3 null (Tree (MapType0Select Ops_3Heap@0 p_1@1 l)) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@3 null (Tree (MapType0Select Ops_3Heap@0 p_1@1 l)))) FullPerm)))) (= b_12@7  (and b_12@6 (IdenticalOnKnownLocations Ops_3Heap@0 ExhaleHeap@4 Ops_3Mask@4)))) (=> (and (and (= Ops_3Heap@1 ExhaleHeap@4) (= Ops_3Mask@5 Ops_3Mask@4)) (and (= b_12@8 false) (= (ControlFlow 0 281) 278))) anon199_correct))))
(let ((anon488_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 284) 281)) anon198_correct)))
(let ((anon488_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 282) (- 0 283)) (<= FullPerm (U_2_real (MapType1Select Ops_3Mask@3 null (Tree (MapType0Select Ops_3Heap@0 p_1@1 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_3Mask@3 null (Tree (MapType0Select Ops_3Heap@0 p_1@1 l))))) (=> (= (ControlFlow 0 282) 281) anon198_correct))))))
(let ((anon487_Else_correct  (=> (and (and (= Ops_3Heap@1 Ops_3Heap@0) (= Ops_3Mask@5 Ops_3Mask@3)) (and (= b_12@8 b_12@6) (= (ControlFlow 0 280) 278))) anon199_correct)))
(let ((anon486_Then_correct  (=> b_12@6 (and (=> (= (ControlFlow 0 285) (- 0 286)) (HasDirectPerm Ops_3Mask@3 p_1@1 l)) (=> (HasDirectPerm Ops_3Mask@3 p_1@1 l) (and (and (=> (= (ControlFlow 0 285) 280) anon487_Else_correct) (=> (= (ControlFlow 0 285) 282) anon488_Then_correct)) (=> (= (ControlFlow 0 285) 284) anon488_Else_correct)))))))
(let ((anon486_Else_correct  (=> (not b_12@6) (=> (and (and (= Ops_3Heap@1 Ops_3Heap@0) (= Ops_3Mask@5 Ops_3Mask@3)) (and (= b_12@8 b_12@6) (= (ControlFlow 0 279) 278))) anon199_correct))))
(let ((anon485_Then_correct  (=> (and b_12@5 (= b_12@6  (and b_12@5 (state Ops_3Heap@0 Ops_3Mask@3)))) (and (=> (= (ControlFlow 0 287) 285) anon486_Then_correct) (=> (= (ControlFlow 0 287) 279) anon486_Else_correct)))))
(let ((anon485_Else_correct  (=> (not b_12@5) (=> (and (and (= b_12@10 b_12@5) (= Ops_3Mask@6 Ops_3Mask@3)) (and (= Ops_3Heap@2 Ops_3Heap@0) (= (ControlFlow 0 277) 274))) anon200_correct))))
(let ((anon192_correct  (=> (and (and (= Ops_3Mask@2 (MapType1Store Ops_3Mask@1 null (Tree (MapType0Select Ops_3Heap@0 p_1@1 l)) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@1 null (Tree (MapType0Select Ops_3Heap@0 p_1@1 l)))) FullPerm)))) (= b_12@4  (and b_12@3 (state Ops_3Heap@0 Ops_3Mask@2)))) (and (= b_12@5 b_12@4) (= Ops_3Mask@3 Ops_3Mask@2))) (and (=> (= (ControlFlow 0 289) 287) anon485_Then_correct) (=> (= (ControlFlow 0 289) 277) anon485_Else_correct)))))
(let ((anon484_Else_correct  (=> (and (not b_12@3) (= (ControlFlow 0 292) 289)) anon192_correct)))
(let ((anon484_Then_correct  (=> b_12@3 (and (=> (= (ControlFlow 0 290) (- 0 291)) (HasDirectPerm Ops_3Mask@1 p_1@1 l)) (=> (HasDirectPerm Ops_3Mask@1 p_1@1 l) (=> (= (ControlFlow 0 290) 289) anon192_correct))))))
(let ((anon483_Then_correct  (=> b_12@3 (and (=> (= (ControlFlow 0 293) 290) anon484_Then_correct) (=> (= (ControlFlow 0 293) 292) anon484_Else_correct)))))
(let ((anon483_Else_correct  (=> (not b_12@3) (=> (and (= b_12@5 b_12@3) (= Ops_3Mask@3 Ops_3Mask@1)) (and (=> (= (ControlFlow 0 288) 287) anon485_Then_correct) (=> (= (ControlFlow 0 288) 277) anon485_Else_correct))))))
(let ((anon482_Then_correct  (=> b_12@3 (and (=> (= (ControlFlow 0 294) 293) anon483_Then_correct) (=> (= (ControlFlow 0 294) 288) anon483_Else_correct)))))
(let ((anon482_Else_correct  (=> (not b_12@3) (=> (and (and (= b_12@10 b_12@3) (= Ops_3Mask@6 Ops_3Mask@1)) (and (= Ops_3Heap@2 Ops_3Heap@0) (= (ControlFlow 0 276) 274))) anon200_correct))))
(let ((anon481_Else_correct  (=> (not b_12@0) (=> (and (= Ops_3Mask@1 ZeroMask) (= b_12@3 b_12@0)) (and (=> (= (ControlFlow 0 296) 294) anon482_Then_correct) (=> (= (ControlFlow 0 296) 276) anon482_Else_correct))))))
(let ((anon481_Then_correct  (=> (and b_12@0 (= b_12@1  (and b_12@0 (not (= p_1@1 null))))) (=> (and (and (= Ops_3Mask@0 (MapType1Store ZeroMask p_1@1 l (real_2_U (+ (U_2_real (MapType1Select ZeroMask p_1@1 l)) FullPerm)))) (= b_12@2  (and b_12@1 (state Ops_3Heap@0 Ops_3Mask@0)))) (and (= Ops_3Mask@1 Ops_3Mask@0) (= b_12@3 b_12@2))) (and (=> (= (ControlFlow 0 295) 294) anon482_Then_correct) (=> (= (ControlFlow 0 295) 276) anon482_Else_correct))))))
(let ((anon480_Then_correct  (=> b_12@0 (and (=> (= (ControlFlow 0 297) 295) anon481_Then_correct) (=> (= (ControlFlow 0 297) 296) anon481_Else_correct)))))
(let ((anon480_Else_correct  (=> (not b_12@0) (=> (and (and (= b_12@10 b_12@0) (= Ops_3Mask@6 ZeroMask)) (and (= Ops_3Heap@2 Ops_3Heap@0) (= (ControlFlow 0 275) 274))) anon200_correct))))
(let ((anon478_Else_correct  (=> (and (and (= plvs@2 (vals Heap@26 (MapType0Select Heap@26 p_1@1 l))) (state Heap@26 Mask@51)) (and (= b_12@0  (and b_12 (state Ops_3Heap@0 ZeroMask))) (= b_11@0  (and b_11 (state Used_3Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 298) 297) anon480_Then_correct) (=> (= (ControlFlow 0 298) 275) anon480_Else_correct)))))
(let ((anon184_correct true))
(let ((anon479_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 46) 43)) anon184_correct)))
(let ((anon479_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 44) (- 0 45)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (Tree (MapType0Select Heap@26 p_1@1 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (Tree (MapType0Select Heap@26 p_1@1 l))))) (=> (= (ControlFlow 0 44) 43) anon184_correct))))))
(let ((anon181_correct  (=> (and (state Heap@26 Mask@51) (state Heap@26 Mask@51)) (and (=> (= (ControlFlow 0 299) (- 0 301)) (HasDirectPerm Mask@51 p_1@0 l)) (=> (HasDirectPerm Mask@51 p_1@0 l) (=> (and (= p_1@1 (MapType0Select Heap@26 p_1@0 l)) (state Heap@26 Mask@51)) (and (=> (= (ControlFlow 0 299) (- 0 300)) (HasDirectPerm Mask@51 p_1@1 l)) (=> (HasDirectPerm Mask@51 p_1@1 l) (and (and (=> (= (ControlFlow 0 299) 298) anon478_Else_correct) (=> (= (ControlFlow 0 299) 44) anon479_Then_correct)) (=> (= (ControlFlow 0 299) 46) anon479_Else_correct))))))))))
(let ((anon477_Else_correct  (=> (and (not (= (MapType0Select Heap@26 p_1@0 l) null)) (not (= (MapType0Select Heap@26 p_1@0 l) null))) (=> (and (and (and (and (= Mask@46 (MapType1Store Mask@45 (MapType0Select Heap@26 p_1@0 l) v_2 (real_2_U (+ (U_2_real (MapType1Select Mask@45 (MapType0Select Heap@26 p_1@0 l) v_2)) FullPerm)))) (state Heap@26 Mask@46)) (and (not (= (MapType0Select Heap@26 p_1@0 l) null)) (= Mask@47 (MapType1Store Mask@46 (MapType0Select Heap@26 p_1@0 l) l (real_2_U (+ (U_2_real (MapType1Select Mask@46 (MapType0Select Heap@26 p_1@0 l) l)) FullPerm)))))) (and (and (state Heap@26 Mask@47) (= Mask@48 (MapType1Store Mask@47 null (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) l)) (real_2_U (+ (U_2_real (MapType1Select Mask@47 null (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) l)))) FullPerm))))) (and (InsidePredicate (Tree (MapType0Select Heap@26 p_1@0 l)) (MapType0Select Heap@26 null (Tree (MapType0Select Heap@26 p_1@0 l))) (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) l)) (MapType0Select Heap@26 null (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) l)))) (state Heap@26 Mask@48)))) (and (and (and (not (= (MapType0Select Heap@26 p_1@0 l) null)) (= Mask@49 (MapType1Store Mask@48 (MapType0Select Heap@26 p_1@0 l) r_1 (real_2_U (+ (U_2_real (MapType1Select Mask@48 (MapType0Select Heap@26 p_1@0 l) r_1)) FullPerm))))) (and (state Heap@26 Mask@49) (= Mask@50 (MapType1Store Mask@49 null (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) r_1)) (real_2_U (+ (U_2_real (MapType1Select Mask@49 null (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) r_1)))) FullPerm)))))) (and (and (InsidePredicate (Tree (MapType0Select Heap@26 p_1@0 l)) (MapType0Select Heap@26 null (Tree (MapType0Select Heap@26 p_1@0 l))) (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) r_1)) (MapType0Select Heap@26 null (Tree (MapType0Select Heap@26 (MapType0Select Heap@26 p_1@0 l) r_1)))) (state Heap@26 Mask@50)) (and (= Mask@51 Mask@50) (= (ControlFlow 0 303) 299))))) anon181_correct))))
(let ((anon477_Then_correct  (=> (= (MapType0Select Heap@26 p_1@0 l) null) (=> (and (= Mask@51 Mask@45) (= (ControlFlow 0 302) 299)) anon181_correct))))
(let ((anon476_Else_correct  (=> (and (HasDirectPerm Mask@45 null (Tree (MapType0Select Heap@24 p_1@0 l))) (= Heap@26 Heap@24)) (and (=> (= (ControlFlow 0 305) 302) anon477_Then_correct) (=> (= (ControlFlow 0 305) 303) anon477_Else_correct)))))
(let ((anon476_Then_correct  (=> (not (HasDirectPerm Mask@45 null (Tree (MapType0Select Heap@24 p_1@0 l)))) (=> (and (= Heap@25 (MapType0Store Heap@24 null (Tree (MapType0Select Heap@24 p_1@0 l)) newVersion@2)) (= Heap@26 Heap@25)) (and (=> (= (ControlFlow 0 304) 302) anon477_Then_correct) (=> (= (ControlFlow 0 304) 303) anon477_Else_correct))))))
(let ((anon176_correct  (=> (= Mask@45 (MapType1Store Mask@30 null (Tree (MapType0Select Heap@24 p_1@0 l)) (real_2_U (- (U_2_real (MapType1Select Mask@30 null (Tree (MapType0Select Heap@24 p_1@0 l)))) FullPerm)))) (and (=> (= (ControlFlow 0 306) 304) anon476_Then_correct) (=> (= (ControlFlow 0 306) 305) anon476_Else_correct)))))
(let ((anon475_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 309) 306)) anon176_correct)))
(let ((anon475_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 307) (- 0 308)) (<= FullPerm (U_2_real (MapType1Select Mask@30 null (Tree (MapType0Select Heap@24 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@30 null (Tree (MapType0Select Heap@24 p_1@0 l))))) (=> (= (ControlFlow 0 307) 306) anon176_correct))))))
(let ((anon174_correct  (=> (and (state Heap@24 Mask@30) (not (= (MapType0Select Heap@24 (MapType0Select Heap@24 p_1@0 l) l) null))) (=> (and (and (state Heap@24 Mask@30) (U_2_bool (MapType0Select Heap@24 oldP $allocated))) (and (state Heap@24 Mask@30) (state Heap@24 Mask@30))) (and (=> (= (ControlFlow 0 310) (- 0 311)) (HasDirectPerm Mask@30 p_1@0 l)) (=> (HasDirectPerm Mask@30 p_1@0 l) (=> (and (|Tree#trigger| Heap@24 (Tree (MapType0Select Heap@24 p_1@0 l))) (= (MapType0Select Heap@24 null (Tree (MapType0Select Heap@24 p_1@0 l))) (FrameFragment (ite (= (MapType0Select Heap@24 p_1@0 l) null) EmptyFrame (CombineFrames (FrameFragment (MapType0Select Heap@24 (MapType0Select Heap@24 p_1@0 l) v_2)) (CombineFrames (FrameFragment (MapType0Select Heap@24 (MapType0Select Heap@24 p_1@0 l) l)) (CombineFrames (MapType0Select Heap@24 null (Tree (MapType0Select Heap@24 (MapType0Select Heap@24 p_1@0 l) l))) (CombineFrames (FrameFragment (MapType0Select Heap@24 (MapType0Select Heap@24 p_1@0 l) r_1)) (MapType0Select Heap@24 null (Tree (MapType0Select Heap@24 (MapType0Select Heap@24 p_1@0 l) r_1))))))))))) (and (=> (= (ControlFlow 0 310) 307) anon475_Then_correct) (=> (= (ControlFlow 0 310) 309) anon475_Else_correct)))))))))
(let ((anon474_Else_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null)) (= Heap@19 (MapType0Store ExhaleHeap@1 null (|Tree#sm| (MapType0Select ExhaleHeap@1 p_1@0 l)) (MapType1Store (MapType0Select ExhaleHeap@1 null (|Tree#sm| (MapType0Select ExhaleHeap@1 p_1@0 l))) (MapType0Select ExhaleHeap@1 p_1@0 l) v_2 (bool_2_U true))))) (=> (and (and (and (= Heap@20 (MapType0Store Heap@19 null (|Tree#sm| (MapType0Select Heap@19 p_1@0 l)) (MapType1Store (MapType0Select Heap@19 null (|Tree#sm| (MapType0Select Heap@19 p_1@0 l))) (MapType0Select Heap@19 p_1@0 l) l (bool_2_U true)))) (forall ((o_12 T@U) (f_16 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_16))))
(let ((A@@18 (FieldTypeInv0 (type f_16))))
 (=> (and (and (= (type o_12) RefType) (= (type f_16) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@20 null (|Tree#sm| (MapType0Select Heap@20 p_1@0 l))) o_12 f_16)) (U_2_bool (MapType1Select (MapType0Select Heap@20 null (|Tree#sm| (MapType0Select Heap@20 (MapType0Select Heap@20 p_1@0 l) l))) o_12 f_16)))) (U_2_bool (MapType1Select newPMask@5 o_12 f_16)))))
 :qid |stdinbpl.2135:41|
 :skolemid |88|
 :pattern ( (MapType1Select newPMask@5 o_12 f_16))
))) (and (= Heap@21 (MapType0Store Heap@20 null (|Tree#sm| (MapType0Select Heap@20 p_1@0 l)) newPMask@5)) (= Heap@22 (MapType0Store Heap@21 null (|Tree#sm| (MapType0Select Heap@21 p_1@0 l)) (MapType1Store (MapType0Select Heap@21 null (|Tree#sm| (MapType0Select Heap@21 p_1@0 l))) (MapType0Select Heap@21 p_1@0 l) r_1 (bool_2_U true)))))) (and (and (forall ((o_13 T@U) (f_17 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_17))))
(let ((A@@19 (FieldTypeInv0 (type f_17))))
 (=> (and (and (= (type o_13) RefType) (= (type f_17) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@22 null (|Tree#sm| (MapType0Select Heap@22 p_1@0 l))) o_13 f_17)) (U_2_bool (MapType1Select (MapType0Select Heap@22 null (|Tree#sm| (MapType0Select Heap@22 (MapType0Select Heap@22 p_1@0 l) r_1))) o_13 f_17)))) (U_2_bool (MapType1Select newPMask@6 o_13 f_17)))))
 :qid |stdinbpl.2142:41|
 :skolemid |89|
 :pattern ( (MapType1Select newPMask@6 o_13 f_17))
)) (= Heap@23 (MapType0Store Heap@22 null (|Tree#sm| (MapType0Select Heap@22 p_1@0 l)) newPMask@6))) (and (= Heap@24 Heap@23) (= (ControlFlow 0 313) 310)))) anon174_correct))))
(let ((anon474_Then_correct  (=> (= (MapType0Select ExhaleHeap@1 p_1@0 l) null) (=> (and (= Heap@24 ExhaleHeap@1) (= (ControlFlow 0 312) 310)) anon174_correct))))
(let ((anon171_correct  (=> (state ExhaleHeap@1 UnfoldingMask@6) (and (=> (= (ControlFlow 0 314) (- 0 317)) (HasDirectPerm UnfoldingMask@6 p_1@0 l)) (=> (HasDirectPerm UnfoldingMask@6 p_1@0 l) (and (=> (= (ControlFlow 0 314) (- 0 316)) (HasDirectPerm UnfoldingMask@6 p_1@0 l)) (=> (HasDirectPerm UnfoldingMask@6 p_1@0 l) (and (=> (= (ControlFlow 0 314) (- 0 315)) (HasDirectPerm UnfoldingMask@6 (MapType0Select ExhaleHeap@1 p_1@0 l) l)) (=> (HasDirectPerm UnfoldingMask@6 (MapType0Select ExhaleHeap@1 p_1@0 l) l) (and (=> (= (ControlFlow 0 314) 312) anon474_Then_correct) (=> (= (ControlFlow 0 314) 313) anon474_Else_correct)))))))))))
(let ((anon473_Else_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null)) (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null))) (=> (and (and (and (and (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 (MapType0Select ExhaleHeap@1 p_1@0 l) v_2 (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 (MapType0Select ExhaleHeap@1 p_1@0 l) v_2)) FullPerm)))) (state ExhaleHeap@1 UnfoldingMask@1)) (and (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null)) (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)) FullPerm)))))) (and (and (state ExhaleHeap@1 UnfoldingMask@2) (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)))) FullPerm))))) (and (InsidePredicate (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)) (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)))) (state ExhaleHeap@1 UnfoldingMask@3)))) (and (and (and (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null)) (= UnfoldingMask@4 (MapType1Store UnfoldingMask@3 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1 (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@3 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)) FullPerm))))) (and (state ExhaleHeap@1 UnfoldingMask@4) (= UnfoldingMask@5 (MapType1Store UnfoldingMask@4 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@4 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)))) FullPerm)))))) (and (and (InsidePredicate (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)) (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)))) (state ExhaleHeap@1 UnfoldingMask@5)) (and (= UnfoldingMask@6 UnfoldingMask@5) (= (ControlFlow 0 319) 314))))) anon171_correct))))
(let ((anon473_Then_correct  (=> (= (MapType0Select ExhaleHeap@1 p_1@0 l) null) (=> (and (= UnfoldingMask@6 UnfoldingMask@0) (= (ControlFlow 0 318) 314)) anon171_correct))))
(let ((anon168_correct  (=> (= UnfoldingMask@0 (MapType1Store Mask@30 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (real_2_U (- (U_2_real (MapType1Select Mask@30 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))) FullPerm)))) (and (=> (= (ControlFlow 0 320) 318) anon473_Then_correct) (=> (= (ControlFlow 0 320) 319) anon473_Else_correct)))))
(let ((anon472_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 323) 320)) anon168_correct)))
(let ((anon472_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 321) (- 0 322)) (<= FullPerm (U_2_real (MapType1Select Mask@30 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@30 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))))) (=> (= (ControlFlow 0 321) 320) anon168_correct))))))
(let ((anon471_Then_correct  (=> (and (and (and (and (state ExhaleHeap@1 ZeroMask) (not (= p_1@0 null))) (and (not (= p_1@0 null)) (= Mask@28 (MapType1Store ZeroMask p_1@0 l (real_2_U (+ (U_2_real (MapType1Select ZeroMask p_1@0 l)) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@28) (= Mask@29 (MapType1Store Mask@28 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (real_2_U (+ (U_2_real (MapType1Select Mask@28 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))) FullPerm))))) (and (state ExhaleHeap@1 Mask@29) (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null))))) (and (and (and (state ExhaleHeap@1 Mask@29) (|Seq#Equal| plvs@1 (vals ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l)))) (and (state ExhaleHeap@1 Mask@29) (= Mask@30 (MapType1Store Mask@29 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (+ (U_2_real (MapType1Select Mask@29 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@30) (state ExhaleHeap@1 Mask@30)) (and (|Tree#trigger| ExhaleHeap@1 (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (= (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (FrameFragment (ite (= (MapType0Select ExhaleHeap@1 p_1@0 l) null) EmptyFrame (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) v_2)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)) (CombineFrames (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l))) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)) (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)))))))))))))) (and (=> (= (ControlFlow 0 324) 321) anon472_Then_correct) (=> (= (ControlFlow 0 324) 323) anon472_Else_correct)))))
(let ((anon385_correct  (=> (and (= Mask@81 (MapType1Store Mask@80 null (Tree z@1) (real_2_U (- (U_2_real (MapType1Select Mask@80 null (Tree z@1))) FullPerm)))) (= (ControlFlow 0 10) (- 0 9))) (|Seq#Equal| (vals Heap@46 z@1) (|Seq#Drop| (vals Heap@@18 x@@25) 1)))))
(let ((anon583_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 13) 10)) anon385_correct)))
(let ((anon583_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= FullPerm (U_2_real (MapType1Select Mask@80 null (Tree z@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@80 null (Tree z@1)))) (=> (= (ControlFlow 0 11) 10) anon385_correct))))))
(let ((anon383_correct  (=> (state Heap@46 Mask@80) (and (=> (= (ControlFlow 0 14) 11) anon583_Then_correct) (=> (= (ControlFlow 0 14) 13) anon583_Else_correct)))))
(let ((anon397_Else_correct  (and (=> (= (ControlFlow 0 518) (- 0 519)) (|Seq#Equal| (vals Heap@1 (MapType0Select Heap@1 x@@25 l)) (|Seq#Empty| intType))) (=> (|Seq#Equal| (vals Heap@1 (MapType0Select Heap@1 x@@25 l)) (|Seq#Empty| intType)) (=> (state Heap@1 Mask@7) (=> (and (and (= Mask@80 Mask@7) (= Heap@46 Heap@1)) (and (= z@1 z@0) (= (ControlFlow 0 518) 14))) anon383_correct))))))
(let ((anon396_Then_correct  (=> (= (MapType0Select Heap@1 x@@25 l) null) (and (=> (= (ControlFlow 0 524) (- 0 526)) (HasDirectPerm Mask@7 x@@25 r_1)) (=> (HasDirectPerm Mask@7 x@@25 r_1) (=> (and (= z@0 (MapType0Select Heap@1 x@@25 r_1)) (state Heap@1 Mask@7)) (and (=> (= (ControlFlow 0 524) (- 0 525)) (HasDirectPerm Mask@7 x@@25 l)) (=> (HasDirectPerm Mask@7 x@@25 l) (and (and (=> (= (ControlFlow 0 524) 518) anon397_Else_correct) (=> (= (ControlFlow 0 524) 521) anon398_Then_correct)) (=> (= (ControlFlow 0 524) 523) anon398_Else_correct))))))))))
(let ((anon382_correct  (=> (= Mask@43 (MapType1Store Mask@42 null (Tree (MapType0Select Heap@18 p_1@0 l)) (real_2_U (- (U_2_real (MapType1Select Mask@42 null (Tree (MapType0Select Heap@18 p_1@0 l)))) FullPerm)))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (|Seq#Equal| (vals Heap@18 (MapType0Select Heap@18 p_1@0 l)) (|Seq#Drop| plvs@1 1))) (=> (|Seq#Equal| (vals Heap@18 (MapType0Select Heap@18 p_1@0 l)) (|Seq#Drop| plvs@1 1)) (=> (and (state Heap@18 Mask@43) (= Mask@44 (MapType1Store Mask@43 null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select Mask@43 null (Tree x@@25))) FullPerm))))) (=> (and (and (state Heap@18 Mask@44) (state Heap@18 Mask@44)) (and (|Seq#Equal| (vals Heap@18 x@@25) (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (state Heap@18 Mask@44))) (=> (and (and (and (IdenticalOnKnownLocations Heap@18 ExhaleHeap@2 Mask@44) (state ExhaleHeap@2 Mask@44)) (and (state ExhaleHeap@2 Mask@44) (state ExhaleHeap@2 Mask@44))) (and (and (= Mask@80 Mask@44) (= Heap@46 ExhaleHeap@2)) (and (= z@1 x@@25) (= (ControlFlow 0 15) 14)))) anon383_correct))))))))
(let ((anon582_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 19) 15)) anon382_correct)))
(let ((anon582_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (<= FullPerm (U_2_real (MapType1Select Mask@42 null (Tree (MapType0Select Heap@18 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@42 null (Tree (MapType0Select Heap@18 p_1@0 l))))) (=> (= (ControlFlow 0 17) 15) anon382_correct))))))
(let ((anon380_correct  (=> (= Mask@42 (MapType1Store Mask@41 p_1@0 l (real_2_U (- (U_2_real (MapType1Select Mask@41 p_1@0 l)) FullPerm)))) (and (=> (= (ControlFlow 0 20) 17) anon582_Then_correct) (=> (= (ControlFlow 0 20) 19) anon582_Else_correct)))))
(let ((anon581_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 23) 20)) anon380_correct)))
(let ((anon581_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (<= FullPerm (U_2_real (MapType1Select Mask@41 p_1@0 l)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 p_1@0 l))) (=> (= (ControlFlow 0 21) 20) anon380_correct))))))
(let ((anon579_Else_correct  (and (=> (= (ControlFlow 0 24) (- 0 29)) (|Seq#Equal| (vals Heap@17 (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)) (|Seq#Empty| intType))) (=> (|Seq#Equal| (vals Heap@17 (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)) (|Seq#Empty| intType)) (=> (state Heap@17 Mask@40) (and (=> (= (ControlFlow 0 24) (- 0 28)) (HasDirectPerm Mask@40 p_1@0 l)) (=> (HasDirectPerm Mask@40 p_1@0 l) (and (=> (= (ControlFlow 0 24) (- 0 27)) (HasDirectPerm Mask@40 (MapType0Select Heap@17 p_1@0 l) r_1)) (=> (HasDirectPerm Mask@40 (MapType0Select Heap@17 p_1@0 l) r_1) (and (=> (= (ControlFlow 0 24) (- 0 26)) (= FullPerm (U_2_real (MapType1Select Mask@40 p_1@0 l)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@40 p_1@0 l))) (=> (and (= Heap@18 (MapType0Store Heap@17 p_1@0 l (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) r_1))) (state Heap@18 Mask@40)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (<= FullPerm (U_2_real (MapType1Select Mask@40 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@40 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))))) (=> (and (= Mask@41 (MapType1Store Mask@40 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (- (U_2_real (MapType1Select Mask@40 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) FullPerm)))) (state Heap@18 Mask@41)) (and (=> (= (ControlFlow 0 24) 21) anon581_Then_correct) (=> (= (ControlFlow 0 24) 23) anon581_Else_correct)))))))))))))))))
(let ((anon377_correct true))
(let ((anon580_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 8) 5)) anon377_correct)))
(let ((anon580_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= FullPerm (U_2_real (MapType1Select Mask@40 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@40 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l))))) (=> (= (ControlFlow 0 6) 5) anon377_correct))))))
(let ((anon374_correct  (=> (and (state Heap@17 Mask@40) (state Heap@17 Mask@40)) (and (=> (= (ControlFlow 0 30) (- 0 32)) (HasDirectPerm Mask@40 p_1@0 l)) (=> (HasDirectPerm Mask@40 p_1@0 l) (and (=> (= (ControlFlow 0 30) (- 0 31)) (HasDirectPerm Mask@40 (MapType0Select Heap@17 p_1@0 l) l)) (=> (HasDirectPerm Mask@40 (MapType0Select Heap@17 p_1@0 l) l) (and (and (=> (= (ControlFlow 0 30) 24) anon579_Else_correct) (=> (= (ControlFlow 0 30) 6) anon580_Then_correct)) (=> (= (ControlFlow 0 30) 8) anon580_Else_correct)))))))))
(let ((anon578_Else_correct  (=> (and (not (= (MapType0Select Heap@17 p_1@0 l) null)) (not (= (MapType0Select Heap@17 p_1@0 l) null))) (=> (and (and (and (and (= Mask@35 (MapType1Store Mask@34 (MapType0Select Heap@17 p_1@0 l) v_2 (real_2_U (+ (U_2_real (MapType1Select Mask@34 (MapType0Select Heap@17 p_1@0 l) v_2)) FullPerm)))) (state Heap@17 Mask@35)) (and (not (= (MapType0Select Heap@17 p_1@0 l) null)) (= Mask@36 (MapType1Store Mask@35 (MapType0Select Heap@17 p_1@0 l) l (real_2_U (+ (U_2_real (MapType1Select Mask@35 (MapType0Select Heap@17 p_1@0 l) l)) FullPerm)))))) (and (and (state Heap@17 Mask@36) (= Mask@37 (MapType1Store Mask@36 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)) (real_2_U (+ (U_2_real (MapType1Select Mask@36 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)))) FullPerm))))) (and (InsidePredicate (Tree (MapType0Select Heap@17 p_1@0 l)) (MapType0Select Heap@17 null (Tree (MapType0Select Heap@17 p_1@0 l))) (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)) (MapType0Select Heap@17 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) l)))) (state Heap@17 Mask@37)))) (and (and (and (not (= (MapType0Select Heap@17 p_1@0 l) null)) (= Mask@38 (MapType1Store Mask@37 (MapType0Select Heap@17 p_1@0 l) r_1 (real_2_U (+ (U_2_real (MapType1Select Mask@37 (MapType0Select Heap@17 p_1@0 l) r_1)) FullPerm))))) (and (state Heap@17 Mask@38) (= Mask@39 (MapType1Store Mask@38 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) r_1)) (real_2_U (+ (U_2_real (MapType1Select Mask@38 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) r_1)))) FullPerm)))))) (and (and (InsidePredicate (Tree (MapType0Select Heap@17 p_1@0 l)) (MapType0Select Heap@17 null (Tree (MapType0Select Heap@17 p_1@0 l))) (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) r_1)) (MapType0Select Heap@17 null (Tree (MapType0Select Heap@17 (MapType0Select Heap@17 p_1@0 l) r_1)))) (state Heap@17 Mask@39)) (and (= Mask@40 Mask@39) (= (ControlFlow 0 34) 30))))) anon374_correct))))
(let ((anon578_Then_correct  (=> (= (MapType0Select Heap@17 p_1@0 l) null) (=> (and (= Mask@40 Mask@34) (= (ControlFlow 0 33) 30)) anon374_correct))))
(let ((anon577_Else_correct  (=> (and (HasDirectPerm Mask@34 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (= Heap@17 ExhaleHeap@1)) (and (=> (= (ControlFlow 0 36) 33) anon578_Then_correct) (=> (= (ControlFlow 0 36) 34) anon578_Else_correct)))))
(let ((anon577_Then_correct  (=> (not (HasDirectPerm Mask@34 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))) (=> (and (= Heap@16 (MapType0Store ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) newVersion@1)) (= Heap@17 Heap@16)) (and (=> (= (ControlFlow 0 35) 33) anon578_Then_correct) (=> (= (ControlFlow 0 35) 34) anon578_Else_correct))))))
(let ((anon369_correct  (=> (= Mask@34 (MapType1Store Mask@33 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (real_2_U (- (U_2_real (MapType1Select Mask@33 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))) FullPerm)))) (and (=> (= (ControlFlow 0 37) 35) anon577_Then_correct) (=> (= (ControlFlow 0 37) 36) anon577_Else_correct)))))
(let ((anon576_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 40) 37)) anon369_correct)))
(let ((anon576_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 38) (- 0 39)) (<= FullPerm (U_2_real (MapType1Select Mask@33 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@33 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))))) (=> (= (ControlFlow 0 38) 37) anon369_correct))))))
(let ((anon471_Else_correct  (=> (and (and (and (and (not (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l) null))) (state ExhaleHeap@1 Mask@25)) (and (not (= p_1@0 null)) (not (= p_1@0 null)))) (and (and (= Mask@31 (MapType1Store Mask@25 p_1@0 l (real_2_U (+ (U_2_real (MapType1Select Mask@25 p_1@0 l)) FullPerm)))) (state ExhaleHeap@1 Mask@31)) (and (= Mask@32 (MapType1Store Mask@31 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)) (real_2_U (+ (U_2_real (MapType1Select Mask@31 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l)))) FullPerm)))) (state ExhaleHeap@1 Mask@32)))) (and (and (and (not (= (MapType0Select ExhaleHeap@1 p_1@0 l) null)) (state ExhaleHeap@1 Mask@32)) (and (|Seq#Equal| plvs@1 (vals ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l))) (state ExhaleHeap@1 Mask@32))) (and (and (= Mask@33 (MapType1Store Mask@32 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (+ (U_2_real (MapType1Select Mask@32 null (wand p_1@0 FullPerm p_1@0 FullPerm p_1@0 (|Seq#Drop| plvs@1 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) FullPerm)))) (state ExhaleHeap@1 Mask@33)) (and (state ExhaleHeap@1 Mask@33) (state ExhaleHeap@1 Mask@33))))) (and (=> (= (ControlFlow 0 41) (- 0 42)) (HasDirectPerm Mask@33 p_1@0 l)) (=> (HasDirectPerm Mask@33 p_1@0 l) (=> (and (|Tree#trigger| ExhaleHeap@1 (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (= (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 p_1@0 l))) (FrameFragment (ite (= (MapType0Select ExhaleHeap@1 p_1@0 l) null) EmptyFrame (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) v_2)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l)) (CombineFrames (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) l))) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1)) (MapType0Select ExhaleHeap@1 null (Tree (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 p_1@0 l) r_1))))))))))) (and (=> (= (ControlFlow 0 41) 38) anon576_Then_correct) (=> (= (ControlFlow 0 41) 40) anon576_Else_correct))))))))
(let ((anon145_correct  (=> (= Mask@24 (MapType1Store Mask@23 null (Tree (MapType0Select Heap@15 x@@25 l)) (real_2_U (- (U_2_real (MapType1Select Mask@23 null (Tree (MapType0Select Heap@15 x@@25 l)))) FullPerm)))) (and (=> (= (ControlFlow 0 352) (- 0 355)) (not (= (MapType0Select Heap@15 x@@25 l) null))) (=> (not (= (MapType0Select Heap@15 x@@25 l) null)) (and (=> (= (ControlFlow 0 352) (- 0 354)) (|Seq#Equal| plvs@0 (vals Heap@15 (MapType0Select Heap@15 x@@25 l)))) (=> (|Seq#Equal| plvs@0 (vals Heap@15 (MapType0Select Heap@15 x@@25 l))) (and (=> (= (ControlFlow 0 352) (- 0 353)) (<= FullPerm (U_2_real (MapType1Select Mask@24 null (wand x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@24 null (wand x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))))) (=> (= Mask@25 (MapType1Store Mask@24 null (wand x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (- (U_2_real (MapType1Select Mask@24 null (wand x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) FullPerm)))) (=> (and (IdenticalOnKnownLocations Heap@15 ExhaleHeap@1 Mask@25) (U_2_bool (MapType0Select ExhaleHeap@1 p_1@0 $allocated))) (and (and (=> (= (ControlFlow 0 352) 348) anon461_Then_correct) (=> (= (ControlFlow 0 352) 324) anon471_Then_correct)) (=> (= (ControlFlow 0 352) 41) anon471_Else_correct)))))))))))))
(let ((anon460_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 358) 352)) anon145_correct)))
(let ((anon460_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 356) (- 0 357)) (<= FullPerm (U_2_real (MapType1Select Mask@23 null (Tree (MapType0Select Heap@15 x@@25 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@23 null (Tree (MapType0Select Heap@15 x@@25 l))))) (=> (= (ControlFlow 0 356) 352) anon145_correct))))))
(let ((anon143_correct  (=> (= Mask@23 (MapType1Store Mask@22 x@@25 l (real_2_U (- (U_2_real (MapType1Select Mask@22 x@@25 l)) FullPerm)))) (and (=> (= (ControlFlow 0 359) 356) anon460_Then_correct) (=> (= (ControlFlow 0 359) 358) anon460_Else_correct)))))
(let ((anon459_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 362) 359)) anon143_correct)))
(let ((anon459_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 360) (- 0 361)) (<= FullPerm (U_2_real (MapType1Select Mask@22 x@@25 l)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@22 x@@25 l))) (=> (= (ControlFlow 0 360) 359) anon143_correct))))))
(let ((anon141_correct  (and (=> (= (ControlFlow 0 363) (- 0 365)) (=> (and (and b_1_1@36 b_1_1@36) b_9@6) (|Seq#Equal| (vals Result_6Heap x@@25) (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) (=> (=> (and (and b_1_1@36 b_1_1@36) b_9@6) (|Seq#Equal| (vals Result_6Heap x@@25) (|Seq#Drop| (vals Heap@@18 x@@25) 1))) (=> (state Heap@15 Mask@21) (=> (and (and (= Mask@22 (MapType1Store Mask@21 null (wand x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (real_2_U (+ (U_2_real (MapType1Select Mask@21 null (wand x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)))) FullPerm)))) (state Heap@15 Mask@22)) (and (state Heap@15 Mask@22) (state Heap@15 Mask@22))) (and (=> (= (ControlFlow 0 363) (- 0 364)) (not (= x@@25 null))) (=> (not (= x@@25 null)) (and (=> (= (ControlFlow 0 363) 360) anon459_Then_correct) (=> (= (ControlFlow 0 363) 362) anon459_Else_correct))))))))))
(let ((anon454_Then_correct  (=> b_1_1@36 (and (and (and (and (=> (= (ControlFlow 0 376) 363) anon141_correct) (=> (= (ControlFlow 0 376) 373) anon458_Then_correct)) (=> (= (ControlFlow 0 376) 375) anon458_Else_correct)) (=> (= (ControlFlow 0 376) 369) anon456_Then_correct)) (=> (= (ControlFlow 0 376) 371) anon456_Else_correct)))))
(let ((anon454_Else_correct  (=> (and (not b_1_1@36) (= (ControlFlow 0 367) 363)) anon141_correct)))
(let ((anon453_Then_correct  (=> (and (and b_1_1@36 b_1_1@36) b_9@6) (and (=> (= (ControlFlow 0 377) 376) anon454_Then_correct) (=> (= (ControlFlow 0 377) 367) anon454_Else_correct)))))
(let ((anon453_Else_correct  (=> (and (not (and (and b_1_1@36 b_1_1@36) b_9@6)) (= (ControlFlow 0 366) 363)) anon141_correct)))
(let ((anon131_correct  (and (=> (= (ControlFlow 0 378) (- 0 379)) (=> (and (and b_1_1@35 b_1_1@35) b_9@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null (Tree x@@25))) initNeededTransfer@5)))) (=> (=> (and (and b_1_1@35 b_1_1@35) b_9@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null (Tree x@@25))) initNeededTransfer@5))) (=> (and (= b_10@0  (and b_1_1@35 b_9@6)) (= b_10@1  (and b_10@0 (state Result_6Heap Result_6Mask)))) (=> (and (and (= b_10@2  (and b_10@1 (sumMask Result_6Mask Ops_1Mask@21 Used_2Mask@3))) (= b_10@3  (and (and b_10@2 (IdenticalOnKnownLocations Ops_1Heap@12 Result_6Heap Ops_1Mask@21)) (IdenticalOnKnownLocations Used_2Heap@0 Result_6Heap Used_2Mask@3)))) (and (= b_10@4  (and b_10@3 (state Result_6Heap Result_6Mask))) (= b_1_1@36  (and b_1_1@35 b_10@4)))) (and (=> (= (ControlFlow 0 378) 377) anon453_Then_correct) (=> (= (ControlFlow 0 378) 366) anon453_Else_correct))))))))
(let ((anon452_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= Heap@15 Heap@13) (= neededTransfer@23 neededTransfer@21)) (=> (and (and (= Mask@21 Mask@19) (= b_9@6 b_9@3)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 382) 378))) anon131_correct)))))
(let ((anon452_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (= neededTransfer@22 (- neededTransfer@21 takeTransfer@11)) (= Used_2Mask@2 (MapType1Store Used_2Mask@1 null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select Used_2Mask@1 null (Tree x@@25))) takeTransfer@11))))) (=> (and (and (= b_9@4  (and b_9@3 (state Used_2Heap@0 Used_2Mask@2))) (= TempMask@5 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U FullPerm)))) (and (= b_9@5  (and b_9@4 (IdenticalOnKnownLocations Heap@13 Used_2Heap@0 TempMask@5))) (= Mask@20 (MapType1Store Mask@19 null (Tree x@@25) (real_2_U (- (U_2_real (MapType1Select Mask@19 null (Tree x@@25))) takeTransfer@11)))))) (=> (and (and (and (forall ((o_11 T@U) (f_15 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_15))))
(let ((A@@20 (FieldTypeInv0 (type f_15))))
 (=> (and (and (= (type o_11) RefType) (= (type f_15) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@13 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_11 f_15)) (U_2_bool (MapType1Select (MapType0Select Heap@13 null (|Tree#sm| x@@25)) o_11 f_15)))) (U_2_bool (MapType1Select newPMask@4 o_11 f_15)))))
 :qid |stdinbpl.1818:39|
 :skolemid |87|
 :pattern ( (MapType1Select newPMask@4 o_11 f_15))
)) (= Heap@14 (MapType0Store Heap@13 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@4))) (and (= Heap@15 Heap@14) (= neededTransfer@23 neededTransfer@22))) (and (and (= Mask@21 Mask@20) (= b_9@6 b_9@5)) (and (= Used_2Mask@3 Used_2Mask@2) (= (ControlFlow 0 381) 378)))) anon131_correct))))))
(let ((anon451_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@21) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 384) 381) anon452_Then_correct) (=> (= (ControlFlow 0 384) 382) anon452_Else_correct)))))
(let ((anon451_Then_correct  (=> (and (<= neededTransfer@21 maskTransfer@11) (= takeTransfer@11 neededTransfer@21)) (and (=> (= (ControlFlow 0 383) 381) anon452_Then_correct) (=> (= (ControlFlow 0 383) 382) anon452_Else_correct)))))
(let ((anon450_Then_correct  (=> (and (and (and (and (and b_1_1@35 b_1_1@35) b_9@3) true) (> neededTransfer@21 0.0)) (= maskTransfer@11 (U_2_real (MapType1Select Mask@19 null (Tree x@@25))))) (and (=> (= (ControlFlow 0 385) 383) anon451_Then_correct) (=> (= (ControlFlow 0 385) 384) anon451_Else_correct)))))
(let ((anon450_Else_correct  (=> (not (and (and (and (and b_1_1@35 b_1_1@35) b_9@3) true) (> neededTransfer@21 0.0))) (=> (and (= Heap@15 Heap@13) (= neededTransfer@23 neededTransfer@21)) (=> (and (and (= Mask@21 Mask@19) (= b_9@6 b_9@3)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 380) 378))) anon131_correct)))))
(let ((anon449_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (and (= Ops_1Mask@21 Ops_1Mask@19) (= Used_2Mask@1 ZeroMask)) (and (= b_9@3 b_9@0) (= neededTransfer@21 FullPerm))) (and (=> (= (ControlFlow 0 388) 385) anon450_Then_correct) (=> (= (ControlFlow 0 388) 380) anon450_Else_correct))))))
(let ((anon449_Then_correct  (=> (> takeTransfer@10 0.0) (=> (and (= neededTransfer@20 (- FullPerm takeTransfer@10)) (= Used_2Mask@0 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) takeTransfer@10))))) (=> (and (and (and (= b_9@1  (and b_9@0 (state Used_2Heap@0 Used_2Mask@0))) (= TempMask@4 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U FullPerm)))) (and (= b_9@2  (and b_9@1 (IdenticalOnKnownLocations Ops_1Heap@12 Used_2Heap@0 TempMask@4))) (= Ops_1Mask@20 (MapType1Store Ops_1Mask@19 null (Tree x@@25) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@19 null (Tree x@@25))) takeTransfer@10)))))) (and (and (= Ops_1Mask@21 Ops_1Mask@20) (= Used_2Mask@1 Used_2Mask@0)) (and (= b_9@3 b_9@2) (= neededTransfer@21 neededTransfer@20)))) (and (=> (= (ControlFlow 0 387) 385) anon450_Then_correct) (=> (= (ControlFlow 0 387) 380) anon450_Else_correct)))))))
(let ((anon448_Else_correct  (=> (and (< maskTransfer@10 FullPerm) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 390) 387) anon449_Then_correct) (=> (= (ControlFlow 0 390) 388) anon449_Else_correct)))))
(let ((anon448_Then_correct  (=> (and (<= FullPerm maskTransfer@10) (= takeTransfer@10 FullPerm)) (and (=> (= (ControlFlow 0 389) 387) anon449_Then_correct) (=> (= (ControlFlow 0 389) 388) anon449_Else_correct)))))
(let ((anon447_Then_correct  (=> (and (and (and (and (and b_1_1@35 b_1_1@35) b_9@0) true) (> FullPerm 0.0)) (= maskTransfer@10 (U_2_real (MapType1Select Ops_1Mask@19 null (Tree x@@25))))) (and (=> (= (ControlFlow 0 391) 389) anon448_Then_correct) (=> (= (ControlFlow 0 391) 390) anon448_Else_correct)))))
(let ((anon447_Else_correct  (=> (not (and (and (and (and b_1_1@35 b_1_1@35) b_9@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@21 Ops_1Mask@19) (= Used_2Mask@1 ZeroMask)) (and (= b_9@3 b_9@0) (= neededTransfer@21 FullPerm))) (and (=> (= (ControlFlow 0 386) 385) anon450_Then_correct) (=> (= (ControlFlow 0 386) 380) anon450_Else_correct))))))
(let ((anon119_correct  (=> (and (= b_9@0  (and b_9 (state Used_2Heap@0 ZeroMask))) (= initNeededTransfer@5 (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) FullPerm))) (and (=> (= (ControlFlow 0 392) (- 0 393)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 392) 391) anon447_Then_correct) (=> (= (ControlFlow 0 392) 386) anon447_Else_correct)))))))
(let ((anon118_correct  (=> (and (and (and (state Ops_1Heap@11 Ops_1Mask@18) (= b_1_1@34  (and b_1_1@33 (state Ops_1Heap@11 Ops_1Mask@18)))) (and (= Ops_1Heap@12 Ops_1Heap@11) (= b_1_1@35 b_1_1@34))) (and (and (= Ops_1Mask@19 Ops_1Mask@18) (= Mask@19 Mask@18)) (and (= Heap@13 Heap@12) (= (ControlFlow 0 395) 392)))) anon119_correct)))
(let ((anon446_Else_correct  (=> (and (not (= x@@25 null)) (= Ops_1Heap@6 (MapType0Store Ops_1Heap@5 null (|Tree#sm| x@@25) (MapType1Store (MapType0Select Ops_1Heap@5 null (|Tree#sm| x@@25)) x@@25 v_2 (bool_2_U true))))) (=> (and (and (and (= Ops_1Heap@7 (MapType0Store Ops_1Heap@6 null (|Tree#sm| x@@25) (MapType1Store (MapType0Select Ops_1Heap@6 null (|Tree#sm| x@@25)) x@@25 l (bool_2_U true)))) (forall ((o_9 T@U) (f_13 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_13))))
(let ((A@@21 (FieldTypeInv0 (type f_13))))
 (=> (and (and (= (type o_9) RefType) (= (type f_13) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Ops_1Heap@7 null (|Tree#sm| x@@25)) o_9 f_13)) (U_2_bool (MapType1Select (MapType0Select Ops_1Heap@7 null (|Tree#sm| (MapType0Select Ops_1Heap@7 x@@25 l))) o_9 f_13)))) (U_2_bool (MapType1Select newPMask@2 o_9 f_13)))))
 :qid |stdinbpl.1750:37|
 :skolemid |85|
 :pattern ( (MapType1Select newPMask@2 o_9 f_13))
))) (and (= Ops_1Heap@8 (MapType0Store Ops_1Heap@7 null (|Tree#sm| x@@25) newPMask@2)) (= Ops_1Heap@9 (MapType0Store Ops_1Heap@8 null (|Tree#sm| x@@25) (MapType1Store (MapType0Select Ops_1Heap@8 null (|Tree#sm| x@@25)) x@@25 r_1 (bool_2_U true)))))) (and (and (forall ((o_10 T@U) (f_14 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_14))))
(let ((A@@22 (FieldTypeInv0 (type f_14))))
 (=> (and (and (= (type o_10) RefType) (= (type f_14) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Ops_1Heap@9 null (|Tree#sm| x@@25)) o_10 f_14)) (U_2_bool (MapType1Select (MapType0Select Ops_1Heap@9 null (|Tree#sm| (MapType0Select Ops_1Heap@9 x@@25 r_1))) o_10 f_14)))) (U_2_bool (MapType1Select newPMask@3 o_10 f_14)))))
 :qid |stdinbpl.1757:37|
 :skolemid |86|
 :pattern ( (MapType1Select newPMask@3 o_10 f_14))
)) (= Ops_1Heap@10 (MapType0Store Ops_1Heap@9 null (|Tree#sm| x@@25) newPMask@3))) (and (= Ops_1Heap@11 Ops_1Heap@10) (= (ControlFlow 0 397) 395)))) anon118_correct))))
(let ((anon446_Then_correct  (=> (= x@@25 null) (=> (and (= Ops_1Heap@11 Ops_1Heap@5) (= (ControlFlow 0 396) 395)) anon118_correct))))
(let ((anon445_Else_correct  (=> (and (HasDirectPerm Ops_1Mask@18 null (Tree x@@25)) (= Ops_1Heap@5 Ops_1Heap@2)) (and (=> (= (ControlFlow 0 399) 396) anon446_Then_correct) (=> (= (ControlFlow 0 399) 397) anon446_Else_correct)))))
(let ((anon445_Then_correct  (=> (and (and (not (HasDirectPerm Ops_1Mask@18 null (Tree x@@25))) (= Ops_1Heap@3 (MapType0Store Ops_1Heap@2 null (|Tree#sm| x@@25) ZeroPMask))) (and (= Ops_1Heap@4 (MapType0Store Ops_1Heap@3 null (Tree x@@25) freshVersion@0)) (= Ops_1Heap@5 Ops_1Heap@4))) (and (=> (= (ControlFlow 0 398) 396) anon446_Then_correct) (=> (= (ControlFlow 0 398) 397) anon446_Else_correct)))))
(let ((anon113_correct  (=> (= b_8@0  (and b_1_1@30 b_2_1@31)) (=> (and (= b_8@1  (and b_8@0 (state Result_5Heap Result_5Mask))) (= b_8@2  (and b_8@1 (sumMask Result_5Mask Ops_1Mask@17 Used_1Mask@20)))) (=> (and (and (and (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_5Heap Ops_1Mask@17)) (IdenticalOnKnownLocations Used_1Heap@0 Result_5Heap Used_1Mask@20))) (= b_8@4  (and b_8@3 (state Result_5Heap Result_5Mask)))) (and (= b_1_1@31  (and b_1_1@30 b_8@4)) (= Ops_1Mask@18 (MapType1Store Ops_1Mask@17 null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@17 null (Tree x@@25))) FullPerm)))))) (and (and (= b_1_1@32  (and b_1_1@31 (state Ops_1Heap@2 Ops_1Mask@18))) (= b_1_1@33  (and b_1_1@32 (state Ops_1Heap@2 Ops_1Mask@18)))) (and (|Tree#trigger| Ops_1Heap@2 (Tree x@@25)) (= (MapType0Select Ops_1Heap@2 null (Tree x@@25)) (FrameFragment (ite (= x@@25 null) EmptyFrame (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@2 x@@25 v_2)) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@2 x@@25 l)) (CombineFrames (MapType0Select Ops_1Heap@2 null (Tree (MapType0Select Ops_1Heap@2 x@@25 l))) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@2 x@@25 r_1)) (MapType0Select Ops_1Heap@2 null (Tree (MapType0Select Ops_1Heap@2 x@@25 r_1))))))))))))) (and (=> (= (ControlFlow 0 400) 398) anon445_Then_correct) (=> (= (ControlFlow 0 400) 399) anon445_Else_correct)))))))
(let ((anon112_correct  (and (=> (= (ControlFlow 0 403) (- 0 404)) (=> (and b_1_1@26 b_2_1@30) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_1Mask@19 null (Tree arg_1@0))) initNeededTransfer@4)))) (=> (=> (and b_1_1@26 b_2_1@30) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_1Mask@19 null (Tree arg_1@0))) initNeededTransfer@4))) (=> (= b_7@0  (and b_1_1@26 b_2_1@30)) (=> (and (= b_7@1  (and b_7@0 (state Result_4Heap Result_4Mask))) (= b_7@2  (and b_7@1 (sumMask Result_4Mask Ops_1Mask@16 Used_1Mask@19)))) (=> (and (and (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_4Heap Ops_1Mask@16)) (IdenticalOnKnownLocations Used_1Heap@0 Result_4Heap Used_1Mask@19))) (= b_7@4  (and b_7@3 (state Result_4Heap Result_4Mask)))) (and (= b_1_1@27  (and b_1_1@26 b_7@4)) (= b_1_1@28  (and b_1_1@27 b_2_1@30)))) (=> (and (and (and (= b_1_1@29  (and b_1_1@28 (= Used_1Heap@0 Ops_1Heap@2))) (= Heap@12 Heap@11)) (and (= Mask@18 Mask@17) (= Ops_1Mask@17 Ops_1Mask@16))) (and (and (= b_1_1@30 b_1_1@29) (= Used_1Mask@20 Used_1Mask@19)) (and (= b_2_1@31 b_2_1@30) (= (ControlFlow 0 403) 400)))) anon113_correct))))))))
(let ((anon444_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (= neededTransfer@19 neededTransfer@17) (= b_2_1@30 b_2_1@27)) (=> (and (and (= Used_1Mask@19 Used_1Mask@17) (= Mask@17 Mask@15)) (and (= Heap@11 Heap@9) (= (ControlFlow 0 407) 403))) anon112_correct)))))
(let ((anon444_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9)) (= Used_1Mask@18 (MapType1Store Used_1Mask@17 null (Tree arg_1@0) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@17 null (Tree arg_1@0))) takeTransfer@9))))) (=> (and (and (= b_2_1@28  (and b_2_1@27 (state Used_1Heap@0 Used_1Mask@18))) (= TempMask@3 (MapType1Store ZeroMask null (Tree arg_1@0) (real_2_U FullPerm)))) (and (= b_2_1@29  (and b_2_1@28 (IdenticalOnKnownLocations Heap@9 Used_1Heap@0 TempMask@3))) (= Mask@16 (MapType1Store Mask@15 null (Tree arg_1@0) (real_2_U (- (U_2_real (MapType1Select Mask@15 null (Tree arg_1@0))) takeTransfer@9)))))) (=> (and (and (and (forall ((o_8 T@U) (f_12 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_12))))
(let ((A@@23 (FieldTypeInv0 (type f_12))))
 (=> (and (and (= (type o_8) RefType) (= (type f_12) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_8 f_12)) (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|Tree#sm| (MapType0Select Heap@9 x@@25 r_1))) o_8 f_12)))) (U_2_bool (MapType1Select newPMask@1 o_8 f_12)))))
 :qid |stdinbpl.1704:47|
 :skolemid |84|
 :pattern ( (MapType1Select newPMask@1 o_8 f_12))
)) (= Heap@10 (MapType0Store Heap@9 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@1))) (and (= neededTransfer@19 neededTransfer@18) (= b_2_1@30 b_2_1@29))) (and (and (= Used_1Mask@19 Used_1Mask@18) (= Mask@17 Mask@16)) (and (= Heap@11 Heap@10) (= (ControlFlow 0 406) 403)))) anon112_correct))))))
(let ((anon443_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 409) 406) anon444_Then_correct) (=> (= (ControlFlow 0 409) 407) anon444_Else_correct)))))
(let ((anon443_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 408) 406) anon444_Then_correct) (=> (= (ControlFlow 0 408) 407) anon444_Else_correct)))))
(let ((anon442_Then_correct  (=> (and (and (and (and b_1_1@26 b_2_1@27) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Mask@15 null (Tree arg_1@0))))) (and (=> (= (ControlFlow 0 410) 408) anon443_Then_correct) (=> (= (ControlFlow 0 410) 409) anon443_Else_correct)))))
(let ((anon442_Else_correct  (=> (not (and (and (and b_1_1@26 b_2_1@27) true) (> neededTransfer@17 0.0))) (=> (and (= neededTransfer@19 neededTransfer@17) (= b_2_1@30 b_2_1@27)) (=> (and (and (= Used_1Mask@19 Used_1Mask@17) (= Mask@17 Mask@15)) (and (= Heap@11 Heap@9) (= (ControlFlow 0 405) 403))) anon112_correct)))))
(let ((anon441_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Used_1Mask@17 Used_1Mask@15) (= Ops_1Mask@16 Ops_1Mask@14)) (and (= b_2_1@27 b_2_1@24) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 413) 410) anon442_Then_correct) (=> (= (ControlFlow 0 413) 405) anon442_Else_correct))))))
(let ((anon441_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (= neededTransfer@16 (- FullPerm takeTransfer@8)) (= Used_1Mask@16 (MapType1Store Used_1Mask@15 null (Tree arg_1@0) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@15 null (Tree arg_1@0))) takeTransfer@8))))) (=> (and (and (and (= b_2_1@25  (and b_2_1@24 (state Used_1Heap@0 Used_1Mask@16))) (= TempMask@2 (MapType1Store ZeroMask null (Tree arg_1@0) (real_2_U FullPerm)))) (and (= b_2_1@26  (and b_2_1@25 (IdenticalOnKnownLocations Ops_1Heap@2 Used_1Heap@0 TempMask@2))) (= Ops_1Mask@15 (MapType1Store Ops_1Mask@14 null (Tree arg_1@0) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@14 null (Tree arg_1@0))) takeTransfer@8)))))) (and (and (= Used_1Mask@17 Used_1Mask@16) (= Ops_1Mask@16 Ops_1Mask@15)) (and (= b_2_1@27 b_2_1@26) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 412) 410) anon442_Then_correct) (=> (= (ControlFlow 0 412) 405) anon442_Else_correct)))))))
(let ((anon440_Else_correct  (=> (and (< maskTransfer@8 FullPerm) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 415) 412) anon441_Then_correct) (=> (= (ControlFlow 0 415) 413) anon441_Else_correct)))))
(let ((anon440_Then_correct  (=> (and (<= FullPerm maskTransfer@8) (= takeTransfer@8 FullPerm)) (and (=> (= (ControlFlow 0 414) 412) anon441_Then_correct) (=> (= (ControlFlow 0 414) 413) anon441_Else_correct)))))
(let ((anon439_Then_correct  (=> (and (and (and (and b_1_1@26 b_2_1@24) true) (> FullPerm 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Ops_1Mask@14 null (Tree arg_1@0))))) (and (=> (= (ControlFlow 0 416) 414) anon440_Then_correct) (=> (= (ControlFlow 0 416) 415) anon440_Else_correct)))))
(let ((anon439_Else_correct  (=> (not (and (and (and b_1_1@26 b_2_1@24) true) (> FullPerm 0.0))) (=> (and (and (= Used_1Mask@17 Used_1Mask@15) (= Ops_1Mask@16 Ops_1Mask@14)) (and (= b_2_1@27 b_2_1@24) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 411) 410) anon442_Then_correct) (=> (= (ControlFlow 0 411) 405) anon442_Else_correct))))))
(let ((anon100_correct  (=> (and (= arg_1@0 (MapType0Select Result_3Heap x@@25 r_1)) (= initNeededTransfer@4 (+ (U_2_real (MapType1Select Used_1Mask@15 null (Tree arg_1@0))) FullPerm))) (and (=> (= (ControlFlow 0 417) (- 0 418)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 417) 416) anon439_Then_correct) (=> (= (ControlFlow 0 417) 411) anon439_Else_correct)))))))
(let ((anon438_Else_correct  (=> (and (not b_1_1@26) (= (ControlFlow 0 422) 417)) anon100_correct)))
(let ((anon438_Then_correct  (=> b_1_1@26 (and (=> (= (ControlFlow 0 420) (- 0 421)) (HasDirectPerm Result_3Mask x@@25 r_1)) (=> (HasDirectPerm Result_3Mask x@@25 r_1) (=> (= (ControlFlow 0 420) 417) anon100_correct))))))
(let ((anon437_Then_correct  (=> (and b_1_1@26 b_2_1@24) (and (=> (= (ControlFlow 0 423) 420) anon438_Then_correct) (=> (= (ControlFlow 0 423) 422) anon438_Else_correct)))))
(let ((anon437_Else_correct  (=> (and (not (and b_1_1@26 b_2_1@24)) (= (ControlFlow 0 419) 417)) anon100_correct)))
(let ((anon97_correct  (and (=> (= (ControlFlow 0 424) (- 0 425)) (=> (and b_1_1@23 b_2_1@24) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_1Mask@15 x@@25 r_1)) initNeededTransfer@3)))) (=> (=> (and b_1_1@23 b_2_1@24) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_1Mask@15 x@@25 r_1)) initNeededTransfer@3))) (=> (and (and (and (= b_6@0  (and b_1_1@23 b_2_1@24)) (= b_6@1  (and b_6@0 (state Result_3Heap Result_3Mask)))) (and (= b_6@2  (and b_6@1 (sumMask Result_3Mask Ops_1Mask@14 Used_1Mask@15))) (= b_6@3  (and (and b_6@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_3Heap Ops_1Mask@14)) (IdenticalOnKnownLocations Used_1Heap@0 Result_3Heap Used_1Mask@15))))) (and (and (= b_6@4  (and b_6@3 (state Result_3Heap Result_3Mask))) (= b_1_1@24  (and b_1_1@23 b_6@4))) (and (= b_1_1@25  (and b_1_1@24 b_2_1@24)) (= b_1_1@26  (and b_1_1@25 (= Used_1Heap@0 Ops_1Heap@2)))))) (and (=> (= (ControlFlow 0 424) 423) anon437_Then_correct) (=> (= (ControlFlow 0 424) 419) anon437_Else_correct)))))))
(let ((anon436_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= Heap@9 Heap@7) (= Mask@15 Mask@13)) (=> (and (and (= neededTransfer@15 neededTransfer@13) (= b_2_1@24 b_2_1@21)) (and (= Used_1Mask@15 Used_1Mask@13) (= (ControlFlow 0 428) 424))) anon97_correct)))))
(let ((anon436_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_1Mask@14 (MapType1Store Used_1Mask@13 x@@25 r_1 (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@13 x@@25 r_1)) takeTransfer@7))))) (and (= b_2_1@22  (and b_2_1@21 (state Used_1Heap@0 Used_1Mask@14))) (= b_2_1@23  (and b_2_1@22 (= (MapType0Select Heap@7 x@@25 r_1) (MapType0Select Used_1Heap@0 x@@25 r_1)))))) (=> (and (and (and (= Mask@14 (MapType1Store Mask@13 x@@25 r_1 (real_2_U (- (U_2_real (MapType1Select Mask@13 x@@25 r_1)) takeTransfer@7)))) (= Heap@8 (MapType0Store Heap@7 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@7 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) x@@25 r_1 (bool_2_U true))))) (and (= Heap@9 Heap@8) (= Mask@15 Mask@14))) (and (and (= neededTransfer@15 neededTransfer@14) (= b_2_1@24 b_2_1@23)) (and (= Used_1Mask@15 Used_1Mask@14) (= (ControlFlow 0 427) 424)))) anon97_correct)))))
(let ((anon435_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 430) 427) anon436_Then_correct) (=> (= (ControlFlow 0 430) 428) anon436_Else_correct)))))
(let ((anon435_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 429) 427) anon436_Then_correct) (=> (= (ControlFlow 0 429) 428) anon436_Else_correct)))))
(let ((anon434_Then_correct  (=> (and (and (and (and b_1_1@23 b_2_1@21) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@13 x@@25 r_1)))) (and (=> (= (ControlFlow 0 431) 429) anon435_Then_correct) (=> (= (ControlFlow 0 431) 430) anon435_Else_correct)))))
(let ((anon434_Else_correct  (=> (not (and (and (and b_1_1@23 b_2_1@21) true) (> neededTransfer@13 0.0))) (=> (and (= Heap@9 Heap@7) (= Mask@15 Mask@13)) (=> (and (and (= neededTransfer@15 neededTransfer@13) (= b_2_1@24 b_2_1@21)) (and (= Used_1Mask@15 Used_1Mask@13) (= (ControlFlow 0 426) 424))) anon97_correct)))))
(let ((anon433_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Used_1Mask@13 Used_1Mask@11) (= b_2_1@21 b_2_1@18)) (and (= neededTransfer@13 FullPerm) (= Ops_1Mask@14 Ops_1Mask@12))) (and (=> (= (ControlFlow 0 434) 431) anon434_Then_correct) (=> (= (ControlFlow 0 434) 426) anon434_Else_correct))))))
(let ((anon433_Then_correct  (=> (and (> takeTransfer@6 0.0) (= neededTransfer@12 (- FullPerm takeTransfer@6))) (=> (and (and (and (= Used_1Mask@12 (MapType1Store Used_1Mask@11 x@@25 r_1 (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@11 x@@25 r_1)) takeTransfer@6)))) (= b_2_1@19  (and b_2_1@18 (state Used_1Heap@0 Used_1Mask@12)))) (and (= b_2_1@20  (and b_2_1@19 (= (MapType0Select Ops_1Heap@2 x@@25 r_1) (MapType0Select Used_1Heap@0 x@@25 r_1)))) (= Ops_1Mask@13 (MapType1Store Ops_1Mask@12 x@@25 r_1 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@12 x@@25 r_1)) takeTransfer@6)))))) (and (and (= Used_1Mask@13 Used_1Mask@12) (= b_2_1@21 b_2_1@20)) (and (= neededTransfer@13 neededTransfer@12) (= Ops_1Mask@14 Ops_1Mask@13)))) (and (=> (= (ControlFlow 0 433) 431) anon434_Then_correct) (=> (= (ControlFlow 0 433) 426) anon434_Else_correct))))))
(let ((anon432_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 436) 433) anon433_Then_correct) (=> (= (ControlFlow 0 436) 434) anon433_Else_correct)))))
(let ((anon432_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 435) 433) anon433_Then_correct) (=> (= (ControlFlow 0 435) 434) anon433_Else_correct)))))
(let ((anon431_Then_correct  (=> (and (and (and (and b_1_1@23 b_2_1@18) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_1Mask@12 x@@25 r_1)))) (and (=> (= (ControlFlow 0 437) 435) anon432_Then_correct) (=> (= (ControlFlow 0 437) 436) anon432_Else_correct)))))
(let ((anon431_Else_correct  (=> (not (and (and (and b_1_1@23 b_2_1@18) true) (> FullPerm 0.0))) (=> (and (and (= Used_1Mask@13 Used_1Mask@11) (= b_2_1@21 b_2_1@18)) (and (= neededTransfer@13 FullPerm) (= Ops_1Mask@14 Ops_1Mask@12))) (and (=> (= (ControlFlow 0 432) 431) anon434_Then_correct) (=> (= (ControlFlow 0 432) 426) anon434_Else_correct))))))
(let ((anon85_correct  (and (=> (= (ControlFlow 0 438) (- 0 440)) (=> (and b_1_1@20 b_2_1@18) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_1Mask@11 null (Tree arg@0))) initNeededTransfer@2)))) (=> (=> (and b_1_1@20 b_2_1@18) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_1Mask@11 null (Tree arg@0))) initNeededTransfer@2))) (=> (= b_5@0  (and b_1_1@20 b_2_1@18)) (=> (and (and (and (= b_5@1  (and b_5@0 (state Result_2Heap Result_2Mask))) (= b_5@2  (and b_5@1 (sumMask Result_2Mask Ops_1Mask@12 Used_1Mask@11)))) (and (= b_5@3  (and (and b_5@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_2Heap Ops_1Mask@12)) (IdenticalOnKnownLocations Used_1Heap@0 Result_2Heap Used_1Mask@11))) (= b_5@4  (and b_5@3 (state Result_2Heap Result_2Mask))))) (and (and (= b_1_1@21  (and b_1_1@20 b_5@4)) (= b_1_1@22  (and b_1_1@21 b_2_1@18))) (and (= b_1_1@23  (and b_1_1@22 (= Used_1Heap@0 Ops_1Heap@2))) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select Used_1Mask@11 x@@25 r_1)) FullPerm))))) (and (=> (= (ControlFlow 0 438) (- 0 439)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 438) 437) anon431_Then_correct) (=> (= (ControlFlow 0 438) 432) anon431_Else_correct))))))))))
(let ((anon430_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= b_2_1@18 b_2_1@15)) (=> (and (and (= Mask@13 Mask@11) (= Used_1Mask@11 Used_1Mask@9)) (and (= Heap@7 Heap@5) (= (ControlFlow 0 443) 438))) anon85_correct)))))
(let ((anon430_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_1Mask@10 (MapType1Store Used_1Mask@9 null (Tree arg@0) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@9 null (Tree arg@0))) takeTransfer@5))))) (=> (and (and (= b_2_1@16  (and b_2_1@15 (state Used_1Heap@0 Used_1Mask@10))) (= TempMask@1 (MapType1Store ZeroMask null (Tree arg@0) (real_2_U FullPerm)))) (and (= b_2_1@17  (and b_2_1@16 (IdenticalOnKnownLocations Heap@5 Used_1Heap@0 TempMask@1))) (= Mask@12 (MapType1Store Mask@11 null (Tree arg@0) (real_2_U (- (U_2_real (MapType1Select Mask@11 null (Tree arg@0))) takeTransfer@5)))))) (=> (and (and (and (forall ((o_7 T@U) (f_11 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_11))))
(let ((A@@24 (FieldTypeInv0 (type f_11))))
 (=> (and (and (= (type o_7) RefType) (= (type f_11) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) o_7 f_11)) (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|Tree#sm| (MapType0Select Heap@5 x@@25 l))) o_7 f_11)))) (U_2_bool (MapType1Select newPMask@0 o_7 f_11)))))
 :qid |stdinbpl.1567:47|
 :skolemid |83|
 :pattern ( (MapType1Select newPMask@0 o_7 f_11))
)) (= Heap@6 (MapType0Store Heap@5 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) newPMask@0))) (and (= neededTransfer@11 neededTransfer@10) (= b_2_1@18 b_2_1@17))) (and (and (= Mask@13 Mask@12) (= Used_1Mask@11 Used_1Mask@10)) (and (= Heap@7 Heap@6) (= (ControlFlow 0 442) 438)))) anon85_correct))))))
(let ((anon429_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 445) 442) anon430_Then_correct) (=> (= (ControlFlow 0 445) 443) anon430_Else_correct)))))
(let ((anon429_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 444) 442) anon430_Then_correct) (=> (= (ControlFlow 0 444) 443) anon430_Else_correct)))))
(let ((anon428_Then_correct  (=> (and (and (and (and b_1_1@20 b_2_1@15) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@11 null (Tree arg@0))))) (and (=> (= (ControlFlow 0 446) 444) anon429_Then_correct) (=> (= (ControlFlow 0 446) 445) anon429_Else_correct)))))
(let ((anon428_Else_correct  (=> (not (and (and (and b_1_1@20 b_2_1@15) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= b_2_1@18 b_2_1@15)) (=> (and (and (= Mask@13 Mask@11) (= Used_1Mask@11 Used_1Mask@9)) (and (= Heap@7 Heap@5) (= (ControlFlow 0 441) 438))) anon85_correct)))))
(let ((anon427_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_1Mask@12 Ops_1Mask@10) (= Used_1Mask@9 Used_1Mask@7)) (and (= b_2_1@15 b_2_1@12) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 449) 446) anon428_Then_correct) (=> (= (ControlFlow 0 449) 441) anon428_Else_correct))))))
(let ((anon427_Then_correct  (=> (> takeTransfer@4 0.0) (=> (and (= neededTransfer@8 (- FullPerm takeTransfer@4)) (= Used_1Mask@8 (MapType1Store Used_1Mask@7 null (Tree arg@0) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@7 null (Tree arg@0))) takeTransfer@4))))) (=> (and (and (and (= b_2_1@13  (and b_2_1@12 (state Used_1Heap@0 Used_1Mask@8))) (= TempMask@0 (MapType1Store ZeroMask null (Tree arg@0) (real_2_U FullPerm)))) (and (= b_2_1@14  (and b_2_1@13 (IdenticalOnKnownLocations Ops_1Heap@2 Used_1Heap@0 TempMask@0))) (= Ops_1Mask@11 (MapType1Store Ops_1Mask@10 null (Tree arg@0) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@10 null (Tree arg@0))) takeTransfer@4)))))) (and (and (= Ops_1Mask@12 Ops_1Mask@11) (= Used_1Mask@9 Used_1Mask@8)) (and (= b_2_1@15 b_2_1@14) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 448) 446) anon428_Then_correct) (=> (= (ControlFlow 0 448) 441) anon428_Else_correct)))))))
(let ((anon426_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 451) 448) anon427_Then_correct) (=> (= (ControlFlow 0 451) 449) anon427_Else_correct)))))
(let ((anon426_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 450) 448) anon427_Then_correct) (=> (= (ControlFlow 0 450) 449) anon427_Else_correct)))))
(let ((anon425_Then_correct  (=> (and (and (and (and b_1_1@20 b_2_1@12) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_1Mask@10 null (Tree arg@0))))) (and (=> (= (ControlFlow 0 452) 450) anon426_Then_correct) (=> (= (ControlFlow 0 452) 451) anon426_Else_correct)))))
(let ((anon425_Else_correct  (=> (not (and (and (and b_1_1@20 b_2_1@12) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@12 Ops_1Mask@10) (= Used_1Mask@9 Used_1Mask@7)) (and (= b_2_1@15 b_2_1@12) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 447) 446) anon428_Then_correct) (=> (= (ControlFlow 0 447) 441) anon428_Else_correct))))))
(let ((anon73_correct  (=> (and (= arg@0 (MapType0Select Result_1Heap x@@25 l)) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select Used_1Mask@7 null (Tree arg@0))) FullPerm))) (and (=> (= (ControlFlow 0 453) (- 0 454)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 453) 452) anon425_Then_correct) (=> (= (ControlFlow 0 453) 447) anon425_Else_correct)))))))
(let ((anon424_Else_correct  (=> (and (not b_1_1@20) (= (ControlFlow 0 458) 453)) anon73_correct)))
(let ((anon424_Then_correct  (=> b_1_1@20 (and (=> (= (ControlFlow 0 456) (- 0 457)) (HasDirectPerm Result_1Mask x@@25 l)) (=> (HasDirectPerm Result_1Mask x@@25 l) (=> (= (ControlFlow 0 456) 453) anon73_correct))))))
(let ((anon423_Then_correct  (=> (and b_1_1@20 b_2_1@12) (and (=> (= (ControlFlow 0 459) 456) anon424_Then_correct) (=> (= (ControlFlow 0 459) 458) anon424_Else_correct)))))
(let ((anon423_Else_correct  (=> (and (not (and b_1_1@20 b_2_1@12)) (= (ControlFlow 0 455) 453)) anon73_correct)))
(let ((anon70_correct  (and (=> (= (ControlFlow 0 460) (- 0 461)) (=> (and b_1_1@17 b_2_1@12) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_1Mask@7 x@@25 l)) initNeededTransfer@1)))) (=> (=> (and b_1_1@17 b_2_1@12) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_1Mask@7 x@@25 l)) initNeededTransfer@1))) (=> (and (and (and (= b_4@0  (and b_1_1@17 b_2_1@12)) (= b_4@1  (and b_4@0 (state Result_1Heap Result_1Mask)))) (and (= b_4@2  (and b_4@1 (sumMask Result_1Mask Ops_1Mask@10 Used_1Mask@7))) (= b_4@3  (and (and b_4@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_1Heap Ops_1Mask@10)) (IdenticalOnKnownLocations Used_1Heap@0 Result_1Heap Used_1Mask@7))))) (and (and (= b_4@4  (and b_4@3 (state Result_1Heap Result_1Mask))) (= b_1_1@18  (and b_1_1@17 b_4@4))) (and (= b_1_1@19  (and b_1_1@18 b_2_1@12)) (= b_1_1@20  (and b_1_1@19 (= Used_1Heap@0 Ops_1Heap@2)))))) (and (=> (= (ControlFlow 0 460) 459) anon423_Then_correct) (=> (= (ControlFlow 0 460) 455) anon423_Else_correct)))))))
(let ((anon422_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= neededTransfer@7 neededTransfer@5) (= Heap@5 Heap@3)) (=> (and (and (= b_2_1@12 b_2_1@9) (= Mask@11 Mask@9)) (and (= Used_1Mask@7 Used_1Mask@5) (= (ControlFlow 0 464) 460))) anon70_correct)))))
(let ((anon422_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_1Mask@6 (MapType1Store Used_1Mask@5 x@@25 l (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@5 x@@25 l)) takeTransfer@3))))) (and (= b_2_1@10  (and b_2_1@9 (state Used_1Heap@0 Used_1Mask@6))) (= b_2_1@11  (and b_2_1@10 (= (MapType0Select Heap@3 x@@25 l) (MapType0Select Used_1Heap@0 x@@25 l)))))) (=> (and (and (and (= Mask@10 (MapType1Store Mask@9 x@@25 l (real_2_U (- (U_2_real (MapType1Select Mask@9 x@@25 l)) takeTransfer@3)))) (= Heap@4 (MapType0Store Heap@3 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@3 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) x@@25 l (bool_2_U true))))) (and (= neededTransfer@7 neededTransfer@6) (= Heap@5 Heap@4))) (and (and (= b_2_1@12 b_2_1@11) (= Mask@11 Mask@10)) (and (= Used_1Mask@7 Used_1Mask@6) (= (ControlFlow 0 463) 460)))) anon70_correct)))))
(let ((anon421_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 466) 463) anon422_Then_correct) (=> (= (ControlFlow 0 466) 464) anon422_Else_correct)))))
(let ((anon421_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 465) 463) anon422_Then_correct) (=> (= (ControlFlow 0 465) 464) anon422_Else_correct)))))
(let ((anon420_Then_correct  (=> (and (and (and (and b_1_1@17 b_2_1@9) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@9 x@@25 l)))) (and (=> (= (ControlFlow 0 467) 465) anon421_Then_correct) (=> (= (ControlFlow 0 467) 466) anon421_Else_correct)))))
(let ((anon420_Else_correct  (=> (not (and (and (and b_1_1@17 b_2_1@9) true) (> neededTransfer@5 0.0))) (=> (and (= neededTransfer@7 neededTransfer@5) (= Heap@5 Heap@3)) (=> (and (and (= b_2_1@12 b_2_1@9) (= Mask@11 Mask@9)) (and (= Used_1Mask@7 Used_1Mask@5) (= (ControlFlow 0 462) 460))) anon70_correct)))))
(let ((anon419_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Used_1Mask@5 Used_1Mask@3) (= b_2_1@9 b_2_1@6)) (and (= neededTransfer@5 FullPerm) (= Ops_1Mask@10 Ops_1Mask@8))) (and (=> (= (ControlFlow 0 470) 467) anon420_Then_correct) (=> (= (ControlFlow 0 470) 462) anon420_Else_correct))))))
(let ((anon419_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_1Mask@4 (MapType1Store Used_1Mask@3 x@@25 l (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@3 x@@25 l)) takeTransfer@2)))) (= b_2_1@7  (and b_2_1@6 (state Used_1Heap@0 Used_1Mask@4)))) (and (= b_2_1@8  (and b_2_1@7 (= (MapType0Select Ops_1Heap@2 x@@25 l) (MapType0Select Used_1Heap@0 x@@25 l)))) (= Ops_1Mask@9 (MapType1Store Ops_1Mask@8 x@@25 l (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@8 x@@25 l)) takeTransfer@2)))))) (and (and (= Used_1Mask@5 Used_1Mask@4) (= b_2_1@9 b_2_1@8)) (and (= neededTransfer@5 neededTransfer@4) (= Ops_1Mask@10 Ops_1Mask@9)))) (and (=> (= (ControlFlow 0 469) 467) anon420_Then_correct) (=> (= (ControlFlow 0 469) 462) anon420_Else_correct))))))
(let ((anon418_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 472) 469) anon419_Then_correct) (=> (= (ControlFlow 0 472) 470) anon419_Else_correct)))))
(let ((anon418_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 471) 469) anon419_Then_correct) (=> (= (ControlFlow 0 471) 470) anon419_Else_correct)))))
(let ((anon417_Then_correct  (=> (and (and (and (and b_1_1@17 b_2_1@6) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_1Mask@8 x@@25 l)))) (and (=> (= (ControlFlow 0 473) 471) anon418_Then_correct) (=> (= (ControlFlow 0 473) 472) anon418_Else_correct)))))
(let ((anon417_Else_correct  (=> (not (and (and (and b_1_1@17 b_2_1@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_1Mask@5 Used_1Mask@3) (= b_2_1@9 b_2_1@6)) (and (= neededTransfer@5 FullPerm) (= Ops_1Mask@10 Ops_1Mask@8))) (and (=> (= (ControlFlow 0 468) 467) anon420_Then_correct) (=> (= (ControlFlow 0 468) 462) anon420_Else_correct))))))
(let ((anon58_correct  (and (=> (= (ControlFlow 0 474) (- 0 476)) (=> (and b_1_1@12 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 x@@25 v_2)) initNeededTransfer@0)))) (=> (=> (and b_1_1@12 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 x@@25 v_2)) initNeededTransfer@0))) (=> (= b_3@0  (and b_1_1@12 b_2_1@6)) (=> (and (and (and (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0))) (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask@8 Used_1Mask@3)))) (and (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@2 ResultHeap Ops_1Mask@8)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3))) (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0))))) (and (and (= b_1_1@15  (and b_1_1@12 b_3@4)) (= b_1_1@16  (and b_1_1@15 b_2_1@6))) (and (= b_1_1@17  (and b_1_1@16 (= Used_1Heap@0 Ops_1Heap@2))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select Used_1Mask@3 x@@25 l)) FullPerm))))) (and (=> (= (ControlFlow 0 474) (- 0 475)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 474) 473) anon417_Then_correct) (=> (= (ControlFlow 0 474) 468) anon417_Else_correct))))))))))
(let ((anon416_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@9 Mask@7) (= neededTransfer@3 neededTransfer@1)) (=> (and (and (= Heap@3 Heap@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 479) 474))) anon58_correct)))))
(let ((anon416_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType1Store Used_1Mask@1 x@@25 v_2 (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 x@@25 v_2)) takeTransfer@1))))) (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= b_2_1@5  (and b_2_1@4 (= (U_2_int (MapType0Select Heap@1 x@@25 v_2)) (U_2_int (MapType0Select Used_1Heap@0 x@@25 v_2))))))) (=> (and (and (and (= Mask@8 (MapType1Store Mask@7 x@@25 v_2 (real_2_U (- (U_2_real (MapType1Select Mask@7 x@@25 v_2)) takeTransfer@1)))) (= Heap@2 (MapType0Store Heap@1 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1)) (MapType1Store (MapType0Select Heap@1 null (|wand#sm| x@@25 FullPerm x@@25 FullPerm x@@25 (|Seq#Drop| plvs@0 1) x@@25 FullPerm x@@25 (|Seq#Drop| (vals Heap@@18 x@@25) 1))) x@@25 v_2 (bool_2_U true))))) (and (= Mask@9 Mask@8) (= neededTransfer@3 neededTransfer@2))) (and (and (= Heap@3 Heap@2) (= b_2_1@6 b_2_1@5)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 478) 474)))) anon58_correct)))))
(let ((anon415_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 481) 478) anon416_Then_correct) (=> (= (ControlFlow 0 481) 479) anon416_Else_correct)))))
(let ((anon415_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 480) 478) anon416_Then_correct) (=> (= (ControlFlow 0 480) 479) anon416_Else_correct)))))
(let ((anon414_Then_correct  (=> (and (and (and (and b_1_1@12 b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@7 x@@25 v_2)))) (and (=> (= (ControlFlow 0 482) 480) anon415_Then_correct) (=> (= (ControlFlow 0 482) 481) anon415_Else_correct)))))
(let ((anon414_Else_correct  (=> (not (and (and (and b_1_1@12 b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@9 Mask@7) (= neededTransfer@3 neededTransfer@1)) (=> (and (and (= Heap@3 Heap@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 477) 474))) anon58_correct)))))
(let ((anon413_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@8 Ops_1Mask@6) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 485) 482) anon414_Then_correct) (=> (= (ControlFlow 0 485) 477) anon414_Else_correct))))))
(let ((anon413_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@0 (- FullPerm takeTransfer@0))) (=> (and (and (and (= Used_1Mask@0 (MapType1Store ZeroMask x@@25 v_2 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@25 v_2)) takeTransfer@0)))) (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0)))) (and (= b_2_1@2  (and b_2_1@1 (= (U_2_int (MapType0Select Ops_1Heap@2 x@@25 v_2)) (U_2_int (MapType0Select Used_1Heap@0 x@@25 v_2))))) (= Ops_1Mask@7 (MapType1Store Ops_1Mask@6 x@@25 v_2 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@6 x@@25 v_2)) takeTransfer@0)))))) (and (and (= Ops_1Mask@8 Ops_1Mask@7) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 484) 482) anon414_Then_correct) (=> (= (ControlFlow 0 484) 477) anon414_Else_correct))))))
(let ((anon412_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 487) 484) anon413_Then_correct) (=> (= (ControlFlow 0 487) 485) anon413_Else_correct)))))
(let ((anon412_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 486) 484) anon413_Then_correct) (=> (= (ControlFlow 0 486) 485) anon413_Else_correct)))))
(let ((anon411_Then_correct  (=> (and (and (and (and b_1_1@12 b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_1Mask@6 x@@25 v_2)))) (and (=> (= (ControlFlow 0 488) 486) anon412_Then_correct) (=> (= (ControlFlow 0 488) 487) anon412_Else_correct)))))
(let ((anon411_Else_correct  (=> (not (and (and (and b_1_1@12 b_2_1@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@8 Ops_1Mask@6) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 483) 482) anon414_Then_correct) (=> (= (ControlFlow 0 483) 477) anon414_Else_correct))))))
(let ((anon410_Else_correct  (=> (and (not (= x@@25 null)) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask x@@25 v_2)) FullPerm))) (and (=> (= (ControlFlow 0 489) (- 0 490)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 489) 488) anon411_Then_correct) (=> (= (ControlFlow 0 489) 483) anon411_Else_correct)))))))
(let ((anon410_Then_correct  (=> (and (= x@@25 null) (= b_1_1@13  (and b_1_1@12 b_2_1@0))) (=> (and (and (and (= b_1_1@14  (and b_1_1@13 (= Used_1Heap@0 Ops_1Heap@2))) (= Heap@12 Heap@1)) (and (= Mask@18 Mask@7) (= Ops_1Mask@17 Ops_1Mask@6))) (and (and (= b_1_1@30 b_1_1@14) (= Used_1Mask@20 ZeroMask)) (and (= b_2_1@31 b_2_1@0) (= (ControlFlow 0 402) 400)))) anon113_correct))))
(let ((anon409_Then_correct  (=> b_1_1@12 (and (=> (= (ControlFlow 0 491) 402) anon410_Then_correct) (=> (= (ControlFlow 0 491) 489) anon410_Else_correct)))))
(let ((anon409_Else_correct  (=> (and (and (and (not b_1_1@12) (= Heap@12 Heap@1)) (and (= Mask@18 Mask@7) (= Ops_1Mask@17 Ops_1Mask@6))) (and (and (= b_1_1@30 b_1_1@12) (= Used_1Mask@20 ZeroMask)) (and (= b_2_1@31 b_2_1@0) (= (ControlFlow 0 401) 400)))) anon113_correct)))
(let ((anon408_Then_correct  (=> (and b_1_1@12 (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 492) 491) anon409_Then_correct) (=> (= (ControlFlow 0 492) 401) anon409_Else_correct)))))
(let ((anon408_Else_correct  (=> (not b_1_1@12) (=> (and (= Ops_1Heap@12 Ops_1Heap@2) (= b_1_1@35 b_1_1@12)) (=> (and (and (= Ops_1Mask@19 Ops_1Mask@6) (= Mask@19 Mask@7)) (and (= Heap@13 Heap@1) (= (ControlFlow 0 394) 392))) anon119_correct)))))
(let ((anon42_correct  (=> (and (= b_1_1@11  (and b_1_1@10 (state Ops_1Heap@2 Ops_1Mask@6))) (= b_1_1@12  (and b_1_1@11 (state Ops_1Heap@2 Ops_1Mask@6)))) (and (=> (= (ControlFlow 0 493) 492) anon408_Then_correct) (=> (= (ControlFlow 0 493) 394) anon408_Else_correct)))))
(let ((anon41_correct  (=> (= b_1_1@9  (and b_1_1@8 (|Seq#Equal| (vals Ops_1Heap@1 (MapType0Select Ops_1Heap@1 x@@25 l)) (|Seq#Drop| plvs@0 1)))) (=> (and (and (= b_1_1@10 b_1_1@9) (= Ops_1Mask@6 Ops_1Mask@5)) (and (= Ops_1Heap@2 Ops_1Heap@1) (= (ControlFlow 0 497) 493))) anon42_correct))))
(let ((anon40_correct  (=> (and (= Ops_1Mask@4 (MapType1Store Ops_1Mask@3 null (Tree (MapType0Select Ops_1Heap@0 x@@25 l)) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@3 null (Tree (MapType0Select Ops_1Heap@0 x@@25 l)))) FullPerm)))) (= b_1_1@7  (and b_1_1@6 (IdenticalOnKnownLocations Ops_1Heap@0 ExhaleHeap@0 Ops_1Mask@4)))) (=> (and (and (= Ops_1Heap@1 ExhaleHeap@0) (= Ops_1Mask@5 Ops_1Mask@4)) (and (= b_1_1@8 false) (= (ControlFlow 0 500) 497))) anon41_correct))))
(let ((anon407_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 503) 500)) anon40_correct)))
(let ((anon407_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 501) (- 0 502)) (<= FullPerm (U_2_real (MapType1Select Ops_1Mask@3 null (Tree (MapType0Select Ops_1Heap@0 x@@25 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_1Mask@3 null (Tree (MapType0Select Ops_1Heap@0 x@@25 l))))) (=> (= (ControlFlow 0 501) 500) anon40_correct))))))
(let ((anon406_Else_correct  (=> (and (and (= Ops_1Heap@1 Ops_1Heap@0) (= Ops_1Mask@5 Ops_1Mask@3)) (and (= b_1_1@8 b_1_1@6) (= (ControlFlow 0 499) 497))) anon41_correct)))
(let ((anon405_Then_correct  (=> b_1_1@6 (and (=> (= (ControlFlow 0 504) (- 0 505)) (HasDirectPerm Ops_1Mask@3 x@@25 l)) (=> (HasDirectPerm Ops_1Mask@3 x@@25 l) (and (and (=> (= (ControlFlow 0 504) 499) anon406_Else_correct) (=> (= (ControlFlow 0 504) 501) anon407_Then_correct)) (=> (= (ControlFlow 0 504) 503) anon407_Else_correct)))))))
(let ((anon405_Else_correct  (=> (not b_1_1@6) (=> (and (and (= Ops_1Heap@1 Ops_1Heap@0) (= Ops_1Mask@5 Ops_1Mask@3)) (and (= b_1_1@8 b_1_1@6) (= (ControlFlow 0 498) 497))) anon41_correct))))
(let ((anon404_Then_correct  (=> (and b_1_1@5 (= b_1_1@6  (and b_1_1@5 (state Ops_1Heap@0 Ops_1Mask@3)))) (and (=> (= (ControlFlow 0 506) 504) anon405_Then_correct) (=> (= (ControlFlow 0 506) 498) anon405_Else_correct)))))
(let ((anon404_Else_correct  (=> (not b_1_1@5) (=> (and (and (= b_1_1@10 b_1_1@5) (= Ops_1Mask@6 Ops_1Mask@3)) (and (= Ops_1Heap@2 Ops_1Heap@0) (= (ControlFlow 0 496) 493))) anon42_correct))))
(let ((anon34_correct  (=> (and (and (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 null (Tree (MapType0Select Ops_1Heap@0 x@@25 l)) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@1 null (Tree (MapType0Select Ops_1Heap@0 x@@25 l)))) FullPerm)))) (= b_1_1@4  (and b_1_1@3 (state Ops_1Heap@0 Ops_1Mask@2)))) (and (= b_1_1@5 b_1_1@4) (= Ops_1Mask@3 Ops_1Mask@2))) (and (=> (= (ControlFlow 0 508) 506) anon404_Then_correct) (=> (= (ControlFlow 0 508) 496) anon404_Else_correct)))))
(let ((anon403_Else_correct  (=> (and (not b_1_1@3) (= (ControlFlow 0 511) 508)) anon34_correct)))
(let ((anon403_Then_correct  (=> b_1_1@3 (and (=> (= (ControlFlow 0 509) (- 0 510)) (HasDirectPerm Ops_1Mask@1 x@@25 l)) (=> (HasDirectPerm Ops_1Mask@1 x@@25 l) (=> (= (ControlFlow 0 509) 508) anon34_correct))))))
(let ((anon402_Then_correct  (=> b_1_1@3 (and (=> (= (ControlFlow 0 512) 509) anon403_Then_correct) (=> (= (ControlFlow 0 512) 511) anon403_Else_correct)))))
(let ((anon402_Else_correct  (=> (not b_1_1@3) (=> (and (= b_1_1@5 b_1_1@3) (= Ops_1Mask@3 Ops_1Mask@1)) (and (=> (= (ControlFlow 0 507) 506) anon404_Then_correct) (=> (= (ControlFlow 0 507) 496) anon404_Else_correct))))))
(let ((anon401_Then_correct  (=> b_1_1@3 (and (=> (= (ControlFlow 0 513) 512) anon402_Then_correct) (=> (= (ControlFlow 0 513) 507) anon402_Else_correct)))))
(let ((anon401_Else_correct  (=> (not b_1_1@3) (=> (and (and (= b_1_1@10 b_1_1@3) (= Ops_1Mask@6 Ops_1Mask@1)) (and (= Ops_1Heap@2 Ops_1Heap@0) (= (ControlFlow 0 495) 493))) anon42_correct))))
(let ((anon400_Else_correct  (=> (not b_1_1@0) (=> (and (= Ops_1Mask@1 ZeroMask) (= b_1_1@3 b_1_1@0)) (and (=> (= (ControlFlow 0 515) 513) anon401_Then_correct) (=> (= (ControlFlow 0 515) 495) anon401_Else_correct))))))
(let ((anon400_Then_correct  (=> (and b_1_1@0 (= b_1_1@1  (and b_1_1@0 (not (= x@@25 null))))) (=> (and (and (= Ops_1Mask@0 (MapType1Store ZeroMask x@@25 l (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@25 l)) FullPerm)))) (= b_1_1@2  (and b_1_1@1 (state Ops_1Heap@0 Ops_1Mask@0)))) (and (= Ops_1Mask@1 Ops_1Mask@0) (= b_1_1@3 b_1_1@2))) (and (=> (= (ControlFlow 0 514) 513) anon401_Then_correct) (=> (= (ControlFlow 0 514) 495) anon401_Else_correct))))))
(let ((anon399_Then_correct  (=> b_1_1@0 (and (=> (= (ControlFlow 0 516) 514) anon400_Then_correct) (=> (= (ControlFlow 0 516) 515) anon400_Else_correct)))))
(let ((anon399_Else_correct  (=> (not b_1_1@0) (=> (and (and (= b_1_1@10 b_1_1@0) (= Ops_1Mask@6 ZeroMask)) (and (= Ops_1Heap@2 Ops_1Heap@0) (= (ControlFlow 0 494) 493))) anon42_correct))))
(let ((anon396_Else_correct  (=> (not (= (MapType0Select Heap@1 x@@25 l) null)) (=> (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 517) 516) anon399_Then_correct) (=> (= (ControlFlow 0 517) 494) anon399_Else_correct))))))
(let ((anon394_Else_correct  (=> (and (= plvs@0 (vals Heap@1 (MapType0Select Heap@1 x@@25 l))) (state Heap@1 Mask@7)) (and (=> (= (ControlFlow 0 527) (- 0 528)) (HasDirectPerm Mask@7 x@@25 l)) (=> (HasDirectPerm Mask@7 x@@25 l) (and (=> (= (ControlFlow 0 527) 524) anon396_Then_correct) (=> (= (ControlFlow 0 527) 517) anon396_Else_correct)))))))
(let ((anon20_correct true))
(let ((anon395_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon20_correct)))
(let ((anon395_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (Tree (MapType0Select Heap@1 x@@25 l)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (Tree (MapType0Select Heap@1 x@@25 l))))) (=> (= (ControlFlow 0 2) 1) anon20_correct))))))
(let ((anon17_correct  (=> (and (state Heap@1 Mask@7) (state Heap@1 Mask@7)) (and (=> (= (ControlFlow 0 529) (- 0 530)) (HasDirectPerm Mask@7 x@@25 l)) (=> (HasDirectPerm Mask@7 x@@25 l) (and (and (=> (= (ControlFlow 0 529) 527) anon394_Else_correct) (=> (= (ControlFlow 0 529) 2) anon395_Then_correct)) (=> (= (ControlFlow 0 529) 4) anon395_Else_correct)))))))
(let ((anon393_Else_correct  (=> (and (not (= x@@25 null)) (not (= x@@25 null))) (=> (and (and (and (and (= Mask@2 (MapType1Store Mask@1 x@@25 v_2 (real_2_U (+ (U_2_real (MapType1Select Mask@1 x@@25 v_2)) FullPerm)))) (state Heap@1 Mask@2)) (and (not (= x@@25 null)) (= Mask@3 (MapType1Store Mask@2 x@@25 l (real_2_U (+ (U_2_real (MapType1Select Mask@2 x@@25 l)) FullPerm)))))) (and (and (state Heap@1 Mask@3) (= Mask@4 (MapType1Store Mask@3 null (Tree (MapType0Select Heap@1 x@@25 l)) (real_2_U (+ (U_2_real (MapType1Select Mask@3 null (Tree (MapType0Select Heap@1 x@@25 l)))) FullPerm))))) (and (InsidePredicate (Tree x@@25) (MapType0Select Heap@1 null (Tree x@@25)) (Tree (MapType0Select Heap@1 x@@25 l)) (MapType0Select Heap@1 null (Tree (MapType0Select Heap@1 x@@25 l)))) (state Heap@1 Mask@4)))) (and (and (and (not (= x@@25 null)) (= Mask@5 (MapType1Store Mask@4 x@@25 r_1 (real_2_U (+ (U_2_real (MapType1Select Mask@4 x@@25 r_1)) FullPerm))))) (and (state Heap@1 Mask@5) (= Mask@6 (MapType1Store Mask@5 null (Tree (MapType0Select Heap@1 x@@25 r_1)) (real_2_U (+ (U_2_real (MapType1Select Mask@5 null (Tree (MapType0Select Heap@1 x@@25 r_1)))) FullPerm)))))) (and (and (InsidePredicate (Tree x@@25) (MapType0Select Heap@1 null (Tree x@@25)) (Tree (MapType0Select Heap@1 x@@25 r_1)) (MapType0Select Heap@1 null (Tree (MapType0Select Heap@1 x@@25 r_1)))) (state Heap@1 Mask@6)) (and (= Mask@7 Mask@6) (= (ControlFlow 0 532) 529))))) anon17_correct))))
(let ((anon393_Then_correct  (=> (= x@@25 null) (=> (and (= Mask@7 Mask@1) (= (ControlFlow 0 531) 529)) anon17_correct))))
(let ((anon392_Else_correct  (=> (and (HasDirectPerm Mask@1 null (Tree x@@25)) (= Heap@1 Heap@@18)) (and (=> (= (ControlFlow 0 534) 531) anon393_Then_correct) (=> (= (ControlFlow 0 534) 532) anon393_Else_correct)))))
(let ((anon392_Then_correct  (=> (not (HasDirectPerm Mask@1 null (Tree x@@25))) (=> (and (= Heap@0 (MapType0Store Heap@@18 null (Tree x@@25) newVersion@0)) (= Heap@1 Heap@0)) (and (=> (= (ControlFlow 0 533) 531) anon393_Then_correct) (=> (= (ControlFlow 0 533) 532) anon393_Else_correct))))))
(let ((anon12_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (Tree x@@25) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (Tree x@@25))) FullPerm)))) (and (=> (= (ControlFlow 0 535) 533) anon392_Then_correct) (=> (= (ControlFlow 0 535) 534) anon392_Else_correct)))))
(let ((anon391_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 538) 535)) anon12_correct)))
(let ((anon391_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 536) (- 0 537)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Tree x@@25)))) (=> (= (ControlFlow 0 536) 535) anon12_correct))))))
(let ((anon386_Else_correct  (=> (and (and (U_2_bool (MapType0Select Heap@@18 p_1 $allocated)) (state Heap@@18 Mask@0)) (and (|Tree#trigger| Heap@@18 (Tree x@@25)) (= (MapType0Select Heap@@18 null (Tree x@@25)) (FrameFragment (ite (= x@@25 null) EmptyFrame (CombineFrames (FrameFragment (MapType0Select Heap@@18 x@@25 v_2)) (CombineFrames (FrameFragment (MapType0Select Heap@@18 x@@25 l)) (CombineFrames (MapType0Select Heap@@18 null (Tree (MapType0Select Heap@@18 x@@25 l))) (CombineFrames (FrameFragment (MapType0Select Heap@@18 x@@25 r_1)) (MapType0Select Heap@@18 null (Tree (MapType0Select Heap@@18 x@@25 r_1)))))))))))) (and (=> (= (ControlFlow 0 539) 536) anon391_Then_correct) (=> (= (ControlFlow 0 539) 538) anon391_Else_correct)))))
(let ((anon0_correct  (=> (state Heap@@18 ZeroMask) (=> (and (= AssumeFunctionsAbove (- 0 1)) (U_2_bool (MapType0Select Heap@@18 x@@25 $allocated))) (=> (and (and (not (= x@@25 null)) (= Mask@0 (MapType1Store ZeroMask null (Tree x@@25) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Tree x@@25))) FullPerm))))) (and (state Heap@@18 Mask@0) (state Heap@@18 Mask@0))) (and (=> (= (ControlFlow 0 550) 549) anon386_Then_correct) (=> (= (ControlFlow 0 550) 539) anon386_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 551) 550) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
