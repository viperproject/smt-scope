(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:19:11
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref> 0)
(declare-sort Seq<Int> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<f> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<f>To$Snap ($FVF<f>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<f> ($Snap) $FVF<f>)
(assert (forall ((x $FVF<f>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<f>($SortWrappers.$FVF<f>To$Snap x)))
    :pattern (($SortWrappers.$FVF<f>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<f>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<f>To$Snap($SortWrappers.$SnapTo$FVF<f> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<f> x))
    :qid |$Snap.$FVF<f>To$SnapTo$FVF<f>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
; /field_value_functions_declarations.smt2 [f: Int]
(declare-fun $FVF.domain_f ($FVF<f>) Set<$Ref>)
(declare-fun $FVF.lookup_f ($FVF<f> $Ref) Int)
(declare-fun $FVF.after_f ($FVF<f> $FVF<f>) Bool)
(declare-fun $FVF.loc_f (Int $Ref) Bool)
(declare-fun $FVF.perm_f ($FPM $Ref) $Perm)
(declare-const $fvfTOP_f $FVF<f>)
; Declaring symbols related to program functions (from program analysis)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [f: Int]
(assert (forall ((vs $FVF<f>) (ws $FVF<f>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_f vs) ($FVF.domain_f ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_f vs))
            (= ($FVF.lookup_f vs x) ($FVF.lookup_f ws x)))
          :pattern (($FVF.lookup_f vs x) ($FVF.lookup_f ws x))
          :qid |qp.$FVF<f>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<f>To$Snap vs)
              ($SortWrappers.$FVF<f>To$Snap ws)
              )
    :qid |qp.$FVF<f>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_f pm r))
    :pattern (($FVF.perm_f pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_f f r) true)
    :pattern (($FVF.loc_f f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- bfind_orig ----------
(declare-const S@0@01 Seq<$Ref>)
(declare-const x@1@01 Int)
(declare-const p@2@01 $Perm)
(declare-const index@3@01 Int)
(declare-const S@4@01 Seq<$Ref>)
(declare-const x@5@01 Int)
(declare-const p@6@01 $Perm)
(declare-const index@7@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] p > none
(assert (> p@6@01 $Perm.No))
(assert (=
  ($Snap.second $t@8@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.second ($Snap.second $t@8@01)))))
(assert (= ($Snap.first ($Snap.second $t@8@01)) $Snap.unit))
; [eval] p < write
(assert (< p@6@01 $Perm.Write))
(assert (=
  ($Snap.second ($Snap.second $t@8@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@8@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@8@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@8@01))) $Snap.unit))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@9@01 Int)
(declare-const j@10@01 Int)
(push) ; 2
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
; [then-branch: 0 | !(i@9@01 in [0..|S@4@01|]) | live]
; [else-branch: 0 | i@9@01 in [0..|S@4@01|] | live]
(push) ; 4
; [then-branch: 0 | !(i@9@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | i@9@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
; [then-branch: 1 | !(j@10@01 in [0..|S@4@01|]) | live]
; [else-branch: 1 | j@10@01 in [0..|S@4@01|] | live]
(push) ; 6
; [then-branch: 1 | !(j@10@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 1 | j@10@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01))
; [eval] i != j
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01))))
(push) ; 3
; [then-branch: 2 | i@9@01 in [0..|S@4@01|] && j@10@01 in [0..|S@4@01|] && i@9@01 != j@10@01 | live]
; [else-branch: 2 | !(i@9@01 in [0..|S@4@01|] && j@10@01 in [0..|S@4@01|] && i@9@01 != j@10@01) | live]
(push) ; 4
; [then-branch: 2 | i@9@01 in [0..|S@4@01|] && j@10@01 in [0..|S@4@01|] && i@9@01 != j@10@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
    (not (= i@9@01 j@10@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 5
(assert (not (>= i@9@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@9@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@10@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j@10@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(i@9@01 in [0..|S@4@01|] && j@10@01 in [0..|S@4@01|] && i@9@01 != j@10@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
      (not (= i@9@01 j@10@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
      (not (= i@9@01 j@10@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
    (not (= i@9@01 j@10@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
      (not (= i@9@01 j@10@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_contains
    (Seq_range 0 (Seq_length S@4@01))
    j@10@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@4@01))
    j@10@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@4@01))
    j@10@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_index
    S@4@01
    j@10@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_index
    S@4@01
    j@10@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_index
    S@4@01
    j@10@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01) (Seq_index
    S@4@01
    i@9@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) j@10@01) (Seq_index
    S@4@01
    i@9@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) j@10@01) (Seq_index
    S@4@01
    i@9@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
            (not (= i@9@01 j@10@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
          (not (= i@9@01 j@10@01))))))
  :pattern ((Seq_index S@4@01 i@9@01) (Seq_index S@4@01 j@10@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@9@01 Int) (j@10@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01)
        (not (= i@9@01 j@10@01))))
    (not (= (Seq_index S@4@01 i@9@01) (Seq_index S@4@01 j@10@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_contains
    (Seq_range 0 (Seq_length S@4@01))
    j@10@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@4@01))
    j@10@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_index
    S@4@01
    j@10@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) i@9@01) (Seq_index
    S@4@01
    j@10@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@4@01)) j@10@01) (Seq_index
    S@4@01
    i@9@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@4@01)) j@10@01) (Seq_index
    S@4@01
    i@9@01))
  :pattern ((Seq_index S@4@01 i@9@01) (Seq_index S@4@01 j@10@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@8@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@01)))))))
(declare-const i@11@01 Int)
(push) ; 2
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@11@01))
; [eval] S[i]
(push) ; 3
(assert (not (>= i@11@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< i@11@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(declare-const sm@12@01 $FVF<f>)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 2
(declare-fun inv@13@01 ($Ref) Int)
(declare-fun img@14@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@11@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@11@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-0|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@11@01 Int) (i2@11@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i1@11@01)
        (< $Perm.No p@6@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i2@11@01)
        (< $Perm.No p@6@01))
      (= (Seq_index S@4@01 i1@11@01) (Seq_index S@4@01 i2@11@01)))
    (= i1@11@01 i2@11@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@11@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@11@01)
      (< $Perm.No p@6@01))
    (and
      (= (inv@13@01 (Seq_index S@4@01 i@11@01)) i@11@01)
      (img@14@01 (Seq_index S@4@01 i@11@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) (Seq_index
    S@4@01
    i@11@01)) (Seq_index S@4@01 i@11@01)))
  :qid |quant-u-1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@14@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index S@4@01 (inv@13@01 r)) r))
  :pattern ((inv@13@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@11@01 Int)) (!
  (<= $Perm.No p@6@01)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) (Seq_index
    S@4@01
    i@11@01)) (Seq_index S@4@01 i@11@01)))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@11@01 Int)) (!
  (<= p@6@01 $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) (Seq_index
    S@4@01
    i@11@01)) (Seq_index S@4@01 i@11@01)))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@11@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@11@01)
      (< $Perm.No p@6@01))
    (not (= (Seq_index S@4@01 i@11@01) $Ref.null)))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) (Seq_index
    S@4@01
    i@11@01)) (Seq_index S@4@01 i@11@01)))
  :qid |f-permImpliesNonNull|)))
(declare-const sm@15@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) r) r))
  :pattern ((inv@13@01 r))
  :qid |quant-u-2|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@01))))
  $Snap.unit))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S| - 1)) ==> S[i].f < S[i + 1].f)
(declare-const i@16@01 Int)
(push) ; 2
; [eval] (i in [0..|S| - 1)) ==> S[i].f < S[i + 1].f
; [eval] (i in [0..|S| - 1))
; [eval] [0..|S| - 1)
; [eval] |S| - 1
; [eval] |S|
(push) ; 3
; [then-branch: 3 | i@16@01 in [0..|S@4@01| - 1] | live]
; [else-branch: 3 | !(i@16@01 in [0..|S@4@01| - 1]) | live]
(push) ; 4
; [then-branch: 3 | i@16@01 in [0..|S@4@01| - 1]]
(assert (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01))
; [eval] S[i].f < S[i + 1].f
; [eval] S[i]
(push) ; 5
(assert (not (>= i@16@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@16@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@16@01)) (Seq_index
  S@4@01
  i@16@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 i@16@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 i@16@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[i + 1]
; [eval] i + 1
(push) ; 5
(assert (not (>= (+ i@16@01 1) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< (+ i@16@01 1) (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
  S@4@01
  (+ i@16@01 1))) (Seq_index S@4@01 (+ i@16@01 1))))
(push) ; 5
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 (+ i@16@01 1)))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 (+ i@16@01 1)))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(i@16@01 in [0..|S@4@01| - 1])]
(assert (not (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)
  (and
    (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@16@01)) (Seq_index
      S@4@01
      i@16@01))
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
      S@4@01
      (+ i@16@01 1))) (Seq_index S@4@01 (+ i@16@01 1))))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01))
  (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@16@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)
      (and
        (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          S@4@01
          i@16@01)) (Seq_index S@4@01 i@16@01))
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          S@4@01
          (+ i@16@01 1))) (Seq_index S@4@01 (+ i@16@01 1)))))
    (or
      (not (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01))
      (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@16@01)) (Seq_index S@4@01 i@16@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@12@12@12@78-aux|)))
(assert (forall ((i@16@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (- (Seq_length S@4@01) 1)) i@16@01)
    (<
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@16@01))
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 (+ i@16@01 1)))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@16@01)) (Seq_index S@4@01 i@16@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@12@12@12@78|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 ($Snap.combine ($Snap.first $t@17@01) ($Snap.second $t@17@01))))
(declare-const i@18@01 Int)
(push) ; 3
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@18@01))
; [eval] S[i]
(push) ; 4
(assert (not (>= i@18@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< i@18@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@19@01 $FVF<f>)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 3
(declare-fun inv@20@01 ($Ref) Int)
(declare-fun img@21@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@18@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@18@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-3|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@18@01 Int) (i2@18@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i1@18@01)
        (< $Perm.No p@6@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i2@18@01)
        (< $Perm.No p@6@01))
      (= (Seq_index S@4@01 i1@18@01) (Seq_index S@4@01 i2@18@01)))
    (= i1@18@01 i2@18@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@18@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@18@01)
      (< $Perm.No p@6@01))
    (and
      (= (inv@20@01 (Seq_index S@4@01 i@18@01)) i@18@01)
      (img@21@01 (Seq_index S@4@01 i@18@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) (Seq_index
    S@4@01
    i@18@01)) (Seq_index S@4@01 i@18@01)))
  :qid |quant-u-4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@21@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index S@4@01 (inv@20@01 r)) r))
  :pattern ((inv@20@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@18@01 Int)) (!
  (<= $Perm.No p@6@01)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) (Seq_index
    S@4@01
    i@18@01)) (Seq_index S@4@01 i@18@01)))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@18@01 Int)) (!
  (<= p@6@01 $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) (Seq_index
    S@4@01
    i@18@01)) (Seq_index S@4@01 i@18@01)))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@18@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@18@01)
      (< $Perm.No p@6@01))
    (not (= (Seq_index S@4@01 i@18@01) $Ref.null)))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) (Seq_index
    S@4@01
    i@18@01)) (Seq_index S@4@01 i@18@01)))
  :qid |f-permImpliesNonNull|)))
(declare-const sm@22@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@21@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) r) r))
  :pattern ((inv@20@01 r))
  :qid |quant-u-5|)))
(assert (=
  ($Snap.second $t@17@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@17@01))
    ($Snap.second ($Snap.second $t@17@01)))))
(assert (= ($Snap.first ($Snap.second $t@17@01)) $Snap.unit))
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) index@7@01))
(assert (=
  ($Snap.second ($Snap.second $t@17@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@17@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@17@01))) $Snap.unit))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 4 | index@7@01 in [0..|S@4@01|] | live]
; [else-branch: 4 | !(index@7@01 in [0..|S@4@01|]) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 4 | index@7@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 5
(assert (not (>= index@7@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< index@7@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@21@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
    :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
    :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index S@4@01 index@7@01)) (Seq_index
  S@4@01
  index@7@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@21@01 (Seq_index S@4@01 index@7@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@20@01 (Seq_index S@4@01 index@7@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 4 | !(index@7@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@21@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index
      S@4@01
      index@7@01)) (Seq_index S@4@01 index@7@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@7@01)
  (= ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index S@4@01 index@7@01)) x@5@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@17@01))) $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= index@7@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= index@7@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 5 | index@7@01 == -1 | live]
; [else-branch: 5 | index@7@01 != -1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5 | index@7@01 == -1]
(assert (= index@7@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@23@01 Int)
(push) ; 5
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
; [then-branch: 6 | i@23@01 in [0..|S@4@01|] | live]
; [else-branch: 6 | !(i@23@01 in [0..|S@4@01|]) | live]
(push) ; 7
; [then-branch: 6 | i@23@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 8
(assert (not (>= i@23@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< i@23@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@21@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
    :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
    :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index S@4@01 i@23@01)) (Seq_index
  S@4@01
  i@23@01)))
(push) ; 8
(assert (not (ite
  (and
    (img@21@01 (Seq_index S@4@01 i@23@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@20@01 (Seq_index S@4@01 i@23@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 6 | !(i@23@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@21@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index S@4@01 i@23@01)) (Seq_index
      S@4@01
      i@23@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@21@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef5|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@23@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index
          S@4@01
          i@23@01)) (Seq_index S@4@01 i@23@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index
    S@4@01
    i@23@01)) (Seq_index S@4@01 i@23@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | index@7@01 != -1]
(assert (not (= index@7@01 (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@21@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@20@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r)))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@17@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (= index@7@01 (- 0 1))
  (and
    (= index@7@01 (- 0 1))
    (forall ((i@23@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index
              S@4@01
              i@23@01)) (Seq_index S@4@01 i@23@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01))
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index
        S@4@01
        i@23@01)) (Seq_index S@4@01 i@23@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(assert (or (not (= index@7@01 (- 0 1))) (= index@7@01 (- 0 1))))
(assert (=>
  (= index@7@01 (- 0 1))
  (forall ((i@23@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@23@01)
      (not
        (=
          ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index S@4@01 i@23@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index
      S@4@01
      i@23@01)) (Seq_index S@4@01 i@23@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|))))
(pop) ; 2
(push) ; 2
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@4@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@4@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 7 | |S@4@01| == 0 | live]
; [else-branch: 7 | |S@4@01| != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | |S@4@01| == 0]
(assert (= (Seq_length S@4@01) 0))
; [exec]
; index := -1
; [eval] -1
(declare-const i@24@01 Int)
(push) ; 4
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@24@01))
; [eval] S[i]
(push) ; 5
(assert (not (>= i@24@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@24@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 4
(declare-fun inv@25@01 ($Ref) Int)
(declare-fun img@26@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 4
(assert (not (forall ((i@24@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@24@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-6|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@24@01 Int) (i2@24@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i1@24@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
            S@4@01
            i1@24@01)) (Seq_index S@4@01 i1@24@01)))
        (< $Perm.No p@6@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i2@24@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
            S@4@01
            i2@24@01)) (Seq_index S@4@01 i2@24@01)))
        (< $Perm.No p@6@01))
      (= (Seq_index S@4@01 i1@24@01) (Seq_index S@4@01 i2@24@01)))
    (= i1@24@01 i2@24@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@24@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@24@01)
      (< $Perm.No p@6@01))
    (and
      (= (inv@25@01 (Seq_index S@4@01 i@24@01)) i@24@01)
      (img@26@01 (Seq_index S@4@01 i@24@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@24@01)) (Seq_index S@4@01 i@24@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@26@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@25@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index S@4@01 (inv@25@01 r)) r))
  :pattern ((inv@25@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@25@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) r) r))
  :pattern ((inv@25@01 r))
  :qid |quant-u-7|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@27@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@25@01 r))
      (img@26@01 r)
      (= r (Seq_index S@4@01 (inv@25@01 r))))
    ($Perm.min
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        p@6@01
        $Perm.No)
      p@6@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        p@6@01
        $Perm.No)
      (pTaken@27@01 r))
    $Perm.No)
  
  :qid |quant-u-9|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@25@01 r))
      (img@26@01 r)
      (= r (Seq_index S@4@01 (inv@25@01 r))))
    (= (- p@6@01 (pTaken@27@01 r)) $Perm.No))
  
  :qid |quant-u-10|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 4
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) (- 0 1))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) (- 0 1)))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 8 | -1 in [0..|S@4@01|] | dead]
; [else-branch: 8 | !(-1 in [0..|S@4@01|]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 8 | !(-1 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (- 0 1))))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 9 | True | live]
; [else-branch: 9 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 9 | True]
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@28@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 10 | i@28@01 in [0..|S@4@01|] | live]
; [else-branch: 10 | !(i@28@01 in [0..|S@4@01|]) | live]
(push) ; 8
; [then-branch: 10 | i@28@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 9
(assert (not (>= i@28@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@28@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@28@01)) (Seq_index
  S@4@01
  i@28@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 i@28@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 i@28@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 10 | !(i@28@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@28@01)) (Seq_index
      S@4@01
      i@28@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@28@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          S@4@01
          i@28@01)) (Seq_index S@4@01 i@28@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@28@01)) (Seq_index S@4@01 i@28@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (forall ((i@28@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          S@4@01
          i@28@01)) (Seq_index S@4@01 i@28@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@28@01)) (Seq_index S@4@01 i@28@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(push) ; 4
(assert (not (forall ((i@28@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
    (not
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@28@01))
        x@5@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@28@01)) (Seq_index S@4@01 i@28@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@28@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@28@01)
    (not
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@28@01))
        x@5@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@28@01)) (Seq_index S@4@01 i@28@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|)))
(pop) ; 3
(push) ; 3
; [else-branch: 7 | |S@4@01| != 0]
(assert (not (= (Seq_length S@4@01) 0)))
(pop) ; 3
; [eval] !(|S| == 0)
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@4@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@4@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 11 | |S@4@01| != 0 | live]
; [else-branch: 11 | |S@4@01| == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 11 | |S@4@01| != 0]
(assert (not (= (Seq_length S@4@01) 0)))
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@4@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@4@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 12 | |S@4@01| == 1 | live]
; [else-branch: 12 | |S@4@01| != 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 12 | |S@4@01| == 1]
(assert (= (Seq_length S@4@01) 1))
; [exec]
; index := (x == S[0].f ? 0 : -1)
; [eval] (x == S[0].f ? 0 : -1)
; [eval] x == S[0].f
; [eval] S[0]
(push) ; 5
(assert (not (< 0 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0)) (Seq_index
  S@4@01
  0)))
(push) ; 5
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 0))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 0))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 13 | x@5@01 == Lookup(f, sm@15@01, S@4@01[0]) | live]
; [else-branch: 13 | x@5@01 != Lookup(f, sm@15@01, S@4@01[0]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 13 | x@5@01 == Lookup(f, sm@15@01, S@4@01[0])]
(assert (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0))))
(pop) ; 6
(push) ; 6
; [else-branch: 13 | x@5@01 != Lookup(f, sm@15@01, S@4@01[0])]
(assert (not (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0)))))
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0))))
  (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0)))))
(declare-const index@29@01 Int)
(assert (=
  index@29@01
  (ite
    (= x@5@01 ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 0)))
    0
    (- 0 1))))
(declare-const i@30@01 Int)
(push) ; 5
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@30@01))
; [eval] S[i]
(push) ; 6
(assert (not (>= i@30@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< i@30@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 5
(declare-fun inv@31@01 ($Ref) Int)
(declare-fun img@32@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@30@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@30@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-11|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@30@01 Int) (i2@30@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i1@30@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
            S@4@01
            i1@30@01)) (Seq_index S@4@01 i1@30@01)))
        (< $Perm.No p@6@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i2@30@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
            S@4@01
            i2@30@01)) (Seq_index S@4@01 i2@30@01)))
        (< $Perm.No p@6@01))
      (= (Seq_index S@4@01 i1@30@01) (Seq_index S@4@01 i2@30@01)))
    (= i1@30@01 i2@30@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@30@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@30@01)
      (< $Perm.No p@6@01))
    (and
      (= (inv@31@01 (Seq_index S@4@01 i@30@01)) i@30@01)
      (img@32@01 (Seq_index S@4@01 i@30@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@30@01)) (Seq_index S@4@01 i@30@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@31@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index S@4@01 (inv@31@01 r)) r))
  :pattern ((inv@31@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@31@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) r) r))
  :pattern ((inv@31@01 r))
  :qid |quant-u-12|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@33@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@31@01 r))
      (img@32@01 r)
      (= r (Seq_index S@4@01 (inv@31@01 r))))
    ($Perm.min
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        p@6@01
        $Perm.No)
      p@6@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        p@6@01
        $Perm.No)
      (pTaken@33@01 r))
    $Perm.No)
  
  :qid |quant-u-14|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@31@01 r))
      (img@32@01 r)
      (= r (Seq_index S@4@01 (inv@31@01 r))))
    (= (- p@6@01 (pTaken@33@01 r)) $Perm.No))
  
  :qid |quant-u-15|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) index@29@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) index@29@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 14 | index@29@01 in [0..|S@4@01|] | live]
; [else-branch: 14 | !(index@29@01 in [0..|S@4@01|]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 14 | index@29@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 7
(assert (not (>= index@29@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< index@29@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 index@29@01)) (Seq_index
  S@4@01
  index@29@01)))
(push) ; 7
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 index@29@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 index@29@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 14 | !(index@29@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
      S@4@01
      index@29@01)) (Seq_index S@4@01 index@29@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)))
(push) ; 5
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)
  (=
    ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 index@29@01))
    x@5@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@29@01)
  (=
    ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 index@29@01))
    x@5@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= index@29@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= index@29@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 15 | index@29@01 == -1 | live]
; [else-branch: 15 | index@29@01 != -1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 15 | index@29@01 == -1]
(assert (= index@29@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@34@01 Int)
(push) ; 7
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 8
; [then-branch: 16 | i@34@01 in [0..|S@4@01|] | live]
; [else-branch: 16 | !(i@34@01 in [0..|S@4@01|]) | live]
(push) ; 9
; [then-branch: 16 | i@34@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 10
(assert (not (>= i@34@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< i@34@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@34@01)) (Seq_index
  S@4@01
  i@34@01)))
(push) ; 10
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 i@34@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 i@34@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 16 | !(i@34@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@34@01)) (Seq_index
      S@4@01
      i@34@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)))
; Definitional axioms for snapshot map values
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@34@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          S@4@01
          i@34@01)) (Seq_index S@4@01 i@34@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    S@4@01
    i@34@01)) (Seq_index S@4@01 i@34@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 15 | index@29@01 != -1]
(assert (not (= index@29@01 (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (= index@29@01 (- 0 1))
  (and
    (= index@29@01 (- 0 1))
    (forall ((i@34@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
              S@4@01
              i@34@01)) (Seq_index S@4@01 i@34@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01))
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
        S@4@01
        i@34@01)) (Seq_index S@4@01 i@34@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(assert (or (not (= index@29@01 (- 0 1))) (= index@29@01 (- 0 1))))
(push) ; 5
(assert (not (=>
  (= index@29@01 (- 0 1))
  (forall ((i@34@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
      (not
        (=
          ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@34@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
      S@4@01
      i@34@01)) (Seq_index S@4@01 i@34@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@29@01 (- 0 1))
  (forall ((i@34@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@34@01)
      (not
        (=
          ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 i@34@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
      S@4@01
      i@34@01)) (Seq_index S@4@01 i@34@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|))))
(pop) ; 4
(push) ; 4
; [else-branch: 12 | |S@4@01| != 1]
(assert (not (= (Seq_length S@4@01) 1)))
(pop) ; 4
; [eval] !(|S| == 1)
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@4@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@4@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 17 | |S@4@01| != 1 | live]
; [else-branch: 17 | |S@4@01| == 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 17 | |S@4@01| != 1]
(assert (not (= (Seq_length S@4@01) 1)))
; [exec]
; var k: Int
(declare-const k@35@01 Int)
; [exec]
; inhale 0 < k && k < |S| - 1
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] 0 < k
(assert (< 0 k@35@01))
(assert (= ($Snap.second $t@36@01) $Snap.unit))
; [eval] k < |S| - 1
; [eval] |S| - 1
; [eval] |S|
(assert (< k@35@01 (- (Seq_length S@4@01) 1)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] S[k].f < x
; [eval] S[k]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= k@35@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@35@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 k@35@01)) (Seq_index
  S@4@01
  k@35@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@14@01 (Seq_index S@4@01 k@35@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index S@4@01 k@35@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (< ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 k@35@01)) x@5@01))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 k@35@01)) x@5@01)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 18 | Lookup(f, sm@15@01, S@4@01[k@35@01]) < x@5@01 | live]
; [else-branch: 18 | !(Lookup(f, sm@15@01, S@4@01[k@35@01]) < x@5@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 18 | Lookup(f, sm@15@01, S@4@01[k@35@01]) < x@5@01]
(assert (< ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index S@4@01 k@35@01)) x@5@01))
; [exec]
; index := bfind_orig(S[0..k], x, p)
; [eval] S[0..k]
; [eval] S[..k]
; [eval] p > none
; [eval] p < write
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@37@01 Int)
(declare-const j@38@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 19 | !(i@37@01 in [0..|S@4@01[:k@35@01][0:]|]) | live]
; [else-branch: 19 | i@37@01 in [0..|S@4@01[:k@35@01][0:]|] | live]
(push) ; 8
; [then-branch: 19 | !(i@37@01 in [0..|S@4@01[:k@35@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 19 | i@37@01 in [0..|S@4@01[:k@35@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  i@37@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 20 | !(j@38@01 in [0..|S@4@01[:k@35@01][0:]|]) | live]
; [else-branch: 20 | j@38@01 in [0..|S@4@01[:k@35@01][0:]|] | live]
(push) ; 10
; [then-branch: 20 | !(j@38@01 in [0..|S@4@01[:k@35@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 20 | j@38@01 in [0..|S@4@01[:k@35@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  j@38@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      j@38@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@37@01)
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        j@38@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01))))))
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@37@01))))
(push) ; 7
; [then-branch: 21 | i@37@01 in [0..|S@4@01[:k@35@01][0:]|] && j@38@01 in [0..|S@4@01[:k@35@01][0:]|] && i@37@01 != j@38@01 | live]
; [else-branch: 21 | !(i@37@01 in [0..|S@4@01[:k@35@01][0:]|] && j@38@01 in [0..|S@4@01[:k@35@01][0:]|] && i@37@01 != j@38@01) | live]
(push) ; 8
; [then-branch: 21 | i@37@01 in [0..|S@4@01[:k@35@01][0:]|] && j@38@01 in [0..|S@4@01[:k@35@01][0:]|] && i@37@01 != j@38@01]
(assert (and
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      j@38@01)
    (not (= i@37@01 j@38@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@37@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@37@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@38@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< j@38@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@37@01 in [0..|S@4@01[:k@35@01][0:]|] && j@38@01 in [0..|S@4@01[:k@35@01][0:]|] && i@37@01 != j@38@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@37@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        j@38@01)
      (not (= i@37@01 j@38@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@37@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        j@38@01)
      (not (= i@37@01 j@38@01))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@37@01)
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      j@38@01)
    (not (= i@37@01 j@38@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01)))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@37@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        j@38@01)
      (not (= i@37@01 j@38@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@37@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              j@38@01)
            (not (= i@37@01 j@38@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@37@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            j@38@01)
          (not (= i@37@01 j@38@01))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94-aux|)))
(push) ; 6
(assert (not (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01)
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@37@01 Int) (j@38@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@37@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          j@38@01)
        (not (= i@37@01 j@38@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01)
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@37@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) j@38@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    j@38@01) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@37@01) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    j@38@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@10@12@10@94|)))
(declare-const i@39@01 Int)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  i@39@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@39@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@39@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 6
(declare-fun inv@40@01 ($Ref) Int)
(declare-fun img@41@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@39@01 Int)) (!
  (=>
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@39@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-16|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@39@01 Int) (i2@39@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i1@39@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            i1@39@01)) (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            i1@39@01)))
        (< $Perm.No p@6@01))
      (and
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i2@39@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            i2@39@01)) (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            i2@39@01)))
        (< $Perm.No p@6@01))
      (=
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i1@39@01)
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i2@39@01)))
    (= i1@39@01 i2@39@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@39@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@39@01)
      (< $Perm.No p@6@01))
    (and
      (=
        (inv@40@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@39@01))
        i@39@01)
      (img@41@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@39@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@39@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@39@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@41@01 r)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@40@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) (inv@40@01 r)) r))
  :pattern ((inv@40@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      (inv@40@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) r) r))
  :pattern ((inv@40@01 r))
  :qid |quant-u-17|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@39@01 Int)) (!
  (=
    (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@39@01)
    (Seq_index S@4@01 i@39@01))
  
  :qid |quant-u-18|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@42@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        (inv@40@01 r))
      (img@41@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) (inv@40@01 r))))
    ($Perm.min
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        p@6@01
        $Perm.No)
      p@6@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        p@6@01
        $Perm.No)
      (pTaken@42@01 r))
    $Perm.No)
  
  :qid |quant-u-20|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@42@01 r) $Perm.No)
  
  :qid |quant-u-21|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        (inv@40@01 r))
      (img@41@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) (inv@40@01 r))))
    (= (- p@6@01 (pTaken@42@01 r)) $Perm.No))
  
  :qid |quant-u-22|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S| - 1)) ==> S[i].f < S[i + 1].f)
(declare-const i@43@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] (i in [0..|S| - 1)) ==> S[i].f < S[i + 1].f
; [eval] (i in [0..|S| - 1))
; [eval] [0..|S| - 1)
; [eval] |S| - 1
; [eval] |S|
(push) ; 7
; [then-branch: 22 | i@43@01 in [0..|S@4@01[:k@35@01][0:]| - 1] | live]
; [else-branch: 22 | !(i@43@01 in [0..|S@4@01[:k@35@01][0:]| - 1]) | live]
(push) ; 8
; [then-branch: 22 | i@43@01 in [0..|S@4@01[:k@35@01][0:]| - 1]]
(assert (Seq_contains
  (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
  i@43@01))
; [eval] S[i].f < S[i + 1].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@43@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@43@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@4@01 k@35@01) 0)
  i@43@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@14@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[i + 1]
; [eval] i + 1
(push) ; 9
(assert (not (>= (+ i@43@01 1) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< (+ i@43@01 1) (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@4@01 k@35@01) 0)
  (+ i@43@01 1))) (Seq_index
  (Seq_drop (Seq_take S@4@01 k@35@01) 0)
  (+ i@43@01 1))))
(push) ; 9
(assert (not (ite
  (and
    (img@14@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) (+ i@43@01 1)))
    (Seq_contains
      (Seq_range 0 (Seq_length S@4@01))
      (inv@13@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) (+ i@43@01 1)))))
  (< $Perm.No p@6@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 22 | !(i@43@01 in [0..|S@4@01[:k@35@01][0:]| - 1])]
(assert (not
  (Seq_contains
    (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
    i@43@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Seq_contains
    (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
    i@43@01)
  (and
    (Seq_contains
      (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
      i@43@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      i@43@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01))
    ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      (+ i@43@01 1))) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      (+ i@43@01 1))))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
      i@43@01))
  (Seq_contains
    (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
    i@43@01)))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@15@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@43@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
        i@43@01)
      (and
        (Seq_contains
          (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
          i@43@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@4@01 k@35@01) 0)
          i@43@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01))
        ($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@4@01 k@35@01) 0)
          (+ i@43@01 1))) (Seq_index
          (Seq_drop (Seq_take S@4@01 k@35@01) 0)
          (+ i@43@01 1)))))
    (or
      (not
        (Seq_contains
          (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
          i@43@01))
      (Seq_contains
        (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
        i@43@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@43@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@12@12@12@78-aux|)))
(push) ; 6
(assert (not (forall ((i@43@01 Int)) (!
  (=>
    (Seq_contains
      (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
      i@43@01)
    (<
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@4@01 k@35@01) 0)
        i@43@01))
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@4@01 k@35@01) 0)
        (+ i@43@01 1)))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@43@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@12@12@12@78|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@43@01 Int)) (!
  (=>
    (Seq_contains
      (Seq_range 0 (- (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)) 1))
      i@43@01)
    (<
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@4@01 k@35@01) 0)
        i@43@01))
      ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@4@01 k@35@01) 0)
        (+ i@43@01 1)))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@15@01  $FVF<f>) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@43@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@43@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@12@12@12@78|)))
(declare-const index@44@01 Int)
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(declare-const i@46@01 Int)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  i@46@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@46@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@46@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@47@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@47@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@47@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@47@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef7|)))
; [eval] S[i]
(pop) ; 6
(declare-fun inv@48@01 ($Ref) Int)
(declare-fun img@49@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@47@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@47@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@47@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef7|)))
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@46@01 Int)) (!
  (=>
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@46@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-23|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@46@01 Int) (i2@46@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i1@46@01)
        (< $Perm.No p@6@01))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i2@46@01)
        (< $Perm.No p@6@01))
      (=
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i1@46@01)
        (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i2@46@01)))
    (= i1@46@01 i2@46@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@46@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@46@01)
      (< $Perm.No p@6@01))
    (and
      (=
        (inv@48@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
        i@46@01)
      (img@49@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@46@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)))
  :qid |quant-u-24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@49@01 r)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) (inv@48@01 r)) r))
  :pattern ((inv@48@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@46@01 Int)) (!
  (<= $Perm.No p@6@01)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@46@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@46@01 Int)) (!
  (<= p@6@01 $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@46@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@46@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@46@01)
      (< $Perm.No p@6@01))
    (not
      (= (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01) $Ref.null)))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@46@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-25|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(declare-const sm@50@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      (inv@48@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
  :pattern ((inv@48@01 r))
  :qid |quant-u-26|)))
(assert (=
  ($Snap.second $t@45@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@01))
    ($Snap.second ($Snap.second $t@45@01)))))
(assert (= ($Snap.first ($Snap.second $t@45@01)) $Snap.unit))
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(assert (Seq_contains
  (Seq_range (- 0 1) (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  index@44@01))
(assert (=
  ($Snap.second ($Snap.second $t@45@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@45@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@45@01))) $Snap.unit))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    index@44@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  index@44@01)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 23 | index@44@01 in [0..|S@4@01[:k@35@01][0:]|] | live]
; [else-branch: 23 | !(index@44@01 in [0..|S@4@01[:k@35@01][0:]|]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 23 | index@44@01 in [0..|S@4@01[:k@35@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  index@44@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@44@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< index@44@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef9|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef10|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@4@01 k@35@01) 0)
  index@44@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) index@44@01)))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@14@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) index@44@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            index@44@01))))
      (-
        p@6@01
        (pTaken@42@01 (Seq_index
          (Seq_drop (Seq_take S@4@01 k@35@01) 0)
          index@44@01)))
      $Perm.No)
    (ite
      (and
        (img@49@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) index@44@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            index@44@01))))
      p@6@01
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 23 | !(index@44@01 in [0..|S@4@01[:k@35@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    index@44@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    index@44@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      index@44@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      index@44@01)) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      index@44@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      index@44@01))
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    index@44@01)))
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    index@44@01)
  (=
    ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      index@44@01))
    x@5@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@45@01))) $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@44@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@44@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 24 | index@44@01 == -1 | live]
; [else-branch: 24 | index@44@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 24 | index@44@01 == -1]
(assert (= index@44@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@51@01 Int)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 25 | i@51@01 in [0..|S@4@01[:k@35@01][0:]|] | live]
; [else-branch: 25 | !(i@51@01 in [0..|S@4@01[:k@35@01][0:]|]) | live]
(push) ; 10
; [then-branch: 25 | i@51@01 in [0..|S@4@01[:k@35@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
  i@51@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@51@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@51@01 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef9|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef10|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@4@01 k@35@01) 0)
  i@51@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@14@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01))))
      (-
        p@6@01
        (pTaken@42@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01)))
      $Perm.No)
    (ite
      (and
        (img@49@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01))))
      p@6@01
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 25 | !(i@51@01 in [0..|S@4@01[:k@35@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@51@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@51@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@51@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      i@51@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
      i@51@01))
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
    i@51@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@51@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@51@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@51@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@4@01 k@35@01) 0)
          i@51@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01))))
    (or
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          i@51@01))
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@51@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
    (Seq_drop (Seq_take S@4@01 k@35@01) 0)
    i@51@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 24 | index@44@01 != -1]
(assert (not (= index@44@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (= index@44@01 (- 0 1))
  (and
    (= index@44@01 (- 0 1))
    (forall ((i@51@01 Int)) (!
      (and
        (=>
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@51@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              i@51@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
              (Seq_drop (Seq_take S@4@01 k@35@01) 0)
              i@51@01)) (Seq_index
              (Seq_drop (Seq_take S@4@01 k@35@01) 0)
              i@51@01))))
        (or
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
              i@51@01))
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            i@51@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@4@01 k@35@01) 0)
        i@51@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(assert (or (not (= index@44@01 (- 0 1))) (= index@44@01 (- 0 1))))
(assert (=>
  (= index@44@01 (- 0 1))
  (forall ((i@51@01 Int)) (!
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
        i@51@01)
      (not
        (=
          ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@4@01 k@35@01) 0)
            i@51@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@4@01 k@35@01) 0)
      i@51@01)) (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@51@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(declare-const i@52@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@52@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@52@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@52@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 6
(declare-fun inv@53@01 ($Ref) Int)
(declare-fun img@54@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@52@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@52@01)
    (or (= p@6@01 $Perm.No) (< $Perm.No p@6@01)))
  
  :qid |quant-u-27|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@52@01 Int) (i2@52@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i1@52@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
            S@4@01
            i1@52@01)) (Seq_index S@4@01 i1@52@01)))
        (< $Perm.No p@6@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i2@52@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
            S@4@01
            i2@52@01)) (Seq_index S@4@01 i2@52@01)))
        (< $Perm.No p@6@01))
      (= (Seq_index S@4@01 i1@52@01) (Seq_index S@4@01 i2@52@01)))
    (= i1@52@01 i2@52@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@52@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@52@01)
      (< $Perm.No p@6@01))
    (and
      (= (inv@53@01 (Seq_index S@4@01 i@52@01)) i@52@01)
      (img@54@01 (Seq_index S@4@01 i@52@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
    S@4@01
    i@52@01)) (Seq_index S@4@01 i@52@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@54@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@53@01 r))
        (< $Perm.No p@6@01)))
    (= (Seq_index S@4@01 (inv@53@01 r)) r))
  :pattern ((inv@53@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@53@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
  :pattern ((inv@53@01 r))
  :qid |quant-u-28|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@52@01 Int)) (!
  (=
    (Seq_index S@4@01 i@52@01)
    (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@52@01))
  
  :qid |quant-u-29|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@55@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@53@01 r))
      (img@54@01 r)
      (= r (Seq_index S@4@01 (inv@53@01 r))))
    ($Perm.min
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      p@6@01)
    $Perm.No))
(define-fun pTaken@56@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@53@01 r))
      (img@54@01 r)
      (= r (Seq_index S@4@01 (inv@53@01 r))))
    ($Perm.min
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (- p@6@01 (pTaken@55@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (pTaken@55@01 r))
    $Perm.No)
  
  :qid |quant-u-31|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@53@01 r))
      (img@54@01 r)
      (= r (Seq_index S@4@01 (inv@53@01 r))))
    (= (- p@6@01 (pTaken@55@01 r)) $Perm.No))
  
  :qid |quant-u-32|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (pTaken@56@01 r))
    $Perm.No)
  
  :qid |quant-u-33|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@53@01 r))
      (img@54@01 r)
      (= r (Seq_index S@4@01 (inv@53@01 r))))
    (= (- (- p@6@01 (pTaken@55@01 r)) (pTaken@56@01 r)) $Perm.No))
  
  :qid |quant-u-34|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) index@44@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@4@01)) index@44@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 26 | index@44@01 in [0..|S@4@01|] | live]
; [else-branch: 26 | !(index@44@01 in [0..|S@4@01|]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 26 | index@44@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@44@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< index@44@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef9|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef10|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 index@44@01)) (Seq_index
  S@4@01
  index@44@01)))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@14@01 (Seq_index S@4@01 index@44@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index S@4@01 index@44@01))))
      (- p@6@01 (pTaken@42@01 (Seq_index S@4@01 index@44@01)))
      $Perm.No)
    (ite
      (and
        (img@49@01 (Seq_index S@4@01 index@44@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index S@4@01 index@44@01))))
      p@6@01
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 26 | !(index@44@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      S@4@01
      index@44@01)) (Seq_index S@4@01 index@44@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)))
(push) ; 6
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)
  (=
    ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 index@44@01))
    x@5@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) index@44@01)
  (=
    ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 index@44@01))
    x@5@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@44@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@44@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 27 | index@44@01 == -1 | live]
; [else-branch: 27 | index@44@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 27 | index@44@01 == -1]
(assert (= index@44@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@57@01 Int)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 28 | i@57@01 in [0..|S@4@01|] | live]
; [else-branch: 28 | !(i@57@01 in [0..|S@4@01|]) | live]
(push) ; 10
; [then-branch: 28 | i@57@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@57@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@57@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef9|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef10|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 i@57@01)) (Seq_index
  S@4@01
  i@57@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@14@01 (Seq_index S@4@01 i@57@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index S@4@01 i@57@01))))
      (- p@6@01 (pTaken@42@01 (Seq_index S@4@01 i@57@01)))
      $Perm.No)
    (ite
      (and
        (img@49@01 (Seq_index S@4@01 i@57@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index S@4@01 i@57@01))))
      p@6@01
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 28 | !(i@57@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 i@57@01)) (Seq_index
      S@4@01
      i@57@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@57@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
          S@4@01
          i@57@01)) (Seq_index S@4@01 i@57@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
    S@4@01
    i@57@01)) (Seq_index S@4@01 i@57@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 27 | index@44@01 != -1]
(assert (not (= index@44@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (= index@44@01 (- 0 1))
  (and
    (= index@44@01 (- 0 1))
    (forall ((i@57@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
              S@4@01
              i@57@01)) (Seq_index S@4@01 i@57@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01))
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
        S@4@01
        i@57@01)) (Seq_index S@4@01 i@57@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (= index@44@01 (- 0 1))
  (forall ((i@57@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@57@01)
      (not
        (=
          ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 i@57@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      S@4@01
      i@57@01)) (Seq_index S@4@01 i@57@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-35|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
(declare-const pm@58@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@58@01  $FPM) r)
    (+
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@58@01  $FPM) r))
  :qid |qp.resPrmSumDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.perm_f (as pm@58@01  $FPM) r))
  :qid |qp.resTrgDef12|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@58@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@44@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@44@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 29 | index@44@01 == -1 | live]
; [else-branch: 29 | index@44@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 29 | index@44@01 == -1]
(assert (= index@44@01 (- 0 1)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-36|))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@59@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef15|)))
(declare-const pm@60@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@60@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@60@01  $FPM) r))
  :qid |qp.resPrmSumDef16|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@60@01  $FPM) r))
  :qid |qp.resTrgDef17|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@60@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@61@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 30 | i@61@01 in [0..|S@4@01|] | live]
; [else-branch: 30 | !(i@61@01 in [0..|S@4@01|]) | live]
(push) ; 10
; [then-branch: 30 | i@61@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-37|))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] S[i].f != x
; [eval] S[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@61@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@61@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
    :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef15|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) (Seq_index S@4@01 i@61@01)) (Seq_index
  S@4@01
  i@61@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@49@01 (Seq_index S@4@01 i@61@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index S@4@01 i@61@01))))
      p@6@01
      $Perm.No)
    (ite
      (and
        (img@14@01 (Seq_index S@4@01 i@61@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index S@4@01 i@61@01))))
      (- p@6@01 (pTaken@42@01 (Seq_index S@4@01 i@61@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 30 | !(i@61@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-38|))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) (Seq_index S@4@01 i@61@01)) (Seq_index
      S@4@01
      i@61@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef15|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@61@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) (Seq_index
          S@4@01
          i@61@01)) (Seq_index S@4@01 i@61@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
    S@4@01
    i@61@01)) (Seq_index S@4@01 i@61@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 29 | index@44@01 != -1]
(assert (not (= index@44@01 (- 0 1))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-39|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
(declare-const sm@62@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@62@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@62@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@62@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@62@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@62@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef20|)))
(declare-const pm@63@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@63@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@63@01  $FPM) r))
  :qid |qp.resPrmSumDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@62@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@63@01  $FPM) r))
  :qid |qp.resTrgDef22|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@63@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@62@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@59@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@59@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@60@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@60@01  $FPM) r))
  :qid |qp.resPrmSumDef16|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@60@01  $FPM) r))
  :qid |qp.resTrgDef17|)))
(assert (=>
  (= index@44@01 (- 0 1))
  (and
    (= index@44@01 (- 0 1))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@60@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|))
    (forall ((i@61@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@59@01  $FVF<f>) (Seq_index
              S@4@01
              i@61@01)) (Seq_index S@4@01 i@61@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01))
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
        S@4@01
        i@61@01)) (Seq_index S@4@01 i@61@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@62@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@62@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@62@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@62@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@62@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@63@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@63@01  $FPM) r))
  :qid |qp.resPrmSumDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@62@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@63@01  $FPM) r))
  :qid |qp.resTrgDef22|)))
(assert (=>
  (not (= index@44@01 (- 0 1)))
  (and
    (not (= index@44@01 (- 0 1)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@63@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@62@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|)))))
(set-option :timeout 0)
(push) ; 6
(assert (not (=>
  (= index@44@01 (- 0 1))
  (forall ((i@61@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@61@01)
      (not
        (=
          ($FVF.lookup_f (as sm@59@01  $FVF<f>) (Seq_index S@4@01 i@61@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      S@4@01
      i@61@01)) (Seq_index S@4@01 i@61@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@44@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@44@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 31 | index@44@01 == -1 | live]
; [else-branch: 31 | index@44@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 31 | index@44@01 == -1]
(assert (= index@44@01 (- 0 1)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-40|))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
(declare-const pm@64@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@64@01  $FPM) r)
    (+
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@64@01  $FPM) r))
  :qid |qp.resPrmSumDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.perm_f (as pm@64@01  $FPM) r))
  :qid |qp.resTrgDef24|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@64@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@65@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 32 | i@65@01 in [0..|S@4@01|] | live]
; [else-branch: 32 | !(i@65@01 in [0..|S@4@01|]) | live]
(push) ; 10
; [then-branch: 32 | i@65@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-41|))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(declare-const sm@66@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef27|)))
(declare-const pm@67@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@67@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resTrgDef29|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@67@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] S[i].f != x
; [eval] S[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@65@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@65@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef9|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef10|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 i@65@01)) (Seq_index
  S@4@01
  i@65@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@14@01 (Seq_index S@4@01 i@65@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index S@4@01 i@65@01))))
      (- p@6@01 (pTaken@42@01 (Seq_index S@4@01 i@65@01)))
      $Perm.No)
    (ite
      (and
        (img@49@01 (Seq_index S@4@01 i@65@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index S@4@01 i@65@01))))
      p@6@01
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 32 | !(i@65@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-42|))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(declare-const sm@68@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef32|)))
(declare-const pm@69@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@69@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resTrgDef34|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@69@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@67@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resTrgDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@67@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|))
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 i@65@01)) (Seq_index
      S@4@01
      i@65@01)))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@69@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resTrgDef34|)))
(assert (=>
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
  (and
    (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@69@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|)))))
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@67@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resTrgDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@69@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resTrgDef34|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@65@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
        (forall ((r $Ref)) (!
          (<= ($FVF.perm_f (as pm@67@01  $FPM) r) $Perm.Write)
          :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r))
          :qid |qp-fld-prm-bnd|))
        ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
          S@4@01
          i@65@01)) (Seq_index S@4@01 i@65@01))))
    (=>
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
      (and
        (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
        (forall ((r $Ref)) (!
          (<= ($FVF.perm_f (as pm@69@01  $FPM) r) $Perm.Write)
          :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r))
          :qid |qp-fld-prm-bnd|))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) (Seq_index
    S@4@01
    i@65@01)) (Seq_index S@4@01 i@65@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 31 | index@44@01 != -1]
(assert (not (= index@44@01 (- 0 1))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-43|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(declare-const pm@70@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@70@01  $FPM) r)
    (+
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@70@01  $FPM) r))
  :qid |qp.resPrmSumDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.perm_f (as pm@70@01  $FPM) r))
  :qid |qp.resTrgDef36|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@70@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@64@01  $FPM) r)
    (+
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@64@01  $FPM) r))
  :qid |qp.resPrmSumDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.perm_f (as pm@64@01  $FPM) r))
  :qid |qp.resTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@67@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@67@01  $FPM) r))
  :qid |qp.resTrgDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@68@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@68@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@69@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@69@01  $FPM) r))
  :qid |qp.resTrgDef34|)))
(assert (=>
  (= index@44@01 (- 0 1))
  (and
    (= index@44@01 (- 0 1))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@64@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|))
    (forall ((i@65@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@67@01  $FPM) r) $Perm.Write)
              :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@66@01  $FVF<f>) r) r))
              :qid |qp-fld-prm-bnd|))
            ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
              S@4@01
              i@65@01)) (Seq_index S@4@01 i@65@01))))
        (=>
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
          (and
            (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@69@01  $FPM) r) $Perm.Write)
              :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) r) r))
              :qid |qp-fld-prm-bnd|))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01))
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) (Seq_index
        S@4@01
        i@65@01)) (Seq_index S@4@01 i@65@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@70@01  $FPM) r)
    (+
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@70@01  $FPM) r))
  :qid |qp.resPrmSumDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.perm_f (as pm@70@01  $FPM) r))
  :qid |qp.resTrgDef36|)))
(assert (=>
  (not (= index@44@01 (- 0 1)))
  (and
    (not (= index@44@01 (- 0 1)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@70@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|)))))
(set-option :timeout 0)
(push) ; 6
(assert (not (=>
  (= index@44@01 (- 0 1))
  (forall ((i@65@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@65@01)
      (not
        (=
          ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index S@4@01 i@65@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@68@01  $FVF<f>) (Seq_index
      S@4@01
      i@65@01)) (Seq_index S@4@01 i@65@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-44|))))
(check-sat)
; unknown
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
(declare-const pm@71@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@71@01  $FPM) r)
    (+
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@71@01  $FPM) r))
  :qid |qp.resPrmSumDef37|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r))
  :pattern (($FVF.perm_f (as pm@71@01  $FPM) r))
  :qid |qp.resTrgDef38|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@71@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@44@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@44@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; [then-branch: 33 | index@44@01 == -1 | live]
; [else-branch: 33 | index@44@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 33 | index@44@01 == -1]
(assert (= index@44@01 (- 0 1)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-45|))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@72@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef41|)))
(declare-const pm@73@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@73@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@73@01  $FPM) r))
  :qid |qp.resPrmSumDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@73@01  $FPM) r))
  :qid |qp.resTrgDef43|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@73@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@74@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 34 | i@74@01 in [0..|S@4@01|] | live]
; [else-branch: 34 | !(i@74@01 in [0..|S@4@01|]) | live]
(push) ; 10
; [then-branch: 34 | i@74@01 in [0..|S@4@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-46|))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] S[i].f != x
; [eval] S[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@74@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@74@01 (Seq_length S@4@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        (< $Perm.No p@6@01)
        false)
      (=
        ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
    :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
    :qid |qp.fvfValDef39|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
    :qid |qp.fvfValDef40|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
    :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef41|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) (Seq_index S@4@01 i@74@01)) (Seq_index
  S@4@01
  i@74@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@49@01 (Seq_index S@4@01 i@74@01))
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 (Seq_index S@4@01 i@74@01))))
      p@6@01
      $Perm.No)
    (ite
      (and
        (img@14@01 (Seq_index S@4@01 i@74@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@4@01))
          (inv@13@01 (Seq_index S@4@01 i@74@01))))
      (- p@6@01 (pTaken@42@01 (Seq_index S@4@01 i@74@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 34 | !(i@74@01 in [0..|S@4@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index S@4@01 i@11@01)
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01))
    (=
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))))
  
  :qid |quant-u-47|))))
(check-sat)
; unknown
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef41|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) (Seq_index S@4@01 i@74@01)) (Seq_index
      S@4@01
      i@74@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01))
  (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef41|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@74@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) (Seq_index
          S@4@01
          i@74@01)) (Seq_index S@4@01 i@74@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01))
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
    S@4@01
    i@74@01)) (Seq_index S@4@01 i@74@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 33 | index@44@01 != -1]
(assert (not (= index@44@01 (- 0 1))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@4@01 k@35@01) 0) i@46@01)
      (Seq_index S@4@01 i@11@01))
    (=
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))))
  
  :qid |quant-u-48|))))
(check-sat)
; unknown
(pop) ; 8
; 0,01s
; (get-info :all-statistics)
(declare-const sm@75@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@75@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@75@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@75@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@75@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@75@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef46|)))
(declare-const pm@76@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@76@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@76@01  $FPM) r))
  :qid |qp.resPrmSumDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@75@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@76@01  $FPM) r))
  :qid |qp.resTrgDef48|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@76@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@75@01  $FVF<f>) r) r))
  :qid |qp-fld-prm-bnd|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@72@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@72@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef41|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@73@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@73@01  $FPM) r))
  :qid |qp.resPrmSumDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@73@01  $FPM) r))
  :qid |qp.resTrgDef43|)))
(assert (=>
  (= index@44@01 (- 0 1))
  (and
    (= index@44@01 (- 0 1))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@73@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|))
    (forall ((i@74@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@72@01  $FVF<f>) (Seq_index
              S@4@01
              i@74@01)) (Seq_index S@4@01 i@74@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01))
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
        S@4@01
        i@74@01)) (Seq_index S@4@01 i@74@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83-aux|)))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@49@01 r)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
          (inv@48@01 r)))
      (< $Perm.No p@6@01)
      false)
    (=
      ($FVF.lookup_f (as sm@75@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r)))
  :pattern (($FVF.lookup_f (as sm@75@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@14@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
      (< $Perm.No (- p@6@01 (pTaken@42@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@75@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@75@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.lookup_f (as sm@75@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@76@01  $FPM) r)
    (+
      (ite
        (and
          (img@49@01 r)
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@4@01 k@35@01) 0)))
            (inv@48@01 r)))
        p@6@01
        $Perm.No)
      (ite
        (and
          (img@14@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@4@01)) (inv@13@01 r)))
        (- p@6@01 (pTaken@42@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@76@01  $FPM) r))
  :qid |qp.resPrmSumDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f (as sm@75@01  $FVF<f>) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@45@01)) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@01))))) r) r))
  :pattern (($FVF.perm_f (as pm@76@01  $FPM) r))
  :qid |qp.resTrgDef48|)))
(assert (=>
  (not (= index@44@01 (- 0 1)))
  (and
    (not (= index@44@01 (- 0 1)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@76@01  $FPM) r) $Perm.Write)
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@75@01  $FVF<f>) r) r))
      :qid |qp-fld-prm-bnd|)))))
(set-option :timeout 0)
(push) ; 6
(assert (not (=>
  (= index@44@01 (- 0 1))
  (forall ((i@74@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@4@01)) i@74@01)
      (not
        (=
          ($FVF.lookup_f (as sm@72@01  $FVF<f>) (Seq_index S@4@01 i@74@01))
          x@5@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@50@01  $FVF<f>) (Seq_index
      S@4@01
      i@74@01)) (Seq_index S@4@01 i@74@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@19@28@19@83|)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- bfind_fixed_ineq ----------
(declare-const S@77@01 Seq<$Ref>)
(declare-const x@78@01 Int)
(declare-const p@79@01 $Perm)
(declare-const index@80@01 Int)
(declare-const S@81@01 Seq<$Ref>)
(declare-const x@82@01 Int)
(declare-const p@83@01 $Perm)
(declare-const index@84@01 Int)
(push) ; 1
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 ($Snap.combine ($Snap.first $t@85@01) ($Snap.second $t@85@01))))
(assert (= ($Snap.first $t@85@01) $Snap.unit))
; [eval] p > none
(assert (> p@83@01 $Perm.No))
(assert (=
  ($Snap.second $t@85@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@85@01))
    ($Snap.second ($Snap.second $t@85@01)))))
(assert (= ($Snap.first ($Snap.second $t@85@01)) $Snap.unit))
; [eval] p < write
(assert (< p@83@01 $Perm.Write))
(assert (=
  ($Snap.second ($Snap.second $t@85@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@85@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@85@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@85@01))) $Snap.unit))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@86@01 Int)
(declare-const j@87@01 Int)
(push) ; 2
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
; [then-branch: 35 | !(i@86@01 in [0..|S@81@01|]) | live]
; [else-branch: 35 | i@86@01 in [0..|S@81@01|] | live]
(push) ; 4
; [then-branch: 35 | !(i@86@01 in [0..|S@81@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 35 | i@86@01 in [0..|S@81@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
; [then-branch: 36 | !(j@87@01 in [0..|S@81@01|]) | live]
; [else-branch: 36 | j@87@01 in [0..|S@81@01|] | live]
(push) ; 6
; [then-branch: 36 | !(j@87@01 in [0..|S@81@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 36 | j@87@01 in [0..|S@81@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01))
; [eval] i != j
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01))))
(push) ; 3
; [then-branch: 37 | i@86@01 in [0..|S@81@01|] && j@87@01 in [0..|S@81@01|] && i@86@01 != j@87@01 | live]
; [else-branch: 37 | !(i@86@01 in [0..|S@81@01|] && j@87@01 in [0..|S@81@01|] && i@86@01 != j@87@01) | live]
(push) ; 4
; [then-branch: 37 | i@86@01 in [0..|S@81@01|] && j@87@01 in [0..|S@81@01|] && i@86@01 != j@87@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
    (not (= i@86@01 j@87@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 5
(assert (not (>= i@86@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@86@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@87@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j@87@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 37 | !(i@86@01 in [0..|S@81@01|] && j@87@01 in [0..|S@81@01|] && i@86@01 != j@87@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
      (not (= i@86@01 j@87@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
      (not (= i@86@01 j@87@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
    (not (= i@86@01 j@87@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
      (not (= i@86@01 j@87@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_contains
    (Seq_range 0 (Seq_length S@81@01))
    j@87@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@81@01))
    j@87@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@81@01))
    j@87@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_index
    S@81@01
    j@87@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_index
    S@81@01
    j@87@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_index
    S@81@01
    j@87@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01) (Seq_index
    S@81@01
    i@86@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) j@87@01) (Seq_index
    S@81@01
    i@86@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) j@87@01) (Seq_index
    S@81@01
    i@86@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
            (not (= i@86@01 j@87@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
          (not (= i@86@01 j@87@01))))))
  :pattern ((Seq_index S@81@01 i@86@01) (Seq_index S@81@01 j@87@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@86@01 Int) (j@87@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01)
        (not (= i@86@01 j@87@01))))
    (not (= (Seq_index S@81@01 i@86@01) (Seq_index S@81@01 j@87@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_contains
    (Seq_range 0 (Seq_length S@81@01))
    j@87@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@81@01))
    j@87@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_index
    S@81@01
    j@87@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) i@86@01) (Seq_index
    S@81@01
    j@87@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@81@01)) j@87@01) (Seq_index
    S@81@01
    i@86@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@81@01)) j@87@01) (Seq_index
    S@81@01
    i@86@01))
  :pattern ((Seq_index S@81@01 i@86@01) (Seq_index S@81@01 j@87@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@85@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@01)))))))
(declare-const i@88@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 38 | !(0 <= i@88@01) | live]
; [else-branch: 38 | 0 <= i@88@01 | live]
(push) ; 4
; [then-branch: 38 | !(0 <= i@88@01)]
(assert (not (<= 0 i@88@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 38 | 0 <= i@88@01]
(assert (<= 0 i@88@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@88@01) (not (<= 0 i@88@01))))
(assert (and (<= 0 i@88@01) (< i@88@01 (Seq_length S@81@01))))
; [eval] S[i]
(push) ; 3
(assert (not (>= i@88@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@89@01 ($Ref) Int)
(declare-fun img@90@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@88@01 Int)) (!
  (=>
    (and (<= 0 i@88@01) (< i@88@01 (Seq_length S@81@01)))
    (or (<= 0 i@88@01) (not (<= 0 i@88@01))))
  :pattern ((Seq_index S@81@01 i@88@01))
  :qid |f-aux|)))
(push) ; 2
(assert (not (forall ((i@88@01 Int)) (!
  (=>
    (and (<= 0 i@88@01) (< i@88@01 (Seq_length S@81@01)))
    (or (= p@83@01 $Perm.No) (< $Perm.No p@83@01)))
  
  :qid |quant-u-49|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@88@01 Int) (i2@88@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@88@01) (< i1@88@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (and
        (and (<= 0 i2@88@01) (< i2@88@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (= (Seq_index S@81@01 i1@88@01) (Seq_index S@81@01 i2@88@01)))
    (= i1@88@01 i2@88@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@88@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@88@01) (< i@88@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (and
      (= (inv@89@01 (Seq_index S@81@01 i@88@01)) i@88@01)
      (img@90@01 (Seq_index S@81@01 i@88@01))))
  :pattern ((Seq_index S@81@01 i@88@01))
  :qid |quant-u-50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@90@01 r)
      (and
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01)))
        (< $Perm.No p@83@01)))
    (= (Seq_index S@81@01 (inv@89@01 r)) r))
  :pattern ((inv@89@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@88@01 Int)) (!
  (<= $Perm.No p@83@01)
  :pattern ((Seq_index S@81@01 i@88@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@88@01 Int)) (!
  (<= p@83@01 $Perm.Write)
  :pattern ((Seq_index S@81@01 i@88@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@88@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@88@01) (< i@88@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (not (= (Seq_index S@81@01 i@88@01) $Ref.null)))
  :pattern ((Seq_index S@81@01 i@88@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@01))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@91@01 Int)
(declare-const j@92@01 Int)
(push) ; 2
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 39 | !(0 <= i@91@01) | live]
; [else-branch: 39 | 0 <= i@91@01 | live]
(push) ; 4
; [then-branch: 39 | !(0 <= i@91@01)]
(assert (not (<= 0 i@91@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 39 | 0 <= i@91@01]
(assert (<= 0 i@91@01))
; [eval] i < j
(push) ; 5
; [then-branch: 40 | !(i@91@01 < j@92@01) | live]
; [else-branch: 40 | i@91@01 < j@92@01 | live]
(push) ; 6
; [then-branch: 40 | !(i@91@01 < j@92@01)]
(assert (not (< i@91@01 j@92@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 40 | i@91@01 < j@92@01]
(assert (< i@91@01 j@92@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (< i@91@01 j@92@01) (not (< i@91@01 j@92@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@91@01)
  (and (<= 0 i@91@01) (or (< i@91@01 j@92@01) (not (< i@91@01 j@92@01))))))
(assert (or (<= 0 i@91@01) (not (<= 0 i@91@01))))
(push) ; 3
; [then-branch: 41 | 0 <= i@91@01 && i@91@01 < j@92@01 && j@92@01 < |S@81@01| | live]
; [else-branch: 41 | !(0 <= i@91@01 && i@91@01 < j@92@01 && j@92@01 < |S@81@01|) | live]
(push) ; 4
; [then-branch: 41 | 0 <= i@91@01 && i@91@01 < j@92@01 && j@92@01 < |S@81@01|]
(assert (and (<= 0 i@91@01) (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01)))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 5
(assert (not (>= i@91@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@91@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 i@91@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 i@91@01)))
      (< (inv@89@01 (Seq_index S@81@01 i@91@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@92@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 j@92@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 j@92@01)))
      (< (inv@89@01 (Seq_index S@81@01 j@92@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 41 | !(0 <= i@91@01 && i@91@01 < j@92@01 && j@92@01 < |S@81@01|)]
(assert (not
  (and (<= 0 i@91@01) (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and (<= 0 i@91@01) (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))
  (and (<= 0 i@91@01) (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@91@01)
      (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01)))))
  (and (<= 0 i@91@01) (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@91@01 Int) (j@92@01 Int)) (!
  (and
    (=>
      (<= 0 i@91@01)
      (and (<= 0 i@91@01) (or (< i@91@01 j@92@01) (not (< i@91@01 j@92@01)))))
    (or (<= 0 i@91@01) (not (<= 0 i@91@01)))
    (=>
      (and
        (<= 0 i@91@01)
        (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))
      (and (<= 0 i@91@01) (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))
    (or
      (not
        (and
          (<= 0 i@91@01)
          (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01)))))
      (and
        (<= 0 i@91@01)
        (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))))
  :pattern ((Seq_index S@81@01 i@91@01) (Seq_index S@81@01 j@92@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(assert (forall ((i@91@01 Int) (j@92@01 Int)) (!
  (=>
    (and
      (<= 0 i@91@01)
      (and (< i@91@01 j@92@01) (< j@92@01 (Seq_length S@81@01))))
    (<
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
        S@81@01
        i@91@01))
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
        S@81@01
        j@92@01))))
  :pattern ((Seq_index S@81@01 i@91@01) (Seq_index S@81@01 j@92@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 ($Snap.combine ($Snap.first $t@93@01) ($Snap.second $t@93@01))))
(declare-const i@94@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 42 | !(0 <= i@94@01) | live]
; [else-branch: 42 | 0 <= i@94@01 | live]
(push) ; 5
; [then-branch: 42 | !(0 <= i@94@01)]
(assert (not (<= 0 i@94@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | 0 <= i@94@01]
(assert (<= 0 i@94@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@94@01) (not (<= 0 i@94@01))))
(assert (and (<= 0 i@94@01) (< i@94@01 (Seq_length S@81@01))))
; [eval] S[i]
(push) ; 4
(assert (not (>= i@94@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@95@01 ($Ref) Int)
(declare-fun img@96@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@94@01 Int)) (!
  (=>
    (and (<= 0 i@94@01) (< i@94@01 (Seq_length S@81@01)))
    (or (<= 0 i@94@01) (not (<= 0 i@94@01))))
  :pattern ((Seq_index S@81@01 i@94@01))
  :qid |f-aux|)))
(push) ; 3
(assert (not (forall ((i@94@01 Int)) (!
  (=>
    (and (<= 0 i@94@01) (< i@94@01 (Seq_length S@81@01)))
    (or (= p@83@01 $Perm.No) (< $Perm.No p@83@01)))
  
  :qid |quant-u-51|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@94@01 Int) (i2@94@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@94@01) (< i1@94@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (and
        (and (<= 0 i2@94@01) (< i2@94@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (= (Seq_index S@81@01 i1@94@01) (Seq_index S@81@01 i2@94@01)))
    (= i1@94@01 i2@94@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@94@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@94@01) (< i@94@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (and
      (= (inv@95@01 (Seq_index S@81@01 i@94@01)) i@94@01)
      (img@96@01 (Seq_index S@81@01 i@94@01))))
  :pattern ((Seq_index S@81@01 i@94@01))
  :qid |quant-u-52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@96@01 r)
      (and
        (and (<= 0 (inv@95@01 r)) (< (inv@95@01 r) (Seq_length S@81@01)))
        (< $Perm.No p@83@01)))
    (= (Seq_index S@81@01 (inv@95@01 r)) r))
  :pattern ((inv@95@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@94@01 Int)) (!
  (<= $Perm.No p@83@01)
  :pattern ((Seq_index S@81@01 i@94@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@94@01 Int)) (!
  (<= p@83@01 $Perm.Write)
  :pattern ((Seq_index S@81@01 i@94@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@94@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@94@01) (< i@94@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (not (= (Seq_index S@81@01 i@94@01) $Ref.null)))
  :pattern ((Seq_index S@81@01 i@94@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@93@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@93@01))
    ($Snap.second ($Snap.second $t@93@01)))))
(assert (= ($Snap.first ($Snap.second $t@93@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@84@01))
(assert (=
  ($Snap.second ($Snap.second $t@93@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@93@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@93@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@93@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (< index@84@01 (Seq_length S@81@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@93@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@93@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@93@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@93@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(push) ; 3
; [then-branch: 43 | !(0 <= index@84@01) | live]
; [else-branch: 43 | 0 <= index@84@01 | live]
(push) ; 4
; [then-branch: 43 | !(0 <= index@84@01)]
(assert (not (<= 0 index@84@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 43 | 0 <= index@84@01]
(assert (<= 0 index@84@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@84@01) (not (<= 0 index@84@01))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 44 | 0 <= index@84@01 && index@84@01 < |S@81@01| | live]
; [else-branch: 44 | !(0 <= index@84@01 && index@84@01 < |S@81@01|) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 44 | 0 <= index@84@01 && index@84@01 < |S@81@01|]
(assert (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 5
(assert (not (>= index@84@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@96@01 (Seq_index S@81@01 index@84@01))
    (and
      (<= 0 (inv@95@01 (Seq_index S@81@01 index@84@01)))
      (< (inv@95@01 (Seq_index S@81@01 index@84@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 44 | !(0 <= index@84@01 && index@84@01 < |S@81@01|)]
(assert (not (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01))))
  (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01)))))
(assert (=>
  (and (<= 0 index@84@01) (< index@84@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@93@01)) (Seq_index
      S@81@01
      index@84@01))
    x@82@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@93@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= index@84@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= index@84@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 45 | index@84@01 == -1 | live]
; [else-branch: 45 | index@84@01 != -1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 45 | index@84@01 == -1]
(assert (= index@84@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@97@01 Int)
(push) ; 5
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 6
; [then-branch: 46 | !(0 <= i@97@01) | live]
; [else-branch: 46 | 0 <= i@97@01 | live]
(push) ; 7
; [then-branch: 46 | !(0 <= i@97@01)]
(assert (not (<= 0 i@97@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 46 | 0 <= i@97@01]
(assert (<= 0 i@97@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@97@01) (not (<= 0 i@97@01))))
(push) ; 6
; [then-branch: 47 | 0 <= i@97@01 && i@97@01 < |S@81@01| | live]
; [else-branch: 47 | !(0 <= i@97@01 && i@97@01 < |S@81@01|) | live]
(push) ; 7
; [then-branch: 47 | 0 <= i@97@01 && i@97@01 < |S@81@01|]
(assert (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 8
(assert (not (>= i@97@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (ite
  (and
    (img@96@01 (Seq_index S@81@01 i@97@01))
    (and
      (<= 0 (inv@95@01 (Seq_index S@81@01 i@97@01)))
      (< (inv@95@01 (Seq_index S@81@01 i@97@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | !(0 <= i@97@01 && i@97@01 < |S@81@01|)]
(assert (not (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01))))
  (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@97@01 Int)) (!
  (and
    (or (<= 0 i@97@01) (not (<= 0 i@97@01)))
    (or
      (not (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01))))
      (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01)))))
  :pattern ((Seq_index S@81@01 i@97@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 45 | index@84@01 != -1]
(assert (not (= index@84@01 (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= index@84@01 (- 0 1))
  (and
    (= index@84@01 (- 0 1))
    (forall ((i@97@01 Int)) (!
      (and
        (or (<= 0 i@97@01) (not (<= 0 i@97@01)))
        (or
          (not (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01))))
          (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01)))))
      :pattern ((Seq_index S@81@01 i@97@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@84@01 (- 0 1))) (= index@84@01 (- 0 1))))
(assert (=>
  (= index@84@01 (- 0 1))
  (forall ((i@97@01 Int)) (!
    (=>
      (and (<= 0 i@97@01) (< i@97@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@93@01)) (Seq_index
            S@81@01
            i@97@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@97@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
(pop) ; 2
(push) ; 2
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@81@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@81@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 48 | |S@81@01| == 0 | live]
; [else-branch: 48 | |S@81@01| != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 48 | |S@81@01| == 0]
(assert (= (Seq_length S@81@01) 0))
; [exec]
; index := -1
; [eval] -1
(declare-const i@98@01 Int)
(push) ; 4
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 5
; [then-branch: 49 | !(0 <= i@98@01) | live]
; [else-branch: 49 | 0 <= i@98@01 | live]
(push) ; 6
; [then-branch: 49 | !(0 <= i@98@01)]
(assert (not (<= 0 i@98@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 49 | 0 <= i@98@01]
(assert (<= 0 i@98@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@98@01) (not (<= 0 i@98@01))))
(assert (and (<= 0 i@98@01) (< i@98@01 (Seq_length S@81@01))))
; [eval] S[i]
(push) ; 5
(assert (not (>= i@98@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@99@01 ($Ref) Int)
(declare-fun img@100@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@98@01 Int)) (!
  (=>
    (and (<= 0 i@98@01) (< i@98@01 (Seq_length S@81@01)))
    (or (<= 0 i@98@01) (not (<= 0 i@98@01))))
  :pattern ((Seq_index S@81@01 i@98@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((i@98@01 Int)) (!
  (=>
    (and (<= 0 i@98@01) (< i@98@01 (Seq_length S@81@01)))
    (or (= p@83@01 $Perm.No) (< $Perm.No p@83@01)))
  
  :qid |quant-u-53|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@98@01 Int) (i2@98@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@98@01) (< i1@98@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (and
        (and (<= 0 i2@98@01) (< i2@98@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (= (Seq_index S@81@01 i1@98@01) (Seq_index S@81@01 i2@98@01)))
    (= i1@98@01 i2@98@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@98@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@98@01) (< i@98@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (and
      (= (inv@99@01 (Seq_index S@81@01 i@98@01)) i@98@01)
      (img@100@01 (Seq_index S@81@01 i@98@01))))
  :pattern ((Seq_index S@81@01 i@98@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@100@01 r)
      (and
        (and (<= 0 (inv@99@01 r)) (< (inv@99@01 r) (Seq_length S@81@01)))
        (< $Perm.No p@83@01)))
    (= (Seq_index S@81@01 (inv@99@01 r)) r))
  :pattern ((inv@99@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@101@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@99@01 r)) (< (inv@99@01 r) (Seq_length S@81@01)))
      (img@100@01 r)
      (= r (Seq_index S@81@01 (inv@99@01 r))))
    ($Perm.min
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      p@83@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      (pTaken@101@01 r))
    $Perm.No)
  
  :qid |quant-u-55|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@99@01 r)) (< (inv@99@01 r) (Seq_length S@81@01)))
      (img@100@01 r)
      (= r (Seq_index S@81@01 (inv@99@01 r))))
    (= (- p@83@01 (pTaken@101@01 r)) $Perm.No))
  
  :qid |quant-u-56|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@102@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No p@83@01)
      false)
    (=
      ($FVF.lookup_f (as sm@102@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@102@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef49|)))
; [eval] -1 <= index
; [eval] -1
; [eval] index < |S|
; [eval] |S|
(set-option :timeout 0)
(push) ; 4
(assert (not (< (- 0 1) (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (< (- 0 1) (Seq_length S@81@01)))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(push) ; 4
; [then-branch: 50 | False | dead]
; [else-branch: 50 | True | live]
(push) ; 5
; [else-branch: 50 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 51 | True | live]
; [else-branch: 51 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 51 | True]
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@103@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 52 | !(0 <= i@103@01) | live]
; [else-branch: 52 | 0 <= i@103@01 | live]
(push) ; 8
; [then-branch: 52 | !(0 <= i@103@01)]
(assert (not (<= 0 i@103@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 52 | 0 <= i@103@01]
(assert (<= 0 i@103@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@103@01) (not (<= 0 i@103@01))))
(push) ; 7
; [then-branch: 53 | 0 <= i@103@01 && i@103@01 < |S@81@01| | live]
; [else-branch: 53 | !(0 <= i@103@01 && i@103@01 < |S@81@01|) | live]
(push) ; 8
; [then-branch: 53 | 0 <= i@103@01 && i@103@01 < |S@81@01|]
(assert (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 9
(assert (not (>= i@103@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 i@103@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 i@103@01)))
      (< (inv@89@01 (Seq_index S@81@01 i@103@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 53 | !(0 <= i@103@01 && i@103@01 < |S@81@01|)]
(assert (not (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01))))
  (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@103@01 Int)) (!
  (and
    (or (<= 0 i@103@01) (not (<= 0 i@103@01)))
    (or
      (not (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01))))
      (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01)))))
  :pattern ((Seq_index S@81@01 i@103@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((i@103@01 Int)) (!
  (and
    (or (<= 0 i@103@01) (not (<= 0 i@103@01)))
    (or
      (not (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01))))
      (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01)))))
  :pattern ((Seq_index S@81@01 i@103@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(push) ; 4
(assert (not (forall ((i@103@01 Int)) (!
  (=>
    (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01)))
    (not
      (=
        ($FVF.lookup_f (as sm@102@01  $FVF<f>) (Seq_index S@81@01 i@103@01))
        x@82@01)))
  :pattern ((Seq_index S@81@01 i@103@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@103@01 Int)) (!
  (=>
    (and (<= 0 i@103@01) (< i@103@01 (Seq_length S@81@01)))
    (not
      (=
        ($FVF.lookup_f (as sm@102@01  $FVF<f>) (Seq_index S@81@01 i@103@01))
        x@82@01)))
  :pattern ((Seq_index S@81@01 i@103@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|)))
(pop) ; 3
(push) ; 3
; [else-branch: 48 | |S@81@01| != 0]
(assert (not (= (Seq_length S@81@01) 0)))
(pop) ; 3
; [eval] !(|S| == 0)
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@81@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@81@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 54 | |S@81@01| != 0 | live]
; [else-branch: 54 | |S@81@01| == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 54 | |S@81@01| != 0]
(assert (not (= (Seq_length S@81@01) 0)))
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@81@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@81@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 55 | |S@81@01| == 1 | live]
; [else-branch: 55 | |S@81@01| != 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 55 | |S@81@01| == 1]
(assert (= (Seq_length S@81@01) 1))
; [exec]
; index := (x == S[0].f ? 0 : -1)
; [eval] (x == S[0].f ? 0 : -1)
; [eval] x == S[0].f
; [eval] S[0]
(push) ; 5
(assert (not (< 0 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 0))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 0)))
      (< (inv@89@01 (Seq_index S@81@01 0)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      0))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  x@82@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
    S@81@01
    0)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 56 | x@82@01 == Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[0]) | live]
; [else-branch: 56 | x@82@01 != Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[0]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 56 | x@82@01 == Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[0])]
(assert (=
  x@82@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
    S@81@01
    0))))
(pop) ; 6
(push) ; 6
; [else-branch: 56 | x@82@01 != Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[0])]
(assert (not
  (=
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      0)))))
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      x@82@01
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
        S@81@01
        0))))
  (=
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      0)))))
(declare-const index@104@01 Int)
(assert (=
  index@104@01
  (ite
    (=
      x@82@01
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
        S@81@01
        0)))
    0
    (- 0 1))))
(declare-const i@105@01 Int)
(push) ; 5
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 6
; [then-branch: 57 | !(0 <= i@105@01) | live]
; [else-branch: 57 | 0 <= i@105@01 | live]
(push) ; 7
; [then-branch: 57 | !(0 <= i@105@01)]
(assert (not (<= 0 i@105@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 57 | 0 <= i@105@01]
(assert (<= 0 i@105@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@105@01) (not (<= 0 i@105@01))))
(assert (and (<= 0 i@105@01) (< i@105@01 (Seq_length S@81@01))))
; [eval] S[i]
(push) ; 6
(assert (not (>= i@105@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@106@01 ($Ref) Int)
(declare-fun img@107@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@105@01 Int)) (!
  (=>
    (and (<= 0 i@105@01) (< i@105@01 (Seq_length S@81@01)))
    (or (<= 0 i@105@01) (not (<= 0 i@105@01))))
  :pattern ((Seq_index S@81@01 i@105@01))
  :qid |f-aux|)))
(push) ; 5
(assert (not (forall ((i@105@01 Int)) (!
  (=>
    (and (<= 0 i@105@01) (< i@105@01 (Seq_length S@81@01)))
    (or (= p@83@01 $Perm.No) (< $Perm.No p@83@01)))
  
  :qid |quant-u-57|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@105@01 Int) (i2@105@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@105@01) (< i1@105@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (and
        (and (<= 0 i2@105@01) (< i2@105@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (= (Seq_index S@81@01 i1@105@01) (Seq_index S@81@01 i2@105@01)))
    (= i1@105@01 i2@105@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@105@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@105@01) (< i@105@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (and
      (= (inv@106@01 (Seq_index S@81@01 i@105@01)) i@105@01)
      (img@107@01 (Seq_index S@81@01 i@105@01))))
  :pattern ((Seq_index S@81@01 i@105@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@107@01 r)
      (and
        (and (<= 0 (inv@106@01 r)) (< (inv@106@01 r) (Seq_length S@81@01)))
        (< $Perm.No p@83@01)))
    (= (Seq_index S@81@01 (inv@106@01 r)) r))
  :pattern ((inv@106@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@108@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@106@01 r)) (< (inv@106@01 r) (Seq_length S@81@01)))
      (img@107@01 r)
      (= r (Seq_index S@81@01 (inv@106@01 r))))
    ($Perm.min
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      p@83@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      (pTaken@108@01 r))
    $Perm.No)
  
  :qid |quant-u-59|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@106@01 r)) (< (inv@106@01 r) (Seq_length S@81@01)))
      (img@107@01 r)
      (= r (Seq_index S@81@01 (inv@106@01 r))))
    (= (- p@83@01 (pTaken@108@01 r)) $Perm.No))
  
  :qid |quant-u-60|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@109@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No p@83@01)
      false)
    (=
      ($FVF.lookup_f (as sm@109@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@109@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef50|)))
; [eval] -1 <= index
; [eval] -1
(set-option :timeout 0)
(push) ; 5
(assert (not (<= (- 0 1) index@104@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (<= (- 0 1) index@104@01))
; [eval] index < |S|
; [eval] |S|
(push) ; 5
(assert (not (< index@104@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (< index@104@01 (Seq_length S@81@01)))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(push) ; 5
; [then-branch: 58 | !(0 <= index@104@01) | live]
; [else-branch: 58 | 0 <= index@104@01 | live]
(push) ; 6
; [then-branch: 58 | !(0 <= index@104@01)]
(assert (not (<= 0 index@104@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 58 | 0 <= index@104@01]
(assert (<= 0 index@104@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@104@01) (not (<= 0 index@104@01))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 59 | 0 <= index@104@01 && index@104@01 < |S@81@01| | live]
; [else-branch: 59 | !(0 <= index@104@01 && index@104@01 < |S@81@01|) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 59 | 0 <= index@104@01 && index@104@01 < |S@81@01|]
(assert (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 7
(assert (not (>= index@104@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 index@104@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 index@104@01)))
      (< (inv@89@01 (Seq_index S@81@01 index@104@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 59 | !(0 <= index@104@01 && index@104@01 < |S@81@01|)]
(assert (not (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01))))
  (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01)))))
(push) ; 5
(assert (not (=>
  (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f (as sm@109@01  $FVF<f>) (Seq_index S@81@01 index@104@01))
    x@82@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (and (<= 0 index@104@01) (< index@104@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f (as sm@109@01  $FVF<f>) (Seq_index S@81@01 index@104@01))
    x@82@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= index@104@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= index@104@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 60 | index@104@01 == -1 | live]
; [else-branch: 60 | index@104@01 != -1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 60 | index@104@01 == -1]
(assert (= index@104@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@110@01 Int)
(push) ; 7
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 8
; [then-branch: 61 | !(0 <= i@110@01) | live]
; [else-branch: 61 | 0 <= i@110@01 | live]
(push) ; 9
; [then-branch: 61 | !(0 <= i@110@01)]
(assert (not (<= 0 i@110@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 61 | 0 <= i@110@01]
(assert (<= 0 i@110@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@110@01) (not (<= 0 i@110@01))))
(push) ; 8
; [then-branch: 62 | 0 <= i@110@01 && i@110@01 < |S@81@01| | live]
; [else-branch: 62 | !(0 <= i@110@01 && i@110@01 < |S@81@01|) | live]
(push) ; 9
; [then-branch: 62 | 0 <= i@110@01 && i@110@01 < |S@81@01|]
(assert (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 10
(assert (not (>= i@110@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 i@110@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 i@110@01)))
      (< (inv@89@01 (Seq_index S@81@01 i@110@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 62 | !(0 <= i@110@01 && i@110@01 < |S@81@01|)]
(assert (not (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01))))
  (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@110@01 Int)) (!
  (and
    (or (<= 0 i@110@01) (not (<= 0 i@110@01)))
    (or
      (not (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01))))
      (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01)))))
  :pattern ((Seq_index S@81@01 i@110@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 60 | index@104@01 != -1]
(assert (not (= index@104@01 (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= index@104@01 (- 0 1))
  (and
    (= index@104@01 (- 0 1))
    (forall ((i@110@01 Int)) (!
      (and
        (or (<= 0 i@110@01) (not (<= 0 i@110@01)))
        (or
          (not (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01))))
          (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01)))))
      :pattern ((Seq_index S@81@01 i@110@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@104@01 (- 0 1))) (= index@104@01 (- 0 1))))
(push) ; 5
(assert (not (=>
  (= index@104@01 (- 0 1))
  (forall ((i@110@01 Int)) (!
    (=>
      (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f (as sm@109@01  $FVF<f>) (Seq_index S@81@01 i@110@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@110@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@104@01 (- 0 1))
  (forall ((i@110@01 Int)) (!
    (=>
      (and (<= 0 i@110@01) (< i@110@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f (as sm@109@01  $FVF<f>) (Seq_index S@81@01 i@110@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@110@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
(pop) ; 4
(push) ; 4
; [else-branch: 55 | |S@81@01| != 1]
(assert (not (= (Seq_length S@81@01) 1)))
(pop) ; 4
; [eval] !(|S| == 1)
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@81@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@81@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 63 | |S@81@01| != 1 | live]
; [else-branch: 63 | |S@81@01| == 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 63 | |S@81@01| != 1]
(assert (not (= (Seq_length S@81@01) 1)))
; [exec]
; var k: Int
(declare-const k@111@01 Int)
; [exec]
; inhale 0 < k && k < |S| - 1
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 ($Snap.combine ($Snap.first $t@112@01) ($Snap.second $t@112@01))))
(assert (= ($Snap.first $t@112@01) $Snap.unit))
; [eval] 0 < k
(assert (< 0 k@111@01))
(assert (= ($Snap.second $t@112@01) $Snap.unit))
; [eval] k < |S| - 1
; [eval] |S| - 1
; [eval] |S|
(assert (< k@111@01 (- (Seq_length S@81@01) 1)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] x < S[k].f
; [eval] S[k]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= k@111@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@111@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 k@111@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 k@111@01)))
      (< (inv@89@01 (Seq_index S@81@01 k@111@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      k@111@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  x@82@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
    S@81@01
    k@111@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 64 | x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01]) | live]
; [else-branch: 64 | !(x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 64 | x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01])]
(assert (<
  x@82@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
    S@81@01
    k@111@01))))
; [exec]
; index := bfind_fixed_ineq(S[0..k], x, p / 2)
; [eval] S[0..k]
; [eval] S[..k]
; [eval] p / 2
; [eval] p > none
(push) ; 6
(assert (not (> (/ p@83@01 (to_real 2)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (> (/ p@83@01 (to_real 2)) $Perm.No))
; [eval] p < write
(push) ; 6
(assert (not (< (/ p@83@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< (/ p@83@01 (to_real 2)) $Perm.Write))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@113@01 Int)
(declare-const j@114@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 65 | !(i@113@01 in [0..|S@81@01[:k@111@01][0:]|]) | live]
; [else-branch: 65 | i@113@01 in [0..|S@81@01[:k@111@01][0:]|] | live]
(push) ; 8
; [then-branch: 65 | !(i@113@01 in [0..|S@81@01[:k@111@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 65 | i@113@01 in [0..|S@81@01[:k@111@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
  i@113@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 66 | !(j@114@01 in [0..|S@81@01[:k@111@01][0:]|]) | live]
; [else-branch: 66 | j@114@01 in [0..|S@81@01[:k@111@01][0:]|] | live]
(push) ; 10
; [then-branch: 66 | !(j@114@01 in [0..|S@81@01[:k@111@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 66 | j@114@01 in [0..|S@81@01[:k@111@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
  j@114@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      j@114@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      i@113@01)
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        j@114@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01))))))
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      i@113@01))))
(push) ; 7
; [then-branch: 67 | i@113@01 in [0..|S@81@01[:k@111@01][0:]|] && j@114@01 in [0..|S@81@01[:k@111@01][0:]|] && i@113@01 != j@114@01 | live]
; [else-branch: 67 | !(i@113@01 in [0..|S@81@01[:k@111@01][0:]|] && j@114@01 in [0..|S@81@01[:k@111@01][0:]|] && i@113@01 != j@114@01) | live]
(push) ; 8
; [then-branch: 67 | i@113@01 in [0..|S@81@01[:k@111@01][0:]|] && j@114@01 in [0..|S@81@01[:k@111@01][0:]|] && i@113@01 != j@114@01]
(assert (and
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      j@114@01)
    (not (= i@113@01 j@114@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@113@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@113@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@114@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< j@114@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 67 | !(i@113@01 in [0..|S@81@01[:k@111@01][0:]|] && j@114@01 in [0..|S@81@01[:k@111@01][0:]|] && i@113@01 != j@114@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      i@113@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        j@114@01)
      (not (= i@113@01 j@114@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      i@113@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        j@114@01)
      (not (= i@113@01 j@114@01))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      i@113@01)
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      j@114@01)
    (not (= i@113@01 j@114@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01)))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
      i@113@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        j@114@01)
      (not (= i@113@01 j@114@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            i@113@01)
          (and
            (Seq_contains
              (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
              j@114@01)
            (not (= i@113@01 j@114@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          i@113@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
            j@114@01)
          (not (= i@113@01 j@114@01))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(push) ; 6
(assert (not (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01)
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@113@01 Int) (j@114@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
        i@113@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
          j@114@01)
        (not (= i@113@01 j@114@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01)
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    i@113@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@114@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))
    j@114@01) (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@113@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    j@114@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(declare-const i@115@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 68 | !(0 <= i@115@01) | live]
; [else-branch: 68 | 0 <= i@115@01 | live]
(push) ; 8
; [then-branch: 68 | !(0 <= i@115@01)]
(assert (not (<= 0 i@115@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 68 | 0 <= i@115@01]
(assert (<= 0 i@115@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@115@01) (not (<= 0 i@115@01))))
(assert (and
  (<= 0 i@115@01)
  (< i@115@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@115@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@116@01 ($Ref) Int)
(declare-fun img@117@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@115@01 Int)) (!
  (=>
    (and
      (<= 0 i@115@01)
      (< i@115@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
    (or (<= 0 i@115@01) (not (<= 0 i@115@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@115@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@115@01 Int)) (!
  (=>
    (and
      (<= 0 i@115@01)
      (< i@115@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
    (or
      (= (/ p@83@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@83@01 (to_real 2)))))
  
  :qid |quant-u-61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@115@01 Int) (i2@115@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@115@01)
          (< i1@115@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@115@01)
          (< i2@115@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (=
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i1@115@01)
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i2@115@01)))
    (= i1@115@01 i2@115@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@115@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@115@01)
        (< i@115@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
      (< $Perm.No (/ p@83@01 (to_real 2))))
    (and
      (=
        (inv@116@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@115@01))
        i@115@01)
      (img@117@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@115@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@115@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@117@01 r)
      (and
        (and
          (<= 0 (inv@116@01 r))
          (<
            (inv@116@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
        (< $Perm.No (/ p@83@01 (to_real 2)))))
    (= (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) (inv@116@01 r)) r))
  :pattern ((inv@116@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@115@01 Int)) (!
  (=
    (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@115@01)
    (Seq_index S@81@01 i@115@01))
  
  :qid |quant-u-62|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@118@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@116@01 r))
        (< (inv@116@01 r) (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
      (img@117@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) (inv@116@01 r))))
    ($Perm.min
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      (/ p@83@01 (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      (pTaken@118@01 r))
    $Perm.No)
  
  :qid |quant-u-64|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@118@01 r) $Perm.No)
  
  :qid |quant-u-65|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@116@01 r))
        (< (inv@116@01 r) (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
      (img@117@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) (inv@116@01 r))))
    (= (- (/ p@83@01 (to_real 2)) (pTaken@118@01 r)) $Perm.No))
  
  :qid |quant-u-66|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@119@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No p@83@01)
      false)
    (=
      ($FVF.lookup_f (as sm@119@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@119@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef51|)))
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@120@01 Int)
(declare-const j@121@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 69 | !(0 <= i@120@01) | live]
; [else-branch: 69 | 0 <= i@120@01 | live]
(push) ; 8
; [then-branch: 69 | !(0 <= i@120@01)]
(assert (not (<= 0 i@120@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 69 | 0 <= i@120@01]
(assert (<= 0 i@120@01))
; [eval] i < j
(push) ; 9
; [then-branch: 70 | !(i@120@01 < j@121@01) | live]
; [else-branch: 70 | i@120@01 < j@121@01 | live]
(push) ; 10
; [then-branch: 70 | !(i@120@01 < j@121@01)]
(assert (not (< i@120@01 j@121@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 70 | i@120@01 < j@121@01]
(assert (< i@120@01 j@121@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (< i@120@01 j@121@01) (not (< i@120@01 j@121@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@120@01)
  (and (<= 0 i@120@01) (or (< i@120@01 j@121@01) (not (< i@120@01 j@121@01))))))
(assert (or (<= 0 i@120@01) (not (<= 0 i@120@01))))
(push) ; 7
; [then-branch: 71 | 0 <= i@120@01 && i@120@01 < j@121@01 && j@121@01 < |S@81@01[:k@111@01][0:]| | live]
; [else-branch: 71 | !(0 <= i@120@01 && i@120@01 < j@121@01 && j@121@01 < |S@81@01[:k@111@01][0:]|) | live]
(push) ; 8
; [then-branch: 71 | 0 <= i@120@01 && i@120@01 < j@121@01 && j@121@01 < |S@81@01[:k@111@01][0:]|]
(assert (and
  (<= 0 i@120@01)
  (and
    (< i@120@01 j@121@01)
    (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@120@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@120@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@90@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@120@01))
    (and
      (<=
        0
        (inv@89@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@120@01)))
      (<
        (inv@89@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@120@01))
        (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@121@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@90@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@121@01))
    (and
      (<=
        0
        (inv@89@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@121@01)))
      (<
        (inv@89@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) j@121@01))
        (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 71 | !(0 <= i@120@01 && i@120@01 < j@121@01 && j@121@01 < |S@81@01[:k@111@01][0:]|)]
(assert (not
  (and
    (<= 0 i@120@01)
    (and
      (< i@120@01 j@121@01)
      (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 i@120@01)
    (and
      (< i@120@01 j@121@01)
      (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
  (and
    (<= 0 i@120@01)
    (< i@120@01 j@121@01)
    (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@120@01)
      (and
        (< i@120@01 j@121@01)
        (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
  (and
    (<= 0 i@120@01)
    (and
      (< i@120@01 j@121@01)
      (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@120@01 Int) (j@121@01 Int)) (!
  (and
    (=>
      (<= 0 i@120@01)
      (and
        (<= 0 i@120@01)
        (or (< i@120@01 j@121@01) (not (< i@120@01 j@121@01)))))
    (or (<= 0 i@120@01) (not (<= 0 i@120@01)))
    (=>
      (and
        (<= 0 i@120@01)
        (and
          (< i@120@01 j@121@01)
          (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (and
        (<= 0 i@120@01)
        (< i@120@01 j@121@01)
        (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
    (or
      (not
        (and
          (<= 0 i@120@01)
          (and
            (< i@120@01 j@121@01)
            (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
      (and
        (<= 0 i@120@01)
        (and
          (< i@120@01 j@121@01)
          (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@120@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    j@121@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(push) ; 6
(assert (not (forall ((i@120@01 Int) (j@121@01 Int)) (!
  (=>
    (and
      (<= 0 i@120@01)
      (and
        (< i@120@01 j@121@01)
        (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
    (<
      ($FVF.lookup_f (as sm@119@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 k@111@01) 0)
        i@120@01))
      ($FVF.lookup_f (as sm@119@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 k@111@01) 0)
        j@121@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@120@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    j@121@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@120@01 Int) (j@121@01 Int)) (!
  (=>
    (and
      (<= 0 i@120@01)
      (and
        (< i@120@01 j@121@01)
        (< j@121@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
    (<
      ($FVF.lookup_f (as sm@119@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 k@111@01) 0)
        i@120@01))
      ($FVF.lookup_f (as sm@119@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 k@111@01) 0)
        j@121@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@120@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    j@121@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
(declare-const index@122@01 Int)
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 ($Snap.combine ($Snap.first $t@123@01) ($Snap.second $t@123@01))))
(declare-const i@124@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 72 | !(0 <= i@124@01) | live]
; [else-branch: 72 | 0 <= i@124@01 | live]
(push) ; 8
; [then-branch: 72 | !(0 <= i@124@01)]
(assert (not (<= 0 i@124@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 72 | 0 <= i@124@01]
(assert (<= 0 i@124@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@124@01) (not (<= 0 i@124@01))))
(assert (and
  (<= 0 i@124@01)
  (< i@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@124@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@125@01 ($Ref) Int)
(declare-fun img@126@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@124@01 Int)) (!
  (=>
    (and
      (<= 0 i@124@01)
      (< i@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
    (or (<= 0 i@124@01) (not (<= 0 i@124@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@124@01 Int)) (!
  (=>
    (and
      (<= 0 i@124@01)
      (< i@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
    (or
      (= (/ p@83@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@83@01 (to_real 2)))))
  
  :qid |quant-u-67|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@124@01 Int) (i2@124@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@124@01)
          (< i1@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@124@01)
          (< i2@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (=
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i1@124@01)
        (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i2@124@01)))
    (= i1@124@01 i2@124@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@124@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@124@01)
        (< i@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
      (< $Perm.No (/ p@83@01 (to_real 2))))
    (and
      (=
        (inv@125@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))
        i@124@01)
      (img@126@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))
  :qid |quant-u-68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@126@01 r)
      (and
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
        (< $Perm.No (/ p@83@01 (to_real 2)))))
    (= (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) (inv@125@01 r)) r))
  :pattern ((inv@125@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@124@01 Int)) (!
  (<= $Perm.No (/ p@83@01 (to_real 2)))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@124@01 Int)) (!
  (<= (/ p@83@01 (to_real 2)) $Perm.Write)
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@124@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@124@01)
        (< i@124@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
      (< $Perm.No (/ p@83@01 (to_real 2))))
    (not
      (= (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01) $Ref.null)))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@124@01)
      (Seq_index S@81@01 i@88@01))
    (=
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))))
  
  :qid |quant-u-69|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@123@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@123@01))
    ($Snap.second ($Snap.second $t@123@01)))))
(assert (= ($Snap.first ($Snap.second $t@123@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@122@01))
(assert (=
  ($Snap.second ($Snap.second $t@123@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@123@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@123@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@123@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@123@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@123@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@123@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(set-option :timeout 0)
(push) ; 6
; [then-branch: 73 | !(0 <= index@122@01) | live]
; [else-branch: 73 | 0 <= index@122@01 | live]
(push) ; 7
; [then-branch: 73 | !(0 <= index@122@01)]
(assert (not (<= 0 index@122@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 73 | 0 <= index@122@01]
(assert (<= 0 index@122@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@122@01) (not (<= 0 index@122@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 index@122@01)
    (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 index@122@01)
  (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 74 | 0 <= index@122@01 && index@122@01 < |S@81@01[:k@111@01][0:]| | live]
; [else-branch: 74 | !(0 <= index@122@01 && index@122@01 < |S@81@01[:k@111@01][0:]|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 74 | 0 <= index@122@01 && index@122@01 < |S@81@01[:k@111@01][0:]|]
(assert (and
  (<= 0 index@122@01)
  (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@122@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@127@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
(declare-const pm@128@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@118@01 r))
        $Perm.No)
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef54|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_f (as pm@128@01  $FPM) (Seq_index
    (Seq_drop (Seq_take S@81@01 k@111@01) 0)
    index@122@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 74 | !(0 <= index@122@01 && index@122@01 < |S@81@01[:k@111@01][0:]|)]
(assert (not
  (and
    (<= 0 index@122@01)
    (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@118@01 r))
        $Perm.No)
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef54|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 index@122@01)
      (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
  (and
    (<= 0 index@122@01)
    (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
(assert (=>
  (and
    (<= 0 index@122@01)
    (< index@122@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
  (=
    ($FVF.lookup_f (as sm@127@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@81@01 k@111@01) 0)
      index@122@01))
    x@82@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@122@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@122@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 75 | index@122@01 == -1 | live]
; [else-branch: 75 | index@122@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 75 | index@122@01 == -1]
(assert (= index@122@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@129@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 76 | !(0 <= i@129@01) | live]
; [else-branch: 76 | 0 <= i@129@01 | live]
(push) ; 10
; [then-branch: 76 | !(0 <= i@129@01)]
(assert (not (<= 0 i@129@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 76 | 0 <= i@129@01]
(assert (<= 0 i@129@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@129@01) (not (<= 0 i@129@01))))
(push) ; 9
; [then-branch: 77 | 0 <= i@129@01 && i@129@01 < |S@81@01[:k@111@01][0:]| | live]
; [else-branch: 77 | !(0 <= i@129@01 && i@129@01 < |S@81@01[:k@111@01][0:]|) | live]
(push) ; 10
; [then-branch: 77 | 0 <= i@129@01 && i@129@01 < |S@81@01[:k@111@01][0:]|]
(assert (and
  (<= 0 i@129@01)
  (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@129@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (< $Perm.No (/ p@83@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
    :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
    :qid |qp.fvfValDef53|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@90@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@129@01))
        (and
          (<=
            0
            (inv@89@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 k@111@01) 0)
              i@129@01)))
          (<
            (inv@89@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 k@111@01) 0)
              i@129@01))
            (Seq_length S@81@01))))
      (-
        p@83@01
        (pTaken@118@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 k@111@01) 0)
          i@129@01)))
      $Perm.No)
    (ite
      (and
        (img@126@01 (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@129@01))
        (and
          (<=
            0
            (inv@125@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 k@111@01) 0)
              i@129@01)))
          (<
            (inv@125@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 k@111@01) 0)
              i@129@01))
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (/ p@83@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 77 | !(0 <= i@129@01 && i@129@01 < |S@81@01[:k@111@01][0:]|)]
(assert (not
  (and
    (<= 0 i@129@01)
    (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@129@01)
      (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
  (and
    (<= 0 i@129@01)
    (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@129@01 Int)) (!
  (and
    (or (<= 0 i@129@01) (not (<= 0 i@129@01)))
    (or
      (not
        (and
          (<= 0 i@129@01)
          (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (and
        (<= 0 i@129@01)
        (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@129@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 75 | index@122@01 != -1]
(assert (not (= index@122@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
(assert (=>
  (= index@122@01 (- 0 1))
  (and
    (= index@122@01 (- 0 1))
    (forall ((i@129@01 Int)) (!
      (and
        (or (<= 0 i@129@01) (not (<= 0 i@129@01)))
        (or
          (not
            (and
              (<= 0 i@129@01)
              (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
          (and
            (<= 0 i@129@01)
            (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))))
      :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@129@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@122@01 (- 0 1))) (= index@122@01 (- 0 1))))
(assert (=>
  (= index@122@01 (- 0 1))
  (forall ((i@129@01 Int)) (!
    (=>
      (and
        (<= 0 i@129@01)
        (< i@129@01 (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0))))
      (not
        (=
          ($FVF.lookup_f (as sm@127@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@81@01 k@111@01) 0)
            i@129@01))
          x@82@01)))
    :pattern ((Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@129@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(declare-const i@130@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 78 | !(0 <= i@130@01) | live]
; [else-branch: 78 | 0 <= i@130@01 | live]
(push) ; 8
; [then-branch: 78 | !(0 <= i@130@01)]
(assert (not (<= 0 i@130@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 78 | 0 <= i@130@01]
(assert (<= 0 i@130@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@130@01) (not (<= 0 i@130@01))))
(assert (and (<= 0 i@130@01) (< i@130@01 (Seq_length S@81@01))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@130@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@131@01 ($Ref) Int)
(declare-fun img@132@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@130@01 Int)) (!
  (=>
    (and (<= 0 i@130@01) (< i@130@01 (Seq_length S@81@01)))
    (or (<= 0 i@130@01) (not (<= 0 i@130@01))))
  :pattern ((Seq_index S@81@01 i@130@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@130@01 Int)) (!
  (=>
    (and (<= 0 i@130@01) (< i@130@01 (Seq_length S@81@01)))
    (or (= p@83@01 $Perm.No) (< $Perm.No p@83@01)))
  
  :qid |quant-u-70|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@130@01 Int) (i2@130@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@130@01) (< i1@130@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (and
        (and (<= 0 i2@130@01) (< i2@130@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (= (Seq_index S@81@01 i1@130@01) (Seq_index S@81@01 i2@130@01)))
    (= i1@130@01 i2@130@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@130@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@130@01) (< i@130@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (and
      (= (inv@131@01 (Seq_index S@81@01 i@130@01)) i@130@01)
      (img@132@01 (Seq_index S@81@01 i@130@01))))
  :pattern ((Seq_index S@81@01 i@130@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@132@01 r)
      (and
        (and (<= 0 (inv@131@01 r)) (< (inv@131@01 r) (Seq_length S@81@01)))
        (< $Perm.No p@83@01)))
    (= (Seq_index S@81@01 (inv@131@01 r)) r))
  :pattern ((inv@131@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@130@01 Int)) (!
  (=
    (Seq_index S@81@01 i@130@01)
    (Seq_index (Seq_drop (Seq_take S@81@01 k@111@01) 0) i@130@01))
  
  :qid |quant-u-71|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@133@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@131@01 r)) (< (inv@131@01 r) (Seq_length S@81@01)))
      (img@132@01 r)
      (= r (Seq_index S@81@01 (inv@131@01 r))))
    ($Perm.min
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@118@01 r))
        $Perm.No)
      p@83@01)
    $Perm.No))
(define-fun pTaken@134@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@131@01 r)) (< (inv@131@01 r) (Seq_length S@81@01)))
      (img@132@01 r)
      (= r (Seq_index S@81@01 (inv@131@01 r))))
    ($Perm.min
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)
      (- p@83@01 (pTaken@133@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@118@01 r))
        $Perm.No)
      (pTaken@133@01 r))
    $Perm.No)
  
  :qid |quant-u-73|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@131@01 r)) (< (inv@131@01 r) (Seq_length S@81@01)))
      (img@132@01 r)
      (= r (Seq_index S@81@01 (inv@131@01 r))))
    (= (- p@83@01 (pTaken@133@01 r)) $Perm.No))
  
  :qid |quant-u-74|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)
      (pTaken@134@01 r))
    $Perm.No)
  
  :qid |quant-u-75|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@131@01 r)) (< (inv@131@01 r) (Seq_length S@81@01)))
      (img@132@01 r)
      (= r (Seq_index S@81@01 (inv@131@01 r))))
    (= (- (- p@83@01 (pTaken@133@01 r)) (pTaken@134@01 r)) $Perm.No))
  
  :qid |quant-u-76|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] -1 <= index
; [eval] -1
; [eval] index < |S|
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(assert (not (< index@122@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< index@122@01 (Seq_length S@81@01)))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(push) ; 6
; [then-branch: 79 | !(0 <= index@122@01) | live]
; [else-branch: 79 | 0 <= index@122@01 | live]
(push) ; 7
; [then-branch: 79 | !(0 <= index@122@01)]
(assert (not (<= 0 index@122@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 79 | 0 <= index@122@01]
(assert (<= 0 index@122@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 80 | 0 <= index@122@01 && index@122@01 < |S@81@01| | live]
; [else-branch: 80 | !(0 <= index@122@01 && index@122@01 < |S@81@01|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 80 | 0 <= index@122@01 && index@122@01 < |S@81@01|]
(assert (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@122@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (< $Perm.No (/ p@83@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
    :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
    :qid |qp.fvfValDef53|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@90@01 (Seq_index S@81@01 index@122@01))
        (and
          (<= 0 (inv@89@01 (Seq_index S@81@01 index@122@01)))
          (< (inv@89@01 (Seq_index S@81@01 index@122@01)) (Seq_length S@81@01))))
      (- p@83@01 (pTaken@118@01 (Seq_index S@81@01 index@122@01)))
      $Perm.No)
    (ite
      (and
        (img@126@01 (Seq_index S@81@01 index@122@01))
        (and
          (<= 0 (inv@125@01 (Seq_index S@81@01 index@122@01)))
          (<
            (inv@125@01 (Seq_index S@81@01 index@122@01))
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (/ p@83@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 80 | !(0 <= index@122@01 && index@122@01 < |S@81@01|)]
(assert (not (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01))))
  (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01)))))
(push) ; 6
(assert (not (=>
  (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f (as sm@127@01  $FVF<f>) (Seq_index S@81@01 index@122@01))
    x@82@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (and (<= 0 index@122@01) (< index@122@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f (as sm@127@01  $FVF<f>) (Seq_index S@81@01 index@122@01))
    x@82@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@122@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@122@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 81 | index@122@01 == -1 | live]
; [else-branch: 81 | index@122@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 81 | index@122@01 == -1]
(assert (= index@122@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@135@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 82 | !(0 <= i@135@01) | live]
; [else-branch: 82 | 0 <= i@135@01 | live]
(push) ; 10
; [then-branch: 82 | !(0 <= i@135@01)]
(assert (not (<= 0 i@135@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 82 | 0 <= i@135@01]
(assert (<= 0 i@135@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@135@01) (not (<= 0 i@135@01))))
(push) ; 9
; [then-branch: 83 | 0 <= i@135@01 && i@135@01 < |S@81@01| | live]
; [else-branch: 83 | !(0 <= i@135@01 && i@135@01 < |S@81@01|) | live]
(push) ; 10
; [then-branch: 83 | 0 <= i@135@01 && i@135@01 < |S@81@01|]
(assert (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@135@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@126@01 r)
          (and
            (<= 0 (inv@125@01 r))
            (<
              (inv@125@01 r)
              (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
        (< $Perm.No (/ p@83@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
    :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
    :qid |qp.fvfValDef53|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@90@01 (Seq_index S@81@01 i@135@01))
        (and
          (<= 0 (inv@89@01 (Seq_index S@81@01 i@135@01)))
          (< (inv@89@01 (Seq_index S@81@01 i@135@01)) (Seq_length S@81@01))))
      (- p@83@01 (pTaken@118@01 (Seq_index S@81@01 i@135@01)))
      $Perm.No)
    (ite
      (and
        (img@126@01 (Seq_index S@81@01 i@135@01))
        (and
          (<= 0 (inv@125@01 (Seq_index S@81@01 i@135@01)))
          (<
            (inv@125@01 (Seq_index S@81@01 i@135@01))
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (/ p@83@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 83 | !(0 <= i@135@01 && i@135@01 < |S@81@01|)]
(assert (not (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01))))
  (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@135@01 Int)) (!
  (and
    (or (<= 0 i@135@01) (not (<= 0 i@135@01)))
    (or
      (not (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01))))
      (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01)))))
  :pattern ((Seq_index S@81@01 i@135@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 81 | index@122@01 != -1]
(assert (not (= index@122@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@118@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@126@01 r)
        (and
          (<= 0 (inv@125@01 r))
          (<
            (inv@125@01 r)
            (Seq_length (Seq_drop (Seq_take S@81@01 k@111@01) 0)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@127@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r)))
  :pattern (($FVF.lookup_f (as sm@127@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@123@01)) r))
  :qid |qp.fvfValDef53|)))
(assert (=>
  (= index@122@01 (- 0 1))
  (and
    (= index@122@01 (- 0 1))
    (forall ((i@135@01 Int)) (!
      (and
        (or (<= 0 i@135@01) (not (<= 0 i@135@01)))
        (or
          (not (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01))))
          (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01)))))
      :pattern ((Seq_index S@81@01 i@135@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (= index@122@01 (- 0 1))
  (forall ((i@135@01 Int)) (!
    (=>
      (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f (as sm@127@01  $FVF<f>) (Seq_index S@81@01 i@135@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@135@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@122@01 (- 0 1))
  (forall ((i@135@01 Int)) (!
    (=>
      (and (<= 0 i@135@01) (< i@135@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f (as sm@127@01  $FVF<f>) (Seq_index S@81@01 i@135@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@135@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
(pop) ; 5
(push) ; 5
; [else-branch: 64 | !(x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01]))]
(assert (not
  (<
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      k@111@01)))))
(pop) ; 5
; [eval] !(x < S[k].f)
; [eval] x < S[k].f
; [eval] S[k]
(push) ; 5
(assert (not (>= k@111@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@111@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@90@01 (Seq_index S@81@01 k@111@01))
    (and
      (<= 0 (inv@89@01 (Seq_index S@81@01 k@111@01)))
      (< (inv@89@01 (Seq_index S@81@01 k@111@01)) (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  x@82@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
    S@81@01
    k@111@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      k@111@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 84 | !(x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01])) | live]
; [else-branch: 84 | x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01]) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 84 | !(x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01]))]
(assert (not
  (<
    x@82@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
      S@81@01
      k@111@01)))))
; [exec]
; index := bfind_fixed_ineq(S[k..|S|], x, p / 2)
; [eval] S[k..|S|]
; [eval] S[..|S|]
; [eval] |S|
; [eval] p / 2
; [eval] p > none
(push) ; 6
(assert (not (> (/ p@83@01 (to_real 2)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (> (/ p@83@01 (to_real 2)) $Perm.No))
; [eval] p < write
(push) ; 6
(assert (not (< (/ p@83@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< (/ p@83@01 (to_real 2)) $Perm.Write))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@136@01 Int)
(declare-const j@137@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 85 | !(i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|]) | live]
; [else-branch: 85 | i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] | live]
(push) ; 8
; [then-branch: 85 | !(i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|])]
(assert (not
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 85 | i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|]]
(assert (Seq_contains
  (Seq_range
    0
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
  i@136@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 86 | !(j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|]) | live]
; [else-branch: 86 | j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] | live]
(push) ; 10
; [then-branch: 86 | !(j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|])]
(assert (not
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 86 | j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|]]
(assert (Seq_contains
  (Seq_range
    0
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
  j@137@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01)
  (not
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      j@137@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01)
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      i@136@01)
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        j@137@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01))))))
(assert (or
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01)
  (not
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      i@136@01))))
(push) ; 7
; [then-branch: 87 | i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && i@136@01 != j@137@01 | live]
; [else-branch: 87 | !(i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && i@136@01 != j@137@01) | live]
(push) ; 8
; [then-branch: 87 | i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && i@136@01 != j@137@01]
(assert (and
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01)
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      j@137@01)
    (not (= i@136@01 j@137@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@136@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@136@01
  (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@137@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  j@137@01
  (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 87 | !(i@136@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && j@137@01 in [0..|S@81@01[:|S@81@01|][k@111@01:]|] && i@136@01 != j@137@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      i@136@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        j@137@01)
      (not (= i@136@01 j@137@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      i@136@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        j@137@01)
      (not (= i@136@01 j@137@01))))
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      i@136@01)
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      j@137@01)
    (not (= i@136@01 j@137@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01)))))
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
      i@136@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        j@137@01)
      (not (= i@136@01 j@137@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            i@136@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
              j@137@01)
            (not (= i@136@01 j@137@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          i@136@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
            j@137@01)
          (not (= i@136@01 j@137@01))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(push) ; 6
(assert (not (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@136@01)
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          j@137@01))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@136@01 Int) (j@137@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
        i@136@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
          j@137@01)
        (not (= i@136@01 j@137@01))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@136@01)
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          j@137@01))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))
    j@137@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@136@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@137@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(declare-const i@138@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 88 | !(0 <= i@138@01) | live]
; [else-branch: 88 | 0 <= i@138@01 | live]
(push) ; 8
; [then-branch: 88 | !(0 <= i@138@01)]
(assert (not (<= 0 i@138@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 88 | 0 <= i@138@01]
(assert (<= 0 i@138@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@138@01) (not (<= 0 i@138@01))))
(assert (and
  (<= 0 i@138@01)
  (<
    i@138@01
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@138@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@139@01 ($Ref) Int)
(declare-fun img@140@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@138@01 Int)) (!
  (=>
    (and
      (<= 0 i@138@01)
      (<
        i@138@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
    (or (<= 0 i@138@01) (not (<= 0 i@138@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@138@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@138@01 Int)) (!
  (=>
    (and
      (<= 0 i@138@01)
      (<
        i@138@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
    (or
      (= (/ p@83@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@83@01 (to_real 2)))))
  
  :qid |quant-u-77|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@138@01 Int) (i2@138@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@138@01)
          (<
            i1@138@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@138@01)
          (<
            i2@138@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (=
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i1@138@01)
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i2@138@01)))
    (= i1@138@01 i2@138@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@138@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@138@01)
        (<
          i@138@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
      (< $Perm.No (/ p@83@01 (to_real 2))))
    (and
      (=
        (inv@139@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@138@01))
        i@138@01)
      (img@140@01 (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        i@138@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@138@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@140@01 r)
      (and
        (and
          (<= 0 (inv@139@01 r))
          (<
            (inv@139@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
        (< $Perm.No (/ p@83@01 (to_real 2)))))
    (=
      (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        (inv@139@01 r))
      r))
  :pattern ((inv@139@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@138@01 Int)) (!
  (=
    (Seq_index
      (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
      i@138@01)
    (Seq_index S@81@01 i@138@01))
  
  :qid |quant-u-78|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@141@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@139@01 r))
        (<
          (inv@139@01 r)
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
      (img@140@01 r)
      (=
        r
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          (inv@139@01 r))))
    ($Perm.min
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      (/ p@83@01 (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        p@83@01
        $Perm.No)
      (pTaken@141@01 r))
    $Perm.No)
  
  :qid |quant-u-80|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@141@01 r) $Perm.No)
  
  :qid |quant-u-81|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@139@01 r))
        (<
          (inv@139@01 r)
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
      (img@140@01 r)
      (=
        r
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          (inv@139@01 r))))
    (= (- (/ p@83@01 (to_real 2)) (pTaken@141@01 r)) $Perm.No))
  
  :qid |quant-u-82|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@142@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No p@83@01)
      false)
    (=
      ($FVF.lookup_f (as sm@142@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@142@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef55|)))
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@143@01 Int)
(declare-const j@144@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 89 | !(0 <= i@143@01) | live]
; [else-branch: 89 | 0 <= i@143@01 | live]
(push) ; 8
; [then-branch: 89 | !(0 <= i@143@01)]
(assert (not (<= 0 i@143@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 89 | 0 <= i@143@01]
(assert (<= 0 i@143@01))
; [eval] i < j
(push) ; 9
; [then-branch: 90 | !(i@143@01 < j@144@01) | live]
; [else-branch: 90 | i@143@01 < j@144@01 | live]
(push) ; 10
; [then-branch: 90 | !(i@143@01 < j@144@01)]
(assert (not (< i@143@01 j@144@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 90 | i@143@01 < j@144@01]
(assert (< i@143@01 j@144@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (< i@143@01 j@144@01) (not (< i@143@01 j@144@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@143@01)
  (and (<= 0 i@143@01) (or (< i@143@01 j@144@01) (not (< i@143@01 j@144@01))))))
(assert (or (<= 0 i@143@01) (not (<= 0 i@143@01))))
(push) ; 7
; [then-branch: 91 | 0 <= i@143@01 && i@143@01 < j@144@01 && j@144@01 < |S@81@01[:|S@81@01|][k@111@01:]| | live]
; [else-branch: 91 | !(0 <= i@143@01 && i@143@01 < j@144@01 && j@144@01 < |S@81@01[:|S@81@01|][k@111@01:]|) | live]
(push) ; 8
; [then-branch: 91 | 0 <= i@143@01 && i@143@01 < j@144@01 && j@144@01 < |S@81@01[:|S@81@01|][k@111@01:]|]
(assert (and
  (<= 0 i@143@01)
  (and
    (< i@143@01 j@144@01)
    (<
      j@144@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@143@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@143@01
  (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@90@01 (Seq_index
      (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
      i@143@01))
    (and
      (<=
        0
        (inv@89@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@143@01)))
      (<
        (inv@89@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@143@01))
        (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@144@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@90@01 (Seq_index
      (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
      j@144@01))
    (and
      (<=
        0
        (inv@89@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          j@144@01)))
      (<
        (inv@89@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          j@144@01))
        (Seq_length S@81@01))))
  (< $Perm.No p@83@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 91 | !(0 <= i@143@01 && i@143@01 < j@144@01 && j@144@01 < |S@81@01[:|S@81@01|][k@111@01:]|)]
(assert (not
  (and
    (<= 0 i@143@01)
    (and
      (< i@143@01 j@144@01)
      (<
        j@144@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 i@143@01)
    (and
      (< i@143@01 j@144@01)
      (<
        j@144@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
  (and
    (<= 0 i@143@01)
    (< i@143@01 j@144@01)
    (<
      j@144@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@143@01)
      (and
        (< i@143@01 j@144@01)
        (<
          j@144@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
  (and
    (<= 0 i@143@01)
    (and
      (< i@143@01 j@144@01)
      (<
        j@144@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@143@01 Int) (j@144@01 Int)) (!
  (and
    (=>
      (<= 0 i@143@01)
      (and
        (<= 0 i@143@01)
        (or (< i@143@01 j@144@01) (not (< i@143@01 j@144@01)))))
    (or (<= 0 i@143@01) (not (<= 0 i@143@01)))
    (=>
      (and
        (<= 0 i@143@01)
        (and
          (< i@143@01 j@144@01)
          (<
            j@144@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (and
        (<= 0 i@143@01)
        (< i@143@01 j@144@01)
        (<
          j@144@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
    (or
      (not
        (and
          (<= 0 i@143@01)
          (and
            (< i@143@01 j@144@01)
            (<
              j@144@01
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
      (and
        (<= 0 i@143@01)
        (and
          (< i@143@01 j@144@01)
          (<
            j@144@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@143@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@144@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(push) ; 6
(assert (not (forall ((i@143@01 Int) (j@144@01 Int)) (!
  (=>
    (and
      (<= 0 i@143@01)
      (and
        (< i@143@01 j@144@01)
        (<
          j@144@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
    (<
      ($FVF.lookup_f (as sm@142@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        i@143@01))
      ($FVF.lookup_f (as sm@142@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        j@144@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@143@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@144@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@143@01 Int) (j@144@01 Int)) (!
  (=>
    (and
      (<= 0 i@143@01)
      (and
        (< i@143@01 j@144@01)
        (<
          j@144@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
    (<
      ($FVF.lookup_f (as sm@142@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        i@143@01))
      ($FVF.lookup_f (as sm@142@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        j@144@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@143@01) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    j@144@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
(declare-const index@145@01 Int)
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 ($Snap.combine ($Snap.first $t@146@01) ($Snap.second $t@146@01))))
(declare-const i@147@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 92 | !(0 <= i@147@01) | live]
; [else-branch: 92 | 0 <= i@147@01 | live]
(push) ; 8
; [then-branch: 92 | !(0 <= i@147@01)]
(assert (not (<= 0 i@147@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 92 | 0 <= i@147@01]
(assert (<= 0 i@147@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@147@01) (not (<= 0 i@147@01))))
(assert (and
  (<= 0 i@147@01)
  (<
    i@147@01
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@147@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@148@01 ($Ref) Int)
(declare-fun img@149@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@147@01 Int)) (!
  (=>
    (and
      (<= 0 i@147@01)
      (<
        i@147@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
    (or (<= 0 i@147@01) (not (<= 0 i@147@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@147@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@147@01 Int)) (!
  (=>
    (and
      (<= 0 i@147@01)
      (<
        i@147@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
    (or
      (= (/ p@83@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@83@01 (to_real 2)))))
  
  :qid |quant-u-83|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@147@01 Int) (i2@147@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@147@01)
          (<
            i1@147@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@147@01)
          (<
            i2@147@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
        (< $Perm.No (/ p@83@01 (to_real 2))))
      (=
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i1@147@01)
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i2@147@01)))
    (= i1@147@01 i2@147@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@147@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@147@01)
        (<
          i@147@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
      (< $Perm.No (/ p@83@01 (to_real 2))))
    (and
      (=
        (inv@148@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@147@01))
        i@147@01)
      (img@149@01 (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        i@147@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@147@01))
  :qid |quant-u-84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@149@01 r)
      (and
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
        (< $Perm.No (/ p@83@01 (to_real 2)))))
    (=
      (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        (inv@148@01 r))
      r))
  :pattern ((inv@148@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@147@01 Int)) (!
  (<= $Perm.No (/ p@83@01 (to_real 2)))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@147@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@147@01 Int)) (!
  (<= (/ p@83@01 (to_real 2)) $Perm.Write)
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@147@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@147@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@147@01)
        (<
          i@147@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
      (< $Perm.No (/ p@83@01 (to_real 2))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@147@01)
        $Ref.null)))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@147@01))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        i@147@01)
      (Seq_index S@81@01 i@88@01))
    (=
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))))
  
  :qid |quant-u-85|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@146@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@01))
    ($Snap.second ($Snap.second $t@146@01)))))
(assert (= ($Snap.first ($Snap.second $t@146@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@145@01))
(assert (=
  ($Snap.second ($Snap.second $t@146@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@146@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (<
  index@145@01
  (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(set-option :timeout 0)
(push) ; 6
; [then-branch: 93 | !(0 <= index@145@01) | live]
; [else-branch: 93 | 0 <= index@145@01 | live]
(push) ; 7
; [then-branch: 93 | !(0 <= index@145@01)]
(assert (not (<= 0 index@145@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 93 | 0 <= index@145@01]
(assert (<= 0 index@145@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@145@01) (not (<= 0 index@145@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 index@145@01)
    (<
      index@145@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 index@145@01)
  (<
    index@145@01
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 94 | 0 <= index@145@01 && index@145@01 < |S@81@01[:|S@81@01|][k@111@01:]| | live]
; [else-branch: 94 | !(0 <= index@145@01 && index@145@01 < |S@81@01[:|S@81@01|][k@111@01:]|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 94 | 0 <= index@145@01 && index@145@01 < |S@81@01[:|S@81@01|][k@111@01:]|]
(assert (and
  (<= 0 index@145@01)
  (<
    index@145@01
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@145@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@150@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
(declare-const pm@151@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@151@01  $FPM) r)
    (+
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@141@01 r))
        $Perm.No)
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef58|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_f (as pm@151@01  $FPM) (Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    index@145@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 94 | !(0 <= index@145@01 && index@145@01 < |S@81@01[:|S@81@01|][k@111@01:]|)]
(assert (not
  (and
    (<= 0 index@145@01)
    (<
      index@145@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@151@01  $FPM) r)
    (+
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@141@01 r))
        $Perm.No)
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef58|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 index@145@01)
      (<
        index@145@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
  (and
    (<= 0 index@145@01)
    (<
      index@145@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
(assert (=>
  (and
    (<= 0 index@145@01)
    (<
      index@145@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
  (=
    ($FVF.lookup_f (as sm@150@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
      index@145@01))
    x@82@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@145@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@145@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 95 | index@145@01 == -1 | live]
; [else-branch: 95 | index@145@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 95 | index@145@01 == -1]
(assert (= index@145@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@152@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 96 | !(0 <= i@152@01) | live]
; [else-branch: 96 | 0 <= i@152@01 | live]
(push) ; 10
; [then-branch: 96 | !(0 <= i@152@01)]
(assert (not (<= 0 i@152@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 96 | 0 <= i@152@01]
(assert (<= 0 i@152@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@152@01) (not (<= 0 i@152@01))))
(push) ; 9
; [then-branch: 97 | 0 <= i@152@01 && i@152@01 < |S@81@01[:|S@81@01|][k@111@01:]| | live]
; [else-branch: 97 | !(0 <= i@152@01 && i@152@01 < |S@81@01[:|S@81@01|][k@111@01:]|) | live]
(push) ; 10
; [then-branch: 97 | 0 <= i@152@01 && i@152@01 < |S@81@01[:|S@81@01|][k@111@01:]|]
(assert (and
  (<= 0 i@152@01)
  (<
    i@152@01
    (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@152@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (< $Perm.No (/ p@83@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
    :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
    :qid |qp.fvfValDef57|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@90@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@152@01))
        (and
          (<=
            0
            (inv@89@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
              i@152@01)))
          (<
            (inv@89@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
              i@152@01))
            (Seq_length S@81@01))))
      (-
        p@83@01
        (pTaken@141@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@152@01)))
      $Perm.No)
    (ite
      (and
        (img@149@01 (Seq_index
          (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
          i@152@01))
        (and
          (<=
            0
            (inv@148@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
              i@152@01)))
          (<
            (inv@148@01 (Seq_index
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
              i@152@01))
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (/ p@83@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 97 | !(0 <= i@152@01 && i@152@01 < |S@81@01[:|S@81@01|][k@111@01:]|)]
(assert (not
  (and
    (<= 0 i@152@01)
    (<
      i@152@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@152@01)
      (<
        i@152@01
        (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
  (and
    (<= 0 i@152@01)
    (<
      i@152@01
      (Seq_length (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@152@01 Int)) (!
  (and
    (or (<= 0 i@152@01) (not (<= 0 i@152@01)))
    (or
      (not
        (and
          (<= 0 i@152@01)
          (<
            i@152@01
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (and
        (<= 0 i@152@01)
        (<
          i@152@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
    i@152@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 95 | index@145@01 != -1]
(assert (not (= index@145@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
(assert (=>
  (= index@145@01 (- 0 1))
  (and
    (= index@145@01 (- 0 1))
    (forall ((i@152@01 Int)) (!
      (and
        (or (<= 0 i@152@01) (not (<= 0 i@152@01)))
        (or
          (not
            (and
              (<= 0 i@152@01)
              (<
                i@152@01
                (Seq_length
                  (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
          (and
            (<= 0 i@152@01)
            (<
              i@152@01
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))))
      :pattern ((Seq_index
        (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
        i@152@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@145@01 (- 0 1))) (= index@145@01 (- 0 1))))
(assert (=>
  (= index@145@01 (- 0 1))
  (forall ((i@152@01 Int)) (!
    (=>
      (and
        (<= 0 i@152@01)
        (<
          i@152@01
          (Seq_length
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01))))
      (not
        (=
          ($FVF.lookup_f (as sm@150@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
            i@152@01))
          x@82@01)))
    :pattern ((Seq_index
      (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
      i@152@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; index := index + (index == -1 ? 0 : k)
; [eval] index + (index == -1 ? 0 : k)
; [eval] (index == -1 ? 0 : k)
; [eval] index == -1
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@145@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@145@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 98 | index@145@01 == -1 | live]
; [else-branch: 98 | index@145@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 98 | index@145@01 == -1]
(assert (= index@145@01 (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 98 | index@145@01 != -1]
(assert (not (= index@145@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(declare-const index@153@01 Int)
(assert (= index@153@01 (+ index@145@01 (ite (= index@145@01 (- 0 1)) 0 k@111@01))))
(declare-const i@154@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 99 | !(0 <= i@154@01) | live]
; [else-branch: 99 | 0 <= i@154@01 | live]
(push) ; 8
; [then-branch: 99 | !(0 <= i@154@01)]
(assert (not (<= 0 i@154@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 99 | 0 <= i@154@01]
(assert (<= 0 i@154@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@154@01) (not (<= 0 i@154@01))))
(assert (and (<= 0 i@154@01) (< i@154@01 (Seq_length S@81@01))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@154@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@155@01 ($Ref) Int)
(declare-fun img@156@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@154@01 Int)) (!
  (=>
    (and (<= 0 i@154@01) (< i@154@01 (Seq_length S@81@01)))
    (or (<= 0 i@154@01) (not (<= 0 i@154@01))))
  :pattern ((Seq_index S@81@01 i@154@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@154@01 Int)) (!
  (=>
    (and (<= 0 i@154@01) (< i@154@01 (Seq_length S@81@01)))
    (or (= p@83@01 $Perm.No) (< $Perm.No p@83@01)))
  
  :qid |quant-u-86|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@154@01 Int) (i2@154@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@154@01) (< i1@154@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (and
        (and (<= 0 i2@154@01) (< i2@154@01 (Seq_length S@81@01)))
        (< $Perm.No p@83@01))
      (= (Seq_index S@81@01 i1@154@01) (Seq_index S@81@01 i2@154@01)))
    (= i1@154@01 i2@154@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@154@01 Int)) (!
  (=>
    (and
      (and (<= 0 i@154@01) (< i@154@01 (Seq_length S@81@01)))
      (< $Perm.No p@83@01))
    (and
      (= (inv@155@01 (Seq_index S@81@01 i@154@01)) i@154@01)
      (img@156@01 (Seq_index S@81@01 i@154@01))))
  :pattern ((Seq_index S@81@01 i@154@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@156@01 r)
      (and
        (and (<= 0 (inv@155@01 r)) (< (inv@155@01 r) (Seq_length S@81@01)))
        (< $Perm.No p@83@01)))
    (= (Seq_index S@81@01 (inv@155@01 r)) r))
  :pattern ((inv@155@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@154@01 Int)) (!
  (=
    (Seq_index S@81@01 i@154@01)
    (Seq_index
      (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)
      i@154@01))
  
  :qid |quant-u-87|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@157@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@155@01 r)) (< (inv@155@01 r) (Seq_length S@81@01)))
      (img@156@01 r)
      (= r (Seq_index S@81@01 (inv@155@01 r))))
    ($Perm.min
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@141@01 r))
        $Perm.No)
      p@83@01)
    $Perm.No))
(define-fun pTaken@158@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@155@01 r)) (< (inv@155@01 r) (Seq_length S@81@01)))
      (img@156@01 r)
      (= r (Seq_index S@81@01 (inv@155@01 r))))
    ($Perm.min
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)
      (- p@83@01 (pTaken@157@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (- p@83@01 (pTaken@141@01 r))
        $Perm.No)
      (pTaken@157@01 r))
    $Perm.No)
  
  :qid |quant-u-89|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@155@01 r)) (< (inv@155@01 r) (Seq_length S@81@01)))
      (img@156@01 r)
      (= r (Seq_index S@81@01 (inv@155@01 r))))
    (= (- p@83@01 (pTaken@157@01 r)) $Perm.No))
  
  :qid |quant-u-90|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (/ p@83@01 (to_real 2))
        $Perm.No)
      (pTaken@158@01 r))
    $Perm.No)
  
  :qid |quant-u-91|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@155@01 r)) (< (inv@155@01 r) (Seq_length S@81@01)))
      (img@156@01 r)
      (= r (Seq_index S@81@01 (inv@155@01 r))))
    (= (- (- p@83@01 (pTaken@157@01 r)) (pTaken@158@01 r)) $Perm.No))
  
  :qid |quant-u-92|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] -1 <= index
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(assert (not (<= (- 0 1) index@153@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (<= (- 0 1) index@153@01))
; [eval] index < |S|
; [eval] |S|
(push) ; 6
(assert (not (< index@153@01 (Seq_length S@81@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< index@153@01 (Seq_length S@81@01)))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(push) ; 6
; [then-branch: 100 | !(0 <= index@153@01) | live]
; [else-branch: 100 | 0 <= index@153@01 | live]
(push) ; 7
; [then-branch: 100 | !(0 <= index@153@01)]
(assert (not (<= 0 index@153@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 100 | 0 <= index@153@01]
(assert (<= 0 index@153@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@153@01) (not (<= 0 index@153@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 101 | 0 <= index@153@01 && index@153@01 < |S@81@01| | live]
; [else-branch: 101 | !(0 <= index@153@01 && index@153@01 < |S@81@01|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 101 | 0 <= index@153@01 && index@153@01 < |S@81@01|]
(assert (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@153@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (< $Perm.No (/ p@83@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
    :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
    :qid |qp.fvfValDef57|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@90@01 (Seq_index S@81@01 index@153@01))
        (and
          (<= 0 (inv@89@01 (Seq_index S@81@01 index@153@01)))
          (< (inv@89@01 (Seq_index S@81@01 index@153@01)) (Seq_length S@81@01))))
      (- p@83@01 (pTaken@141@01 (Seq_index S@81@01 index@153@01)))
      $Perm.No)
    (ite
      (and
        (img@149@01 (Seq_index S@81@01 index@153@01))
        (and
          (<= 0 (inv@148@01 (Seq_index S@81@01 index@153@01)))
          (<
            (inv@148@01 (Seq_index S@81@01 index@153@01))
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (/ p@83@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 101 | !(0 <= index@153@01 && index@153@01 < |S@81@01|)]
(assert (not (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01))))
  (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01)))))
(push) ; 6
(assert (not (=>
  (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f (as sm@150@01  $FVF<f>) (Seq_index S@81@01 index@153@01))
    x@82@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (and (<= 0 index@153@01) (< index@153@01 (Seq_length S@81@01)))
  (=
    ($FVF.lookup_f (as sm@150@01  $FVF<f>) (Seq_index S@81@01 index@153@01))
    x@82@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@153@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@153@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 102 | index@153@01 == -1 | live]
; [else-branch: 102 | index@153@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 102 | index@153@01 == -1]
(assert (= index@153@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@159@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 103 | !(0 <= i@159@01) | live]
; [else-branch: 103 | 0 <= i@159@01 | live]
(push) ; 10
; [then-branch: 103 | !(0 <= i@159@01)]
(assert (not (<= 0 i@159@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 103 | 0 <= i@159@01]
(assert (<= 0 i@159@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@159@01) (not (<= 0 i@159@01))))
(push) ; 9
; [then-branch: 104 | 0 <= i@159@01 && i@159@01 < |S@81@01| | live]
; [else-branch: 104 | !(0 <= i@159@01 && i@159@01 < |S@81@01|) | live]
(push) ; 10
; [then-branch: 104 | 0 <= i@159@01 && i@159@01 < |S@81@01|]
(assert (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@159@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@90@01 r)
          (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
        (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@149@01 r)
          (and
            (<= 0 (inv@148@01 r))
            (<
              (inv@148@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
        (< $Perm.No (/ p@83@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
    :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
    :qid |qp.fvfValDef57|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@90@01 (Seq_index S@81@01 i@159@01))
        (and
          (<= 0 (inv@89@01 (Seq_index S@81@01 i@159@01)))
          (< (inv@89@01 (Seq_index S@81@01 i@159@01)) (Seq_length S@81@01))))
      (- p@83@01 (pTaken@141@01 (Seq_index S@81@01 i@159@01)))
      $Perm.No)
    (ite
      (and
        (img@149@01 (Seq_index S@81@01 i@159@01))
        (and
          (<= 0 (inv@148@01 (Seq_index S@81@01 i@159@01)))
          (<
            (inv@148@01 (Seq_index S@81@01 i@159@01))
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (/ p@83@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 104 | !(0 <= i@159@01 && i@159@01 < |S@81@01|)]
(assert (not (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01))))
  (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@159@01 Int)) (!
  (and
    (or (<= 0 i@159@01) (not (<= 0 i@159@01)))
    (or
      (not (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01))))
      (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01)))))
  :pattern ((Seq_index S@81@01 i@159@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 102 | index@153@01 != -1]
(assert (not (= index@153@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@90@01 r)
        (and (<= 0 (inv@89@01 r)) (< (inv@89@01 r) (Seq_length S@81@01))))
      (< $Perm.No (- p@83@01 (pTaken@141@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@149@01 r)
        (and
          (<= 0 (inv@148@01 r))
          (<
            (inv@148@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@81@01 (Seq_length S@81@01)) k@111@01)))))
      (< $Perm.No (/ p@83@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@150@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r)))
  :pattern (($FVF.lookup_f (as sm@150@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@146@01)) r))
  :qid |qp.fvfValDef57|)))
(assert (=>
  (= index@153@01 (- 0 1))
  (and
    (= index@153@01 (- 0 1))
    (forall ((i@159@01 Int)) (!
      (and
        (or (<= 0 i@159@01) (not (<= 0 i@159@01)))
        (or
          (not (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01))))
          (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01)))))
      :pattern ((Seq_index S@81@01 i@159@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@153@01 (- 0 1))) (= index@153@01 (- 0 1))))
(push) ; 6
(assert (not (=>
  (= index@153@01 (- 0 1))
  (forall ((i@159@01 Int)) (!
    (=>
      (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f (as sm@150@01  $FVF<f>) (Seq_index S@81@01 i@159@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@159@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@153@01 (- 0 1))
  (forall ((i@159@01 Int)) (!
    (=>
      (and (<= 0 i@159@01) (< i@159@01 (Seq_length S@81@01)))
      (not
        (=
          ($FVF.lookup_f (as sm@150@01  $FVF<f>) (Seq_index S@81@01 i@159@01))
          x@82@01)))
    :pattern ((Seq_index S@81@01 i@159@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
(pop) ; 5
(push) ; 5
; [else-branch: 84 | x@82@01 < Lookup(f, First:(Second:(Second:(Second:($t@85@01)))), S@81@01[k@111@01])]
(assert (<
  x@82@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@01))))) (Seq_index
    S@81@01
    k@111@01))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 63 | |S@81@01| == 1]
(assert (= (Seq_length S@81@01) 1))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 54 | |S@81@01| == 0]
(assert (= (Seq_length S@81@01) 0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- bfind_fixed_seqin ----------
(declare-const S@160@01 Seq<$Ref>)
(declare-const x@161@01 Int)
(declare-const p@162@01 $Perm)
(declare-const index@163@01 Int)
(declare-const S@164@01 Seq<$Ref>)
(declare-const x@165@01 Int)
(declare-const p@166@01 $Perm)
(declare-const index@167@01 Int)
(push) ; 1
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 ($Snap.combine ($Snap.first $t@168@01) ($Snap.second $t@168@01))))
(assert (= ($Snap.first $t@168@01) $Snap.unit))
; [eval] p > none
(assert (> p@166@01 $Perm.No))
(assert (=
  ($Snap.second $t@168@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@168@01))
    ($Snap.second ($Snap.second $t@168@01)))))
(assert (= ($Snap.first ($Snap.second $t@168@01)) $Snap.unit))
; [eval] p < write
(assert (< p@166@01 $Perm.Write))
(assert (=
  ($Snap.second ($Snap.second $t@168@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@168@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@168@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@168@01))) $Snap.unit))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@169@01 Int)
(declare-const j@170@01 Int)
(push) ; 2
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
; [then-branch: 105 | !(i@169@01 in [0..|S@164@01|]) | live]
; [else-branch: 105 | i@169@01 in [0..|S@164@01|] | live]
(push) ; 4
; [then-branch: 105 | !(i@169@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 105 | i@169@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
; [then-branch: 106 | !(j@170@01 in [0..|S@164@01|]) | live]
; [else-branch: 106 | j@170@01 in [0..|S@164@01|] | live]
(push) ; 6
; [then-branch: 106 | !(j@170@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 106 | j@170@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01))
; [eval] i != j
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01))))
(push) ; 3
; [then-branch: 107 | i@169@01 in [0..|S@164@01|] && j@170@01 in [0..|S@164@01|] && i@169@01 != j@170@01 | live]
; [else-branch: 107 | !(i@169@01 in [0..|S@164@01|] && j@170@01 in [0..|S@164@01|] && i@169@01 != j@170@01) | live]
(push) ; 4
; [then-branch: 107 | i@169@01 in [0..|S@164@01|] && j@170@01 in [0..|S@164@01|] && i@169@01 != j@170@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
    (not (= i@169@01 j@170@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 5
(assert (not (>= i@169@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@169@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@170@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j@170@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 107 | !(i@169@01 in [0..|S@164@01|] && j@170@01 in [0..|S@164@01|] && i@169@01 != j@170@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
      (not (= i@169@01 j@170@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
      (not (= i@169@01 j@170@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
    (not (= i@169@01 j@170@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
      (not (= i@169@01 j@170@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_contains
    (Seq_range 0 (Seq_length S@164@01))
    j@170@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@164@01))
    j@170@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@164@01))
    j@170@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_index
    S@164@01
    j@170@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_index
    S@164@01
    j@170@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_index
    S@164@01
    j@170@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01) (Seq_index
    S@164@01
    i@169@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) j@170@01) (Seq_index
    S@164@01
    i@169@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) j@170@01) (Seq_index
    S@164@01
    i@169@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
            (not (= i@169@01 j@170@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
          (not (= i@169@01 j@170@01))))))
  :pattern ((Seq_index S@164@01 i@169@01) (Seq_index S@164@01 j@170@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94-aux|)))
(assert (forall ((i@169@01 Int) (j@170@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01)
        (not (= i@169@01 j@170@01))))
    (not (= (Seq_index S@164@01 i@169@01) (Seq_index S@164@01 j@170@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_contains
    (Seq_range 0 (Seq_length S@164@01))
    j@170@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@164@01))
    j@170@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_index
    S@164@01
    j@170@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) i@169@01) (Seq_index
    S@164@01
    j@170@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@164@01)) j@170@01) (Seq_index
    S@164@01
    i@169@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@164@01)) j@170@01) (Seq_index
    S@164@01
    i@169@01))
  :pattern ((Seq_index S@164@01 i@169@01) (Seq_index S@164@01 j@170@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@70@12@70@94|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@168@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@168@01)))))))
(declare-const i@171@01 Int)
(push) ; 2
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@171@01))
; [eval] S[i]
(push) ; 3
(assert (not (>= i@171@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< i@171@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@172@01 ($Ref) Int)
(declare-fun img@173@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@171@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@171@01)
    (or (= p@166@01 $Perm.No) (< $Perm.No p@166@01)))
  
  :qid |quant-u-93|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@171@01 Int) (i2@171@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i1@171@01)
        (< $Perm.No p@166@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i2@171@01)
        (< $Perm.No p@166@01))
      (= (Seq_index S@164@01 i1@171@01) (Seq_index S@164@01 i2@171@01)))
    (= i1@171@01 i2@171@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@171@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@171@01)
      (< $Perm.No p@166@01))
    (and
      (= (inv@172@01 (Seq_index S@164@01 i@171@01)) i@171@01)
      (img@173@01 (Seq_index S@164@01 i@171@01))))
  :pattern ((Seq_index S@164@01 i@171@01))
  :qid |quant-u-94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@173@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r))
        (< $Perm.No p@166@01)))
    (= (Seq_index S@164@01 (inv@172@01 r)) r))
  :pattern ((inv@172@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@171@01 Int)) (!
  (<= $Perm.No p@166@01)
  :pattern ((Seq_index S@164@01 i@171@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@171@01 Int)) (!
  (<= p@166@01 $Perm.Write)
  :pattern ((Seq_index S@164@01 i@171@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@171@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@171@01)
      (< $Perm.No p@166@01))
    (not (= (Seq_index S@164@01 i@171@01) $Ref.null)))
  :pattern ((Seq_index S@164@01 i@171@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@168@01))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } (i in [0..j)) && (j in [i..|S|)) ==> S[i].f < S[j].f)
(declare-const i@174@01 Int)
(declare-const j@175@01 Int)
(push) ; 2
; [eval] (i in [0..j)) && (j in [i..|S|)) ==> S[i].f < S[j].f
; [eval] (i in [0..j)) && (j in [i..|S|))
; [eval] (i in [0..j))
; [eval] [0..j)
(push) ; 3
; [then-branch: 108 | !(i@174@01 in [0..j@175@01]) | live]
; [else-branch: 108 | i@174@01 in [0..j@175@01] | live]
(push) ; 4
; [then-branch: 108 | !(i@174@01 in [0..j@175@01])]
(assert (not (Seq_contains (Seq_range 0 j@175@01) i@174@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 108 | i@174@01 in [0..j@175@01]]
(assert (Seq_contains (Seq_range 0 j@175@01) i@174@01))
; [eval] (j in [i..|S|))
; [eval] [i..|S|)
; [eval] |S|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 j@175@01) i@174@01)
  (not (Seq_contains (Seq_range 0 j@175@01) i@174@01))))
(push) ; 3
; [then-branch: 109 | i@174@01 in [0..j@175@01] && j@175@01 in [i@174@01..|S@164@01|] | live]
; [else-branch: 109 | !(i@174@01 in [0..j@175@01] && j@175@01 in [i@174@01..|S@164@01|]) | live]
(push) ; 4
; [then-branch: 109 | i@174@01 in [0..j@175@01] && j@175@01 in [i@174@01..|S@164@01|]]
(assert (and
  (Seq_contains (Seq_range 0 j@175@01) i@174@01)
  (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01)))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 5
(assert (not (>= i@174@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@174@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 i@174@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 i@174@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@175@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j@175@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 j@175@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 j@175@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 109 | !(i@174@01 in [0..j@175@01] && j@175@01 in [i@174@01..|S@164@01|])]
(assert (not
  (and
    (Seq_contains (Seq_range 0 j@175@01) i@174@01)
    (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 j@175@01) i@174@01)
      (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01)))
  (and
    (Seq_contains (Seq_range 0 j@175@01) i@174@01)
    (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@174@01 Int) (j@175@01 Int)) (!
  (and
    (or
      (Seq_contains (Seq_range 0 j@175@01) i@174@01)
      (not (Seq_contains (Seq_range 0 j@175@01) i@174@01)))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 j@175@01) i@174@01)
          (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01)))
      (and
        (Seq_contains (Seq_range 0 j@175@01) i@174@01)
        (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01))))
  :pattern ((Seq_index S@164@01 i@174@01) (Seq_index S@164@01 j@175@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@72@12@72@98-aux|)))
(assert (forall ((i@174@01 Int) (j@175@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 j@175@01) i@174@01)
      (Seq_contains (Seq_range i@174@01 (Seq_length S@164@01)) j@175@01))
    (<
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
        S@164@01
        i@174@01))
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
        S@164@01
        j@175@01))))
  :pattern ((Seq_index S@164@01 i@174@01) (Seq_index S@164@01 j@175@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@72@12@72@98|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 ($Snap.combine ($Snap.first $t@176@01) ($Snap.second $t@176@01))))
(declare-const i@177@01 Int)
(push) ; 3
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@177@01))
; [eval] S[i]
(push) ; 4
(assert (not (>= i@177@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< i@177@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@178@01 ($Ref) Int)
(declare-fun img@179@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@177@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@177@01)
    (or (= p@166@01 $Perm.No) (< $Perm.No p@166@01)))
  
  :qid |quant-u-95|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@177@01 Int) (i2@177@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i1@177@01)
        (< $Perm.No p@166@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i2@177@01)
        (< $Perm.No p@166@01))
      (= (Seq_index S@164@01 i1@177@01) (Seq_index S@164@01 i2@177@01)))
    (= i1@177@01 i2@177@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@177@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@177@01)
      (< $Perm.No p@166@01))
    (and
      (= (inv@178@01 (Seq_index S@164@01 i@177@01)) i@177@01)
      (img@179@01 (Seq_index S@164@01 i@177@01))))
  :pattern ((Seq_index S@164@01 i@177@01))
  :qid |quant-u-96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@179@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@178@01 r))
        (< $Perm.No p@166@01)))
    (= (Seq_index S@164@01 (inv@178@01 r)) r))
  :pattern ((inv@178@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@177@01 Int)) (!
  (<= $Perm.No p@166@01)
  :pattern ((Seq_index S@164@01 i@177@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@177@01 Int)) (!
  (<= p@166@01 $Perm.Write)
  :pattern ((Seq_index S@164@01 i@177@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@177@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@177@01)
      (< $Perm.No p@166@01))
    (not (= (Seq_index S@164@01 i@177@01) $Ref.null)))
  :pattern ((Seq_index S@164@01 i@177@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@176@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@176@01))
    ($Snap.second ($Snap.second $t@176@01)))))
(assert (= ($Snap.first ($Snap.second $t@176@01)) $Snap.unit))
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@167@01))
(assert (=
  ($Snap.second ($Snap.second $t@176@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@176@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@176@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@176@01))) $Snap.unit))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 110 | index@167@01 in [0..|S@164@01|] | live]
; [else-branch: 110 | !(index@167@01 in [0..|S@164@01|]) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 110 | index@167@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 5
(assert (not (>= index@167@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< index@167@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@179@01 (Seq_index S@164@01 index@167@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@178@01 (Seq_index S@164@01 index@167@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 110 | !(index@167@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@167@01)
  (=
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@176@01)) (Seq_index
      S@164@01
      index@167@01))
    x@165@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@176@01))) $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= index@167@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= index@167@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 111 | index@167@01 == -1 | live]
; [else-branch: 111 | index@167@01 != -1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 111 | index@167@01 == -1]
(assert (= index@167@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@180@01 Int)
(push) ; 5
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
; [then-branch: 112 | i@180@01 in [0..|S@164@01|] | live]
; [else-branch: 112 | !(i@180@01 in [0..|S@164@01|]) | live]
(push) ; 7
; [then-branch: 112 | i@180@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 8
(assert (not (>= i@180@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< i@180@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (ite
  (and
    (img@179@01 (Seq_index S@164@01 i@180@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@178@01 (Seq_index S@164@01 i@180@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 112 | !(i@180@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@180@01 Int)) (!
  (or
    (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01))
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01))
  :pattern ((Seq_index S@164@01 i@180@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 111 | index@167@01 != -1]
(assert (not (= index@167@01 (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= index@167@01 (- 0 1))
  (and
    (= index@167@01 (- 0 1))
    (forall ((i@180@01 Int)) (!
      (or
        (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01))
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01))
      :pattern ((Seq_index S@164@01 i@180@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))))
; Joined path conditions
(assert (or (not (= index@167@01 (- 0 1))) (= index@167@01 (- 0 1))))
(assert (=>
  (= index@167@01 (- 0 1))
  (forall ((i@180@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@180@01)
      (not
        (=
          ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@176@01)) (Seq_index
            S@164@01
            i@180@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@180@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|))))
(pop) ; 2
(push) ; 2
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@164@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@164@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 113 | |S@164@01| == 0 | live]
; [else-branch: 113 | |S@164@01| != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 113 | |S@164@01| == 0]
(assert (= (Seq_length S@164@01) 0))
; [exec]
; index := -1
; [eval] -1
(declare-const i@181@01 Int)
(push) ; 4
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@181@01))
; [eval] S[i]
(push) ; 5
(assert (not (>= i@181@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@181@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@182@01 ($Ref) Int)
(declare-fun img@183@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 4
(assert (not (forall ((i@181@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@181@01)
    (or (= p@166@01 $Perm.No) (< $Perm.No p@166@01)))
  
  :qid |quant-u-97|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@181@01 Int) (i2@181@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i1@181@01)
        (< $Perm.No p@166@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i2@181@01)
        (< $Perm.No p@166@01))
      (= (Seq_index S@164@01 i1@181@01) (Seq_index S@164@01 i2@181@01)))
    (= i1@181@01 i2@181@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@181@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@181@01)
      (< $Perm.No p@166@01))
    (and
      (= (inv@182@01 (Seq_index S@164@01 i@181@01)) i@181@01)
      (img@183@01 (Seq_index S@164@01 i@181@01))))
  :pattern ((Seq_index S@164@01 i@181@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@183@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@182@01 r))
        (< $Perm.No p@166@01)))
    (= (Seq_index S@164@01 (inv@182@01 r)) r))
  :pattern ((inv@182@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@184@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@182@01 r))
      (img@183@01 r)
      (= r (Seq_index S@164@01 (inv@182@01 r))))
    ($Perm.min
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      p@166@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      (pTaken@184@01 r))
    $Perm.No)
  
  :qid |quant-u-99|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@182@01 r))
      (img@183@01 r)
      (= r (Seq_index S@164@01 (inv@182@01 r))))
    (= (- p@166@01 (pTaken@184@01 r)) $Perm.No))
  
  :qid |quant-u-100|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@185@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No p@166@01)
      false)
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef59|)))
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 4
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) (- 0 1))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) (- 0 1)))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 114 | -1 in [0..|S@164@01|] | dead]
; [else-branch: 114 | !(-1 in [0..|S@164@01|]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 114 | !(-1 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (- 0 1))))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 115 | True | live]
; [else-branch: 115 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 115 | True]
; [eval] (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@186@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 116 | i@186@01 in [0..|S@164@01|] | live]
; [else-branch: 116 | !(i@186@01 in [0..|S@164@01|]) | live]
(push) ; 8
; [then-branch: 116 | i@186@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 9
(assert (not (>= i@186@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@186@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 i@186@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 i@186@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 116 | !(i@186@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@186@01 Int)) (!
  (or
    (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01))
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01))
  :pattern ((Seq_index S@164@01 i@186@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((i@186@01 Int)) (!
  (or
    (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01))
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01))
  :pattern ((Seq_index S@164@01 i@186@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))
(push) ; 4
(assert (not (forall ((i@186@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01)
    (not
      (=
        ($FVF.lookup_f (as sm@185@01  $FVF<f>) (Seq_index S@164@01 i@186@01))
        x@165@01)))
  :pattern ((Seq_index S@164@01 i@186@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@186@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@186@01)
    (not
      (=
        ($FVF.lookup_f (as sm@185@01  $FVF<f>) (Seq_index S@164@01 i@186@01))
        x@165@01)))
  :pattern ((Seq_index S@164@01 i@186@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|)))
(pop) ; 3
(push) ; 3
; [else-branch: 113 | |S@164@01| != 0]
(assert (not (= (Seq_length S@164@01) 0)))
(pop) ; 3
; [eval] !(|S| == 0)
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@164@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@164@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 117 | |S@164@01| != 0 | live]
; [else-branch: 117 | |S@164@01| == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 117 | |S@164@01| != 0]
(assert (not (= (Seq_length S@164@01) 0)))
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@164@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@164@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 118 | |S@164@01| == 1 | live]
; [else-branch: 118 | |S@164@01| != 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 118 | |S@164@01| == 1]
(assert (= (Seq_length S@164@01) 1))
; [exec]
; index := (x == S[0].f ? 0 : -1)
; [eval] (x == S[0].f ? 0 : -1)
; [eval] x == S[0].f
; [eval] S[0]
(push) ; 5
(assert (not (< 0 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 0))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 0))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      0))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  x@165@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
    S@164@01
    0)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 119 | x@165@01 == Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[0]) | live]
; [else-branch: 119 | x@165@01 != Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[0]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 119 | x@165@01 == Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[0])]
(assert (=
  x@165@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
    S@164@01
    0))))
(pop) ; 6
(push) ; 6
; [else-branch: 119 | x@165@01 != Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[0])]
(assert (not
  (=
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      0)))))
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      x@165@01
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
        S@164@01
        0))))
  (=
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      0)))))
(declare-const index@187@01 Int)
(assert (=
  index@187@01
  (ite
    (=
      x@165@01
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
        S@164@01
        0)))
    0
    (- 0 1))))
(declare-const i@188@01 Int)
(push) ; 5
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@188@01))
; [eval] S[i]
(push) ; 6
(assert (not (>= i@188@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< i@188@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@189@01 ($Ref) Int)
(declare-fun img@190@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@188@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@188@01)
    (or (= p@166@01 $Perm.No) (< $Perm.No p@166@01)))
  
  :qid |quant-u-101|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@188@01 Int) (i2@188@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i1@188@01)
        (< $Perm.No p@166@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i2@188@01)
        (< $Perm.No p@166@01))
      (= (Seq_index S@164@01 i1@188@01) (Seq_index S@164@01 i2@188@01)))
    (= i1@188@01 i2@188@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@188@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@188@01)
      (< $Perm.No p@166@01))
    (and
      (= (inv@189@01 (Seq_index S@164@01 i@188@01)) i@188@01)
      (img@190@01 (Seq_index S@164@01 i@188@01))))
  :pattern ((Seq_index S@164@01 i@188@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@190@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@189@01 r))
        (< $Perm.No p@166@01)))
    (= (Seq_index S@164@01 (inv@189@01 r)) r))
  :pattern ((inv@189@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@191@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@189@01 r))
      (img@190@01 r)
      (= r (Seq_index S@164@01 (inv@189@01 r))))
    ($Perm.min
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      p@166@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      (pTaken@191@01 r))
    $Perm.No)
  
  :qid |quant-u-103|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@189@01 r))
      (img@190@01 r)
      (= r (Seq_index S@164@01 (inv@189@01 r))))
    (= (- p@166@01 (pTaken@191@01 r)) $Perm.No))
  
  :qid |quant-u-104|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@192@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No p@166@01)
      false)
    (=
      ($FVF.lookup_f (as sm@192@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@192@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef60|)))
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@187@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@187@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 120 | index@187@01 in [0..|S@164@01|] | live]
; [else-branch: 120 | !(index@187@01 in [0..|S@164@01|]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 120 | index@187@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 7
(assert (not (>= index@187@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< index@187@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 index@187@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 index@187@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 120 | !(index@187@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01)))
(push) ; 5
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01)
  (=
    ($FVF.lookup_f (as sm@192@01  $FVF<f>) (Seq_index S@164@01 index@187@01))
    x@165@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@187@01)
  (=
    ($FVF.lookup_f (as sm@192@01  $FVF<f>) (Seq_index S@164@01 index@187@01))
    x@165@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= index@187@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= index@187@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 121 | index@187@01 == -1 | live]
; [else-branch: 121 | index@187@01 != -1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 121 | index@187@01 == -1]
(assert (= index@187@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@193@01 Int)
(push) ; 7
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 8
; [then-branch: 122 | i@193@01 in [0..|S@164@01|] | live]
; [else-branch: 122 | !(i@193@01 in [0..|S@164@01|]) | live]
(push) ; 9
; [then-branch: 122 | i@193@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 10
(assert (not (>= i@193@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< i@193@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 i@193@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 i@193@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 122 | !(i@193@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@193@01 Int)) (!
  (or
    (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01))
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01))
  :pattern ((Seq_index S@164@01 i@193@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 121 | index@187@01 != -1]
(assert (not (= index@187@01 (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= index@187@01 (- 0 1))
  (and
    (= index@187@01 (- 0 1))
    (forall ((i@193@01 Int)) (!
      (or
        (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01))
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01))
      :pattern ((Seq_index S@164@01 i@193@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))))
; Joined path conditions
(assert (or (not (= index@187@01 (- 0 1))) (= index@187@01 (- 0 1))))
(push) ; 5
(assert (not (=>
  (= index@187@01 (- 0 1))
  (forall ((i@193@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01)
      (not
        (=
          ($FVF.lookup_f (as sm@192@01  $FVF<f>) (Seq_index S@164@01 i@193@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@193@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@187@01 (- 0 1))
  (forall ((i@193@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@193@01)
      (not
        (=
          ($FVF.lookup_f (as sm@192@01  $FVF<f>) (Seq_index S@164@01 i@193@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@193@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|))))
(pop) ; 4
(push) ; 4
; [else-branch: 118 | |S@164@01| != 1]
(assert (not (= (Seq_length S@164@01) 1)))
(pop) ; 4
; [eval] !(|S| == 1)
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@164@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@164@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 123 | |S@164@01| != 1 | live]
; [else-branch: 123 | |S@164@01| == 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 123 | |S@164@01| != 1]
(assert (not (= (Seq_length S@164@01) 1)))
; [exec]
; var k: Int
(declare-const k@194@01 Int)
; [exec]
; inhale 0 < k && k < |S| - 1
(declare-const $t@195@01 $Snap)
(assert (= $t@195@01 ($Snap.combine ($Snap.first $t@195@01) ($Snap.second $t@195@01))))
(assert (= ($Snap.first $t@195@01) $Snap.unit))
; [eval] 0 < k
(assert (< 0 k@194@01))
(assert (= ($Snap.second $t@195@01) $Snap.unit))
; [eval] k < |S| - 1
; [eval] |S| - 1
; [eval] |S|
(assert (< k@194@01 (- (Seq_length S@164@01) 1)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] x < S[k].f
; [eval] S[k]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= k@194@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@194@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 k@194@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 k@194@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      k@194@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  x@165@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
    S@164@01
    k@194@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 124 | x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01]) | live]
; [else-branch: 124 | !(x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 124 | x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01])]
(assert (<
  x@165@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
    S@164@01
    k@194@01))))
; [exec]
; index := bfind_fixed_ineq(S[0..k], x, p / 2)
; [eval] S[0..k]
; [eval] S[..k]
; [eval] p / 2
; [eval] p > none
(push) ; 6
(assert (not (> (/ p@166@01 (to_real 2)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (> (/ p@166@01 (to_real 2)) $Perm.No))
; [eval] p < write
(push) ; 6
(assert (not (< (/ p@166@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< (/ p@166@01 (to_real 2)) $Perm.Write))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@196@01 Int)
(declare-const j@197@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 125 | !(i@196@01 in [0..|S@164@01[:k@194@01][0:]|]) | live]
; [else-branch: 125 | i@196@01 in [0..|S@164@01[:k@194@01][0:]|] | live]
(push) ; 8
; [then-branch: 125 | !(i@196@01 in [0..|S@164@01[:k@194@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 125 | i@196@01 in [0..|S@164@01[:k@194@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
  i@196@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 126 | !(j@197@01 in [0..|S@164@01[:k@194@01][0:]|]) | live]
; [else-branch: 126 | j@197@01 in [0..|S@164@01[:k@194@01][0:]|] | live]
(push) ; 10
; [then-branch: 126 | !(j@197@01 in [0..|S@164@01[:k@194@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 126 | j@197@01 in [0..|S@164@01[:k@194@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
  j@197@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      j@197@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      i@196@01)
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        j@197@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01))))))
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      i@196@01))))
(push) ; 7
; [then-branch: 127 | i@196@01 in [0..|S@164@01[:k@194@01][0:]|] && j@197@01 in [0..|S@164@01[:k@194@01][0:]|] && i@196@01 != j@197@01 | live]
; [else-branch: 127 | !(i@196@01 in [0..|S@164@01[:k@194@01][0:]|] && j@197@01 in [0..|S@164@01[:k@194@01][0:]|] && i@196@01 != j@197@01) | live]
(push) ; 8
; [then-branch: 127 | i@196@01 in [0..|S@164@01[:k@194@01][0:]|] && j@197@01 in [0..|S@164@01[:k@194@01][0:]|] && i@196@01 != j@197@01]
(assert (and
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      j@197@01)
    (not (= i@196@01 j@197@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@196@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@196@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@197@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< j@197@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 127 | !(i@196@01 in [0..|S@164@01[:k@194@01][0:]|] && j@197@01 in [0..|S@164@01[:k@194@01][0:]|] && i@196@01 != j@197@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      i@196@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        j@197@01)
      (not (= i@196@01 j@197@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      i@196@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        j@197@01)
      (not (= i@196@01 j@197@01))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      i@196@01)
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      j@197@01)
    (not (= i@196@01 j@197@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01)))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
      i@196@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        j@197@01)
      (not (= i@196@01 j@197@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            i@196@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
              j@197@01)
            (not (= i@196@01 j@197@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          i@196@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
            j@197@01)
          (not (= i@196@01 j@197@01))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(push) ; 6
(assert (not (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01)
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@196@01 Int) (j@197@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
        i@196@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
          j@197@01)
        (not (= i@196@01 j@197@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01)
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    i@196@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@197@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))
    j@197@01) (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@196@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    j@197@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(declare-const i@198@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 128 | !(0 <= i@198@01) | live]
; [else-branch: 128 | 0 <= i@198@01 | live]
(push) ; 8
; [then-branch: 128 | !(0 <= i@198@01)]
(assert (not (<= 0 i@198@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 128 | 0 <= i@198@01]
(assert (<= 0 i@198@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@198@01) (not (<= 0 i@198@01))))
(assert (and
  (<= 0 i@198@01)
  (< i@198@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@198@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@199@01 ($Ref) Int)
(declare-fun img@200@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@198@01 Int)) (!
  (=>
    (and
      (<= 0 i@198@01)
      (< i@198@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
    (or (<= 0 i@198@01) (not (<= 0 i@198@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@198@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@198@01 Int)) (!
  (=>
    (and
      (<= 0 i@198@01)
      (< i@198@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
    (or
      (= (/ p@166@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@166@01 (to_real 2)))))
  
  :qid |quant-u-105|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@198@01 Int) (i2@198@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@198@01)
          (< i1@198@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@198@01)
          (< i2@198@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (=
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i1@198@01)
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i2@198@01)))
    (= i1@198@01 i2@198@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@198@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@198@01)
        (< i@198@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
      (< $Perm.No (/ p@166@01 (to_real 2))))
    (and
      (=
        (inv@199@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 k@194@01) 0)
          i@198@01))
        i@198@01)
      (img@200@01 (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@198@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@198@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@200@01 r)
      (and
        (and
          (<= 0 (inv@199@01 r))
          (<
            (inv@199@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
        (< $Perm.No (/ p@166@01 (to_real 2)))))
    (= (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) (inv@199@01 r)) r))
  :pattern ((inv@199@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@198@01 Int)) (!
  (=
    (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@198@01)
    (Seq_index S@164@01 i@198@01))
  
  :qid |quant-u-106|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@201@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@199@01 r))
        (< (inv@199@01 r) (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
      (img@200@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) (inv@199@01 r))))
    ($Perm.min
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      (/ p@166@01 (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      (pTaken@201@01 r))
    $Perm.No)
  
  :qid |quant-u-108|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@201@01 r) $Perm.No)
  
  :qid |quant-u-109|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@199@01 r))
        (< (inv@199@01 r) (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
      (img@200@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) (inv@199@01 r))))
    (= (- (/ p@166@01 (to_real 2)) (pTaken@201@01 r)) $Perm.No))
  
  :qid |quant-u-110|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@202@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No p@166@01)
      false)
    (=
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@202@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef61|)))
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@203@01 Int)
(declare-const j@204@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 129 | !(0 <= i@203@01) | live]
; [else-branch: 129 | 0 <= i@203@01 | live]
(push) ; 8
; [then-branch: 129 | !(0 <= i@203@01)]
(assert (not (<= 0 i@203@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 129 | 0 <= i@203@01]
(assert (<= 0 i@203@01))
; [eval] i < j
(push) ; 9
; [then-branch: 130 | !(i@203@01 < j@204@01) | live]
; [else-branch: 130 | i@203@01 < j@204@01 | live]
(push) ; 10
; [then-branch: 130 | !(i@203@01 < j@204@01)]
(assert (not (< i@203@01 j@204@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 130 | i@203@01 < j@204@01]
(assert (< i@203@01 j@204@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (< i@203@01 j@204@01) (not (< i@203@01 j@204@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@203@01)
  (and (<= 0 i@203@01) (or (< i@203@01 j@204@01) (not (< i@203@01 j@204@01))))))
(assert (or (<= 0 i@203@01) (not (<= 0 i@203@01))))
(push) ; 7
; [then-branch: 131 | 0 <= i@203@01 && i@203@01 < j@204@01 && j@204@01 < |S@164@01[:k@194@01][0:]| | live]
; [else-branch: 131 | !(0 <= i@203@01 && i@203@01 < j@204@01 && j@204@01 < |S@164@01[:k@194@01][0:]|) | live]
(push) ; 8
; [then-branch: 131 | 0 <= i@203@01 && i@203@01 < j@204@01 && j@204@01 < |S@164@01[:k@194@01][0:]|]
(assert (and
  (<= 0 i@203@01)
  (and
    (< i@203@01 j@204@01)
    (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@203@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@203@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@173@01 (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@203@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@203@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@204@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@173@01 (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@204@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) j@204@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 131 | !(0 <= i@203@01 && i@203@01 < j@204@01 && j@204@01 < |S@164@01[:k@194@01][0:]|)]
(assert (not
  (and
    (<= 0 i@203@01)
    (and
      (< i@203@01 j@204@01)
      (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 i@203@01)
    (and
      (< i@203@01 j@204@01)
      (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
  (and
    (<= 0 i@203@01)
    (< i@203@01 j@204@01)
    (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@203@01)
      (and
        (< i@203@01 j@204@01)
        (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
  (and
    (<= 0 i@203@01)
    (and
      (< i@203@01 j@204@01)
      (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@203@01 Int) (j@204@01 Int)) (!
  (and
    (=>
      (<= 0 i@203@01)
      (and
        (<= 0 i@203@01)
        (or (< i@203@01 j@204@01) (not (< i@203@01 j@204@01)))))
    (or (<= 0 i@203@01) (not (<= 0 i@203@01)))
    (=>
      (and
        (<= 0 i@203@01)
        (and
          (< i@203@01 j@204@01)
          (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (and
        (<= 0 i@203@01)
        (< i@203@01 j@204@01)
        (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
    (or
      (not
        (and
          (<= 0 i@203@01)
          (and
            (< i@203@01 j@204@01)
            (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
      (and
        (<= 0 i@203@01)
        (and
          (< i@203@01 j@204@01)
          (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@203@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    j@204@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(push) ; 6
(assert (not (forall ((i@203@01 Int) (j@204@01 Int)) (!
  (=>
    (and
      (<= 0 i@203@01)
      (and
        (< i@203@01 j@204@01)
        (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
    (<
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 k@194@01) 0)
        i@203@01))
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 k@194@01) 0)
        j@204@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@203@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    j@204@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@203@01 Int) (j@204@01 Int)) (!
  (=>
    (and
      (<= 0 i@203@01)
      (and
        (< i@203@01 j@204@01)
        (< j@204@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
    (<
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 k@194@01) 0)
        i@203@01))
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 k@194@01) 0)
        j@204@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@203@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    j@204@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
(declare-const index@205@01 Int)
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 ($Snap.combine ($Snap.first $t@206@01) ($Snap.second $t@206@01))))
(declare-const i@207@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 132 | !(0 <= i@207@01) | live]
; [else-branch: 132 | 0 <= i@207@01 | live]
(push) ; 8
; [then-branch: 132 | !(0 <= i@207@01)]
(assert (not (<= 0 i@207@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 132 | 0 <= i@207@01]
(assert (<= 0 i@207@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@207@01) (not (<= 0 i@207@01))))
(assert (and
  (<= 0 i@207@01)
  (< i@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@207@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@208@01 ($Ref) Int)
(declare-fun img@209@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@207@01 Int)) (!
  (=>
    (and
      (<= 0 i@207@01)
      (< i@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
    (or (<= 0 i@207@01) (not (<= 0 i@207@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@207@01 Int)) (!
  (=>
    (and
      (<= 0 i@207@01)
      (< i@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
    (or
      (= (/ p@166@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@166@01 (to_real 2)))))
  
  :qid |quant-u-111|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@207@01 Int) (i2@207@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@207@01)
          (< i1@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@207@01)
          (< i2@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (=
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i1@207@01)
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i2@207@01)))
    (= i1@207@01 i2@207@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@207@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@207@01)
        (< i@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
      (< $Perm.No (/ p@166@01 (to_real 2))))
    (and
      (=
        (inv@208@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 k@194@01) 0)
          i@207@01))
        i@207@01)
      (img@209@01 (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01))
  :qid |quant-u-112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@209@01 r)
      (and
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
        (< $Perm.No (/ p@166@01 (to_real 2)))))
    (= (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) (inv@208@01 r)) r))
  :pattern ((inv@208@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@207@01 Int)) (!
  (<= $Perm.No (/ p@166@01 (to_real 2)))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@207@01 Int)) (!
  (<= (/ p@166@01 (to_real 2)) $Perm.Write)
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@207@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@207@01)
        (< i@207@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
      (< $Perm.No (/ p@166@01 (to_real 2))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01)
        $Ref.null)))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@207@01)
      (Seq_index S@164@01 i@171@01))
    (=
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))))
  
  :qid |quant-u-113|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@206@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@206@01))
    ($Snap.second ($Snap.second $t@206@01)))))
(assert (= ($Snap.first ($Snap.second $t@206@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@205@01))
(assert (=
  ($Snap.second ($Snap.second $t@206@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@206@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@206@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@206@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@206@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@206@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(set-option :timeout 0)
(push) ; 6
; [then-branch: 133 | !(0 <= index@205@01) | live]
; [else-branch: 133 | 0 <= index@205@01 | live]
(push) ; 7
; [then-branch: 133 | !(0 <= index@205@01)]
(assert (not (<= 0 index@205@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 133 | 0 <= index@205@01]
(assert (<= 0 index@205@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@205@01) (not (<= 0 index@205@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 index@205@01)
    (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 index@205@01)
  (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 134 | 0 <= index@205@01 && index@205@01 < |S@164@01[:k@194@01][0:]| | live]
; [else-branch: 134 | !(0 <= index@205@01 && index@205@01 < |S@164@01[:k@194@01][0:]|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 134 | 0 <= index@205@01 && index@205@01 < |S@164@01[:k@194@01][0:]|]
(assert (and
  (<= 0 index@205@01)
  (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@205@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@210@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
(declare-const pm@211@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@211@01  $FPM) r)
    (+
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@201@01 r))
        $Perm.No)
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@211@01  $FPM) r))
  :qid |qp.resPrmSumDef64|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_f (as pm@211@01  $FPM) (Seq_index
    (Seq_drop (Seq_take S@164@01 k@194@01) 0)
    index@205@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 134 | !(0 <= index@205@01 && index@205@01 < |S@164@01[:k@194@01][0:]|)]
(assert (not
  (and
    (<= 0 index@205@01)
    (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@211@01  $FPM) r)
    (+
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@201@01 r))
        $Perm.No)
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@211@01  $FPM) r))
  :qid |qp.resPrmSumDef64|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 index@205@01)
      (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
  (and
    (<= 0 index@205@01)
    (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
(assert (=>
  (and
    (<= 0 index@205@01)
    (< index@205@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
  (=
    ($FVF.lookup_f (as sm@210@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@164@01 k@194@01) 0)
      index@205@01))
    x@165@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@205@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@205@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 135 | index@205@01 == -1 | live]
; [else-branch: 135 | index@205@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 135 | index@205@01 == -1]
(assert (= index@205@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@212@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 136 | !(0 <= i@212@01) | live]
; [else-branch: 136 | 0 <= i@212@01 | live]
(push) ; 10
; [then-branch: 136 | !(0 <= i@212@01)]
(assert (not (<= 0 i@212@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 136 | 0 <= i@212@01]
(assert (<= 0 i@212@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@212@01) (not (<= 0 i@212@01))))
(push) ; 9
; [then-branch: 137 | 0 <= i@212@01 && i@212@01 < |S@164@01[:k@194@01][0:]| | live]
; [else-branch: 137 | !(0 <= i@212@01 && i@212@01 < |S@164@01[:k@194@01][0:]|) | live]
(push) ; 10
; [then-branch: 137 | 0 <= i@212@01 && i@212@01 < |S@164@01[:k@194@01][0:]|]
(assert (and
  (<= 0 i@212@01)
  (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@212@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (< $Perm.No (/ p@166@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
    :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
    :qid |qp.fvfValDef63|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@173@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 k@194@01) 0)
          i@212@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@164@01))
          (inv@172@01 (Seq_index
            (Seq_drop (Seq_take S@164@01 k@194@01) 0)
            i@212@01))))
      (-
        p@166@01
        (pTaken@201@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 k@194@01) 0)
          i@212@01)))
      $Perm.No)
    (ite
      (and
        (img@209@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 k@194@01) 0)
          i@212@01))
        (and
          (<=
            0
            (inv@208@01 (Seq_index
              (Seq_drop (Seq_take S@164@01 k@194@01) 0)
              i@212@01)))
          (<
            (inv@208@01 (Seq_index
              (Seq_drop (Seq_take S@164@01 k@194@01) 0)
              i@212@01))
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (/ p@166@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 137 | !(0 <= i@212@01 && i@212@01 < |S@164@01[:k@194@01][0:]|)]
(assert (not
  (and
    (<= 0 i@212@01)
    (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@212@01)
      (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
  (and
    (<= 0 i@212@01)
    (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@212@01 Int)) (!
  (and
    (or (<= 0 i@212@01) (not (<= 0 i@212@01)))
    (or
      (not
        (and
          (<= 0 i@212@01)
          (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (and
        (<= 0 i@212@01)
        (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@212@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 135 | index@205@01 != -1]
(assert (not (= index@205@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
(assert (=>
  (= index@205@01 (- 0 1))
  (and
    (= index@205@01 (- 0 1))
    (forall ((i@212@01 Int)) (!
      (and
        (or (<= 0 i@212@01) (not (<= 0 i@212@01)))
        (or
          (not
            (and
              (<= 0 i@212@01)
              (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
          (and
            (<= 0 i@212@01)
            (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))))
      :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@212@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@205@01 (- 0 1))) (= index@205@01 (- 0 1))))
(assert (=>
  (= index@205@01 (- 0 1))
  (forall ((i@212@01 Int)) (!
    (=>
      (and
        (<= 0 i@212@01)
        (< i@212@01 (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0))))
      (not
        (=
          ($FVF.lookup_f (as sm@210@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@164@01 k@194@01) 0)
            i@212@01))
          x@165@01)))
    :pattern ((Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@212@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(declare-const i@213@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@213@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@213@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@213@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@214@01 ($Ref) Int)
(declare-fun img@215@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@213@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@213@01)
    (or (= p@166@01 $Perm.No) (< $Perm.No p@166@01)))
  
  :qid |quant-u-114|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@213@01 Int) (i2@213@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i1@213@01)
        (< $Perm.No p@166@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i2@213@01)
        (< $Perm.No p@166@01))
      (= (Seq_index S@164@01 i1@213@01) (Seq_index S@164@01 i2@213@01)))
    (= i1@213@01 i2@213@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@213@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@213@01)
      (< $Perm.No p@166@01))
    (and
      (= (inv@214@01 (Seq_index S@164@01 i@213@01)) i@213@01)
      (img@215@01 (Seq_index S@164@01 i@213@01))))
  :pattern ((Seq_index S@164@01 i@213@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@215@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@214@01 r))
        (< $Perm.No p@166@01)))
    (= (Seq_index S@164@01 (inv@214@01 r)) r))
  :pattern ((inv@214@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@213@01 Int)) (!
  (=
    (Seq_index S@164@01 i@213@01)
    (Seq_index (Seq_drop (Seq_take S@164@01 k@194@01) 0) i@213@01))
  
  :qid |quant-u-115|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@216@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@214@01 r))
      (img@215@01 r)
      (= r (Seq_index S@164@01 (inv@214@01 r))))
    ($Perm.min
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@201@01 r))
        $Perm.No)
      p@166@01)
    $Perm.No))
(define-fun pTaken@217@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@214@01 r))
      (img@215@01 r)
      (= r (Seq_index S@164@01 (inv@214@01 r))))
    ($Perm.min
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)
      (- p@166@01 (pTaken@216@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@201@01 r))
        $Perm.No)
      (pTaken@216@01 r))
    $Perm.No)
  
  :qid |quant-u-117|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@214@01 r))
      (img@215@01 r)
      (= r (Seq_index S@164@01 (inv@214@01 r))))
    (= (- p@166@01 (pTaken@216@01 r)) $Perm.No))
  
  :qid |quant-u-118|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)
      (pTaken@217@01 r))
    $Perm.No)
  
  :qid |quant-u-119|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@214@01 r))
      (img@215@01 r)
      (= r (Seq_index S@164@01 (inv@214@01 r))))
    (= (- (- p@166@01 (pTaken@216@01 r)) (pTaken@217@01 r)) $Perm.No))
  
  :qid |quant-u-120|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@205@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@205@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 138 | index@205@01 in [0..|S@164@01|] | live]
; [else-branch: 138 | !(index@205@01 in [0..|S@164@01|]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 138 | index@205@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@205@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< index@205@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (< $Perm.No (/ p@166@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
    :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
    :qid |qp.fvfValDef63|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@173@01 (Seq_index S@164@01 index@205@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@164@01))
          (inv@172@01 (Seq_index S@164@01 index@205@01))))
      (- p@166@01 (pTaken@201@01 (Seq_index S@164@01 index@205@01)))
      $Perm.No)
    (ite
      (and
        (img@209@01 (Seq_index S@164@01 index@205@01))
        (and
          (<= 0 (inv@208@01 (Seq_index S@164@01 index@205@01)))
          (<
            (inv@208@01 (Seq_index S@164@01 index@205@01))
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (/ p@166@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 138 | !(index@205@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01)))
(push) ; 6
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01)
  (=
    ($FVF.lookup_f (as sm@210@01  $FVF<f>) (Seq_index S@164@01 index@205@01))
    x@165@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@205@01)
  (=
    ($FVF.lookup_f (as sm@210@01  $FVF<f>) (Seq_index S@164@01 index@205@01))
    x@165@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@205@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@205@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 139 | index@205@01 == -1 | live]
; [else-branch: 139 | index@205@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 139 | index@205@01 == -1]
(assert (= index@205@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@218@01 Int)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 140 | i@218@01 in [0..|S@164@01|] | live]
; [else-branch: 140 | !(i@218@01 in [0..|S@164@01|]) | live]
(push) ; 10
; [then-branch: 140 | i@218@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@218@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@218@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@209@01 r)
          (and
            (<= 0 (inv@208@01 r))
            (<
              (inv@208@01 r)
              (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
        (< $Perm.No (/ p@166@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
    :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
    :qid |qp.fvfValDef63|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@173@01 (Seq_index S@164@01 i@218@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@164@01))
          (inv@172@01 (Seq_index S@164@01 i@218@01))))
      (- p@166@01 (pTaken@201@01 (Seq_index S@164@01 i@218@01)))
      $Perm.No)
    (ite
      (and
        (img@209@01 (Seq_index S@164@01 i@218@01))
        (and
          (<= 0 (inv@208@01 (Seq_index S@164@01 i@218@01)))
          (<
            (inv@208@01 (Seq_index S@164@01 i@218@01))
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (/ p@166@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 140 | !(i@218@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@218@01 Int)) (!
  (or
    (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01))
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01))
  :pattern ((Seq_index S@164@01 i@218@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 139 | index@205@01 != -1]
(assert (not (= index@205@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@201@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@209@01 r)
        (and
          (<= 0 (inv@208@01 r))
          (<
            (inv@208@01 r)
            (Seq_length (Seq_drop (Seq_take S@164@01 k@194@01) 0)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@206@01)) r))
  :qid |qp.fvfValDef63|)))
(assert (=>
  (= index@205@01 (- 0 1))
  (and
    (= index@205@01 (- 0 1))
    (forall ((i@218@01 Int)) (!
      (or
        (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01))
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01))
      :pattern ((Seq_index S@164@01 i@218@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (= index@205@01 (- 0 1))
  (forall ((i@218@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01)
      (not
        (=
          ($FVF.lookup_f (as sm@210@01  $FVF<f>) (Seq_index S@164@01 i@218@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@218@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@205@01 (- 0 1))
  (forall ((i@218@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@218@01)
      (not
        (=
          ($FVF.lookup_f (as sm@210@01  $FVF<f>) (Seq_index S@164@01 i@218@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@218@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|))))
(pop) ; 5
(push) ; 5
; [else-branch: 124 | !(x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01]))]
(assert (not
  (<
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      k@194@01)))))
(pop) ; 5
; [eval] !(x < S[k].f)
; [eval] x < S[k].f
; [eval] S[k]
(push) ; 5
(assert (not (>= k@194@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@194@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (ite
  (and
    (img@173@01 (Seq_index S@164@01 k@194@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index S@164@01 k@194@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  x@165@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
    S@164@01
    k@194@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      k@194@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 141 | !(x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01])) | live]
; [else-branch: 141 | x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01]) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 141 | !(x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01]))]
(assert (not
  (<
    x@165@01
    ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
      S@164@01
      k@194@01)))))
; [exec]
; index := bfind_fixed_ineq(S[k..|S|], x, p / 2)
; [eval] S[k..|S|]
; [eval] S[..|S|]
; [eval] |S|
; [eval] p / 2
; [eval] p > none
(push) ; 6
(assert (not (> (/ p@166@01 (to_real 2)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (> (/ p@166@01 (to_real 2)) $Perm.No))
; [eval] p < write
(push) ; 6
(assert (not (< (/ p@166@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< (/ p@166@01 (to_real 2)) $Perm.Write))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@219@01 Int)
(declare-const j@220@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 142 | !(i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|]) | live]
; [else-branch: 142 | i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] | live]
(push) ; 8
; [then-branch: 142 | !(i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|])]
(assert (not
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 142 | i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|]]
(assert (Seq_contains
  (Seq_range
    0
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
  i@219@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 143 | !(j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|]) | live]
; [else-branch: 143 | j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] | live]
(push) ; 10
; [then-branch: 143 | !(j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|])]
(assert (not
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 143 | j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|]]
(assert (Seq_contains
  (Seq_range
    0
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
  j@220@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01)
  (not
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      j@220@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01)
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      i@219@01)
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        j@220@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01))))))
(assert (or
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01)
  (not
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      i@219@01))))
(push) ; 7
; [then-branch: 144 | i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && i@219@01 != j@220@01 | live]
; [else-branch: 144 | !(i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && i@219@01 != j@220@01) | live]
(push) ; 8
; [then-branch: 144 | i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && i@219@01 != j@220@01]
(assert (and
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01)
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      j@220@01)
    (not (= i@219@01 j@220@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@219@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@219@01
  (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@220@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  j@220@01
  (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 144 | !(i@219@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && j@220@01 in [0..|S@164@01[:|S@164@01|][k@194@01:]|] && i@219@01 != j@220@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      i@219@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        j@220@01)
      (not (= i@219@01 j@220@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      i@219@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        j@220@01)
      (not (= i@219@01 j@220@01))))
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      i@219@01)
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      j@220@01)
    (not (= i@219@01 j@220@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01)))))
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
      i@219@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        j@220@01)
      (not (= i@219@01 j@220@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            i@219@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
              j@220@01)
            (not (= i@219@01 j@220@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          i@219@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
            j@220@01)
          (not (= i@219@01 j@220@01))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(push) ; 6
(assert (not (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@219@01)
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          j@220@01))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@219@01 Int) (j@220@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
        i@219@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
          j@220@01)
        (not (= i@219@01 j@220@01))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@219@01)
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          j@220@01))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))
    j@220@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@219@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@220@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(declare-const i@221@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 145 | !(0 <= i@221@01) | live]
; [else-branch: 145 | 0 <= i@221@01 | live]
(push) ; 8
; [then-branch: 145 | !(0 <= i@221@01)]
(assert (not (<= 0 i@221@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 145 | 0 <= i@221@01]
(assert (<= 0 i@221@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@221@01) (not (<= 0 i@221@01))))
(assert (and
  (<= 0 i@221@01)
  (<
    i@221@01
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@221@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@222@01 ($Ref) Int)
(declare-fun img@223@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@221@01 Int)) (!
  (=>
    (and
      (<= 0 i@221@01)
      (<
        i@221@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
    (or (<= 0 i@221@01) (not (<= 0 i@221@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@221@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@221@01 Int)) (!
  (=>
    (and
      (<= 0 i@221@01)
      (<
        i@221@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
    (or
      (= (/ p@166@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@166@01 (to_real 2)))))
  
  :qid |quant-u-121|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@221@01 Int) (i2@221@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@221@01)
          (<
            i1@221@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@221@01)
          (<
            i2@221@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (=
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i1@221@01)
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i2@221@01)))
    (= i1@221@01 i2@221@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@221@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@221@01)
        (<
          i@221@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
      (< $Perm.No (/ p@166@01 (to_real 2))))
    (and
      (=
        (inv@222@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@221@01))
        i@221@01)
      (img@223@01 (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@221@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@221@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@223@01 r)
      (and
        (and
          (<= 0 (inv@222@01 r))
          (<
            (inv@222@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
        (< $Perm.No (/ p@166@01 (to_real 2)))))
    (=
      (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        (inv@222@01 r))
      r))
  :pattern ((inv@222@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@221@01 Int)) (!
  (=
    (Seq_index
      (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
      i@221@01)
    (Seq_index S@164@01 i@221@01))
  
  :qid |quant-u-122|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@224@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@222@01 r))
        (<
          (inv@222@01 r)
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
      (img@223@01 r)
      (=
        r
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          (inv@222@01 r))))
    ($Perm.min
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      (/ p@166@01 (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        p@166@01
        $Perm.No)
      (pTaken@224@01 r))
    $Perm.No)
  
  :qid |quant-u-124|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@224@01 r) $Perm.No)
  
  :qid |quant-u-125|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@222@01 r))
        (<
          (inv@222@01 r)
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
      (img@223@01 r)
      (=
        r
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          (inv@222@01 r))))
    (= (- (/ p@166@01 (to_real 2)) (pTaken@224@01 r)) $Perm.No))
  
  :qid |quant-u-126|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@225@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No p@166@01)
      false)
    (=
      ($FVF.lookup_f (as sm@225@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@225@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef65|)))
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@226@01 Int)
(declare-const j@227@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 146 | !(0 <= i@226@01) | live]
; [else-branch: 146 | 0 <= i@226@01 | live]
(push) ; 8
; [then-branch: 146 | !(0 <= i@226@01)]
(assert (not (<= 0 i@226@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 146 | 0 <= i@226@01]
(assert (<= 0 i@226@01))
; [eval] i < j
(push) ; 9
; [then-branch: 147 | !(i@226@01 < j@227@01) | live]
; [else-branch: 147 | i@226@01 < j@227@01 | live]
(push) ; 10
; [then-branch: 147 | !(i@226@01 < j@227@01)]
(assert (not (< i@226@01 j@227@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 147 | i@226@01 < j@227@01]
(assert (< i@226@01 j@227@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (< i@226@01 j@227@01) (not (< i@226@01 j@227@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@226@01)
  (and (<= 0 i@226@01) (or (< i@226@01 j@227@01) (not (< i@226@01 j@227@01))))))
(assert (or (<= 0 i@226@01) (not (<= 0 i@226@01))))
(push) ; 7
; [then-branch: 148 | 0 <= i@226@01 && i@226@01 < j@227@01 && j@227@01 < |S@164@01[:|S@164@01|][k@194@01:]| | live]
; [else-branch: 148 | !(0 <= i@226@01 && i@226@01 < j@227@01 && j@227@01 < |S@164@01[:|S@164@01|][k@194@01:]|) | live]
(push) ; 8
; [then-branch: 148 | 0 <= i@226@01 && i@226@01 < j@227@01 && j@227@01 < |S@164@01[:|S@164@01|][k@194@01:]|]
(assert (and
  (<= 0 i@226@01)
  (and
    (< i@226@01 j@227@01)
    (<
      j@227@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@226@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@226@01
  (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@173@01 (Seq_index
      (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
      i@226@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@226@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@227@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (ite
  (and
    (img@173@01 (Seq_index
      (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
      j@227@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@164@01))
      (inv@172@01 (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        j@227@01))))
  (< $Perm.No p@166@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 148 | !(0 <= i@226@01 && i@226@01 < j@227@01 && j@227@01 < |S@164@01[:|S@164@01|][k@194@01:]|)]
(assert (not
  (and
    (<= 0 i@226@01)
    (and
      (< i@226@01 j@227@01)
      (<
        j@227@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 i@226@01)
    (and
      (< i@226@01 j@227@01)
      (<
        j@227@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
  (and
    (<= 0 i@226@01)
    (< i@226@01 j@227@01)
    (<
      j@227@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@226@01)
      (and
        (< i@226@01 j@227@01)
        (<
          j@227@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
  (and
    (<= 0 i@226@01)
    (and
      (< i@226@01 j@227@01)
      (<
        j@227@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@226@01 Int) (j@227@01 Int)) (!
  (and
    (=>
      (<= 0 i@226@01)
      (and
        (<= 0 i@226@01)
        (or (< i@226@01 j@227@01) (not (< i@226@01 j@227@01)))))
    (or (<= 0 i@226@01) (not (<= 0 i@226@01)))
    (=>
      (and
        (<= 0 i@226@01)
        (and
          (< i@226@01 j@227@01)
          (<
            j@227@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (and
        (<= 0 i@226@01)
        (< i@226@01 j@227@01)
        (<
          j@227@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
    (or
      (not
        (and
          (<= 0 i@226@01)
          (and
            (< i@226@01 j@227@01)
            (<
              j@227@01
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
      (and
        (<= 0 i@226@01)
        (and
          (< i@226@01 j@227@01)
          (<
            j@227@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@226@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@227@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(push) ; 6
(assert (not (forall ((i@226@01 Int) (j@227@01 Int)) (!
  (=>
    (and
      (<= 0 i@226@01)
      (and
        (< i@226@01 j@227@01)
        (<
          j@227@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
    (<
      ($FVF.lookup_f (as sm@225@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@226@01))
      ($FVF.lookup_f (as sm@225@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        j@227@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@226@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@227@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@226@01 Int) (j@227@01 Int)) (!
  (=>
    (and
      (<= 0 i@226@01)
      (and
        (< i@226@01 j@227@01)
        (<
          j@227@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
    (<
      ($FVF.lookup_f (as sm@225@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@226@01))
      ($FVF.lookup_f (as sm@225@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        j@227@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@226@01) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    j@227@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
(declare-const index@228@01 Int)
(declare-const $t@229@01 $Snap)
(assert (= $t@229@01 ($Snap.combine ($Snap.first $t@229@01) ($Snap.second $t@229@01))))
(declare-const i@230@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 149 | !(0 <= i@230@01) | live]
; [else-branch: 149 | 0 <= i@230@01 | live]
(push) ; 8
; [then-branch: 149 | !(0 <= i@230@01)]
(assert (not (<= 0 i@230@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 149 | 0 <= i@230@01]
(assert (<= 0 i@230@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@230@01) (not (<= 0 i@230@01))))
(assert (and
  (<= 0 i@230@01)
  (<
    i@230@01
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@230@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@231@01 ($Ref) Int)
(declare-fun img@232@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@230@01 Int)) (!
  (=>
    (and
      (<= 0 i@230@01)
      (<
        i@230@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
    (or (<= 0 i@230@01) (not (<= 0 i@230@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@230@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@230@01 Int)) (!
  (=>
    (and
      (<= 0 i@230@01)
      (<
        i@230@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
    (or
      (= (/ p@166@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@166@01 (to_real 2)))))
  
  :qid |quant-u-127|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@230@01 Int) (i2@230@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@230@01)
          (<
            i1@230@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@230@01)
          (<
            i2@230@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
        (< $Perm.No (/ p@166@01 (to_real 2))))
      (=
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i1@230@01)
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i2@230@01)))
    (= i1@230@01 i2@230@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@230@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@230@01)
        (<
          i@230@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
      (< $Perm.No (/ p@166@01 (to_real 2))))
    (and
      (=
        (inv@231@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@230@01))
        i@230@01)
      (img@232@01 (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@230@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@230@01))
  :qid |quant-u-128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@232@01 r)
      (and
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
        (< $Perm.No (/ p@166@01 (to_real 2)))))
    (=
      (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        (inv@231@01 r))
      r))
  :pattern ((inv@231@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@230@01 Int)) (!
  (<= $Perm.No (/ p@166@01 (to_real 2)))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@230@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@230@01 Int)) (!
  (<= (/ p@166@01 (to_real 2)) $Perm.Write)
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@230@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@230@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@230@01)
        (<
          i@230@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
      (< $Perm.No (/ p@166@01 (to_real 2))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@230@01)
        $Ref.null)))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@230@01))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@230@01)
      (Seq_index S@164@01 i@171@01))
    (=
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))))
  
  :qid |quant-u-129|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@229@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@229@01))
    ($Snap.second ($Snap.second $t@229@01)))))
(assert (= ($Snap.first ($Snap.second $t@229@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@228@01))
(assert (=
  ($Snap.second ($Snap.second $t@229@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@229@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@229@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@229@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (<
  index@228@01
  (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@229@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@229@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@229@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@229@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(set-option :timeout 0)
(push) ; 6
; [then-branch: 150 | !(0 <= index@228@01) | live]
; [else-branch: 150 | 0 <= index@228@01 | live]
(push) ; 7
; [then-branch: 150 | !(0 <= index@228@01)]
(assert (not (<= 0 index@228@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 150 | 0 <= index@228@01]
(assert (<= 0 index@228@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@228@01) (not (<= 0 index@228@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 index@228@01)
    (<
      index@228@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 index@228@01)
  (<
    index@228@01
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 151 | 0 <= index@228@01 && index@228@01 < |S@164@01[:|S@164@01|][k@194@01:]| | live]
; [else-branch: 151 | !(0 <= index@228@01 && index@228@01 < |S@164@01[:|S@164@01|][k@194@01:]|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 151 | 0 <= index@228@01 && index@228@01 < |S@164@01[:|S@164@01|][k@194@01:]|]
(assert (and
  (<= 0 index@228@01)
  (<
    index@228@01
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@228@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@233@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
(declare-const pm@234@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@234@01  $FPM) r)
    (+
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@224@01 r))
        $Perm.No)
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@234@01  $FPM) r))
  :qid |qp.resPrmSumDef68|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_f (as pm@234@01  $FPM) (Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    index@228@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 151 | !(0 <= index@228@01 && index@228@01 < |S@164@01[:|S@164@01|][k@194@01:]|)]
(assert (not
  (and
    (<= 0 index@228@01)
    (<
      index@228@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@234@01  $FPM) r)
    (+
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@224@01 r))
        $Perm.No)
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@234@01  $FPM) r))
  :qid |qp.resPrmSumDef68|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 index@228@01)
      (<
        index@228@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
  (and
    (<= 0 index@228@01)
    (<
      index@228@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
(assert (=>
  (and
    (<= 0 index@228@01)
    (<
      index@228@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
  (=
    ($FVF.lookup_f (as sm@233@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
      index@228@01))
    x@165@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@229@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@228@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@228@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 152 | index@228@01 == -1 | live]
; [else-branch: 152 | index@228@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 152 | index@228@01 == -1]
(assert (= index@228@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@235@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 153 | !(0 <= i@235@01) | live]
; [else-branch: 153 | 0 <= i@235@01 | live]
(push) ; 10
; [then-branch: 153 | !(0 <= i@235@01)]
(assert (not (<= 0 i@235@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 153 | 0 <= i@235@01]
(assert (<= 0 i@235@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@235@01) (not (<= 0 i@235@01))))
(push) ; 9
; [then-branch: 154 | 0 <= i@235@01 && i@235@01 < |S@164@01[:|S@164@01|][k@194@01:]| | live]
; [else-branch: 154 | !(0 <= i@235@01 && i@235@01 < |S@164@01[:|S@164@01|][k@194@01:]|) | live]
(push) ; 10
; [then-branch: 154 | 0 <= i@235@01 && i@235@01 < |S@164@01[:|S@164@01|][k@194@01:]|]
(assert (and
  (<= 0 i@235@01)
  (<
    i@235@01
    (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@235@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (< $Perm.No (/ p@166@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
    :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
    :qid |qp.fvfValDef67|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@173@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@235@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@164@01))
          (inv@172@01 (Seq_index
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
            i@235@01))))
      (-
        p@166@01
        (pTaken@224@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@235@01)))
      $Perm.No)
    (ite
      (and
        (img@232@01 (Seq_index
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
          i@235@01))
        (and
          (<=
            0
            (inv@231@01 (Seq_index
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
              i@235@01)))
          (<
            (inv@231@01 (Seq_index
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
              i@235@01))
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (/ p@166@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 154 | !(0 <= i@235@01 && i@235@01 < |S@164@01[:|S@164@01|][k@194@01:]|)]
(assert (not
  (and
    (<= 0 i@235@01)
    (<
      i@235@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@235@01)
      (<
        i@235@01
        (Seq_length
          (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
  (and
    (<= 0 i@235@01)
    (<
      i@235@01
      (Seq_length (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@235@01 Int)) (!
  (and
    (or (<= 0 i@235@01) (not (<= 0 i@235@01)))
    (or
      (not
        (and
          (<= 0 i@235@01)
          (<
            i@235@01
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (and
        (<= 0 i@235@01)
        (<
          i@235@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
    i@235@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 152 | index@228@01 != -1]
(assert (not (= index@228@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
(assert (=>
  (= index@228@01 (- 0 1))
  (and
    (= index@228@01 (- 0 1))
    (forall ((i@235@01 Int)) (!
      (and
        (or (<= 0 i@235@01) (not (<= 0 i@235@01)))
        (or
          (not
            (and
              (<= 0 i@235@01)
              (<
                i@235@01
                (Seq_length
                  (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
          (and
            (<= 0 i@235@01)
            (<
              i@235@01
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))))
      :pattern ((Seq_index
        (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
        i@235@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@228@01 (- 0 1))) (= index@228@01 (- 0 1))))
(assert (=>
  (= index@228@01 (- 0 1))
  (forall ((i@235@01 Int)) (!
    (=>
      (and
        (<= 0 i@235@01)
        (<
          i@235@01
          (Seq_length
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01))))
      (not
        (=
          ($FVF.lookup_f (as sm@233@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
            i@235@01))
          x@165@01)))
    :pattern ((Seq_index
      (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
      i@235@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; index := index + (index == -1 ? 0 : k)
; [eval] index + (index == -1 ? 0 : k)
; [eval] (index == -1 ? 0 : k)
; [eval] index == -1
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@228@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@228@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 155 | index@228@01 == -1 | live]
; [else-branch: 155 | index@228@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 155 | index@228@01 == -1]
(assert (= index@228@01 (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 155 | index@228@01 != -1]
(assert (not (= index@228@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(declare-const index@236@01 Int)
(assert (= index@236@01 (+ index@228@01 (ite (= index@228@01 (- 0 1)) 0 k@194@01))))
(declare-const i@237@01 Int)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@237@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@237@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@237@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@238@01 ($Ref) Int)
(declare-fun img@239@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@237@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@237@01)
    (or (= p@166@01 $Perm.No) (< $Perm.No p@166@01)))
  
  :qid |quant-u-130|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@237@01 Int) (i2@237@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i1@237@01)
        (< $Perm.No p@166@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i2@237@01)
        (< $Perm.No p@166@01))
      (= (Seq_index S@164@01 i1@237@01) (Seq_index S@164@01 i2@237@01)))
    (= i1@237@01 i2@237@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@237@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@237@01)
      (< $Perm.No p@166@01))
    (and
      (= (inv@238@01 (Seq_index S@164@01 i@237@01)) i@237@01)
      (img@239@01 (Seq_index S@164@01 i@237@01))))
  :pattern ((Seq_index S@164@01 i@237@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@238@01 r))
        (< $Perm.No p@166@01)))
    (= (Seq_index S@164@01 (inv@238@01 r)) r))
  :pattern ((inv@238@01 r))
  :qid |f-fctOfInv|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@237@01 Int)) (!
  (=
    (Seq_index S@164@01 i@237@01)
    (Seq_index
      (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)
      i@237@01))
  
  :qid |quant-u-131|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@240@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@238@01 r))
      (img@239@01 r)
      (= r (Seq_index S@164@01 (inv@238@01 r))))
    ($Perm.min
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@224@01 r))
        $Perm.No)
      p@166@01)
    $Perm.No))
(define-fun pTaken@241@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@238@01 r))
      (img@239@01 r)
      (= r (Seq_index S@164@01 (inv@238@01 r))))
    ($Perm.min
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)
      (- p@166@01 (pTaken@240@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (- p@166@01 (pTaken@224@01 r))
        $Perm.No)
      (pTaken@240@01 r))
    $Perm.No)
  
  :qid |quant-u-133|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@238@01 r))
      (img@239@01 r)
      (= r (Seq_index S@164@01 (inv@238@01 r))))
    (= (- p@166@01 (pTaken@240@01 r)) $Perm.No))
  
  :qid |quant-u-134|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (/ p@166@01 (to_real 2))
        $Perm.No)
      (pTaken@241@01 r))
    $Perm.No)
  
  :qid |quant-u-135|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@238@01 r))
      (img@239@01 r)
      (= r (Seq_index S@164@01 (inv@238@01 r))))
    (= (- (- p@166@01 (pTaken@240@01 r)) (pTaken@241@01 r)) $Perm.No))
  
  :qid |quant-u-136|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@236@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@164@01)) index@236@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 156 | index@236@01 in [0..|S@164@01|] | live]
; [else-branch: 156 | !(index@236@01 in [0..|S@164@01|]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 156 | index@236@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@236@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< index@236@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (< $Perm.No (/ p@166@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
    :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
    :qid |qp.fvfValDef67|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@173@01 (Seq_index S@164@01 index@236@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@164@01))
          (inv@172@01 (Seq_index S@164@01 index@236@01))))
      (- p@166@01 (pTaken@224@01 (Seq_index S@164@01 index@236@01)))
      $Perm.No)
    (ite
      (and
        (img@232@01 (Seq_index S@164@01 index@236@01))
        (and
          (<= 0 (inv@231@01 (Seq_index S@164@01 index@236@01)))
          (<
            (inv@231@01 (Seq_index S@164@01 index@236@01))
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (/ p@166@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 156 | !(index@236@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01)))
(push) ; 6
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01)
  (=
    ($FVF.lookup_f (as sm@233@01  $FVF<f>) (Seq_index S@164@01 index@236@01))
    x@165@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) index@236@01)
  (=
    ($FVF.lookup_f (as sm@233@01  $FVF<f>) (Seq_index S@164@01 index@236@01))
    x@165@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@236@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@236@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 157 | index@236@01 == -1 | live]
; [else-branch: 157 | index@236@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 157 | index@236@01 == -1]
(assert (= index@236@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@242@01 Int)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 158 | i@242@01 in [0..|S@164@01|] | live]
; [else-branch: 158 | !(i@242@01 in [0..|S@164@01|]) | live]
(push) ; 10
; [then-branch: 158 | i@242@01 in [0..|S@164@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@242@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@242@01 (Seq_length S@164@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@173@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
        (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (and
            (<= 0 (inv@231@01 r))
            (<
              (inv@231@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
        (< $Perm.No (/ p@166@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
    :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
    :qid |qp.fvfValDef67|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@173@01 (Seq_index S@164@01 i@242@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@164@01))
          (inv@172@01 (Seq_index S@164@01 i@242@01))))
      (- p@166@01 (pTaken@224@01 (Seq_index S@164@01 i@242@01)))
      $Perm.No)
    (ite
      (and
        (img@232@01 (Seq_index S@164@01 i@242@01))
        (and
          (<= 0 (inv@231@01 (Seq_index S@164@01 i@242@01)))
          (<
            (inv@231@01 (Seq_index S@164@01 i@242@01))
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (/ p@166@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 158 | !(i@242@01 in [0..|S@164@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01))
  (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@242@01 Int)) (!
  (or
    (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01))
    (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01))
  :pattern ((Seq_index S@164@01 i@242@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 157 | index@236@01 != -1]
(assert (not (= index@236@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@173@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) (inv@172@01 r)))
      (< $Perm.No (- p@166@01 (pTaken@224@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (and
          (<= 0 (inv@231@01 r))
          (<
            (inv@231@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@164@01 (Seq_length S@164@01)) k@194@01)))))
      (< $Perm.No (/ p@166@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@233@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r)))
  :pattern (($FVF.lookup_f (as sm@233@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@229@01)) r))
  :qid |qp.fvfValDef67|)))
(assert (=>
  (= index@236@01 (- 0 1))
  (and
    (= index@236@01 (- 0 1))
    (forall ((i@242@01 Int)) (!
      (or
        (not (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01))
        (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01))
      :pattern ((Seq_index S@164@01 i@242@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81-aux|)))))
; Joined path conditions
(assert (or (not (= index@236@01 (- 0 1))) (= index@236@01 (- 0 1))))
(push) ; 6
(assert (not (=>
  (= index@236@01 (- 0 1))
  (forall ((i@242@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01)
      (not
        (=
          ($FVF.lookup_f (as sm@233@01  $FVF<f>) (Seq_index S@164@01 i@242@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@242@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@236@01 (- 0 1))
  (forall ((i@242@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@164@01)) i@242@01)
      (not
        (=
          ($FVF.lookup_f (as sm@233@01  $FVF<f>) (Seq_index S@164@01 i@242@01))
          x@165@01)))
    :pattern ((Seq_index S@164@01 i@242@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@76@28@76@81|))))
(pop) ; 5
(push) ; 5
; [else-branch: 141 | x@165@01 < Lookup(f, First:(Second:(Second:(Second:($t@168@01)))), S@164@01[k@194@01])]
(assert (<
  x@165@01
  ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@168@01))))) (Seq_index
    S@164@01
    k@194@01))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 123 | |S@164@01| == 1]
(assert (= (Seq_length S@164@01) 1))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 117 | |S@164@01| == 0]
(assert (= (Seq_length S@164@01) 0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- bfind_fixed_seqin_heap_dep_triggers ----------
(declare-const S@243@01 Seq<$Ref>)
(declare-const x@244@01 Int)
(declare-const p@245@01 $Perm)
(declare-const index@246@01 Int)
(declare-const S@247@01 Seq<$Ref>)
(declare-const x@248@01 Int)
(declare-const p@249@01 $Perm)
(declare-const index@250@01 Int)
(push) ; 1
(declare-const $t@251@01 $Snap)
(assert (= $t@251@01 ($Snap.combine ($Snap.first $t@251@01) ($Snap.second $t@251@01))))
(assert (= ($Snap.first $t@251@01) $Snap.unit))
; [eval] p > none
(assert (> p@249@01 $Perm.No))
(assert (=
  ($Snap.second $t@251@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@251@01))
    ($Snap.second ($Snap.second $t@251@01)))))
(assert (= ($Snap.first ($Snap.second $t@251@01)) $Snap.unit))
; [eval] p < write
(assert (< p@249@01 $Perm.Write))
(assert (=
  ($Snap.second ($Snap.second $t@251@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@251@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@251@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@251@01))) $Snap.unit))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@252@01 Int)
(declare-const j@253@01 Int)
(push) ; 2
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
; [then-branch: 159 | !(i@252@01 in [0..|S@247@01|]) | live]
; [else-branch: 159 | i@252@01 in [0..|S@247@01|] | live]
(push) ; 4
; [then-branch: 159 | !(i@252@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 159 | i@252@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
; [then-branch: 160 | !(j@253@01 in [0..|S@247@01|]) | live]
; [else-branch: 160 | j@253@01 in [0..|S@247@01|] | live]
(push) ; 6
; [then-branch: 160 | !(j@253@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 160 | j@253@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01))
; [eval] i != j
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01))))
(push) ; 3
; [then-branch: 161 | i@252@01 in [0..|S@247@01|] && j@253@01 in [0..|S@247@01|] && i@252@01 != j@253@01 | live]
; [else-branch: 161 | !(i@252@01 in [0..|S@247@01|] && j@253@01 in [0..|S@247@01|] && i@252@01 != j@253@01) | live]
(push) ; 4
; [then-branch: 161 | i@252@01 in [0..|S@247@01|] && j@253@01 in [0..|S@247@01|] && i@252@01 != j@253@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
    (not (= i@252@01 j@253@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 5
(assert (not (>= i@252@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@252@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@253@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j@253@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 161 | !(i@252@01 in [0..|S@247@01|] && j@253@01 in [0..|S@247@01|] && i@252@01 != j@253@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
      (not (= i@252@01 j@253@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
      (not (= i@252@01 j@253@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
    (not (= i@252@01 j@253@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
      (not (= i@252@01 j@253@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_contains
    (Seq_range 0 (Seq_length S@247@01))
    j@253@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@247@01))
    j@253@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@247@01))
    j@253@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_index
    S@247@01
    j@253@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_index
    S@247@01
    j@253@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_index
    S@247@01
    j@253@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01) (Seq_index
    S@247@01
    i@252@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) j@253@01) (Seq_index
    S@247@01
    i@252@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) j@253@01) (Seq_index
    S@247@01
    i@252@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
            (not (= i@252@01 j@253@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
          (not (= i@252@01 j@253@01))))))
  :pattern ((Seq_index S@247@01 i@252@01) (Seq_index S@247@01 j@253@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94-aux|)))
(assert (forall ((i@252@01 Int) (j@253@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01)
        (not (= i@252@01 j@253@01))))
    (not (= (Seq_index S@247@01 i@252@01) (Seq_index S@247@01 j@253@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_contains
    (Seq_range 0 (Seq_length S@247@01))
    j@253@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length S@247@01))
    j@253@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_index
    S@247@01
    j@253@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) i@252@01) (Seq_index
    S@247@01
    j@253@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length S@247@01)) j@253@01) (Seq_index
    S@247@01
    i@252@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length S@247@01)) j@253@01) (Seq_index
    S@247@01
    i@252@01))
  :pattern ((Seq_index S@247@01 i@252@01) (Seq_index S@247@01 j@253@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@100@12@100@94|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@251@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01)))))))
(declare-const i@254@01 Int)
(push) ; 2
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@254@01))
; [eval] S[i]
(push) ; 3
(assert (not (>= i@254@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< i@254@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(declare-const sm@255@01 $FVF<f>)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 2
(declare-fun inv@256@01 ($Ref) Int)
(declare-fun img@257@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@254@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@254@01)
    (or (= p@249@01 $Perm.No) (< $Perm.No p@249@01)))
  
  :qid |quant-u-137|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@254@01 Int) (i2@254@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i1@254@01)
        (< $Perm.No p@249@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i2@254@01)
        (< $Perm.No p@249@01))
      (= (Seq_index S@247@01 i1@254@01) (Seq_index S@247@01 i2@254@01)))
    (= i1@254@01 i2@254@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@254@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@254@01)
      (< $Perm.No p@249@01))
    (and
      (= (inv@256@01 (Seq_index S@247@01 i@254@01)) i@254@01)
      (img@257@01 (Seq_index S@247@01 i@254@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) (Seq_index
    S@247@01
    i@254@01)) (Seq_index S@247@01 i@254@01)))
  :qid |quant-u-138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@257@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r))
        (< $Perm.No p@249@01)))
    (= (Seq_index S@247@01 (inv@256@01 r)) r))
  :pattern ((inv@256@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@254@01 Int)) (!
  (<= $Perm.No p@249@01)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) (Seq_index
    S@247@01
    i@254@01)) (Seq_index S@247@01 i@254@01)))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@254@01 Int)) (!
  (<= p@249@01 $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) (Seq_index
    S@247@01
    i@254@01)) (Seq_index S@247@01 i@254@01)))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@254@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@254@01)
      (< $Perm.No p@249@01))
    (not (= (Seq_index S@247@01 i@254@01) $Ref.null)))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) (Seq_index
    S@247@01
    i@254@01)) (Seq_index S@247@01 i@254@01)))
  :qid |f-permImpliesNonNull|)))
(declare-const sm@258@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) r) r))
  :pattern ((inv@256@01 r))
  :qid |quant-u-139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { S[i].f, S[j].f } (i in [0..j)) && (j in [i..|S|)) ==> S[i].f < S[j].f)
(declare-const i@259@01 Int)
(declare-const j@260@01 Int)
(push) ; 2
; [eval] (i in [0..j)) && (j in [i..|S|)) ==> S[i].f < S[j].f
; [eval] (i in [0..j)) && (j in [i..|S|))
; [eval] (i in [0..j))
; [eval] [0..j)
(push) ; 3
; [then-branch: 162 | !(i@259@01 in [0..j@260@01]) | live]
; [else-branch: 162 | i@259@01 in [0..j@260@01] | live]
(push) ; 4
; [then-branch: 162 | !(i@259@01 in [0..j@260@01])]
(assert (not (Seq_contains (Seq_range 0 j@260@01) i@259@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 162 | i@259@01 in [0..j@260@01]]
(assert (Seq_contains (Seq_range 0 j@260@01) i@259@01))
; [eval] (j in [i..|S|))
; [eval] [i..|S|)
; [eval] |S|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 j@260@01) i@259@01)
  (not (Seq_contains (Seq_range 0 j@260@01) i@259@01))))
(push) ; 3
; [then-branch: 163 | i@259@01 in [0..j@260@01] && j@260@01 in [i@259@01..|S@247@01|] | live]
; [else-branch: 163 | !(i@259@01 in [0..j@260@01] && j@260@01 in [i@259@01..|S@247@01|]) | live]
(push) ; 4
; [then-branch: 163 | i@259@01 in [0..j@260@01] && j@260@01 in [i@259@01..|S@247@01|]]
(assert (and
  (Seq_contains (Seq_range 0 j@260@01) i@259@01)
  (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01)))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 5
(assert (not (>= i@259@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@259@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@259@01)) (Seq_index
  S@247@01
  i@259@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 i@259@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 i@259@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 5
(assert (not (>= j@260@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j@260@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 j@260@01)) (Seq_index
  S@247@01
  j@260@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 j@260@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 j@260@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 163 | !(i@259@01 in [0..j@260@01] && j@260@01 in [i@259@01..|S@247@01|])]
(assert (not
  (and
    (Seq_contains (Seq_range 0 j@260@01) i@259@01)
    (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (and
    (Seq_contains (Seq_range 0 j@260@01) i@259@01)
    (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01))
  (and
    (Seq_contains (Seq_range 0 j@260@01) i@259@01)
    (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      i@259@01)) (Seq_index S@247@01 i@259@01))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      j@260@01)) (Seq_index S@247@01 j@260@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 j@260@01) i@259@01)
      (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01)))
  (and
    (Seq_contains (Seq_range 0 j@260@01) i@259@01)
    (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01))))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@259@01 Int) (j@260@01 Int)) (!
  (and
    (or
      (Seq_contains (Seq_range 0 j@260@01) i@259@01)
      (not (Seq_contains (Seq_range 0 j@260@01) i@259@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 j@260@01) i@259@01)
        (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01))
      (and
        (Seq_contains (Seq_range 0 j@260@01) i@259@01)
        (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          S@247@01
          i@259@01)) (Seq_index S@247@01 i@259@01))
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          S@247@01
          j@260@01)) (Seq_index S@247@01 j@260@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 j@260@01) i@259@01)
          (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01)))
      (and
        (Seq_contains (Seq_range 0 j@260@01) i@259@01)
        (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@259@01)) (Seq_index S@247@01 i@259@01)) ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    j@260@01)) (Seq_index S@247@01 j@260@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@102@12@102@102-aux|)))
(assert (forall ((i@259@01 Int) (j@260@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 j@260@01) i@259@01)
      (Seq_contains (Seq_range i@259@01 (Seq_length S@247@01)) j@260@01))
    (<
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@259@01))
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 j@260@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@259@01)) (Seq_index S@247@01 i@259@01)) ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    j@260@01)) (Seq_index S@247@01 j@260@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@102@12@102@102|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 ($Snap.combine ($Snap.first $t@261@01) ($Snap.second $t@261@01))))
(declare-const i@262@01 Int)
(push) ; 3
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@262@01))
; [eval] S[i]
(push) ; 4
(assert (not (>= i@262@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< i@262@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@263@01 $FVF<f>)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 3
(declare-fun inv@264@01 ($Ref) Int)
(declare-fun img@265@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@262@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@262@01)
    (or (= p@249@01 $Perm.No) (< $Perm.No p@249@01)))
  
  :qid |quant-u-140|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@262@01 Int) (i2@262@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i1@262@01)
        (< $Perm.No p@249@01))
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i2@262@01)
        (< $Perm.No p@249@01))
      (= (Seq_index S@247@01 i1@262@01) (Seq_index S@247@01 i2@262@01)))
    (= i1@262@01 i2@262@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@262@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@262@01)
      (< $Perm.No p@249@01))
    (and
      (= (inv@264@01 (Seq_index S@247@01 i@262@01)) i@262@01)
      (img@265@01 (Seq_index S@247@01 i@262@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) (Seq_index
    S@247@01
    i@262@01)) (Seq_index S@247@01 i@262@01)))
  :qid |quant-u-141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@265@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r))
        (< $Perm.No p@249@01)))
    (= (Seq_index S@247@01 (inv@264@01 r)) r))
  :pattern ((inv@264@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@262@01 Int)) (!
  (<= $Perm.No p@249@01)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) (Seq_index
    S@247@01
    i@262@01)) (Seq_index S@247@01 i@262@01)))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@262@01 Int)) (!
  (<= p@249@01 $Perm.Write)
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) (Seq_index
    S@247@01
    i@262@01)) (Seq_index S@247@01 i@262@01)))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@262@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@262@01)
      (< $Perm.No p@249@01))
    (not (= (Seq_index S@247@01 i@262@01) $Ref.null)))
  :pattern (($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) (Seq_index
    S@247@01
    i@262@01)) (Seq_index S@247@01 i@262@01)))
  :qid |f-permImpliesNonNull|)))
(declare-const sm@266@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@265@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) r) r))
  :pattern ((inv@264@01 r))
  :qid |quant-u-142|)))
(assert (=
  ($Snap.second $t@261@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@261@01))
    ($Snap.second ($Snap.second $t@261@01)))))
(assert (= ($Snap.first ($Snap.second $t@261@01)) $Snap.unit))
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@250@01))
(assert (=
  ($Snap.second ($Snap.second $t@261@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@261@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@261@01))) $Snap.unit))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 164 | index@250@01 in [0..|S@247@01|] | live]
; [else-branch: 164 | !(index@250@01 in [0..|S@247@01|]) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 164 | index@250@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 5
(assert (not (>= index@250@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< index@250@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@265@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
    :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
    :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
  S@247@01
  index@250@01)) (Seq_index S@247@01 index@250@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@265@01 (Seq_index S@247@01 index@250@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@264@01 (Seq_index S@247@01 index@250@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 164 | !(index@250@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@265@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
      S@247@01
      index@250@01)) (Seq_index S@247@01 index@250@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@250@01)
  (=
    ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index S@247@01 index@250@01))
    x@248@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@261@01))) $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= index@250@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= index@250@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 165 | index@250@01 == -1 | live]
; [else-branch: 165 | index@250@01 != -1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 165 | index@250@01 == -1]
(assert (= index@250@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@267@01 Int)
(push) ; 5
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
; [then-branch: 166 | i@267@01 in [0..|S@247@01|] | live]
; [else-branch: 166 | !(i@267@01 in [0..|S@247@01|]) | live]
(push) ; 7
; [then-branch: 166 | i@267@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 8
(assert (not (>= i@267@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< i@267@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@265@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
    :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
    :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index S@247@01 i@267@01)) (Seq_index
  S@247@01
  i@267@01)))
(push) ; 8
(assert (not (ite
  (and
    (img@265@01 (Seq_index S@247@01 i@267@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@264@01 (Seq_index S@247@01 i@267@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 166 | !(i@267@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@265@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
      S@247@01
      i@267@01)) (Seq_index S@247@01 i@267@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@265@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef74|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@267@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
          S@247@01
          i@267@01)) (Seq_index S@247@01 i@267@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01))
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
    S@247@01
    i@267@01)) (Seq_index S@247@01 i@267@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 165 | index@250@01 != -1]
(assert (not (= index@250@01 (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@265@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@264@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@266@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r)))
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@261@01)) r) r)
  :pattern (($FVF.lookup_f (as sm@266@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (= index@250@01 (- 0 1))
  (and
    (= index@250@01 (- 0 1))
    (forall ((i@267@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
              S@247@01
              i@267@01)) (Seq_index S@247@01 i@267@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01))
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
        S@247@01
        i@267@01)) (Seq_index S@247@01 i@267@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))))
; Joined path conditions
(assert (or (not (= index@250@01 (- 0 1))) (= index@250@01 (- 0 1))))
(assert (=>
  (= index@250@01 (- 0 1))
  (forall ((i@267@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@267@01)
      (not
        (=
          ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index S@247@01 i@267@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@266@01  $FVF<f>) (Seq_index
      S@247@01
      i@267@01)) (Seq_index S@247@01 i@267@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|))))
(pop) ; 2
(push) ; 2
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@247@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@247@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 167 | |S@247@01| == 0 | live]
; [else-branch: 167 | |S@247@01| != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 167 | |S@247@01| == 0]
(assert (= (Seq_length S@247@01) 0))
; [exec]
; index := -1
; [eval] -1
(declare-const i@268@01 Int)
(push) ; 4
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@268@01))
; [eval] S[i]
(push) ; 5
(assert (not (>= i@268@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i@268@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 4
(declare-fun inv@269@01 ($Ref) Int)
(declare-fun img@270@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 4
(assert (not (forall ((i@268@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@268@01)
    (or (= p@249@01 $Perm.No) (< $Perm.No p@249@01)))
  
  :qid |quant-u-143|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@268@01 Int) (i2@268@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i1@268@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            S@247@01
            i1@268@01)) (Seq_index S@247@01 i1@268@01)))
        (< $Perm.No p@249@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i2@268@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            S@247@01
            i2@268@01)) (Seq_index S@247@01 i2@268@01)))
        (< $Perm.No p@249@01))
      (= (Seq_index S@247@01 i1@268@01) (Seq_index S@247@01 i2@268@01)))
    (= i1@268@01 i2@268@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@268@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@268@01)
      (< $Perm.No p@249@01))
    (and
      (= (inv@269@01 (Seq_index S@247@01 i@268@01)) i@268@01)
      (img@270@01 (Seq_index S@247@01 i@268@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@268@01)) (Seq_index S@247@01 i@268@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@270@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@269@01 r))
        (< $Perm.No p@249@01)))
    (= (Seq_index S@247@01 (inv@269@01 r)) r))
  :pattern ((inv@269@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@269@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) r) r))
  :pattern ((inv@269@01 r))
  :qid |quant-u-144|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@271@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@269@01 r))
      (img@270@01 r)
      (= r (Seq_index S@247@01 (inv@269@01 r))))
    ($Perm.min
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      p@249@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      (pTaken@271@01 r))
    $Perm.No)
  
  :qid |quant-u-146|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@269@01 r))
      (img@270@01 r)
      (= r (Seq_index S@247@01 (inv@269@01 r))))
    (= (- p@249@01 (pTaken@271@01 r)) $Perm.No))
  
  :qid |quant-u-147|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 4
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) (- 0 1))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) (- 0 1)))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 168 | -1 in [0..|S@247@01|] | dead]
; [else-branch: 168 | !(-1 in [0..|S@247@01|]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 168 | !(-1 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (- 0 1))))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 169 | True | live]
; [else-branch: 169 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 169 | True]
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@272@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 170 | i@272@01 in [0..|S@247@01|] | live]
; [else-branch: 170 | !(i@272@01 in [0..|S@247@01|]) | live]
(push) ; 8
; [then-branch: 170 | i@272@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 9
(assert (not (>= i@272@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@272@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@272@01)) (Seq_index
  S@247@01
  i@272@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 i@272@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 i@272@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 170 | !(i@272@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      i@272@01)) (Seq_index S@247@01 i@272@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@272@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          S@247@01
          i@272@01)) (Seq_index S@247@01 i@272@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01))
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@272@01)) (Seq_index S@247@01 i@272@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (forall ((i@272@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          S@247@01
          i@272@01)) (Seq_index S@247@01 i@272@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01))
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@272@01)) (Seq_index S@247@01 i@272@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))
(push) ; 4
(assert (not (forall ((i@272@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
    (not
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@272@01))
        x@248@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@272@01)) (Seq_index S@247@01 i@272@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@272@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@272@01)
    (not
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@272@01))
        x@248@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@272@01)) (Seq_index S@247@01 i@272@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|)))
(pop) ; 3
(push) ; 3
; [else-branch: 167 | |S@247@01| != 0]
(assert (not (= (Seq_length S@247@01) 0)))
(pop) ; 3
; [eval] !(|S| == 0)
; [eval] |S| == 0
; [eval] |S|
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_length S@247@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@247@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 171 | |S@247@01| != 0 | live]
; [else-branch: 171 | |S@247@01| == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 171 | |S@247@01| != 0]
(assert (not (= (Seq_length S@247@01) 0)))
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@247@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@247@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 172 | |S@247@01| == 1 | live]
; [else-branch: 172 | |S@247@01| != 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 172 | |S@247@01| == 1]
(assert (= (Seq_length S@247@01) 1))
; [exec]
; index := (x == S[0].f ? 0 : -1)
; [eval] (x == S[0].f ? 0 : -1)
; [eval] x == S[0].f
; [eval] S[0]
(push) ; 5
(assert (not (< 0 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0)) (Seq_index
  S@247@01
  0)))
(push) ; 5
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 0))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 0))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0))))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 173 | x@248@01 == Lookup(f, sm@258@01, S@247@01[0]) | live]
; [else-branch: 173 | x@248@01 != Lookup(f, sm@258@01, S@247@01[0]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 173 | x@248@01 == Lookup(f, sm@258@01, S@247@01[0])]
(assert (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0))))
(pop) ; 6
(push) ; 6
; [else-branch: 173 | x@248@01 != Lookup(f, sm@258@01, S@247@01[0])]
(assert (not (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0)))))
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0))))
  (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0)))))
(declare-const index@273@01 Int)
(assert (=
  index@273@01
  (ite
    (= x@248@01 ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 0)))
    0
    (- 0 1))))
(declare-const i@274@01 Int)
(push) ; 5
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@274@01))
; [eval] S[i]
(push) ; 6
(assert (not (>= i@274@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< i@274@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 5
(declare-fun inv@275@01 ($Ref) Int)
(declare-fun img@276@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@274@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@274@01)
    (or (= p@249@01 $Perm.No) (< $Perm.No p@249@01)))
  
  :qid |quant-u-148|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@274@01 Int) (i2@274@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i1@274@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            S@247@01
            i1@274@01)) (Seq_index S@247@01 i1@274@01)))
        (< $Perm.No p@249@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i2@274@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            S@247@01
            i2@274@01)) (Seq_index S@247@01 i2@274@01)))
        (< $Perm.No p@249@01))
      (= (Seq_index S@247@01 i1@274@01) (Seq_index S@247@01 i2@274@01)))
    (= i1@274@01 i2@274@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@274@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@274@01)
      (< $Perm.No p@249@01))
    (and
      (= (inv@275@01 (Seq_index S@247@01 i@274@01)) i@274@01)
      (img@276@01 (Seq_index S@247@01 i@274@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@274@01)) (Seq_index S@247@01 i@274@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@276@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@275@01 r))
        (< $Perm.No p@249@01)))
    (= (Seq_index S@247@01 (inv@275@01 r)) r))
  :pattern ((inv@275@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@275@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) r) r))
  :pattern ((inv@275@01 r))
  :qid |quant-u-149|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@277@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@275@01 r))
      (img@276@01 r)
      (= r (Seq_index S@247@01 (inv@275@01 r))))
    ($Perm.min
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      p@249@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      (pTaken@277@01 r))
    $Perm.No)
  
  :qid |quant-u-151|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@275@01 r))
      (img@276@01 r)
      (= r (Seq_index S@247@01 (inv@275@01 r))))
    (= (- p@249@01 (pTaken@277@01 r)) $Perm.No))
  
  :qid |quant-u-152|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@273@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@273@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 174 | index@273@01 in [0..|S@247@01|] | live]
; [else-branch: 174 | !(index@273@01 in [0..|S@247@01|]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 174 | index@273@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 7
(assert (not (>= index@273@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< index@273@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
  S@247@01
  index@273@01)) (Seq_index S@247@01 index@273@01)))
(push) ; 7
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 index@273@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 index@273@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 174 | !(index@273@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      index@273@01)) (Seq_index S@247@01 index@273@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)))
(push) ; 5
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)
  (=
    ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 index@273@01))
    x@248@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@273@01)
  (=
    ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 index@273@01))
    x@248@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= index@273@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= index@273@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 175 | index@273@01 == -1 | live]
; [else-branch: 175 | index@273@01 != -1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 175 | index@273@01 == -1]
(assert (= index@273@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@278@01 Int)
(push) ; 7
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 8
; [then-branch: 176 | i@278@01 in [0..|S@247@01|] | live]
; [else-branch: 176 | !(i@278@01 in [0..|S@247@01|]) | live]
(push) ; 9
; [then-branch: 176 | i@278@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 10
(assert (not (>= i@278@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< i@278@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@278@01)) (Seq_index
  S@247@01
  i@278@01)))
(push) ; 10
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 i@278@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 i@278@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 176 | !(i@278@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      i@278@01)) (Seq_index S@247@01 i@278@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)))
; Definitional axioms for snapshot map values
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@278@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          S@247@01
          i@278@01)) (Seq_index S@247@01 i@278@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01))
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
    S@247@01
    i@278@01)) (Seq_index S@247@01 i@278@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 175 | index@273@01 != -1]
(assert (not (= index@273@01 (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (= index@273@01 (- 0 1))
  (and
    (= index@273@01 (- 0 1))
    (forall ((i@278@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
              S@247@01
              i@278@01)) (Seq_index S@247@01 i@278@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01))
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        S@247@01
        i@278@01)) (Seq_index S@247@01 i@278@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))))
; Joined path conditions
(assert (or (not (= index@273@01 (- 0 1))) (= index@273@01 (- 0 1))))
(push) ; 5
(assert (not (=>
  (= index@273@01 (- 0 1))
  (forall ((i@278@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
      (not
        (=
          ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@278@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      i@278@01)) (Seq_index S@247@01 i@278@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@273@01 (- 0 1))
  (forall ((i@278@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@278@01)
      (not
        (=
          ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 i@278@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      S@247@01
      i@278@01)) (Seq_index S@247@01 i@278@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|))))
(pop) ; 4
(push) ; 4
; [else-branch: 172 | |S@247@01| != 1]
(assert (not (= (Seq_length S@247@01) 1)))
(pop) ; 4
; [eval] !(|S| == 1)
; [eval] |S| == 1
; [eval] |S|
(push) ; 4
(set-option :timeout 10)
(assert (not (= (Seq_length S@247@01) 1)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (Seq_length S@247@01) 1))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 177 | |S@247@01| != 1 | live]
; [else-branch: 177 | |S@247@01| == 1 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 177 | |S@247@01| != 1]
(assert (not (= (Seq_length S@247@01) 1)))
; [exec]
; var k: Int
(declare-const k@279@01 Int)
; [exec]
; inhale 0 < k && k < |S| - 1
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 ($Snap.combine ($Snap.first $t@280@01) ($Snap.second $t@280@01))))
(assert (= ($Snap.first $t@280@01) $Snap.unit))
; [eval] 0 < k
(assert (< 0 k@279@01))
(assert (= ($Snap.second $t@280@01) $Snap.unit))
; [eval] k < |S| - 1
; [eval] |S| - 1
; [eval] |S|
(assert (< k@279@01 (- (Seq_length S@247@01) 1)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] x < S[k].f
; [eval] S[k]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= k@279@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@279@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01)) (Seq_index
  S@247@01
  k@279@01)))
(push) ; 5
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 k@279@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 k@279@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    x@248@01
    ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  x@248@01
  ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 178 | x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01]) | live]
; [else-branch: 178 | !(x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 178 | x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01])]
(assert (<
  x@248@01
  ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01))))
; [exec]
; index := bfind_fixed_ineq(S[0..k], x, p / 2)
; [eval] S[0..k]
; [eval] S[..k]
; [eval] p / 2
; [eval] p > none
(push) ; 6
(assert (not (> (/ p@249@01 (to_real 2)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (> (/ p@249@01 (to_real 2)) $Perm.No))
; [eval] p < write
(push) ; 6
(assert (not (< (/ p@249@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< (/ p@249@01 (to_real 2)) $Perm.Write))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@281@01 Int)
(declare-const j@282@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 179 | !(i@281@01 in [0..|S@247@01[:k@279@01][0:]|]) | live]
; [else-branch: 179 | i@281@01 in [0..|S@247@01[:k@279@01][0:]|] | live]
(push) ; 8
; [then-branch: 179 | !(i@281@01 in [0..|S@247@01[:k@279@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 179 | i@281@01 in [0..|S@247@01[:k@279@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
  i@281@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 180 | !(j@282@01 in [0..|S@247@01[:k@279@01][0:]|]) | live]
; [else-branch: 180 | j@282@01 in [0..|S@247@01[:k@279@01][0:]|] | live]
(push) ; 10
; [then-branch: 180 | !(j@282@01 in [0..|S@247@01[:k@279@01][0:]|])]
(assert (not
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 180 | j@282@01 in [0..|S@247@01[:k@279@01][0:]|]]
(assert (Seq_contains
  (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
  j@282@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      j@282@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      i@281@01)
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        j@282@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01))))))
(assert (or
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01)
  (not
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      i@281@01))))
(push) ; 7
; [then-branch: 181 | i@281@01 in [0..|S@247@01[:k@279@01][0:]|] && j@282@01 in [0..|S@247@01[:k@279@01][0:]|] && i@281@01 != j@282@01 | live]
; [else-branch: 181 | !(i@281@01 in [0..|S@247@01[:k@279@01][0:]|] && j@282@01 in [0..|S@247@01[:k@279@01][0:]|] && i@281@01 != j@282@01) | live]
(push) ; 8
; [then-branch: 181 | i@281@01 in [0..|S@247@01[:k@279@01][0:]|] && j@282@01 in [0..|S@247@01[:k@279@01][0:]|] && i@281@01 != j@282@01]
(assert (and
  (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01)
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      j@282@01)
    (not (= i@281@01 j@282@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@281@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@281@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@282@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< j@282@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 181 | !(i@281@01 in [0..|S@247@01[:k@279@01][0:]|] && j@282@01 in [0..|S@247@01[:k@279@01][0:]|] && i@281@01 != j@282@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      i@281@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        j@282@01)
      (not (= i@281@01 j@282@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      i@281@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        j@282@01)
      (not (= i@281@01 j@282@01))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      i@281@01)
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      j@282@01)
    (not (= i@281@01 j@282@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01)))))
  (and
    (Seq_contains
      (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
      i@281@01)
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        j@282@01)
      (not (= i@281@01 j@282@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (or
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)))))
    (or
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (not
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            i@281@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
              j@282@01)
            (not (= i@281@01 j@282@01)))))
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          i@281@01)
        (and
          (Seq_contains
            (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            j@282@01)
          (not (= i@281@01 j@282@01))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 k@279@01) 0)
    j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(push) ; 6
(assert (not (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01)
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 k@279@01) 0)
    j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@281@01 Int) (j@282@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        i@281@01)
      (and
        (Seq_contains
          (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
          j@282@01)
        (not (= i@281@01 j@282@01))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01)
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    i@281@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@282@01))
  :pattern ((Seq_contains
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :pattern ((Seq_contains_trigger
    (Seq_range 0 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    j@282@01) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@281@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 k@279@01) 0)
    j@282@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(declare-const i@283@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 182 | !(0 <= i@283@01) | live]
; [else-branch: 182 | 0 <= i@283@01 | live]
(push) ; 8
; [then-branch: 182 | !(0 <= i@283@01)]
(assert (not (<= 0 i@283@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 182 | 0 <= i@283@01]
(assert (<= 0 i@283@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@283@01) (not (<= 0 i@283@01))))
(assert (and
  (<= 0 i@283@01)
  (< i@283@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@283@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@284@01 ($Ref) Int)
(declare-fun img@285@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@283@01 Int)) (!
  (=>
    (and
      (<= 0 i@283@01)
      (< i@283@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
    (or (<= 0 i@283@01) (not (<= 0 i@283@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@283@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@283@01 Int)) (!
  (=>
    (and
      (<= 0 i@283@01)
      (< i@283@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
    (or
      (= (/ p@249@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@249@01 (to_real 2)))))
  
  :qid |quant-u-153|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@283@01 Int) (i2@283@01 Int)) (!
  (=>
    (and
      (and
        (and
          (and
            (<= 0 i1@283@01)
            (< i1@283@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            i1@283@01)) (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            i1@283@01)))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (and
        (and
          (and
            (<= 0 i2@283@01)
            (< i2@283@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            i2@283@01)) (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            i2@283@01)))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (=
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i1@283@01)
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i2@283@01)))
    (= i1@283@01 i2@283@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@283@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@283@01)
        (< i@283@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (< $Perm.No (/ p@249@01 (to_real 2))))
    (and
      (=
        (inv@284@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@283@01))
        i@283@01)
      (img@285@01 (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@283@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@283@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@285@01 r)
      (and
        (and
          (<= 0 (inv@284@01 r))
          (<
            (inv@284@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
        (< $Perm.No (/ p@249@01 (to_real 2)))))
    (= (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) (inv@284@01 r)) r))
  :pattern ((inv@284@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<= 0 (inv@284@01 r))
      (< (inv@284@01 r) (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-154|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@283@01 Int)) (!
  (=
    (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@283@01)
    (Seq_index S@247@01 i@283@01))
  
  :qid |quant-u-155|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@286@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@284@01 r))
        (< (inv@284@01 r) (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (img@285@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) (inv@284@01 r))))
    ($Perm.min
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      (/ p@249@01 (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      (pTaken@286@01 r))
    $Perm.No)
  
  :qid |quant-u-157|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@286@01 r) $Perm.No)
  
  :qid |quant-u-158|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@284@01 r))
        (< (inv@284@01 r) (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (img@285@01 r)
      (= r (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) (inv@284@01 r))))
    (= (- (/ p@249@01 (to_real 2)) (pTaken@286@01 r)) $Perm.No))
  
  :qid |quant-u-159|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@287@01 Int)
(declare-const j@288@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 183 | !(0 <= i@287@01) | live]
; [else-branch: 183 | 0 <= i@287@01 | live]
(push) ; 8
; [then-branch: 183 | !(0 <= i@287@01)]
(assert (not (<= 0 i@287@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 183 | 0 <= i@287@01]
(assert (<= 0 i@287@01))
; [eval] i < j
(push) ; 9
; [then-branch: 184 | !(i@287@01 < j@288@01) | live]
; [else-branch: 184 | i@287@01 < j@288@01 | live]
(push) ; 10
; [then-branch: 184 | !(i@287@01 < j@288@01)]
(assert (not (< i@287@01 j@288@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 184 | i@287@01 < j@288@01]
(assert (< i@287@01 j@288@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (< i@287@01 j@288@01) (not (< i@287@01 j@288@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@287@01)
  (and (<= 0 i@287@01) (or (< i@287@01 j@288@01) (not (< i@287@01 j@288@01))))))
(assert (or (<= 0 i@287@01) (not (<= 0 i@287@01))))
(push) ; 7
; [then-branch: 185 | 0 <= i@287@01 && i@287@01 < j@288@01 && j@288@01 < |S@247@01[:k@279@01][0:]| | live]
; [else-branch: 185 | !(0 <= i@287@01 && i@287@01 < j@288@01 && j@288@01 < |S@247@01[:k@279@01][0:]|) | live]
(push) ; 8
; [then-branch: 185 | 0 <= i@287@01 && i@287@01 < j@288@01 && j@288@01 < |S@247@01[:k@279@01][0:]|]
(assert (and
  (<= 0 i@287@01)
  (and
    (< i@287@01 j@288@01)
    (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@287@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< i@287@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 k@279@01) 0)
  i@287@01)) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@257@01 (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@288@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 k@279@01) 0)
  j@288@01)) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@288@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@257@01 (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@288@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@288@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 185 | !(0 <= i@287@01 && i@287@01 < j@288@01 && j@288@01 < |S@247@01[:k@279@01][0:]|)]
(assert (not
  (and
    (<= 0 i@287@01)
    (and
      (< i@287@01 j@288@01)
      (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (and
    (<= 0 i@287@01)
    (and
      (< i@287@01 j@288@01)
      (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
  (and
    (<= 0 i@287@01)
    (< i@287@01 j@288@01)
    (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 k@279@01) 0)
      i@287@01)) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 k@279@01) 0)
      j@288@01)) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) j@288@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@287@01)
      (and
        (< i@287@01 j@288@01)
        (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
  (and
    (<= 0 i@287@01)
    (and
      (< i@287@01 j@288@01)
      (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@287@01 Int) (j@288@01 Int)) (!
  (and
    (=>
      (<= 0 i@287@01)
      (and
        (<= 0 i@287@01)
        (or (< i@287@01 j@288@01) (not (< i@287@01 j@288@01)))))
    (or (<= 0 i@287@01) (not (<= 0 i@287@01)))
    (=>
      (and
        (<= 0 i@287@01)
        (and
          (< i@287@01 j@288@01)
          (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (and
        (<= 0 i@287@01)
        (< i@287@01 j@288@01)
        (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@287@01)) (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@287@01))
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          j@288@01)) (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          j@288@01))))
    (or
      (not
        (and
          (<= 0 i@287@01)
          (and
            (< i@287@01 j@288@01)
            (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
      (and
        (<= 0 i@287@01)
        (and
          (< i@287@01 j@288@01)
          (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 k@279@01) 0)
    j@288@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(push) ; 6
(assert (not (forall ((i@287@01 Int) (j@288@01 Int)) (!
  (=>
    (and
      (<= 0 i@287@01)
      (and
        (< i@287@01 j@288@01)
        (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
    (<
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 k@279@01) 0)
        i@287@01))
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 k@279@01) 0)
        j@288@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 k@279@01) 0)
    j@288@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@287@01 Int) (j@288@01 Int)) (!
  (=>
    (and
      (<= 0 i@287@01)
      (and
        (< i@287@01 j@288@01)
        (< j@288@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
    (<
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 k@279@01) 0)
        i@287@01))
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 k@279@01) 0)
        j@288@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@287@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 k@279@01) 0)
    j@288@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
(declare-const index@289@01 Int)
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(declare-const i@291@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 186 | !(0 <= i@291@01) | live]
; [else-branch: 186 | 0 <= i@291@01 | live]
(push) ; 8
; [then-branch: 186 | !(0 <= i@291@01)]
(assert (not (<= 0 i@291@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 186 | 0 <= i@291@01]
(assert (<= 0 i@291@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@291@01) (not (<= 0 i@291@01))))
(assert (and
  (<= 0 i@291@01)
  (< i@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@291@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@292@01 ($Ref) Int)
(declare-fun img@293@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@291@01 Int)) (!
  (=>
    (and
      (<= 0 i@291@01)
      (< i@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
    (or (<= 0 i@291@01) (not (<= 0 i@291@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@291@01 Int)) (!
  (=>
    (and
      (<= 0 i@291@01)
      (< i@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
    (or
      (= (/ p@249@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@249@01 (to_real 2)))))
  
  :qid |quant-u-160|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@291@01 Int) (i2@291@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@291@01)
          (< i1@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@291@01)
          (< i2@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (=
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i1@291@01)
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i2@291@01)))
    (= i1@291@01 i2@291@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@291@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@291@01)
        (< i@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (< $Perm.No (/ p@249@01 (to_real 2))))
    (and
      (=
        (inv@292@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@291@01))
        i@291@01)
      (img@293@01 (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01))
  :qid |quant-u-161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@293@01 r)
      (and
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
        (< $Perm.No (/ p@249@01 (to_real 2)))))
    (= (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) (inv@292@01 r)) r))
  :pattern ((inv@292@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@291@01 Int)) (!
  (<= $Perm.No (/ p@249@01 (to_real 2)))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@291@01 Int)) (!
  (<= (/ p@249@01 (to_real 2)) $Perm.Write)
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@291@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@291@01)
        (< i@291@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (< $Perm.No (/ p@249@01 (to_real 2))))
    (not
      (=
        (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01)
        $Ref.null)))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@291@01)
      (Seq_index S@247@01 i@254@01))
    (=
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))))
  
  :qid |quant-u-162|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(declare-const sm@294@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<= 0 (inv@292@01 r))
      (< (inv@292@01 r) (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
    ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) r) r))
  :pattern ((inv@292@01 r))
  :qid |quant-u-163|)))
(assert (=
  ($Snap.second $t@290@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@290@01))
    ($Snap.second ($Snap.second $t@290@01)))))
(assert (= ($Snap.first ($Snap.second $t@290@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@289@01))
(assert (=
  ($Snap.second ($Snap.second $t@290@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@290@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@290@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@290@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(set-option :timeout 0)
(push) ; 6
; [then-branch: 187 | !(0 <= index@289@01) | live]
; [else-branch: 187 | 0 <= index@289@01 | live]
(push) ; 7
; [then-branch: 187 | !(0 <= index@289@01)]
(assert (not (<= 0 index@289@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 187 | 0 <= index@289@01]
(assert (<= 0 index@289@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@289@01) (not (<= 0 index@289@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 index@289@01)
    (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 index@289@01)
  (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 188 | 0 <= index@289@01 && index@289@01 < |S@247@01[:k@279@01][0:]| | live]
; [else-branch: 188 | !(0 <= index@289@01 && index@289@01 < |S@247@01[:k@279@01][0:]|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 188 | 0 <= index@289@01 && index@289@01 < |S@247@01[:k@279@01][0:]|]
(assert (and
  (<= 0 index@289@01)
  (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@289@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@293@01 r)
          (and
            (<= 0 (inv@292@01 r))
            (<
              (inv@292@01 r)
              (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef77|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 k@279@01) 0)
  index@289@01)) (Seq_index
  (Seq_drop (Seq_take S@247@01 k@279@01) 0)
  index@289@01)))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          index@289@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            index@289@01))))
      (-
        p@249@01
        (pTaken@286@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          index@289@01)))
      $Perm.No)
    (ite
      (and
        (img@293@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          index@289@01))
        (and
          (<=
            0
            (inv@292@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 k@279@01) 0)
              index@289@01)))
          (<
            (inv@292@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 k@279@01) 0)
              index@289@01))
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 188 | !(0 <= index@289@01 && index@289@01 < |S@247@01[:k@279@01][0:]|)]
(assert (not
  (and
    (<= 0 index@289@01)
    (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (and
    (<= 0 index@289@01)
    (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
  (and
    (<= 0 index@289@01)
    (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 k@279@01) 0)
      index@289@01)) (Seq_index
      (Seq_drop (Seq_take S@247@01 k@279@01) 0)
      index@289@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 index@289@01)
      (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
  (and
    (<= 0 index@289@01)
    (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
(assert (=>
  (and
    (<= 0 index@289@01)
    (< index@289@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
  (=
    ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 k@279@01) 0)
      index@289@01))
    x@248@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@289@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@289@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 189 | index@289@01 == -1 | live]
; [else-branch: 189 | index@289@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 189 | index@289@01 == -1]
(assert (= index@289@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@295@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 190 | !(0 <= i@295@01) | live]
; [else-branch: 190 | 0 <= i@295@01 | live]
(push) ; 10
; [then-branch: 190 | !(0 <= i@295@01)]
(assert (not (<= 0 i@295@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 190 | 0 <= i@295@01]
(assert (<= 0 i@295@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@295@01) (not (<= 0 i@295@01))))
(push) ; 9
; [then-branch: 191 | 0 <= i@295@01 && i@295@01 < |S@247@01[:k@279@01][0:]| | live]
; [else-branch: 191 | !(0 <= i@295@01 && i@295@01 < |S@247@01[:k@279@01][0:]|) | live]
(push) ; 10
; [then-branch: 191 | 0 <= i@295@01 && i@295@01 < |S@247@01[:k@279@01][0:]|]
(assert (and
  (<= 0 i@295@01)
  (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@295@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@293@01 r)
          (and
            (<= 0 (inv@292@01 r))
            (<
              (inv@292@01 r)
              (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef77|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 k@279@01) 0)
  i@295@01)) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@295@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@295@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            i@295@01))))
      (-
        p@249@01
        (pTaken@286@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@295@01)))
      $Perm.No)
    (ite
      (and
        (img@293@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@295@01))
        (and
          (<=
            0
            (inv@292@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 k@279@01) 0)
              i@295@01)))
          (<
            (inv@292@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 k@279@01) 0)
              i@295@01))
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 191 | !(0 <= i@295@01 && i@295@01 < |S@247@01[:k@279@01][0:]|)]
(assert (not
  (and
    (<= 0 i@295@01)
    (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (and
    (<= 0 i@295@01)
    (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
  (and
    (<= 0 i@295@01)
    (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
    ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 k@279@01) 0)
      i@295@01)) (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@295@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@295@01)
      (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
  (and
    (<= 0 i@295@01)
    (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@295@01 Int)) (!
  (and
    (or (<= 0 i@295@01) (not (<= 0 i@295@01)))
    (=>
      (and
        (<= 0 i@295@01)
        (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (and
        (<= 0 i@295@01)
        (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
        ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@295@01)) (Seq_index
          (Seq_drop (Seq_take S@247@01 k@279@01) 0)
          i@295@01))))
    (or
      (not
        (and
          (<= 0 i@295@01)
          (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (and
        (<= 0 i@295@01)
        (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
  :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@295@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 189 | index@289@01 != -1]
(assert (not (= index@289@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (= index@289@01 (- 0 1))
  (and
    (= index@289@01 (- 0 1))
    (forall ((i@295@01 Int)) (!
      (and
        (or (<= 0 i@295@01) (not (<= 0 i@295@01)))
        (=>
          (and
            (<= 0 i@295@01)
            (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
          (and
            (<= 0 i@295@01)
            (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))
            ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
              (Seq_drop (Seq_take S@247@01 k@279@01) 0)
              i@295@01)) (Seq_index
              (Seq_drop (Seq_take S@247@01 k@279@01) 0)
              i@295@01))))
        (or
          (not
            (and
              (<= 0 i@295@01)
              (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
          (and
            (<= 0 i@295@01)
            (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))))
      :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@295@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@289@01 (- 0 1))) (= index@289@01 (- 0 1))))
(assert (=>
  (= index@289@01 (- 0 1))
  (forall ((i@295@01 Int)) (!
    (=>
      (and
        (<= 0 i@295@01)
        (< i@295@01 (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0))))
      (not
        (=
          ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@247@01 k@279@01) 0)
            i@295@01))
          x@248@01)))
    :pattern ((Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@295@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(declare-const i@296@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@296@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@296@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@296@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 6
(declare-fun inv@297@01 ($Ref) Int)
(declare-fun img@298@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@296@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@296@01)
    (or (= p@249@01 $Perm.No) (< $Perm.No p@249@01)))
  
  :qid |quant-u-164|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@296@01 Int) (i2@296@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i1@296@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
            S@247@01
            i1@296@01)) (Seq_index S@247@01 i1@296@01)))
        (< $Perm.No p@249@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i2@296@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
            S@247@01
            i2@296@01)) (Seq_index S@247@01 i2@296@01)))
        (< $Perm.No p@249@01))
      (= (Seq_index S@247@01 i1@296@01) (Seq_index S@247@01 i2@296@01)))
    (= i1@296@01 i2@296@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@296@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@296@01)
      (< $Perm.No p@249@01))
    (and
      (= (inv@297@01 (Seq_index S@247@01 i@296@01)) i@296@01)
      (img@298@01 (Seq_index S@247@01 i@296@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
    S@247@01
    i@296@01)) (Seq_index S@247@01 i@296@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@298@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@297@01 r))
        (< $Perm.No p@249@01)))
    (= (Seq_index S@247@01 (inv@297@01 r)) r))
  :pattern ((inv@297@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@297@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) r) r))
  :pattern ((inv@297@01 r))
  :qid |quant-u-165|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@296@01 Int)) (!
  (=
    (Seq_index S@247@01 i@296@01)
    (Seq_index (Seq_drop (Seq_take S@247@01 k@279@01) 0) i@296@01))
  
  :qid |quant-u-166|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@299@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@297@01 r))
      (img@298@01 r)
      (= r (Seq_index S@247@01 (inv@297@01 r))))
    ($Perm.min
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (- p@249@01 (pTaken@286@01 r))
        $Perm.No)
      p@249@01)
    $Perm.No))
(define-fun pTaken@300@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@297@01 r))
      (img@298@01 r)
      (= r (Seq_index S@247@01 (inv@297@01 r))))
    ($Perm.min
      (ite
        (and
          (img@293@01 r)
          (and
            (<= 0 (inv@292@01 r))
            (<
              (inv@292@01 r)
              (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
        (/ p@249@01 (to_real 2))
        $Perm.No)
      (- p@249@01 (pTaken@299@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (- p@249@01 (pTaken@286@01 r))
        $Perm.No)
      (pTaken@299@01 r))
    $Perm.No)
  
  :qid |quant-u-168|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@297@01 r))
      (img@298@01 r)
      (= r (Seq_index S@247@01 (inv@297@01 r))))
    (= (- p@249@01 (pTaken@299@01 r)) $Perm.No))
  
  :qid |quant-u-169|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@293@01 r)
          (and
            (<= 0 (inv@292@01 r))
            (<
              (inv@292@01 r)
              (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
        (/ p@249@01 (to_real 2))
        $Perm.No)
      (pTaken@300@01 r))
    $Perm.No)
  
  :qid |quant-u-170|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@297@01 r))
      (img@298@01 r)
      (= r (Seq_index S@247@01 (inv@297@01 r))))
    (= (- (- p@249@01 (pTaken@299@01 r)) (pTaken@300@01 r)) $Perm.No))
  
  :qid |quant-u-171|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@289@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@289@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 192 | index@289@01 in [0..|S@247@01|] | live]
; [else-branch: 192 | !(index@289@01 in [0..|S@247@01|]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 192 | index@289@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@289@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< index@289@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@293@01 r)
          (and
            (<= 0 (inv@292@01 r))
            (<
              (inv@292@01 r)
              (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef77|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
  S@247@01
  index@289@01)) (Seq_index S@247@01 index@289@01)))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index S@247@01 index@289@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index S@247@01 index@289@01))))
      (- p@249@01 (pTaken@286@01 (Seq_index S@247@01 index@289@01)))
      $Perm.No)
    (ite
      (and
        (img@293@01 (Seq_index S@247@01 index@289@01))
        (and
          (<= 0 (inv@292@01 (Seq_index S@247@01 index@289@01)))
          (<
            (inv@292@01 (Seq_index S@247@01 index@289@01))
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 192 | !(index@289@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      S@247@01
      index@289@01)) (Seq_index S@247@01 index@289@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)))
(push) ; 6
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)
  (=
    ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index S@247@01 index@289@01))
    x@248@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@289@01)
  (=
    ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index S@247@01 index@289@01))
    x@248@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@289@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@289@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 193 | index@289@01 == -1 | live]
; [else-branch: 193 | index@289@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 193 | index@289@01 == -1]
(assert (= index@289@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@301@01 Int)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 194 | i@301@01 in [0..|S@247@01|] | live]
; [else-branch: 194 | !(i@301@01 in [0..|S@247@01|]) | live]
(push) ; 10
; [then-branch: 194 | i@301@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@301@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@301@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@293@01 r)
          (and
            (<= 0 (inv@292@01 r))
            (<
              (inv@292@01 r)
              (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef77|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index S@247@01 i@301@01)) (Seq_index
  S@247@01
  i@301@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index S@247@01 i@301@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index S@247@01 i@301@01))))
      (- p@249@01 (pTaken@286@01 (Seq_index S@247@01 i@301@01)))
      $Perm.No)
    (ite
      (and
        (img@293@01 (Seq_index S@247@01 i@301@01))
        (and
          (<= 0 (inv@292@01 (Seq_index S@247@01 i@301@01)))
          (<
            (inv@292@01 (Seq_index S@247@01 i@301@01))
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 194 | !(i@301@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      S@247@01
      i@301@01)) (Seq_index S@247@01 i@301@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@301@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
          S@247@01
          i@301@01)) (Seq_index S@247@01 i@301@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01))
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
    S@247@01
    i@301@01)) (Seq_index S@247@01 i@301@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 193 | index@289@01 != -1]
(assert (not (= index@289@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@286@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@293@01 r)
        (and
          (<= 0 (inv@292@01 r))
          (<
            (inv@292@01 r)
            (Seq_length (Seq_drop (Seq_take S@247@01 k@279@01) 0)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@294@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r)))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@290@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@294@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (= index@289@01 (- 0 1))
  (and
    (= index@289@01 (- 0 1))
    (forall ((i@301@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
              S@247@01
              i@301@01)) (Seq_index S@247@01 i@301@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01))
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
        S@247@01
        i@301@01)) (Seq_index S@247@01 i@301@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (= index@289@01 (- 0 1))
  (forall ((i@301@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
      (not
        (=
          ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index S@247@01 i@301@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      S@247@01
      i@301@01)) (Seq_index S@247@01 i@301@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@289@01 (- 0 1))
  (forall ((i@301@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@301@01)
      (not
        (=
          ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index S@247@01 i@301@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@294@01  $FVF<f>) (Seq_index
      S@247@01
      i@301@01)) (Seq_index S@247@01 i@301@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|))))
(pop) ; 5
(push) ; 5
; [else-branch: 178 | !(x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01]))]
(assert (not
  (<
    x@248@01
    ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01)))))
(pop) ; 5
; [eval] !(x < S[k].f)
; [eval] x < S[k].f
; [eval] S[k]
(push) ; 5
(assert (not (>= k@279@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< k@279@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(push) ; 5
(assert (not (ite
  (and
    (img@257@01 (Seq_index S@247@01 k@279@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index S@247@01 k@279@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  x@248@01
  ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    x@248@01
    ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 195 | !(x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01])) | live]
; [else-branch: 195 | x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01]) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 195 | !(x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01]))]
(assert (not
  (<
    x@248@01
    ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01)))))
; [exec]
; index := bfind_fixed_ineq(S[k..|S|], x, p / 2)
; [eval] S[k..|S|]
; [eval] S[..|S|]
; [eval] |S|
; [eval] p / 2
; [eval] p > none
(push) ; 6
(assert (not (> (/ p@249@01 (to_real 2)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (> (/ p@249@01 (to_real 2)) $Perm.No))
; [eval] p < write
(push) ; 6
(assert (not (< (/ p@249@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (< (/ p@249@01 (to_real 2)) $Perm.Write))
; [eval] (forall i: Int, j: Int :: { (i in [0..|S|)), (j in [0..|S|)) } { (i in [0..|S|)), S[j] } { (j in [0..|S|)), S[i] } { S[i], S[j] } (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j])
(declare-const i@302@01 Int)
(declare-const j@303@01 Int)
(push) ; 6
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j) ==> S[i] != S[j]
; [eval] (i in [0..|S|)) && ((j in [0..|S|)) && i != j)
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 7
; [then-branch: 196 | !(i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|]) | live]
; [else-branch: 196 | i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] | live]
(push) ; 8
; [then-branch: 196 | !(i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|])]
(assert (not
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 196 | i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|]]
(assert (Seq_contains
  (Seq_range
    0
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
  i@302@01))
; [eval] (j in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 197 | !(j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|]) | live]
; [else-branch: 197 | j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] | live]
(push) ; 10
; [then-branch: 197 | !(j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|])]
(assert (not
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 197 | j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|]]
(assert (Seq_contains
  (Seq_range
    0
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
  j@303@01))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01)
  (not
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      j@303@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01)
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      i@302@01)
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        j@303@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01))))))
(assert (or
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01)
  (not
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      i@302@01))))
(push) ; 7
; [then-branch: 198 | i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && i@302@01 != j@303@01 | live]
; [else-branch: 198 | !(i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && i@302@01 != j@303@01) | live]
(push) ; 8
; [then-branch: 198 | i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && i@302@01 != j@303@01]
(assert (and
  (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01)
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      j@303@01)
    (not (= i@302@01 j@303@01)))))
; [eval] S[i] != S[j]
; [eval] S[i]
(push) ; 9
(assert (not (>= i@302@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@302@01
  (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@303@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  j@303@01
  (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 198 | !(i@302@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && j@303@01 in [0..|S@247@01[:|S@247@01|][k@279@01:]|] && i@302@01 != j@303@01)]
(assert (not
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      i@302@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        j@303@01)
      (not (= i@302@01 j@303@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      i@302@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        j@303@01)
      (not (= i@302@01 j@303@01))))
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      i@302@01)
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      j@303@01)
    (not (= i@302@01 j@303@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01)))))
  (and
    (Seq_contains
      (Seq_range
        0
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
      i@302@01)
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        j@303@01)
      (not (= i@302@01 j@303@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (or
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)))))
    (or
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (not
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)))
    (=>
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (or
      (not
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            i@302@01)
          (and
            (Seq_contains
              (Seq_range
                0
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
              j@303@01)
            (not (= i@302@01 j@303@01)))))
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          i@302@01)
        (and
          (Seq_contains
            (Seq_range
              0
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            j@303@01)
          (not (= i@302@01 j@303@01))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94-aux|)))
(push) ; 6
(assert (not (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@302@01)
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          j@303@01))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@302@01 Int) (j@303@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range
          0
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        i@302@01)
      (and
        (Seq_contains
          (Seq_range
            0
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
          j@303@01)
        (not (= i@302@01 j@303@01))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@302@01)
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          j@303@01))))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :pattern ((Seq_contains
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :pattern ((Seq_contains_trigger
    (Seq_range
      0
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    j@303@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@302@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@303@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@39@12@39@94|)))
(declare-const i@304@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 199 | !(0 <= i@304@01) | live]
; [else-branch: 199 | 0 <= i@304@01 | live]
(push) ; 8
; [then-branch: 199 | !(0 <= i@304@01)]
(assert (not (<= 0 i@304@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 199 | 0 <= i@304@01]
(assert (<= 0 i@304@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@304@01) (not (<= 0 i@304@01))))
(assert (and
  (<= 0 i@304@01)
  (<
    i@304@01
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@304@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@305@01 ($Ref) Int)
(declare-fun img@306@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@304@01 Int)) (!
  (=>
    (and
      (<= 0 i@304@01)
      (<
        i@304@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
    (or (<= 0 i@304@01) (not (<= 0 i@304@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@304@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@304@01 Int)) (!
  (=>
    (and
      (<= 0 i@304@01)
      (<
        i@304@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
    (or
      (= (/ p@249@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@249@01 (to_real 2)))))
  
  :qid |quant-u-172|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@304@01 Int) (i2@304@01 Int)) (!
  (=>
    (and
      (and
        (and
          (and
            (<= 0 i1@304@01)
            (<
              i1@304@01
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            i1@304@01)) (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            i1@304@01)))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (and
        (and
          (and
            (<= 0 i2@304@01)
            (<
              i2@304@01
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
          ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            i2@304@01)) (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            i2@304@01)))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (=
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i1@304@01)
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i2@304@01)))
    (= i1@304@01 i2@304@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@304@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@304@01)
        (<
          i@304@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (< $Perm.No (/ p@249@01 (to_real 2))))
    (and
      (=
        (inv@305@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@304@01))
        i@304@01)
      (img@306@01 (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@304@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@304@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@306@01 r)
      (and
        (and
          (<= 0 (inv@305@01 r))
          (<
            (inv@305@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
        (< $Perm.No (/ p@249@01 (to_real 2)))))
    (=
      (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        (inv@305@01 r))
      r))
  :pattern ((inv@305@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<= 0 (inv@305@01 r))
      (<
        (inv@305@01 r)
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) r) r))
  :pattern ((inv@305@01 r))
  :qid |quant-u-173|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@304@01 Int)) (!
  (=
    (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@304@01)
    (Seq_index S@247@01 i@304@01))
  
  :qid |quant-u-174|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@307@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@305@01 r))
        (<
          (inv@305@01 r)
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (img@306@01 r)
      (=
        r
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          (inv@305@01 r))))
    ($Perm.min
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      (/ p@249@01 (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        p@249@01
        $Perm.No)
      (pTaken@307@01 r))
    $Perm.No)
  
  :qid |quant-u-176|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@307@01 r) $Perm.No)
  
  :qid |quant-u-177|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@305@01 r))
        (<
          (inv@305@01 r)
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (img@306@01 r)
      (=
        r
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          (inv@305@01 r))))
    (= (- (/ p@249@01 (to_real 2)) (pTaken@307@01 r)) $Perm.No))
  
  :qid |quant-u-178|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall i: Int, j: Int :: { S[i], S[j] } 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f)
(declare-const i@308@01 Int)
(declare-const j@309@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < j && j < |S|) ==> S[i].f < S[j].f
; [eval] 0 <= i && (i < j && j < |S|)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 200 | !(0 <= i@308@01) | live]
; [else-branch: 200 | 0 <= i@308@01 | live]
(push) ; 8
; [then-branch: 200 | !(0 <= i@308@01)]
(assert (not (<= 0 i@308@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 200 | 0 <= i@308@01]
(assert (<= 0 i@308@01))
; [eval] i < j
(push) ; 9
; [then-branch: 201 | !(i@308@01 < j@309@01) | live]
; [else-branch: 201 | i@308@01 < j@309@01 | live]
(push) ; 10
; [then-branch: 201 | !(i@308@01 < j@309@01)]
(assert (not (< i@308@01 j@309@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 201 | i@308@01 < j@309@01]
(assert (< i@308@01 j@309@01))
; [eval] j < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (< i@308@01 j@309@01) (not (< i@308@01 j@309@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@308@01)
  (and (<= 0 i@308@01) (or (< i@308@01 j@309@01) (not (< i@308@01 j@309@01))))))
(assert (or (<= 0 i@308@01) (not (<= 0 i@308@01))))
(push) ; 7
; [then-branch: 202 | 0 <= i@308@01 && i@308@01 < j@309@01 && j@309@01 < |S@247@01[:|S@247@01|][k@279@01:]| | live]
; [else-branch: 202 | !(0 <= i@308@01 && i@308@01 < j@309@01 && j@309@01 < |S@247@01[:|S@247@01|][k@279@01:]|) | live]
(push) ; 8
; [then-branch: 202 | 0 <= i@308@01 && i@308@01 < j@309@01 && j@309@01 < |S@247@01[:|S@247@01|][k@279@01:]|]
(assert (and
  (<= 0 i@308@01)
  (and
    (< i@308@01 j@309@01)
    (<
      j@309@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
; [eval] S[i].f < S[j].f
; [eval] S[i]
(push) ; 9
(assert (not (>= i@308@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@308@01
  (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  i@308@01)) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  i@308@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@257@01 (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@308@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@308@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] S[j]
(push) ; 9
(assert (not (>= j@309@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No p@249@01)
        false)
      (=
        ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  j@309@01)) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  j@309@01)))
(push) ; 9
(assert (not (ite
  (and
    (img@257@01 (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      j@309@01))
    (Seq_contains
      (Seq_range 0 (Seq_length S@247@01))
      (inv@256@01 (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        j@309@01))))
  (< $Perm.No p@249@01)
  false)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 202 | !(0 <= i@308@01 && i@308@01 < j@309@01 && j@309@01 < |S@247@01[:|S@247@01|][k@279@01:]|)]
(assert (not
  (and
    (<= 0 i@308@01)
    (and
      (< i@308@01 j@309@01)
      (<
        j@309@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (and
    (<= 0 i@308@01)
    (and
      (< i@308@01 j@309@01)
      (<
        j@309@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
  (and
    (<= 0 i@308@01)
    (< i@308@01 j@309@01)
    (<
      j@309@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@308@01)) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@308@01))
    ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      j@309@01)) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      j@309@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@308@01)
      (and
        (< i@308@01 j@309@01)
        (<
          j@309@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
  (and
    (<= 0 i@308@01)
    (and
      (< i@308@01 j@309@01)
      (<
        j@309@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No p@249@01)
      false)
    (=
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
  :pattern (($FVF.lookup_f (as sm@258@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@308@01 Int) (j@309@01 Int)) (!
  (and
    (=>
      (<= 0 i@308@01)
      (and
        (<= 0 i@308@01)
        (or (< i@308@01 j@309@01) (not (< i@308@01 j@309@01)))))
    (or (<= 0 i@308@01) (not (<= 0 i@308@01)))
    (=>
      (and
        (<= 0 i@308@01)
        (and
          (< i@308@01 j@309@01)
          (<
            j@309@01
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (and
        (<= 0 i@308@01)
        (< i@308@01 j@309@01)
        (<
          j@309@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@308@01)) (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@308@01))
        ($FVF.loc_f ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          j@309@01)) (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          j@309@01))))
    (or
      (not
        (and
          (<= 0 i@308@01)
          (and
            (< i@308@01 j@309@01)
            (<
              j@309@01
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
      (and
        (<= 0 i@308@01)
        (and
          (< i@308@01 j@309@01)
          (<
            j@309@01
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@308@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@309@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61-aux|)))
(push) ; 6
(assert (not (forall ((i@308@01 Int) (j@309@01 Int)) (!
  (=>
    (and
      (<= 0 i@308@01)
      (and
        (< i@308@01 j@309@01)
        (<
          j@309@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
    (<
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@308@01))
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        j@309@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@308@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@309@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (forall ((i@308@01 Int) (j@309@01 Int)) (!
  (=>
    (and
      (<= 0 i@308@01)
      (and
        (< i@308@01 j@309@01)
        (<
          j@309@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
    (<
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@308@01))
      ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        j@309@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@308@01) (Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    j@309@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@41@12@42@61|)))
(declare-const index@310@01 Int)
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(declare-const i@312@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 203 | !(0 <= i@312@01) | live]
; [else-branch: 203 | 0 <= i@312@01 | live]
(push) ; 8
; [then-branch: 203 | !(0 <= i@312@01)]
(assert (not (<= 0 i@312@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 203 | 0 <= i@312@01]
(assert (<= 0 i@312@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@312@01) (not (<= 0 i@312@01))))
(assert (and
  (<= 0 i@312@01)
  (<
    i@312@01
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@312@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(declare-fun inv@313@01 ($Ref) Int)
(declare-fun img@314@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@312@01 Int)) (!
  (=>
    (and
      (<= 0 i@312@01)
      (<
        i@312@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
    (or (<= 0 i@312@01) (not (<= 0 i@312@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@312@01))
  :qid |f-aux|)))
(push) ; 6
(assert (not (forall ((i@312@01 Int)) (!
  (=>
    (and
      (<= 0 i@312@01)
      (<
        i@312@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
    (or
      (= (/ p@249@01 (to_real 2)) $Perm.No)
      (< $Perm.No (/ p@249@01 (to_real 2)))))
  
  :qid |quant-u-179|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@312@01 Int) (i2@312@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 i1@312@01)
          (<
            i1@312@01
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (and
        (and
          (<= 0 i2@312@01)
          (<
            i2@312@01
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
        (< $Perm.No (/ p@249@01 (to_real 2))))
      (=
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i1@312@01)
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i2@312@01)))
    (= i1@312@01 i2@312@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@312@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@312@01)
        (<
          i@312@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (< $Perm.No (/ p@249@01 (to_real 2))))
    (and
      (=
        (inv@313@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@312@01))
        i@312@01)
      (img@314@01 (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@312@01))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@312@01))
  :qid |quant-u-180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@314@01 r)
      (and
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
        (< $Perm.No (/ p@249@01 (to_real 2)))))
    (=
      (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        (inv@313@01 r))
      r))
  :pattern ((inv@313@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@312@01 Int)) (!
  (<= $Perm.No (/ p@249@01 (to_real 2)))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@312@01))
  :qid |f-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@312@01 Int)) (!
  (<= (/ p@249@01 (to_real 2)) $Perm.Write)
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@312@01))
  :qid |f-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@312@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 i@312@01)
        (<
          i@312@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (< $Perm.No (/ p@249@01 (to_real 2))))
    (not
      (=
        (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@312@01)
        $Ref.null)))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@312@01))
  :qid |f-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@312@01)
      (Seq_index S@247@01 i@254@01))
    (=
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))))
  
  :qid |quant-u-181|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(declare-const sm@315@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<= 0 (inv@313@01 r))
      (<
        (inv@313@01 r)
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
    ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) r) r))
  :pattern ((inv@313@01 r))
  :qid |quant-u-182|)))
(assert (=
  ($Snap.second $t@311@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@311@01))
    ($Snap.second ($Snap.second $t@311@01)))))
(assert (= ($Snap.first ($Snap.second $t@311@01)) $Snap.unit))
; [eval] -1 <= index
; [eval] -1
(assert (<= (- 0 1) index@310@01))
(assert (=
  ($Snap.second ($Snap.second $t@311@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@311@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@311@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@311@01))) $Snap.unit))
; [eval] index < |S|
; [eval] |S|
(assert (<
  index@310@01
  (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@311@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@311@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@311@01))))
  $Snap.unit))
; [eval] 0 <= index && index < |S| ==> S[index].f == x
; [eval] 0 <= index && index < |S|
; [eval] 0 <= index
(set-option :timeout 0)
(push) ; 6
; [then-branch: 204 | !(0 <= index@310@01) | live]
; [else-branch: 204 | 0 <= index@310@01 | live]
(push) ; 7
; [then-branch: 204 | !(0 <= index@310@01)]
(assert (not (<= 0 index@310@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 204 | 0 <= index@310@01]
(assert (<= 0 index@310@01))
; [eval] index < |S|
; [eval] |S|
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 index@310@01) (not (<= 0 index@310@01))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 index@310@01)
    (<
      index@310@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 index@310@01)
  (<
    index@310@01
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 205 | 0 <= index@310@01 && index@310@01 < |S@247@01[:|S@247@01|][k@279@01:]| | live]
; [else-branch: 205 | !(0 <= index@310@01 && index@310@01 < |S@247@01[:|S@247@01|][k@279@01:]|) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 205 | 0 <= index@310@01 && index@310@01 < |S@247@01[:|S@247@01|][k@279@01:]|]
(assert (and
  (<= 0 index@310@01)
  (<
    index@310@01
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@310@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef78|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@314@01 r)
          (and
            (<= 0 (inv@313@01 r))
            (<
              (inv@313@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef80|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  index@310@01)) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  index@310@01)))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          index@310@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            index@310@01))))
      (-
        p@249@01
        (pTaken@307@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          index@310@01)))
      $Perm.No)
    (ite
      (and
        (img@314@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          index@310@01))
        (and
          (<=
            0
            (inv@313@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
              index@310@01)))
          (<
            (inv@313@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
              index@310@01))
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 205 | !(0 <= index@310@01 && index@310@01 < |S@247@01[:|S@247@01|][k@279@01:]|)]
(assert (not
  (and
    (<= 0 index@310@01)
    (<
      index@310@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (=>
  (and
    (<= 0 index@310@01)
    (<
      index@310@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
  (and
    (<= 0 index@310@01)
    (<
      index@310@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      index@310@01)) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      index@310@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 index@310@01)
      (<
        index@310@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
  (and
    (<= 0 index@310@01)
    (<
      index@310@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
(assert (=>
  (and
    (<= 0 index@310@01)
    (<
      index@310@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
  (=
    ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      index@310@01))
    x@248@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@311@01))))
  $Snap.unit))
; [eval] index == -1 ==> (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@310@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@310@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 206 | index@310@01 == -1 | live]
; [else-branch: 206 | index@310@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 206 | index@310@01 == -1]
(assert (= index@310@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i] } 0 <= i && i < |S| ==> S[i].f != x)
(declare-const i@316@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |S| ==> S[i].f != x
; [eval] 0 <= i && i < |S|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 207 | !(0 <= i@316@01) | live]
; [else-branch: 207 | 0 <= i@316@01 | live]
(push) ; 10
; [then-branch: 207 | !(0 <= i@316@01)]
(assert (not (<= 0 i@316@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 207 | 0 <= i@316@01]
(assert (<= 0 i@316@01))
; [eval] i < |S|
; [eval] |S|
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@316@01) (not (<= 0 i@316@01))))
(push) ; 9
; [then-branch: 208 | 0 <= i@316@01 && i@316@01 < |S@247@01[:|S@247@01|][k@279@01:]| | live]
; [else-branch: 208 | !(0 <= i@316@01 && i@316@01 < |S@247@01[:|S@247@01|][k@279@01:]|) | live]
(push) ; 10
; [then-branch: 208 | 0 <= i@316@01 && i@316@01 < |S@247@01[:|S@247@01|][k@279@01:]|]
(assert (and
  (<= 0 i@316@01)
  (<
    i@316@01
    (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@316@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef78|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@314@01 r)
          (and
            (<= 0 (inv@313@01 r))
            (<
              (inv@313@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef80|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  i@316@01)) (Seq_index
  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
  i@316@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@316@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            i@316@01))))
      (-
        p@249@01
        (pTaken@307@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@316@01)))
      $Perm.No)
    (ite
      (and
        (img@314@01 (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@316@01))
        (and
          (<=
            0
            (inv@313@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
              i@316@01)))
          (<
            (inv@313@01 (Seq_index
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
              i@316@01))
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 208 | !(0 <= i@316@01 && i@316@01 < |S@247@01[:|S@247@01|][k@279@01:]|)]
(assert (not
  (and
    (<= 0 i@316@01)
    (<
      i@316@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (=>
  (and
    (<= 0 i@316@01)
    (<
      i@316@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
  (and
    (<= 0 i@316@01)
    (<
      i@316@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
    ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@316@01)) (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@316@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@316@01)
      (<
        i@316@01
        (Seq_length
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
  (and
    (<= 0 i@316@01)
    (<
      i@316@01
      (Seq_length (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@316@01 Int)) (!
  (and
    (or (<= 0 i@316@01) (not (<= 0 i@316@01)))
    (=>
      (and
        (<= 0 i@316@01)
        (<
          i@316@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (and
        (<= 0 i@316@01)
        (<
          i@316@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
        ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@316@01)) (Seq_index
          (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
          i@316@01))))
    (or
      (not
        (and
          (<= 0 i@316@01)
          (<
            i@316@01
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (and
        (<= 0 i@316@01)
        (<
          i@316@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
  :pattern ((Seq_index
    (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
    i@316@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 206 | index@310@01 != -1]
(assert (not (= index@310@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (=>
  (= index@310@01 (- 0 1))
  (and
    (= index@310@01 (- 0 1))
    (forall ((i@316@01 Int)) (!
      (and
        (or (<= 0 i@316@01) (not (<= 0 i@316@01)))
        (=>
          (and
            (<= 0 i@316@01)
            (<
              i@316@01
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
          (and
            (<= 0 i@316@01)
            (<
              i@316@01
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))
            ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
              i@316@01)) (Seq_index
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
              i@316@01))))
        (or
          (not
            (and
              (<= 0 i@316@01)
              (<
                i@316@01
                (Seq_length
                  (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
          (and
            (<= 0 i@316@01)
            (<
              i@316@01
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))))
      :pattern ((Seq_index
        (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
        i@316@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85-aux|)))))
; Joined path conditions
(assert (or (not (= index@310@01 (- 0 1))) (= index@310@01 (- 0 1))))
(assert (=>
  (= index@310@01 (- 0 1))
  (forall ((i@316@01 Int)) (!
    (=>
      (and
        (<= 0 i@316@01)
        (<
          i@316@01
          (Seq_length
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01))))
      (not
        (=
          ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
            (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
            i@316@01))
          x@248@01)))
    :pattern ((Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@316@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@46@28@46@85|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; index := index + (index == -1 ? 0 : k)
; [eval] index + (index == -1 ? 0 : k)
; [eval] (index == -1 ? 0 : k)
; [eval] index == -1
; [eval] -1
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@310@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@310@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 209 | index@310@01 == -1 | live]
; [else-branch: 209 | index@310@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 209 | index@310@01 == -1]
(assert (= index@310@01 (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 209 | index@310@01 != -1]
(assert (not (= index@310@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(declare-const index@317@01 Int)
(assert (= index@317@01 (+ index@310@01 (ite (= index@310@01 (- 0 1)) 0 k@279@01))))
(declare-const i@318@01 Int)
(push) ; 6
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@318@01))
; [eval] S[i]
(push) ; 7
(assert (not (>= i@318@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< i@318@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; [eval] S[i]
(pop) ; 6
(declare-fun inv@319@01 ($Ref) Int)
(declare-fun img@320@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 6
(assert (not (forall ((i@318@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@318@01)
    (or (= p@249@01 $Perm.No) (< $Perm.No p@249@01)))
  
  :qid |quant-u-183|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((i1@318@01 Int) (i2@318@01 Int)) (!
  (=>
    (and
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i1@318@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
            S@247@01
            i1@318@01)) (Seq_index S@247@01 i1@318@01)))
        (< $Perm.No p@249@01))
      (and
        (and
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i2@318@01)
          ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
            S@247@01
            i2@318@01)) (Seq_index S@247@01 i2@318@01)))
        (< $Perm.No p@249@01))
      (= (Seq_index S@247@01 i1@318@01) (Seq_index S@247@01 i2@318@01)))
    (= i1@318@01 i2@318@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@318@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@318@01)
      (< $Perm.No p@249@01))
    (and
      (= (inv@319@01 (Seq_index S@247@01 i@318@01)) i@318@01)
      (img@320@01 (Seq_index S@247@01 i@318@01))))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
    S@247@01
    i@318@01)) (Seq_index S@247@01 i@318@01)))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@320@01 r)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@319@01 r))
        (< $Perm.No p@249@01)))
    (= (Seq_index S@247@01 (inv@319@01 r)) r))
  :pattern ((inv@319@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@319@01 r))
    ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) r) r))
  :pattern ((inv@319@01 r))
  :qid |quant-u-184|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((i@318@01 Int)) (!
  (=
    (Seq_index S@247@01 i@318@01)
    (Seq_index
      (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)
      i@318@01))
  
  :qid |quant-u-185|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@321@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@319@01 r))
      (img@320@01 r)
      (= r (Seq_index S@247@01 (inv@319@01 r))))
    ($Perm.min
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (- p@249@01 (pTaken@307@01 r))
        $Perm.No)
      p@249@01)
    $Perm.No))
(define-fun pTaken@322@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@319@01 r))
      (img@320@01 r)
      (= r (Seq_index S@247@01 (inv@319@01 r))))
    ($Perm.min
      (ite
        (and
          (img@314@01 r)
          (and
            (<= 0 (inv@313@01 r))
            (<
              (inv@313@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
        (/ p@249@01 (to_real 2))
        $Perm.No)
      (- p@249@01 (pTaken@321@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (- p@249@01 (pTaken@307@01 r))
        $Perm.No)
      (pTaken@321@01 r))
    $Perm.No)
  
  :qid |quant-u-187|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@319@01 r))
      (img@320@01 r)
      (= r (Seq_index S@247@01 (inv@319@01 r))))
    (= (- p@249@01 (pTaken@321@01 r)) $Perm.No))
  
  :qid |quant-u-188|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@314@01 r)
          (and
            (<= 0 (inv@313@01 r))
            (<
              (inv@313@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
        (/ p@249@01 (to_real 2))
        $Perm.No)
      (pTaken@322@01 r))
    $Perm.No)
  
  :qid |quant-u-189|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@319@01 r))
      (img@320@01 r)
      (= r (Seq_index S@247@01 (inv@319@01 r))))
    (= (- (- p@249@01 (pTaken@321@01 r)) (pTaken@322@01 r)) $Perm.No))
  
  :qid |quant-u-190|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (index in [-1..|S|))
; [eval] [-1..|S|)
; [eval] -1
; [eval] |S|
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@317@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (Seq_contains (Seq_range (- 0 1) (Seq_length S@247@01)) index@317@01))
; [eval] (index in [0..|S|)) ==> S[index].f == x
; [eval] (index in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 210 | index@317@01 in [0..|S@247@01|] | live]
; [else-branch: 210 | !(index@317@01 in [0..|S@247@01|]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 210 | index@317@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01))
; [eval] S[index].f == x
; [eval] S[index]
(push) ; 8
(assert (not (>= index@317@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< index@317@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef78|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@314@01 r)
          (and
            (<= 0 (inv@313@01 r))
            (<
              (inv@313@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef80|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
  S@247@01
  index@317@01)) (Seq_index S@247@01 index@317@01)))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index S@247@01 index@317@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index S@247@01 index@317@01))))
      (- p@249@01 (pTaken@307@01 (Seq_index S@247@01 index@317@01)))
      $Perm.No)
    (ite
      (and
        (img@314@01 (Seq_index S@247@01 index@317@01))
        (and
          (<= 0 (inv@313@01 (Seq_index S@247@01 index@317@01)))
          (<
            (inv@313@01 (Seq_index S@247@01 index@317@01))
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 210 | !(index@317@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      S@247@01
      index@317@01)) (Seq_index S@247@01 index@317@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)))
(push) ; 6
(assert (not (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)
  (=
    ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index S@247@01 index@317@01))
    x@248@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) index@317@01)
  (=
    ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index S@247@01 index@317@01))
    x@248@01)))
; [eval] index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
; [eval] index == -1
; [eval] -1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= index@317@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= index@317@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 211 | index@317@01 == -1 | live]
; [else-branch: 211 | index@317@01 != -1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 211 | index@317@01 == -1]
(assert (= index@317@01 (- 0 1)))
; [eval] (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x)
(declare-const i@323@01 Int)
(push) ; 8
; [eval] (i in [0..|S|)) ==> S[i].f != x
; [eval] (i in [0..|S|))
; [eval] [0..|S|)
; [eval] |S|
(push) ; 9
; [then-branch: 212 | i@323@01 in [0..|S@247@01|] | live]
; [else-branch: 212 | !(i@323@01 in [0..|S@247@01|]) | live]
(push) ; 10
; [then-branch: 212 | i@323@01 in [0..|S@247@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01))
; [eval] S[i].f != x
; [eval] S[i]
(push) ; 11
(assert (not (>= i@323@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< i@323@01 (Seq_length S@247@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@257@01 r)
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
        (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
    :qid |qp.fvfValDef78|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@314@01 r)
          (and
            (<= 0 (inv@313@01 r))
            (<
              (inv@313@01 r)
              (Seq_length
                (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
        (< $Perm.No (/ p@249@01 (to_real 2)))
        false)
      (=
        ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
        ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
      ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
    :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
    :qid |qp.fvfResTrgDef80|))))
(assert ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index S@247@01 i@323@01)) (Seq_index
  S@247@01
  i@323@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@257@01 (Seq_index S@247@01 i@323@01))
        (Seq_contains
          (Seq_range 0 (Seq_length S@247@01))
          (inv@256@01 (Seq_index S@247@01 i@323@01))))
      (- p@249@01 (pTaken@307@01 (Seq_index S@247@01 i@323@01)))
      $Perm.No)
    (ite
      (and
        (img@314@01 (Seq_index S@247@01 i@323@01))
        (and
          (<= 0 (inv@313@01 (Seq_index S@247@01 i@323@01)))
          (<
            (inv@313@01 (Seq_index S@247@01 i@323@01))
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (/ p@249@01 (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 212 | !(i@323@01 in [0..|S@247@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
    ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      S@247@01
      i@323@01)) (Seq_index S@247@01 i@323@01)))))
; Joined path conditions
(assert (or
  (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01))
  (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@323@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
        ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
          S@247@01
          i@323@01)) (Seq_index S@247@01 i@323@01))))
    (or
      (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01))
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)))
  :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
    S@247@01
    i@323@01)) (Seq_index S@247@01 i@323@01)))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 211 | index@317@01 != -1]
(assert (not (= index@317@01 (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@257@01 r)
        (Seq_contains (Seq_range 0 (Seq_length S@247@01)) (inv@256@01 r)))
      (< $Perm.No (- p@249@01 (pTaken@307@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@314@01 r)
        (and
          (<= 0 (inv@313@01 r))
          (<
            (inv@313@01 r)
            (Seq_length
              (Seq_drop (Seq_take S@247@01 (Seq_length S@247@01)) k@279@01)))))
      (< $Perm.No (/ p@249@01 (to_real 2)))
      false)
    (=
      ($FVF.lookup_f (as sm@315@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r)))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))) r) r)
    ($FVF.loc_f ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first $t@311@01)) r) r))
  :pattern (($FVF.lookup_f (as sm@315@01  $FVF<f>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert (=>
  (= index@317@01 (- 0 1))
  (and
    (= index@317@01 (- 0 1))
    (forall ((i@323@01 Int)) (!
      (and
        (=>
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
            ($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
              S@247@01
              i@323@01)) (Seq_index S@247@01 i@323@01))))
        (or
          (not (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01))
          (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)))
      :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
        S@247@01
        i@323@01)) (Seq_index S@247@01 i@323@01)))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83-aux|)))))
; Joined path conditions
(assert (or (not (= index@317@01 (- 0 1))) (= index@317@01 (- 0 1))))
(push) ; 6
(assert (not (=>
  (= index@317@01 (- 0 1))
  (forall ((i@323@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
      (not
        (=
          ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index S@247@01 i@323@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      S@247@01
      i@323@01)) (Seq_index S@247@01 i@323@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= index@317@01 (- 0 1))
  (forall ((i@323@01 Int)) (!
    (=>
      (Seq_contains (Seq_range 0 (Seq_length S@247@01)) i@323@01)
      (not
        (=
          ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index S@247@01 i@323@01))
          x@248@01)))
    :pattern (($FVF.loc_f ($FVF.lookup_f (as sm@315@01  $FVF<f>) (Seq_index
      S@247@01
      i@323@01)) (Seq_index S@247@01 i@323@01)))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/sequences/bsearch.vpr@106@28@106@83|))))
(pop) ; 5
(push) ; 5
; [else-branch: 195 | x@248@01 < Lookup(f, sm@258@01, S@247@01[k@279@01])]
(assert (<
  x@248@01
  ($FVF.lookup_f (as sm@258@01  $FVF<f>) (Seq_index S@247@01 k@279@01))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 177 | |S@247@01| == 1]
(assert (= (Seq_length S@247@01) 1))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 171 | |S@247@01| == 0]
(assert (= (Seq_length S@247@01) 0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
