(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:12:06
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/scion_SerializeTo.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Tuple2<Ref~_Types>> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<Slice<Ref>> 0)
(declare-sort Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Set<Tuple2<Ref~_Types>> 0)
(declare-sort Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> 0)
(declare-sort Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Emb_1_Intbyte$$$_S_$$$ 0)
(declare-sort Equality<ShStruct0> 0)
(declare-sort Emb_4_Interfaceempty_interface$$$$_E_$$$ 0)
(declare-sort ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> 0)
(declare-sort Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> 0)
(declare-sort Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Tuple0 0)
(declare-sort Equality<ShStruct2<Ref~_Ref>> 0)
(declare-sort Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort PolyAdditionalAxioms 0)
(declare-sort Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct4<Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> 0)
(declare-sort ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> 0)
(declare-sort ShStruct1<ShStruct2<Ref~_Ref>> 0)
(declare-sort Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> 0)
(declare-sort Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> 0)
(declare-sort Poly<Tuple0> 0)
(declare-sort Emb_6_Intbyte$$$_S_$$$ 0)
(declare-sort ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> 0)
(declare-sort ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> 0)
(declare-sort ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort Emb_2_Intuint8$$$_S_$$$ 0)
(declare-sort ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Poly<Slice<Ref>> 0)
(declare-sort ShStruct2<ShStruct2<Ref~_Ref>~_Ref> 0)
(declare-sort ShStruct0 0)
(declare-sort ShStruct3<Ref~_Ref~_Ref> 0)
(declare-sort Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ 0)
(declare-sort ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> 0)
(declare-sort String_ 0)
(declare-sort Emb_3_Intuint8$$$_S_$$$ 0)
(declare-sort ShArray<Ref> 0)
(declare-sort Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> 0)
(declare-sort Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort Types 0)
(declare-sort Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Emb_2_Interfaceempty_interface$$$_S_$$$ 0)
(declare-sort Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> 0)
(declare-sort Tuple2<Bool~_Bool> 0)
(declare-sort Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> 0)
(declare-sort Poly<ShStruct1<ShStruct2<Ref~_Ref>>> 0)
(declare-sort Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> 0)
(declare-sort Slice<Ref> 0)
(declare-sort Poly<ShStruct0> 0)
(declare-sort Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Tuple2<Ref~_Types> 0)
(declare-sort ComparableInterfaceDomain 0)
(declare-sort Poly<Int> 0)
(declare-sort ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<ShStruct2<Ref~_Ref>>> 0)
(declare-sort Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Emb_4_Interfaceempty_interface$$$_S_$$$ 0)
(declare-sort Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> 0)
(declare-sort ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> 0)
(declare-sort Poly<ShStruct2<Ref~_Ref>> 0)
(declare-sort Emb_2_Interfaceempty_interface$$$$_E_$$$ 0)
(declare-sort Poly<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> 0)
(declare-sort ShStruct2<Ref~_Ref> 0)
(declare-sort $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<Intbyte$$$$_E_$$$> 0)
(declare-sort $FVF<Bool$$$$_E_$$$> 0)
(declare-sort $FVF<Intuint16$$$$_E_$$$> 0)
(declare-sort $FVF<Intuint32$$$$_E_$$$> 0)
(declare-sort $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<Interfaceempty_interface$$$$_E_$$$> 0)
(declare-sort $PSF<Mem_840d9458_PMEndToEndOption> 0)
(declare-sort $PSF<Mem_840d9458_PMHopByHopOption> 0)
(declare-sort $PSF<Mem_a6ceb89d_PMHopField> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap (Seq<Tuple2<Ref~_Types>>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>> ($Snap) Seq<Tuple2<Ref~_Types>>)
(assert (forall ((x Seq<Tuple2<Ref~_Types>>)) (!
    (= x ($SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>>($SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap x)))
    :pattern (($SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap x))
    :qid |$Snap.$SnapToSeq<Tuple2<Ref~_Types>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap($SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>> x)))
    :pattern (($SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>> x))
    :qid |$Snap.Seq<Tuple2<Ref~_Types>>To$SnapToSeq<Tuple2<Ref~_Types>>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Slice<Ref>>To$Snap (Set<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<Ref>> ($Snap) Set<Slice<Ref>>)
(assert (forall ((x Set<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<Ref>>($SortWrappers.Set<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<Ref>>To$Snap($SortWrappers.$SnapToSet<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<Ref>> x))
    :qid |$Snap.Set<Slice<Ref>>To$SnapToSet<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap (Set<Tuple2<Ref~_Types>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> ($Snap) Set<Tuple2<Ref~_Types>>)
(assert (forall ((x Set<Tuple2<Ref~_Types>>)) (!
    (= x ($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>>($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap x)))
    :pattern (($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap x))
    :qid |$Snap.$SnapToSet<Tuple2<Ref~_Types>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> x)))
    :pattern (($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> x))
    :qid |$Snap.Set<Tuple2<Ref~_Types>>To$SnapToSet<Tuple2<Ref~_Types>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Snap) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(assert (forall ((x Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>($SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($Snap) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>($SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap (Emb_1_Intbyte$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$ ($Snap) Emb_1_Intbyte$$$_S_$$$)
(assert (forall ((x Emb_1_Intbyte$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$($SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_1_Intbyte$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$ x))
    :qid |$Snap.Emb_1_Intbyte$$$_S_$$$To$SnapToEmb_1_Intbyte$$$_S_$$$|
    )))
(declare-fun $SortWrappers.Equality<ShStruct0>To$Snap (Equality<ShStruct0>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct0> ($Snap) Equality<ShStruct0>)
(assert (forall ((x Equality<ShStruct0>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct0>($SortWrappers.Equality<ShStruct0>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct0>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct0>To$Snap($SortWrappers.$SnapToEquality<ShStruct0> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct0> x))
    :qid |$Snap.Equality<ShStruct0>To$SnapToEquality<ShStruct0>|
    )))
(declare-fun $SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap (Emb_4_Interfaceempty_interface$$$$_E_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$ ($Snap) Emb_4_Interfaceempty_interface$$$$_E_$$$)
(assert (forall ((x Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$($SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$ x))
    :qid |$Snap.Emb_4_Interfaceempty_interface$$$$_E_$$$To$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Tuple0To$Snap (Tuple0) $Snap)
(declare-fun $SortWrappers.$SnapToTuple0 ($Snap) Tuple0)
(assert (forall ((x Tuple0)) (!
    (= x ($SortWrappers.$SnapToTuple0($SortWrappers.Tuple0To$Snap x)))
    :pattern (($SortWrappers.Tuple0To$Snap x))
    :qid |$Snap.$SnapToTuple0To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple0To$Snap($SortWrappers.$SnapToTuple0 x)))
    :pattern (($SortWrappers.$SnapToTuple0 x))
    :qid |$Snap.Tuple0To$SnapToTuple0|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap (Equality<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> ($Snap) Equality<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>>($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<Ref~_Ref>>To$SnapToEquality<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.PolyAdditionalAxiomsTo$Snap (PolyAdditionalAxioms) $Snap)
(declare-fun $SortWrappers.$SnapToPolyAdditionalAxioms ($Snap) PolyAdditionalAxioms)
(assert (forall ((x PolyAdditionalAxioms)) (!
    (= x ($SortWrappers.$SnapToPolyAdditionalAxioms($SortWrappers.PolyAdditionalAxiomsTo$Snap x)))
    :pattern (($SortWrappers.PolyAdditionalAxiomsTo$Snap x))
    :qid |$Snap.$SnapToPolyAdditionalAxiomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PolyAdditionalAxiomsTo$Snap($SortWrappers.$SnapToPolyAdditionalAxioms x)))
    :pattern (($SortWrappers.$SnapToPolyAdditionalAxioms x))
    :qid |$Snap.PolyAdditionalAxiomsTo$SnapToPolyAdditionalAxioms|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct4<Ref~_Ref~_Ref~_Ref>To$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap (ShStruct1<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> ($Snap) ShStruct1<ShStruct2<Ref~_Ref>>)
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>>($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.ShStruct1<ShStruct2<Ref~_Ref>>To$SnapToShStruct1<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap (Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Snap) Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<Tuple0>To$Snap (Poly<Tuple0>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Tuple0> ($Snap) Poly<Tuple0>)
(assert (forall ((x Poly<Tuple0>)) (!
    (= x ($SortWrappers.$SnapToPoly<Tuple0>($SortWrappers.Poly<Tuple0>To$Snap x)))
    :pattern (($SortWrappers.Poly<Tuple0>To$Snap x))
    :qid |$Snap.$SnapToPoly<Tuple0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Tuple0>To$Snap($SortWrappers.$SnapToPoly<Tuple0> x)))
    :pattern (($SortWrappers.$SnapToPoly<Tuple0> x))
    :qid |$Snap.Poly<Tuple0>To$SnapToPoly<Tuple0>|
    )))
(declare-fun $SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap (Emb_6_Intbyte$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ ($Snap) Emb_6_Intbyte$$$_S_$$$)
(assert (forall ((x Emb_6_Intbyte$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_6_Intbyte$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ x))
    :qid |$Snap.Emb_6_Intbyte$$$_S_$$$To$SnapToEmb_6_Intbyte$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> ($Snap) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap (Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Snap) Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>($SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap (Emb_2_Intuint8$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$ ($Snap) Emb_2_Intuint8$$$_S_$$$)
(assert (forall ((x Emb_2_Intuint8$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$($SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_2_Intuint8$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$ x))
    :qid |$Snap.Emb_2_Intuint8$$$_S_$$$To$SnapToEmb_2_Intuint8$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<Slice<Ref>>To$Snap (Poly<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Slice<Ref>> ($Snap) Poly<Slice<Ref>>)
(assert (forall ((x Poly<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<Slice<Ref>>($SortWrappers.Poly<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Slice<Ref>>To$Snap($SortWrappers.$SnapToPoly<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<Slice<Ref>> x))
    :qid |$Snap.Poly<Slice<Ref>>To$SnapToPoly<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct0To$Snap (ShStruct0) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct0 ($Snap) ShStruct0)
(assert (forall ((x ShStruct0)) (!
    (= x ($SortWrappers.$SnapToShStruct0($SortWrappers.ShStruct0To$Snap x)))
    :pattern (($SortWrappers.ShStruct0To$Snap x))
    :qid |$Snap.$SnapToShStruct0To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct0To$Snap($SortWrappers.$SnapToShStruct0 x)))
    :pattern (($SortWrappers.$SnapToShStruct0 x))
    :qid |$Snap.ShStruct0To$SnapToShStruct0|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap (ShStruct3<Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref>($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Ref>To$SnapToShStruct3<Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap (Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Snap) Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap (Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ ($Snap) Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(assert (forall ((x Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$($SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ x))
    :qid |$Snap.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.String_To$Snap (String_) $Snap)
(declare-fun $SortWrappers.$SnapToString_ ($Snap) String_)
(assert (forall ((x String_)) (!
    (= x ($SortWrappers.$SnapToString_($SortWrappers.String_To$Snap x)))
    :pattern (($SortWrappers.String_To$Snap x))
    :qid |$Snap.$SnapToString_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.String_To$Snap($SortWrappers.$SnapToString_ x)))
    :pattern (($SortWrappers.$SnapToString_ x))
    :qid |$Snap.String_To$SnapToString_|
    )))
(declare-fun $SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap (Emb_3_Intuint8$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ ($Snap) Emb_3_Intuint8$$$_S_$$$)
(assert (forall ((x Emb_3_Intuint8$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_3_Intuint8$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ x))
    :qid |$Snap.Emb_3_Intuint8$$$_S_$$$To$SnapToEmb_3_Intuint8$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShArray<Ref>To$Snap (ShArray<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<Ref> ($Snap) ShArray<Ref>)
(assert (forall ((x ShArray<Ref>)) (!
    (= x ($SortWrappers.$SnapToShArray<Ref>($SortWrappers.ShArray<Ref>To$Snap x)))
    :pattern (($SortWrappers.ShArray<Ref>To$Snap x))
    :qid |$Snap.$SnapToShArray<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<Ref>To$Snap($SortWrappers.$SnapToShArray<Ref> x)))
    :pattern (($SortWrappers.$SnapToShArray<Ref> x))
    :qid |$Snap.ShArray<Ref>To$SnapToShArray<Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.TypesTo$Snap (Types) $Snap)
(declare-fun $SortWrappers.$SnapToTypes ($Snap) Types)
(assert (forall ((x Types)) (!
    (= x ($SortWrappers.$SnapToTypes($SortWrappers.TypesTo$Snap x)))
    :pattern (($SortWrappers.TypesTo$Snap x))
    :qid |$Snap.$SnapToTypesTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TypesTo$Snap($SortWrappers.$SnapToTypes x)))
    :pattern (($SortWrappers.$SnapToTypes x))
    :qid |$Snap.TypesTo$SnapToTypes|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Emb_2_Interfaceempty_interface$$$_S_$$$To$Snap (Emb_2_Interfaceempty_interface$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$_S_$$$ ($Snap) Emb_2_Interfaceempty_interface$$$_S_$$$)
(assert (forall ((x Emb_2_Interfaceempty_interface$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$_S_$$$($SortWrappers.Emb_2_Interfaceempty_interface$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_2_Interfaceempty_interface$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_2_Interfaceempty_interface$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_2_Interfaceempty_interface$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$_S_$$$ x))
    :qid |$Snap.Emb_2_Interfaceempty_interface$$$_S_$$$To$SnapToEmb_2_Interfaceempty_interface$$$_S_$$$|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Tuple2<Bool~_Bool>To$Snap (Tuple2<Bool~_Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple2<Bool~_Bool> ($Snap) Tuple2<Bool~_Bool>)
(assert (forall ((x Tuple2<Bool~_Bool>)) (!
    (= x ($SortWrappers.$SnapToTuple2<Bool~_Bool>($SortWrappers.Tuple2<Bool~_Bool>To$Snap x)))
    :pattern (($SortWrappers.Tuple2<Bool~_Bool>To$Snap x))
    :qid |$Snap.$SnapToTuple2<Bool~_Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple2<Bool~_Bool>To$Snap($SortWrappers.$SnapToTuple2<Bool~_Bool> x)))
    :pattern (($SortWrappers.$SnapToTuple2<Bool~_Bool> x))
    :qid |$Snap.Tuple2<Bool~_Bool>To$SnapToTuple2<Bool~_Bool>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> ($Snap) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>($SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> x))
    :qid |$Snap.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap (Poly<ShStruct1<ShStruct2<Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> ($Snap) Poly<ShStruct1<ShStruct2<Ref~_Ref>>>)
(assert (forall ((x Poly<ShStruct1<ShStruct2<Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> x))
    :qid |$Snap.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Slice<Ref>To$Snap (Slice<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<Ref> ($Snap) Slice<Ref>)
(assert (forall ((x Slice<Ref>)) (!
    (= x ($SortWrappers.$SnapToSlice<Ref>($SortWrappers.Slice<Ref>To$Snap x)))
    :pattern (($SortWrappers.Slice<Ref>To$Snap x))
    :qid |$Snap.$SnapToSlice<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<Ref>To$Snap($SortWrappers.$SnapToSlice<Ref> x)))
    :pattern (($SortWrappers.$SnapToSlice<Ref> x))
    :qid |$Snap.Slice<Ref>To$SnapToSlice<Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct0>To$Snap (Poly<ShStruct0>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct0> ($Snap) Poly<ShStruct0>)
(assert (forall ((x Poly<ShStruct0>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct0>($SortWrappers.Poly<ShStruct0>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct0>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct0>To$Snap($SortWrappers.$SnapToPoly<ShStruct0> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct0> x))
    :qid |$Snap.Poly<ShStruct0>To$SnapToPoly<ShStruct0>|
    )))
(declare-fun $SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Tuple2<Ref~_Types>To$Snap (Tuple2<Ref~_Types>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap) Tuple2<Ref~_Types>)
(assert (forall ((x Tuple2<Ref~_Types>)) (!
    (= x ($SortWrappers.$SnapToTuple2<Ref~_Types>($SortWrappers.Tuple2<Ref~_Types>To$Snap x)))
    :pattern (($SortWrappers.Tuple2<Ref~_Types>To$Snap x))
    :qid |$Snap.$SnapToTuple2<Ref~_Types>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple2<Ref~_Types>To$Snap($SortWrappers.$SnapToTuple2<Ref~_Types> x)))
    :pattern (($SortWrappers.$SnapToTuple2<Ref~_Types> x))
    :qid |$Snap.Tuple2<Ref~_Types>To$SnapToTuple2<Ref~_Types>|
    )))
(declare-fun $SortWrappers.ComparableInterfaceDomainTo$Snap (ComparableInterfaceDomain) $Snap)
(declare-fun $SortWrappers.$SnapToComparableInterfaceDomain ($Snap) ComparableInterfaceDomain)
(assert (forall ((x ComparableInterfaceDomain)) (!
    (= x ($SortWrappers.$SnapToComparableInterfaceDomain($SortWrappers.ComparableInterfaceDomainTo$Snap x)))
    :pattern (($SortWrappers.ComparableInterfaceDomainTo$Snap x))
    :qid |$Snap.$SnapToComparableInterfaceDomainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ComparableInterfaceDomainTo$Snap($SortWrappers.$SnapToComparableInterfaceDomain x)))
    :pattern (($SortWrappers.$SnapToComparableInterfaceDomain x))
    :qid |$Snap.ComparableInterfaceDomainTo$SnapToComparableInterfaceDomain|
    )))
(declare-fun $SortWrappers.Poly<Int>To$Snap (Poly<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Int> ($Snap) Poly<Int>)
(assert (forall ((x Poly<Int>)) (!
    (= x ($SortWrappers.$SnapToPoly<Int>($SortWrappers.Poly<Int>To$Snap x)))
    :pattern (($SortWrappers.Poly<Int>To$Snap x))
    :qid |$Snap.$SnapToPoly<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Int>To$Snap($SortWrappers.$SnapToPoly<Int> x)))
    :pattern (($SortWrappers.$SnapToPoly<Int> x))
    :qid |$Snap.Poly<Int>To$SnapToPoly<Int>|
    )))
(declare-fun $SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap (Equality<ShStruct1<ShStruct2<Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> ($Snap) Equality<ShStruct1<ShStruct2<Ref~_Ref>>>)
(assert (forall ((x Equality<ShStruct1<ShStruct2<Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> x))
    :qid |$Snap.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap (Emb_4_Interfaceempty_interface$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$ ($Snap) Emb_4_Interfaceempty_interface$$$_S_$$$)
(assert (forall ((x Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$($SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$ x))
    :qid |$Snap.Emb_4_Interfaceempty_interface$$$_S_$$$To$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap (Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Snap) Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> ($Snap) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> x))
    :qid |$Snap.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap (Poly<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> ($Snap) Poly<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>>($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<Ref~_Ref>>To$SnapToPoly<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_2_Interfaceempty_interface$$$$_E_$$$To$Snap (Emb_2_Interfaceempty_interface$$$$_E_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$$_E_$$$ ($Snap) Emb_2_Interfaceempty_interface$$$$_E_$$$)
(assert (forall ((x Emb_2_Interfaceempty_interface$$$$_E_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$$_E_$$$($SortWrappers.Emb_2_Interfaceempty_interface$$$$_E_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_2_Interfaceempty_interface$$$$_E_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_2_Interfaceempty_interface$$$$_E_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_2_Interfaceempty_interface$$$$_E_$$$To$Snap($SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$$_E_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_2_Interfaceempty_interface$$$$_E_$$$ x))
    :qid |$Snap.Emb_2_Interfaceempty_interface$$$$_E_$$$To$SnapToEmb_2_Interfaceempty_interface$$$$_E_$$$|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap (Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Snap) Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.ShStruct2<Ref~_Ref>To$Snap (ShStruct2<Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap) ShStruct2<Ref~_Ref>)
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<Ref~_Ref>($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<Ref~_Ref> x))
    :qid |$Snap.ShStruct2<Ref~_Ref>To$SnapToShStruct2<Ref~_Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap ($FVF<Intbyte$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap) $FVF<Intbyte$$$$_E_$$$>)
(assert (forall ((x $FVF<Intbyte$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$>($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intbyte$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intbyte$$$$_E_$$$>To$SnapTo$FVF<Intbyte$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap ($FVF<Bool$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$> ($Snap) $FVF<Bool$$$$_E_$$$>)
(assert (forall ((x $FVF<Bool$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$>($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Bool$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Bool$$$$_E_$$$>To$SnapTo$FVF<Bool$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap ($FVF<Intuint16$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$> ($Snap) $FVF<Intuint16$$$$_E_$$$>)
(assert (forall ((x $FVF<Intuint16$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$>($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intuint16$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intuint16$$$$_E_$$$>To$SnapTo$FVF<Intuint16$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap ($FVF<Intuint32$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$> ($Snap) $FVF<Intuint32$$$$_E_$$$>)
(assert (forall ((x $FVF<Intuint32$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$>($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intuint32$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intuint32$$$$_E_$$$>To$SnapTo$FVF<Intuint32$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap ($FVF<Interfaceempty_interface$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap) $FVF<Interfaceempty_interface$$$$_E_$$$>)
(assert (forall ((x $FVF<Interfaceempty_interface$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Interfaceempty_interface$$$$_E_$$$>To$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap ($PSF<Mem_840d9458_PMEndToEndOption>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption> ($Snap) $PSF<Mem_840d9458_PMEndToEndOption>)
(assert (forall ((x $PSF<Mem_840d9458_PMEndToEndOption>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption>($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption> x))
    :qid |$Snap.$PSF<Mem_840d9458_PMEndToEndOption>To$SnapTo$PSF<Mem_840d9458_PMEndToEndOption>|
    )))
(declare-fun $SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap ($PSF<Mem_840d9458_PMHopByHopOption>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption> ($Snap) $PSF<Mem_840d9458_PMHopByHopOption>)
(assert (forall ((x $PSF<Mem_840d9458_PMHopByHopOption>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption>($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption> x))
    :qid |$Snap.$PSF<Mem_840d9458_PMHopByHopOption>To$SnapTo$PSF<Mem_840d9458_PMHopByHopOption>|
    )))
(declare-fun $SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap ($PSF<Mem_a6ceb89d_PMHopField>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField> ($Snap) $PSF<Mem_a6ceb89d_PMHopField>)
(assert (forall ((x $PSF<Mem_a6ceb89d_PMHopField>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField>($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Mem_a6ceb89d_PMHopField>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap($SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField> x))
    :qid |$Snap.$PSF<Mem_a6ceb89d_PMHopField>To$SnapTo$PSF<Mem_a6ceb89d_PMHopField>|
    )))
; ////////// Symbols
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Slice<Ref> Set<Slice<Ref>>) Bool)
(declare-fun Set_card (Set<Slice<Ref>>) Int)
(declare-const Set_empty Set<Slice<Ref>>)
(declare-fun Set_singleton (Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_unionone (Set<Slice<Ref>> Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_union (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_disjoint (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_difference (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_intersection (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_subset (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_equal (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_in (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_card (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Int)
(declare-const Set_empty Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_singleton (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_unionone (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_union (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_disjoint (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_difference (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_intersection (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_subset (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_equal (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_in (Tuple2<Ref~_Types> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_card (Set<Tuple2<Ref~_Types>>) Int)
(declare-const Set_empty Set<Tuple2<Ref~_Types>>)
(declare-fun Set_singleton (Tuple2<Ref~_Types>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_unionone (Set<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_union (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_disjoint (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_difference (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_intersection (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_subset (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_equal (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_in (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_card (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Int)
(declare-const Set_empty Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_singleton (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_unionone (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_union (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_disjoint (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_difference (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_intersection (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_subset (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_equal (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_in (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_card (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Int)
(declare-const Set_empty Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_singleton (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_unionone (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_union (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_disjoint (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_difference (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_intersection (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_subset (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_equal (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_in (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_card (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Int)
(declare-const Set_empty Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_singleton (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_unionone (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_union (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_disjoint (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_difference (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_intersection (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_subset (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_equal (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_in (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_card (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Int)
(declare-const Set_empty Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_singleton (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_unionone (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_union (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_disjoint (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_difference (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_intersection (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_subset (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_equal (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Tuple2<Ref~_Types>>) Int)
(declare-const Seq_empty Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_singleton (Tuple2<Ref~_Types>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_build (Seq<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_index (Seq<Tuple2<Ref~_Types>> Int) Tuple2<Ref~_Types>)
(declare-fun Seq_append (Seq<Tuple2<Ref~_Types>> Seq<Tuple2<Ref~_Types>>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_update (Seq<Tuple2<Ref~_Types>> Int Tuple2<Ref~_Types>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_contains (Seq<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Bool)
(declare-fun Seq_take (Seq<Tuple2<Ref~_Types>> Int) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_drop (Seq<Tuple2<Ref~_Types>> Int) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_equal (Seq<Tuple2<Ref~_Types>> Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun Seq_sameuntil (Seq<Tuple2<Ref~_Types>> Seq<Tuple2<Ref~_Types>> Int) Bool)
(declare-fun eq<Bool> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-const stringLit61646472<Int> Int)
(declare-const stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int> Int)
(declare-const stringLit5765646e6573646179<Int> Int)
(declare-const stringLit5468757273646179<Int> Int)
(declare-const stringLit556e6b6e6f776e4e65787448647254797065<Int> Int)
(declare-const stringLit496e76616c6964536f7572636541646472657373<Int> Int)
(declare-const stringLit45787465726e616c496e74657266616365446f776e<Int> Int)
(declare-const stringLit736f757263652061646472657373206d697373696e67<Int> Int)
(declare-const stringLit6970<Int> Int)
(declare-const stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int> Int)
(declare-const stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int> Int)
(declare-const stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int> Int)
(declare-const stringLit44657374696e6174696f6e556e726561636861626c65<Int> Int)
(declare-const stringLit62756666657220746f6f2073686f7274<Int> Int)
(declare-const stringLit5472616365726f7574655265706c79<Int> Int)
(declare-const stringLit496e76616c6964457874656e73696f6e486561646572<Int> Int)
(declare-const stringLit5343494f4e20686561646572206d697373696e67<Int> Int)
(declare-const stringLit616464724864724c656e<Int> Int)
(declare-const stringLit6d696e696e756d5f6c65677468<Int> Int)
(declare-const stringLit4e6f6e65<Int> Int)
(declare-const stringLit4f63746f626572<Int> Int)
(declare-const stringLit5061746845787069726564<Int> Int)
(declare-const stringLit4563686f5265706c79<Int> Int)
(declare-const stringLit6864724279746573<Int> Int)
(declare-const stringLit496e76616c6964486f704669656c644d4143<Int> Int)
(declare-const stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> Int)
(declare-const stringLit496e76616c69645365676d656e744368616e6765<Int> Int)
(declare-const stringLit5061636b6574546f6f426967<Int> Int)
(declare-const stringLit62696e6172792e4c6974746c65456e6469616e<Int> Int)
(declare-const stringLit424644<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int> Int)
(declare-const stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int> Int)
(declare-const stringLit496e76616c69645061636b657453697a65<Int> Int)
(declare-const stringLit5472616365726f75746552657175657374<Int> Int)
(declare-const stringLit556e6b6e6f776e5061746854797065<Int> Int)
(declare-const stringLit257328257329<Int> Int)
(declare-const stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int> Int)
(declare-fun strLen<Int> (Int) Int)
(declare-fun strConcat<Int> (Int Int) Int)
(declare-const stringLit456e6432456e64<Int> Int)
(declare-const stringLit4c6974746c65456e6469616e<Int> Int)
(declare-const stringLit4d6179<Int> Int)
(declare-const stringLit486f704279486f70<Int> Int)
(declare-const stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int> Int)
(declare-const stringLit6d6178<Int> Int)
(declare-const stringLit4a616e75617279<Int> Int)
(declare-const stringLit417072696c<Int> Int)
(declare-const stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int> Int)
(declare-const stringLit256428256429<Int> Int)
(declare-const stringLit4a756e65<Int> Int)
(declare-const stringLit467269646179<Int> Int)
(declare-const stringLit506172616d6574657250726f626c656d<Int> Int)
(declare-const stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int> Int)
(declare-const stringLit53657074656d626572<Int> Int)
(declare-const stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int> Int)
(declare-const stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int> Int)
(declare-const stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> Int)
(declare-const stringLit426967456e6469616e<Int> Int)
(declare-const stringLit417567757374<Int> Int)
(declare-const stringLit4665627275617279<Int> Int)
(declare-const stringLit446563656d626572<Int> Int)
(declare-const stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int> Int)
(declare-const stringLit556e6b6e6f776e41646472657373466f726d6174<Int> Int)
(declare-const stringLit496e76616c6964436f6d6d6f6e486561646572<Int> Int)
(declare-const stringLit6c656e<Int> Int)
(declare-const stringLit53756e646179<Int> Int)
(declare-const stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int> Int)
(declare-const stringLit6d696e696d756d<Int> Int)
(declare-const stringLit4e6f6e4c6f63616c44656c6976657279<Int> Int)
(declare-const stringLit554e4b4e4f574e2028256429<Int> Int)
(declare-const stringLit436d644864724c656e<Int> Int)
(declare-const stringLit5361747572646179<Int> Int)
(declare-const stringLit6578706563746564<Int> Int)
(declare-const stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int> Int)
(declare-const stringLit257328436f64653a20256429<Int> Int)
(declare-const stringLit6d696e<Int> Int)
(declare-const stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int> Int)
(declare-const stringLit4572726f6e656f75734865616465724669656c64<Int> Int)
(declare-const stringLit466c6f7749445265717569726564<Int> Int)
(declare-const stringLit4d6f6e646179<Int> Int)
(declare-const stringLit4a756c79<Int> Int)
(declare-const stringLit756470<Int> Int)
(declare-const stringLit4563686f52657175657374<Int> Int)
(declare-const stringLit<Int> Int)
(declare-const stringLit756e737570706f727465642061646472657373<Int> Int)
(declare-const stringLit496e76616c696450617468<Int> Int)
(declare-const stringLit54756573646179<Int> Int)
(declare-const stringLit544350<Int> Int)
(declare-const stringLit4e6f76656d626572<Int> Int)
(declare-const stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int> Int)
(declare-const stringLit74797065<Int> Int)
(declare-const stringLit496e76616c696441646472657373486561646572<Int> Int)
(declare-const stringLit2573282564295c6e5061796c6f61643a202573<Int> Int)
(declare-const stringLit53434d50<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int> Int)
(declare-const stringLit4f7074696f6e206e6f7420666f756e64<Int> Int)
(declare-const stringLit4d61726368<Int> Int)
(declare-const stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int> Int)
(declare-const stringLit61637475616c<Int> Int)
(declare-const stringLit62696e6172792e426967456e6469616e<Int> Int)
(declare-const stringLit554450<Int> Int)
(declare-const stringLit496e76616c696444657374696e6174696f6e41646472657373<Int> Int)
(declare-fun eq<Bool> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun ShStructget1of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructget0of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructrev3of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev4of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Emb_6_Intbyte$$$_S_$$$)
(declare-fun ShStructget3of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructget2of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev2of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev1of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev5of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (Emb_6_Intbyte$$$_S_$$$) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructget4of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun eq<Bool> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructrev1of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of4<ShStruct2<Ref~_Ref>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget2of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget3of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev3of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShArraysecond<Int> (ShStruct4<Ref~_Ref~_Ref~_Ref>) Int)
(declare-fun ShArrayfirst<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (ShStruct4<Ref~_Ref~_Ref~_Ref>) ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(declare-fun ShArraylen<Int> (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun box_Poly<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct2<Ref~_Ref>> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (Tuple0) $Ref)
(declare-fun unbox_Poly<Tuple0> ($Ref) Tuple0)
(declare-fun box_Poly<Ref> (Slice<Ref>) $Ref)
(declare-fun unbox_Poly<Slice<Ref>> ($Ref) Slice<Ref>)
(declare-fun box_Poly<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct4<Ref~_Ref~_Ref~_Ref> ShStruct4<Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun box_Poly<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct2<Ref~_Ref> ShStruct2<Ref~_Ref>) Bool)
(declare-fun tuple2<Tuple2<Ref~_Types>> ($Ref Types) Tuple2<Ref~_Types>)
(declare-fun get0of2<Ref> (Tuple2<Ref~_Types>) $Ref)
(declare-fun get1of2<Types> (Tuple2<Ref~_Types>) Types)
(declare-fun eq<Bool> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref> ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct1<ShStruct2<Ref~_Ref>> ShStruct1<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun ShStructget1of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructget0of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct0 ShStruct0) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun sarray<ShArray<Ref>> (Slice<Ref>) ShArray<Ref>)
(declare-fun scap<Int> (Slice<Ref>) Int)
(declare-fun soffset<Int> (Slice<Ref>) Int)
(declare-fun smake<Slice<Ref>> (ShArray<Ref> Int Int Int) Slice<Ref>)
(declare-fun slen<Int> (Slice<Ref>) Int)
(declare-fun tuple2<Tuple2<Bool~_Bool>> (Bool Bool) Tuple2<Bool~_Bool>)
(declare-fun get0of2<Bool> (Tuple2<Bool~_Bool>) Bool)
(declare-fun get1of2<Bool> (Tuple2<Bool~_Bool>) Bool)
(declare-fun eq<Bool> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Emb_2_Intuint8$$$_S_$$$)
(declare-fun ShStructget0of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev3of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev1of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev4of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (Emb_2_Intuint8$$$_S_$$$) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructget1of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev2of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructget3of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructget2of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructget4of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of5<ShStruct2<Ref~_Ref>> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev3of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev4of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev2of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget3of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget2of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShArrayloc<Ref> (ShArray<Ref> Int) $Ref)
(declare-fun ShArraysecond<Int> ($Ref) Int)
(declare-fun ShArrayfirst<ShArray<Ref>> ($Ref) ShArray<Ref>)
(declare-fun ShArraylen<Int> (ShArray<Ref>) Int)
(declare-fun ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Ref) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (Emb_3_Intuint8$$$_S_$$$) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Ref) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-const HostNone_cd675838_T_Types_tag<Int> Int)
(declare-const bigEndian_72f0d887_T_Types_tag<Int> Int)
(declare-fun tag_Types<Int> (Types) Int)
(declare-const Y$8f734176_14a7fb6d__Types<Types> Types)
(declare-const nil_Types_tag<Int> Int)
(declare-const rawPath_a6ceb89d_T_Types<Types> Types)
(declare-const SCMPDestinationUnreachable_840d9458_T_Types<Types> Types)
(declare-const nilDecodeFeedback_b41831d7_T_Types_tag<Int> Int)
(declare-const Path_c6e60a1d_T_Types<Types> Types)
(declare-const Y$49c4c25f_d3743b4f__Types_tag<Int> Int)
(declare-const HopByHopExtnSkipper_840d9458_T_Types_tag<Int> Int)
(declare-const IA_cd675838_T_Types_tag<Int> Int)
(declare-const Y$558431e4_a6ceb89d__Types_tag<Int> Int)
(declare-const LayerType_b41831d7_T_Types_tag<Int> Int)
(declare-const string_Types<Types> Types)
(declare-const Path_c385169_T_Types_tag<Int> Int)
(declare-const HostNone_cd675838_T_Types<Types> Types)
(declare-const Y$6914870a_b41831d7__Types_tag<Int> Int)
(declare-const SCMPTypeCode_840d9458_T_Types<Types> Types)
(declare-const Payload_b41831d7_T_Types<Types> Types)
(declare-const Y$17800ab4_b41831d7__Types<Types> Types)
(declare-const nil_Types<Types> Types)
(declare-const Y$17800ab4_b41831d7__Types_tag<Int> Int)
(declare-const HostIPv6_cd675838_T_Types_tag<Int> Int)
(declare-const IPAddr_5c610647_T_Types<Types> Types)
(declare-const uint16_Types<Types> Types)
(declare-const Path_c6e60a1d_T_Types_tag<Int> Int)
(declare-const int_Types_tag<Int> Int)
(declare-const SCMP_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPEcho_840d9458_T_Types<Types> Types)
(declare-const HopByHopExtn_840d9458_T_Types_tag<Int> Int)
(declare-const AddrType_840d9458_T_Types<Types> Types)
(declare-const Y$68d3cee9_b41831d7__Types<Types> Types)
(declare-const Y$60c7bddc_b41831d7__Types<Types> Types)
(declare-const SCMPExternalInterfaceDown_840d9458_T_Types<Types> Types)
(declare-const SCMPTraceroute_840d9458_T_Types<Types> Types)
(declare-const Y$3191b69e_b41831d7__Types_tag<Int> Int)
(declare-const nilDecodeFeedback_b41831d7_T_Types<Types> Types)
(declare-const SCMPPacketTooBig_840d9458_T_Types<Types> Types)
(declare-const SCION_840d9458_T_Types<Types> Types)
(declare-const Y$60c7bddc_b41831d7__Types_tag<Int> Int)
(declare-const SCION_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPCode_840d9458_T_Types_tag<Int> Int)
(declare-const Raw_daeaf66a_T_Types_tag<Int> Int)
(declare-const uint16_Types_tag<Int> Int)
(declare-const AS_cd675838_T_Types<Types> Types)
(declare-fun slice_Types<Types> (Types) Types)
(declare-const HostSVC_cd675838_T_Types_tag<Int> Int)
(declare-const Y$49c4c25f_d3743b4f__Types<Types> Types)
(declare-const integer_Types<Types> Types)
(declare-const bigEndian_72f0d887_T_Types<Types> Types)
(declare-const empty_interface_Types<Types> Types)
(declare-const LayerType_b41831d7_T_Types<Types> Types)
(declare-const SCMPType_840d9458_T_Types_tag<Int> Int)
(declare-const byte_Types_tag<Int> Int)
(declare-const SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int> Int)
(declare-const Y$b28ae4_ac87dd1d__Types_tag<Int> Int)
(declare-const Y$53a71dc3_5c610647__Types<Types> Types)
(declare-const HopByHopExtnSkipper_840d9458_T_Types<Types> Types)
(declare-const EndToEndExtn_840d9458_T_Types_tag<Int> Int)
(declare-const SCMP_840d9458_T_Types<Types> Types)
(declare-const Raw_daeaf66a_T_Types<Types> Types)
(declare-const L4ProtocolType_840d9458_T_Types<Types> Types)
(declare-const SCMPTraceroute_840d9458_T_Types_tag<Int> Int)
(declare-const integer_Types_tag<Int> Int)
(declare-const rawPath_a6ceb89d_T_Types_tag<Int> Int)
(declare-const SCMPParameterProblem_840d9458_T_Types_tag<Int> Int)
(declare-fun comparableType_Types<Bool> (Types) Bool)
(declare-const UDPAddr_5c610647_T_Types<Types> Types)
(declare-const AddrType_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPParameterProblem_840d9458_T_Types<Types> Types)
(declare-const Y$8f734176_14a7fb6d__Types_tag<Int> Int)
(declare-const littleEndian_72f0d887_T_Types_tag<Int> Int)
(declare-const Decoded_daeaf66a_T_Types_tag<Int> Int)
(declare-const SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int> Int)
(declare-const Y$9127f611_b41831d7__Types_tag<Int> Int)
(declare-const pointer_Types_tag<Int> Int)
(declare-const L4ProtocolType_840d9458_T_Types_tag<Int> Int)
(declare-const Decoded_daeaf66a_T_Types<Types> Types)
(declare-const IPAddr_5c610647_T_Types_tag<Int> Int)
(declare-const Path_c385169_T_Types<Types> Types)
(declare-const Y$c2e55be_72f0d887__Types<Types> Types)
(declare-const BFD_6416454f_T_Types<Types> Types)
(declare-fun pointer_Types<Types> (Types) Types)
(declare-const HostIPv4_cd675838_T_Types_tag<Int> Int)
(declare-const string_Types_tag<Int> Int)
(declare-const slice_Types_tag<Int> Int)
(declare-const Y$53a71dc3_5c610647__Types_tag<Int> Int)
(declare-const Y$febd64e7_b41831d7__Types<Types> Types)
(declare-const Path_4cddb96f_T_Types<Types> Types)
(declare-const Y$c2e55be_72f0d887__Types_tag<Int> Int)
(declare-const SCMPCode_840d9458_T_Types<Types> Types)
(declare-const Y$558431e4_a6ceb89d__Types<Types> Types)
(declare-const Y$3191b69e_b41831d7__Types<Types> Types)
(declare-const Y$68d3cee9_b41831d7__Types_tag<Int> Int)
(declare-const EndToEndExtnSkipper_840d9458_T_Types<Types> Types)
(declare-const SCMPPacketTooBig_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPInternalConnectivityDown_840d9458_T_Types<Types> Types)
(declare-fun behavioral_subtype_Types<Bool> (Types Types) Bool)
(declare-const Y$9127f611_b41831d7__Types<Types> Types)
(declare-const SCMPDestinationUnreachable_840d9458_T_Types_tag<Int> Int)
(declare-const IA_cd675838_T_Types<Types> Types)
(declare-const Y$9c78df5f_b41831d7__Types_tag<Int> Int)
(declare-const Y$b28ae4_ac87dd1d__Types<Types> Types)
(declare-const Y$35202e5_cd675838__Types_tag<Int> Int)
(declare-const HostSVC_cd675838_T_Types<Types> Types)
(declare-const HostIPv6_cd675838_T_Types<Types> Types)
(declare-const Y$35202e5_cd675838__Types<Types> Types)
(declare-const littleEndian_72f0d887_T_Types<Types> Types)
(declare-const HostIPv4_cd675838_T_Types<Types> Types)
(declare-const Y$6914870a_b41831d7__Types<Types> Types)
(declare-const UDPAddr_5c610647_T_Types_tag<Int> Int)
(declare-const EndToEndExtn_840d9458_T_Types<Types> Types)
(declare-const BFD_6416454f_T_Types_tag<Int> Int)
(declare-const SCMPType_840d9458_T_Types<Types> Types)
(declare-const Payload_b41831d7_T_Types_tag<Int> Int)
(declare-const Y$febd64e7_b41831d7__Types_tag<Int> Int)
(declare-const empty_interface_Types_tag<Int> Int)
(declare-const EndToEndExtnSkipper_840d9458_T_Types_tag<Int> Int)
(declare-const Path_4cddb96f_T_Types_tag<Int> Int)
(declare-const int_Types<Types> Types)
(declare-const Y$9c78df5f_b41831d7__Types<Types> Types)
(declare-const HopByHopExtn_840d9458_T_Types<Types> Types)
(declare-const AS_cd675838_T_Types_tag<Int> Int)
(declare-const byte_Types<Types> Types)
(declare-const SCMPEcho_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPTypeCode_840d9458_T_Types_tag<Int> Int)
(declare-fun get_0_pointer_Types<Types> (Types) Types)
(declare-fun comparableInterface<Bool> (Tuple2<Ref~_Types>) Bool)
(declare-fun box_Poly<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) Bool)
(declare-fun eq<Bool> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct1<ShStruct2<Ref~_Ref>>) $Ref)
(declare-fun unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> ($Ref) ShStruct1<ShStruct2<Ref~_Ref>>)
(declare-fun eq<Bool> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Bool)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Int) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShArraysecond<Int> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
(declare-fun ShArrayfirst<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShArraylen<Int> (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct4<Ref~_Ref~_Ref~_Ref>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun eq<Bool> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) Bool)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct0) $Ref)
(declare-fun unbox_Poly<ShStruct0> ($Ref) ShStruct0)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Ref)
(declare-fun unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Ref) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(declare-fun sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(declare-fun scap<Int> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun soffset<Int> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> Int Int Int) Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(declare-fun slen<Int> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Ref) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructget4of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget10of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev4of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev10of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev13of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget5of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget6of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev15of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget7of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev14of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget8of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev7of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget2of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget11of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev12of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev11of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget3of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev9of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev8of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev5of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev3of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget16of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget14of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget13of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev16of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev6of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget9of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget12of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of17<ShStruct2<Ref~_Ref>> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget1of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget15of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev0of1<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct2<Ref~_Ref>> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun scap<Int> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun soffset<Int> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Int Int Int) Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun slen<Int> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (Int) $Ref)
(declare-fun unbox_Poly<Int> ($Ref) Int)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Ref> ShStruct3<Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructrev1of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget2of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget3of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev3of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of1<ShStruct2<Ref~_Ref>> (ShStruct1<ShStruct2<Ref~_Ref>>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev0of1<ShStruct1<ShStruct2<Ref~_Ref>>> (ShStruct2<Ref~_Ref>) ShStruct1<ShStruct2<Ref~_Ref>>)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun eq<Bool> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun eq<Bool> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) Bool)
; /field_value_functions_declarations.smt2 [PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(declare-fun $FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun $FVF.after_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> $Ref) Bool)
(declare-fun $FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(declare-fun $FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $Ref) Slice<Ref>)
(declare-fun $FVF.after_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ (Slice<Ref> $Ref) Bool)
(declare-fun $FVF.perm_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(declare-fun $FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun $FVF.after_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> $Ref) Bool)
(declare-fun $FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(declare-fun $FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $Ref) Slice<Ref>)
(declare-fun $FVF.after_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ (Slice<Ref> $Ref) Bool)
(declare-fun $FVF.perm_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intbyte$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$> $FVF<Intbyte$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intbyte$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intbyte$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intbyte$$$$_E_$$$ $FVF<Intbyte$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Bool$$$$_E_$$$: Bool]
(declare-fun $FVF.domain_Bool$$$$_E_$$$ ($FVF<Bool$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Bool$$$$_E_$$$ ($FVF<Bool$$$$_E_$$$> $Ref) Bool)
(declare-fun $FVF.after_Bool$$$$_E_$$$ ($FVF<Bool$$$$_E_$$$> $FVF<Bool$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Bool$$$$_E_$$$ (Bool $Ref) Bool)
(declare-fun $FVF.perm_Bool$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Bool$$$$_E_$$$ $FVF<Bool$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intuint16$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intuint16$$$$_E_$$$ ($FVF<Intuint16$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intuint16$$$$_E_$$$ ($FVF<Intuint16$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intuint16$$$$_E_$$$ ($FVF<Intuint16$$$$_E_$$$> $FVF<Intuint16$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intuint16$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intuint16$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intuint16$$$$_E_$$$ $FVF<Intuint16$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intuint32$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intuint32$$$$_E_$$$ ($FVF<Intuint32$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intuint32$$$$_E_$$$ ($FVF<Intuint32$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intuint32$$$$_E_$$$ ($FVF<Intuint32$$$$_E_$$$> $FVF<Intuint32$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intuint32$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intuint32$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intuint32$$$$_E_$$$ $FVF<Intuint32$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$: Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]
(declare-fun $FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> $Ref) Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun $FVF.after_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> $Ref) Bool)
(declare-fun $FVF.perm_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Interfaceempty_interface$$$$_E_$$$: Tuple2[Ref, Types]]
(declare-fun $FVF.domain_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$> $Ref) Tuple2<Ref~_Types>)
(declare-fun $FVF.after_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$> $FVF<Interfaceempty_interface$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Interfaceempty_interface$$$$_E_$$$ (Tuple2<Ref~_Types> $Ref) Bool)
(declare-fun $FVF.perm_Interfaceempty_interface$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Interfaceempty_interface$$$$_E_$$$ $FVF<Interfaceempty_interface$$$$_E_$$$>)
; /predicate_snap_functions_declarations.smt2 [Mem_840d9458_PMEndToEndOption: Snap]
(declare-fun $PSF.domain_Mem_840d9458_PMEndToEndOption ($PSF<Mem_840d9458_PMEndToEndOption>) Set<$Snap>)
(declare-fun $PSF.lookup_Mem_840d9458_PMEndToEndOption ($PSF<Mem_840d9458_PMEndToEndOption> $Snap) $Snap)
(declare-fun $PSF.after_Mem_840d9458_PMEndToEndOption ($PSF<Mem_840d9458_PMEndToEndOption> $PSF<Mem_840d9458_PMEndToEndOption>) Bool)
(declare-fun $PSF.loc_Mem_840d9458_PMEndToEndOption ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Mem_840d9458_PMEndToEndOption ($PPM $Snap) $Perm)
(declare-const $psfTOP_Mem_840d9458_PMEndToEndOption $PSF<Mem_840d9458_PMEndToEndOption>)
; /predicate_snap_functions_declarations.smt2 [Mem_840d9458_PMHopByHopOption: Snap]
(declare-fun $PSF.domain_Mem_840d9458_PMHopByHopOption ($PSF<Mem_840d9458_PMHopByHopOption>) Set<$Snap>)
(declare-fun $PSF.lookup_Mem_840d9458_PMHopByHopOption ($PSF<Mem_840d9458_PMHopByHopOption> $Snap) $Snap)
(declare-fun $PSF.after_Mem_840d9458_PMHopByHopOption ($PSF<Mem_840d9458_PMHopByHopOption> $PSF<Mem_840d9458_PMHopByHopOption>) Bool)
(declare-fun $PSF.loc_Mem_840d9458_PMHopByHopOption ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Mem_840d9458_PMHopByHopOption ($PPM $Snap) $Perm)
(declare-const $psfTOP_Mem_840d9458_PMHopByHopOption $PSF<Mem_840d9458_PMHopByHopOption>)
; /predicate_snap_functions_declarations.smt2 [Mem_a6ceb89d_PMHopField: Snap]
(declare-fun $PSF.domain_Mem_a6ceb89d_PMHopField ($PSF<Mem_a6ceb89d_PMHopField>) Set<$Snap>)
(declare-fun $PSF.lookup_Mem_a6ceb89d_PMHopField ($PSF<Mem_a6ceb89d_PMHopField> $Snap) $Snap)
(declare-fun $PSF.after_Mem_a6ceb89d_PMHopField ($PSF<Mem_a6ceb89d_PMHopField> $PSF<Mem_a6ceb89d_PMHopField>) Bool)
(declare-fun $PSF.loc_Mem_a6ceb89d_PMHopField ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Mem_a6ceb89d_PMHopField ($PPM $Snap) $Perm)
(declare-const $psfTOP_Mem_a6ceb89d_PMHopField $PSF<Mem_a6ceb89d_PMHopField>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun arrayNil_3_Intuint8$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_3_Intuint8$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_3_Intuint8$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_3_Intuint8$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref ($Snap Emb_3_Intuint8$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_3_Intuint8$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless (Emb_3_Intuint8$$$_S_$$$) Bool)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_3_Intuint8$$$_S_$$$) Bool)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-const shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-const shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun Len_daeaf66a_PMBase ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun Len_daeaf66a_PMBase%limited ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun Len_daeaf66a_PMBase%stateless (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun Len_daeaf66a_PMBase%precondition ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-const shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun ssliceFromSlice_Ref ($Snap Slice<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromSlice_Ref%limited ($Snap Slice<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromSlice_Ref%stateless (Slice<Ref> Int Int) Bool)
(declare-fun ssliceFromSlice_Ref%precondition ($Snap Slice<Ref> Int Int) Bool)
(declare-fun Len_daeaf66a_PMRaw ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMRaw%limited ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMRaw%stateless (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun Len_daeaf66a_PMRaw%precondition ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath%limited ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath%stateless (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath%precondition ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun intBitwiseAnd ($Snap Int Int) Int)
(declare-fun intBitwiseAnd%limited ($Snap Int Int) Int)
(declare-fun intBitwiseAnd%stateless (Int Int) Bool)
(declare-fun intBitwiseAnd%precondition ($Snap Int Int) Bool)
(declare-fun Len_a6ceb89d_PMrawPath ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_PMrawPath%limited ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_PMrawPath%stateless (ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_a6ceb89d_PMrawPath%precondition ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_c6e60a1d_PMPath ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_c6e60a1d_PMPath%limited ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_c6e60a1d_PMPath%stateless (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_c6e60a1d_PMPath%precondition ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_c385169_PMPath ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun Len_c385169_PMPath%limited ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun Len_c385169_PMPath%stateless (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun Len_c385169_PMPath%precondition ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun Len_daeaf66a_PMDecoded ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMDecoded%limited ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMDecoded%stateless (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_daeaf66a_PMDecoded%precondition ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_4cddb96f_MPath ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun Len_4cddb96f_MPath%limited ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun Len_4cddb96f_MPath%stateless (Tuple0 Slice<Ref>) Bool)
(declare-fun Len_4cddb96f_MPath%precondition ($Snap Tuple0 Slice<Ref>) Bool)
(declare-fun arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun BitAnd3_ca158f5e_F ($Snap Int) Int)
(declare-fun BitAnd3_ca158f5e_F%limited ($Snap Int) Int)
(declare-fun BitAnd3_ca158f5e_F%stateless (Int) Bool)
(declare-fun BitAnd3_ca158f5e_F%precondition ($Snap Int) Bool)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (Tuple0 Slice<Ref>) Bool)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap Tuple0 Slice<Ref>) Bool)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref ($Snap Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless (Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) Bool)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) Bool)
(declare-fun arrayNil_1_Intbyte$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_1_Intbyte$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_1_Intbyte$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_1_Intbyte$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun Length_840d9458_MAddrType ($Snap Int) Int)
(declare-fun Length_840d9458_MAddrType%limited ($Snap Int) Int)
(declare-fun Length_840d9458_MAddrType%stateless (Int) Bool)
(declare-fun Length_840d9458_MAddrType%precondition ($Snap Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType ($Snap Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType%limited ($Snap Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType%stateless (Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType%precondition ($Snap Int) Bool)
(declare-fun assertArg2_Tuple0 ($Snap Bool Tuple0) Tuple0)
(declare-fun assertArg2_Tuple0%limited ($Snap Bool Tuple0) Tuple0)
(declare-fun assertArg2_Tuple0%stateless (Bool Tuple0) Bool)
(declare-fun assertArg2_Tuple0%precondition ($Snap Bool Tuple0) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef ($Snap Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%limited ($Snap Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%stateless (Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%precondition ($Snap Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ ($Snap Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%limited ($Snap Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%stateless (Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%precondition ($Snap Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef ($Snap Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%limited ($Snap Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%stateless (Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%precondition ($Snap Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef ($Snap Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%limited ($Snap Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%stateless (Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%precondition ($Snap Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_RefRef ($Snap Bool ShStruct2<Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun assertArg2_ShStruct2_RefRef%limited ($Snap Bool ShStruct2<Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun assertArg2_ShStruct2_RefRef%stateless (Bool ShStruct2<Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_RefRef%precondition ($Snap Bool ShStruct2<Ref~_Ref>) Bool)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_ ($Snap Tuple2<Ref~_Types>) Types)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_%limited ($Snap Tuple2<Ref~_Types>) Types)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_%stateless (Tuple2<Ref~_Types>) Bool)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_%precondition ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%stateless (Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun arrayNil_4_Interfaceempty_interface$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_4_Interfaceempty_interface$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun sadd ($Snap Int Int) Int)
(declare-fun sadd%limited ($Snap Int Int) Int)
(declare-fun sadd%stateless (Int Int) Bool)
(declare-fun sadd%precondition ($Snap Int Int) Bool)
(declare-fun sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ ($Snap) Slice<Ref>)
(declare-fun sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited ($Snap) Slice<Ref>)
(declare-const sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless Bool)
(declare-fun sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun arrayNil_2_Interfaceempty_interface$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_2_Interfaceempty_interface$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_1_Intbyte$$$_S_$$$)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_1_Intbyte$$$_S_$$$)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref ($Snap Emb_1_Intbyte$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_1_Intbyte$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless (Emb_1_Intbyte$$$_S_$$$) Bool)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_1_Intbyte$$$_S_$$$) Bool)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct2<Ref~_Ref>)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct2<Ref~_Ref>)
(declare-const shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Int)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Int)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%stateless (Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_%stateless (Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes ($Snap Seq<Tuple2<Ref~_Types>>) Emb_4_Interfaceempty_interface$$$$_E_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited ($Snap Seq<Tuple2<Ref~_Types>>) Emb_4_Interfaceempty_interface$$$$_E_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless (Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition ($Snap Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes ($Snap Emb_4_Interfaceempty_interface$$$$_E_$$$) Seq<Tuple2<Ref~_Types>>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited ($Snap Emb_4_Interfaceempty_interface$$$$_E_$$$) Seq<Tuple2<Ref~_Types>>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless (Emb_4_Interfaceempty_interface$$$$_E_$$$) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition ($Snap Emb_4_Interfaceempty_interface$$$$_E_$$$) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_4_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_4_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap Emb_4_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_4_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (Emb_4_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_4_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun intBitwiseOr ($Snap Int Int) Int)
(declare-fun intBitwiseOr%limited ($Snap Int Int) Int)
(declare-fun intBitwiseOr%stateless (Int Int) Bool)
(declare-fun intBitwiseOr%precondition ($Snap Int Int) Bool)
(declare-fun intShiftLeft ($Snap Int Int) Int)
(declare-fun intShiftLeft%limited ($Snap Int Int) Int)
(declare-fun intShiftLeft%stateless (Int Int) Bool)
(declare-fun intShiftLeft%precondition ($Snap Int Int) Bool)
(declare-fun UBuf_b41831d7_SY$3e1378f2_b41831d7_ ($Snap Tuple2<Ref~_Types>) Slice<Ref>)
(declare-fun UBuf_b41831d7_SY$3e1378f2_b41831d7_%limited ($Snap Tuple2<Ref~_Types>) Slice<Ref>)
(declare-fun UBuf_b41831d7_SY$3e1378f2_b41831d7_%stateless (Tuple2<Ref~_Types>) Bool)
(declare-fun UBuf_b41831d7_SY$3e1378f2_b41831d7_%precondition ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun getNumINF_daeaf66a_PMBase ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumINF_daeaf66a_PMBase%limited ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumINF_daeaf66a_PMBase%stateless (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun getNumINF_daeaf66a_PMBase%precondition ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun getPathPure_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Tuple2<Ref~_Types>)
(declare-fun getPathPure_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Tuple2<Ref~_Types>)
(declare-fun getPathPure_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Bool)
(declare-fun getPathPure_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap Emb_2_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_2_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (Emb_2_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_2_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_2_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_2_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes ($Snap Emb_2_Interfaceempty_interface$$$$_E_$$$) Seq<Tuple2<Ref~_Types>>)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited ($Snap Emb_2_Interfaceempty_interface$$$$_E_$$$) Seq<Tuple2<Ref~_Types>>)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless (Emb_2_Interfaceempty_interface$$$$_E_$$$) Bool)
(declare-fun unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition ($Snap Emb_2_Interfaceempty_interface$$$$_E_$$$) Bool)
(declare-fun box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes ($Snap Seq<Tuple2<Ref~_Types>>) Emb_2_Interfaceempty_interface$$$$_E_$$$)
(declare-fun box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited ($Snap Seq<Tuple2<Ref~_Types>>) Emb_2_Interfaceempty_interface$$$$_E_$$$)
(declare-fun box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless (Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition ($Snap Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun sliceDefault_Intbyte$$$_S_$$$ ($Snap) Slice<Ref>)
(declare-fun sliceDefault_Intbyte$$$_S_$$$%limited ($Snap) Slice<Ref>)
(declare-const sliceDefault_Intbyte$$$_S_$$$%stateless Bool)
(declare-fun sliceDefault_Intbyte$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun getNumHops_daeaf66a_PMBase ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumHops_daeaf66a_PMBase%limited ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumHops_daeaf66a_PMBase%stateless (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun getNumHops_daeaf66a_PMBase%precondition ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun HasOneHopPath_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun HasOneHopPath_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun HasOneHopPath_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun HasOneHopPath_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun ssliceFromArray_Ref ($Snap ShArray<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromArray_Ref%limited ($Snap ShArray<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromArray_Ref%stateless (ShArray<Ref> Int Int) Bool)
(declare-fun ssliceFromArray_Ref%precondition ($Snap ShArray<Ref> Int Int) Bool)
(declare-fun AddrHdrLen_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Int)
(declare-fun AddrHdrLen_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Int)
(declare-fun AddrHdrLen_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Bool)
(declare-fun AddrHdrLen_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun dynamic_pred_0%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun Mem_daeaf66a_PMBase%trigger ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun HeaderMem_840d9458_PMSCION%trigger ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun AbsSlice_Bytes_e630ae22_F%trigger ($Snap Slice<Ref> Int Int) Bool)
(declare-fun PathPoolMemExceptOne_840d9458_F%trigger ($Snap Slice<Ref> Tuple2<Ref~_Types> Int) Bool)
(declare-fun dynamic_pred_6%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun dynamic_pred_0_unknown%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun ChecksumMem_840d9458_PMSCION%trigger ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun Mem_840d9458_PMHopByHopOption%trigger ($Snap ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Int) Bool)
(declare-fun Mem_a6ceb89d_PMHopField%trigger ($Snap ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Bool)
(declare-fun Mem_840d9458_PMEndToEndOption%trigger ($Snap ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Int) Bool)
(declare-fun PathPoolMem_840d9458_F%trigger ($Snap Slice<Ref> Tuple2<Ref~_Types>) Bool)
(declare-fun ErrorMem_a4af0e5e_SY$c04328b0_a4af0e5e_%trigger ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun dynamic_pred_6_unknown%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun dynamic_pred_2%trigger ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Mem_b41831d7_SY$3e1378f2_b41831d7_%trigger ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Mem_840d9458_PMextnBase%trigger ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Mem_840d9458_PMBaseLayer%trigger ($Snap ShStruct2<Ref~_Ref> Slice<Ref> Int) Bool)
(declare-fun MemWithoutUBuf_b41831d7_SY$3e1378f2_b41831d7_%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct SCION_840d9458_T_Types_tag<Int> stringLit456e6432456e64<Int> LayerType_b41831d7_T_Types_tag<Int> stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int> stringLit496e76616c6964457874656e73696f6e486561646572<Int> HostIPv4_cd675838_T_Types_tag<Int> stringLit256428256429<Int> Y$8f734176_14a7fb6d__Types_tag<Int> stringLit756470<Int> stringLit6d696e<Int> stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int> Y$558431e4_a6ceb89d__Types_tag<Int> nilDecodeFeedback_b41831d7_T_Types_tag<Int> stringLit6c656e<Int> stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> stringLit6d696e696d756d<Int> integer_Types_tag<Int> Y$60c7bddc_b41831d7__Types_tag<Int> stringLit4f63746f626572<Int> stringLit4e6f6e65<Int> AddrType_840d9458_T_Types_tag<Int> stringLit4a756c79<Int> Y$febd64e7_b41831d7__Types_tag<Int> stringLit62696e6172792e426967456e6469616e<Int> stringLit5468757273646179<Int> stringLit45787465726e616c496e74657266616365446f776e<Int> stringLit5343494f4e20686561646572206d697373696e67<Int> Y$9c78df5f_b41831d7__Types_tag<Int> stringLit4d6179<Int> stringLit62756666657220746f6f2073686f7274<Int> stringLit54756573646179<Int> stringLit556e6b6e6f776e5061746854797065<Int> stringLit436d644864724c656e<Int> stringLit506172616d6574657250726f626c656d<Int> Y$6914870a_b41831d7__Types_tag<Int> HostNone_cd675838_T_Types_tag<Int> stringLit5061636b6574546f6f426967<Int> SCMPEcho_840d9458_T_Types_tag<Int> stringLit6970<Int> stringLit756e737570706f727465642061646472657373<Int> Y$68d3cee9_b41831d7__Types_tag<Int> stringLit5472616365726f75746552657175657374<Int> stringLit74797065<Int> stringLit6d6178<Int> stringLit486f704279486f70<Int> byte_Types_tag<Int> Y$35202e5_cd675838__Types_tag<Int> stringLit556e6b6e6f776e4e65787448647254797065<Int> int_Types_tag<Int> stringLit6578706563746564<Int> stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int> SCMPPacketTooBig_840d9458_T_Types_tag<Int> Y$53a71dc3_5c610647__Types_tag<Int> bigEndian_72f0d887_T_Types_tag<Int> stringLit424644<Int> HopByHopExtnSkipper_840d9458_T_Types_tag<Int> stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int> stringLit4d6f6e646179<Int> Y$3191b69e_b41831d7__Types_tag<Int> Path_c6e60a1d_T_Types_tag<Int> littleEndian_72f0d887_T_Types_tag<Int> stringLit53657074656d626572<Int> stringLit556e6b6e6f776e41646472657373466f726d6174<Int> stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int> stringLit544350<Int> stringLit736f757263652061646472657373206d697373696e67<Int> stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int> empty_interface_Types_tag<Int> stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int> stringLit4f7074696f6e206e6f7420666f756e64<Int> stringLit6864724279746573<Int> Path_4cddb96f_T_Types_tag<Int> stringLit4665627275617279<Int> Y$c2e55be_72f0d887__Types_tag<Int> stringLit496e76616c696444657374696e6174696f6e41646472657373<Int> stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int> stringLit4e6f76656d626572<Int> stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int> SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int> stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int> Payload_b41831d7_T_Types_tag<Int> stringLit4e6f6e4c6f63616c44656c6976657279<Int> stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int> UDPAddr_5c610647_T_Types_tag<Int> stringLit44657374696e6174696f6e556e726561636861626c65<Int> stringLit62696e6172792e4c6974746c65456e6469616e<Int> stringLit417567757374<Int> stringLit4c6974746c65456e6469616e<Int> slice_Types_tag<Int> stringLit5361747572646179<Int> stringLit4a616e75617279<Int> stringLit467269646179<Int> stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int> SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int> IA_cd675838_T_Types_tag<Int> SCMPTraceroute_840d9458_T_Types_tag<Int> string_Types_tag<Int> stringLit6d696e696e756d5f6c65677468<Int> stringLit496e76616c696450617468<Int> stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int> stringLit61646472<Int> stringLit496e76616c6964536f7572636541646472657373<Int> nil_Types_tag<Int> stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int> stringLit<Int> stringLit4563686f5265706c79<Int> Y$b28ae4_ac87dd1d__Types_tag<Int> stringLit5765646e6573646179<Int> Raw_daeaf66a_T_Types_tag<Int> AS_cd675838_T_Types_tag<Int> stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int> pointer_Types_tag<Int> stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int> EndToEndExtn_840d9458_T_Types_tag<Int> stringLit53756e646179<Int> Y$9127f611_b41831d7__Types_tag<Int> stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int> stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int> stringLit446563656d626572<Int> stringLit5061746845787069726564<Int> stringLit61637475616c<Int> stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int> SCMPTypeCode_840d9458_T_Types_tag<Int> stringLit4563686f52657175657374<Int> IPAddr_5c610647_T_Types_tag<Int> stringLit496e76616c6964486f704669656c644d4143<Int> SCMPDestinationUnreachable_840d9458_T_Types_tag<Int> stringLit426967456e6469616e<Int> stringLit554e4b4e4f574e2028256429<Int> L4ProtocolType_840d9458_T_Types_tag<Int> Y$17800ab4_b41831d7__Types_tag<Int> stringLit4a756e65<Int> EndToEndExtnSkipper_840d9458_T_Types_tag<Int> SCMPCode_840d9458_T_Types_tag<Int> Decoded_daeaf66a_T_Types_tag<Int> Y$49c4c25f_d3743b4f__Types_tag<Int> HostIPv6_cd675838_T_Types_tag<Int> SCMP_840d9458_T_Types_tag<Int> uint16_Types_tag<Int> stringLit5472616365726f7574655265706c79<Int> stringLit496e76616c696441646472657373486561646572<Int> SCMPType_840d9458_T_Types_tag<Int> stringLit496e76616c69645365676d656e744368616e6765<Int> Path_c385169_T_Types_tag<Int> stringLit554450<Int> stringLit257328257329<Int> stringLit417072696c<Int> stringLit4572726f6e656f75734865616465724669656c64<Int> HopByHopExtn_840d9458_T_Types_tag<Int> BFD_6416454f_T_Types_tag<Int> stringLit496e76616c6964436f6d6d6f6e486561646572<Int> rawPath_a6ceb89d_T_Types_tag<Int> stringLit496e76616c69645061636b657453697a65<Int> stringLit4d61726368<Int> stringLit2573282564295c6e5061796c6f61643a202573<Int> stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int> stringLit466c6f7749445265717569726564<Int> SCMPParameterProblem_840d9458_T_Types_tag<Int> stringLit53434d50<Int> HostSVC_cd675838_T_Types_tag<Int> stringLit616464724864724c656e<Int> stringLit257328436f64653a20256429<Int>))
; ////////// Axioms
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Tuple2<Ref~_Types>>)) 0))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
      (not (= s2 (as Seq_empty  Seq<Tuple2<Ref~_Types>>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_over_append|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (= (Seq_append (as Seq_empty  Seq<Tuple2<Ref~_Types>>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Tuple2<Ref~_Types>>) s))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Tuple2<Ref~_Types>>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>) (i Int)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
      (not (= s2 (as Seq_empty  Seq<Tuple2<Ref~_Types>>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (j Int)) (!
  (ite
    (=> (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (not (Seq_contains (as Seq_empty  Seq<Tuple2<Ref~_Types>>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Tuple2<Ref~_Types>>) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (=>
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>)) (!
  (=> (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (=> (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_over_build|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.card_non_negative|)))
(assert (forall ((e Slice<Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :qid |$Set[Slice[Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Slice<Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (not
    (Set_in e (as Set_empty  Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (e2 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e1 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (e2 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e1 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (e2 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Tuple2[Ref, Types]]_prog.card_non_negative|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (not (Set_in e (as Set_empty  Set<Tuple2<Ref~_Types>>)))
  :pattern ((Set_in e (as Set_empty  Set<Tuple2<Ref~_Types>>)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_empty_set|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Tuple2<Ref~_Types>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Tuple2<Ref~_Types>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Tuple2[Ref, Types]]_prog.empty_set_cardinality|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_singleton_set|)))
(assert (forall ((e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_difference|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.native_equality|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (not
    (Set_in e (as Set_empty  Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (e2 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e1 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (e2 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e1 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (e2 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.card_non_negative|)))
(assert (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (not
    (Set_in e (as Set_empty  Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (e2 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e1 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (e2 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e1 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (e2 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (not
    (Set_in e (as Set_empty  Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (e2 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e1 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (e2 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e1 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (e2 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.card_non_negative|)))
(assert (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (not (Set_in e (as Set_empty  Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (= s (as Set_empty  Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (e2 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e1 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (e2 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e1 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (e2 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((l ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (= (strLen<Int> (as stringLit5061746845787069726564<Int>  Int)) 11))
(assert (= (strLen<Int> (as stringLit74797065<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit6578706563746564<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit756470<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit436d644864724c656e<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit62696e6172792e426967456e6469616e<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit496e76616c696441646472657373486561646572<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit257328436f64653a20256429<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit4563686f52657175657374<Int>  Int)) 11))
(assert (=
  (strLen<Int> (as stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int>  Int))
  34))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964457874656e73696f6e486561646572<Int>  Int))
  22))
(assert (=
  (strLen<Int> (as stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int>  Int))
  29))
(assert (= (strLen<Int> (as stringLit4d61726368<Int>  Int)) 5))
(assert (= (strLen<Int> (as stringLit467269646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int>  Int))
  47))
(assert (= (strLen<Int> (as stringLit61637475616c<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit62696e6172792e4c6974746c65456e6469616e<Int>  Int))
  19))
(assert (=
  (strLen<Int> (as stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int>  Int))
  28))
(assert (= (strLen<Int> (as stringLit554450<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit426967456e6469616e<Int>  Int)) 9))
(assert (=
  (strLen<Int> (as stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int>  Int))
  32))
(assert (=
  (strLen<Int> (as stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int>  Int))
  47))
(assert (=
  (strLen<Int> (as stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int>  Int))
  38))
(assert (= (strLen<Int> (as stringLit4a616e75617279<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit4d6179<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit756e737570706f727465642061646472657373<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit4f63746f626572<Int>  Int)) 7))
(assert (=
  (strLen<Int> (as stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int>  Int))
  39))
(assert (=
  (strLen<Int> (as stringLit44657374696e6174696f6e556e726561636861626c65<Int>  Int))
  22))
(assert (=
  (strLen<Int> (as stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int>  Int))
  24))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int>  Int))
  30))
(assert (= (strLen<Int> (as stringLit466c6f7749445265717569726564<Int>  Int)) 14))
(assert (= (strLen<Int> (as stringLit4a756c79<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit424644<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit486f704279486f70<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int>  Int))
  51))
(assert (= (strLen<Int> (as stringLit53434d50<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit556e6b6e6f776e5061746854797065<Int>  Int)) 15))
(assert (= (strLen<Int> (as stringLit456e6432456e64<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit5361747572646179<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964436f6d6d6f6e486561646572<Int>  Int))
  19))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit446563656d626572<Int>  Int)) 8))
(assert (forall ((l Int) (r Int)) (!
  (= (strLen<Int> (strConcat<Int> l r)) (+ (strLen<Int> l) (strLen<Int> r)))
  :pattern ((strLen<Int> (strConcat<Int> l r)))
  )))
(assert (= (strLen<Int> (as stringLit5468757273646179<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit6970<Int>  Int)) 2))
(assert (= (strLen<Int> (as stringLit62756666657220746f6f2073686f7274<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit554e4b4e4f574e2028256429<Int>  Int)) 12))
(assert (=
  (strLen<Int> (as stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int>  Int))
  34))
(assert (= (strLen<Int> (as stringLit5472616365726f7574655265706c79<Int>  Int)) 15))
(assert (=
  (strLen<Int> (as stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int>  Int))
  27))
(assert (= (strLen<Int> (as stringLit256428256429<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int>  Int))
  47))
(assert (=
  (strLen<Int> (as stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int>  Int))
  52))
(assert (= (strLen<Int> (as stringLit53657074656d626572<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit4563686f5265706c79<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit5061636b6574546f6f426967<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit496e76616c696450617468<Int>  Int)) 11))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int>  Int))
  31))
(assert (=
  (strLen<Int> (as stringLit2573282564295c6e5061796c6f61643a202573<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit257328257329<Int>  Int)) 6))
(assert (= (strLen<Int> (as stringLit4665627275617279<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit417072696c<Int>  Int)) 5))
(assert (=
  (strLen<Int> (as stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int>  Int))
  26))
(assert (= (strLen<Int> (as stringLit4f7074696f6e206e6f7420666f756e64<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int>  Int))
  55))
(assert (= (strLen<Int> (as stringLit53756e646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit45787465726e616c496e74657266616365446f776e<Int>  Int))
  21))
(assert (= (strLen<Int> (as stringLit4e6f76656d626572<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e41646472657373466f726d6174<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit54756573646179<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit4d6f6e646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int>  Int))
  21))
(assert (=
  (strLen<Int> (as stringLit496e76616c696444657374696e6174696f6e41646472657373<Int>  Int))
  25))
(assert (= (strLen<Int> (as stringLit6d696e<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit6d6178<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit4e6f6e4c6f63616c44656c6976657279<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit5472616365726f75746552657175657374<Int>  Int)) 17))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964536f7572636541646472657373<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit<Int>  Int)) 0))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int>  Int))
  21))
(assert (= (strLen<Int> (as stringLit616464724864724c656e<Int>  Int)) 10))
(assert (=
  (strLen<Int> (as stringLit4572726f6e656f75734865616465724669656c64<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit4a756e65<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit417567757374<Int>  Int)) 6))
(assert (= (strLen<Int> (as stringLit61646472<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit4c6974746c65456e6469616e<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit4e6f6e65<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit6d696e696d756d<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit496e76616c69645061636b657453697a65<Int>  Int)) 17))
(assert (=
  (strLen<Int> (as stringLit736f757263652061646472657373206d697373696e67<Int>  Int))
  22))
(assert (= (strLen<Int> (as stringLit6c656e<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int>  Int))
  43))
(assert (forall ((str Int)) (!
  (<= 0 (strLen<Int> str))
  :pattern ((strLen<Int> str))
  )))
(assert (=
  (strLen<Int> (as stringLit5343494f4e20686561646572206d697373696e67<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit496e76616c6964486f704669656c644d4143<Int>  Int)) 18))
(assert (= (strLen<Int> (as stringLit556e6b6e6f776e4e65787448647254797065<Int>  Int)) 18))
(assert (= (strLen<Int> (as stringLit5765646e6573646179<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit544350<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit6d696e696e756d5f6c65677468<Int>  Int)) 13))
(assert (= (strLen<Int> (as stringLit506172616d6574657250726f626c656d<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit496e76616c69645365676d656e744368616e6765<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit6864724279746573<Int>  Int)) 8))
(assert (forall ((l ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) (r ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev3of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget3of6<Ref> x))
    x)
  :pattern ((ShStructget3of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev1of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget1of6<Ref> x))
    x)
  :pattern ((ShStructget1of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) (y ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of6<Ref> x) (ShStructget0of6<Ref> y))
      (and
        (= (ShStructget1of6<Ref> x) (ShStructget1of6<Ref> y))
        (and
          (= (ShStructget2of6<Ref> x) (ShStructget2of6<Ref> y))
          (and
            (= (ShStructget3of6<Ref> x) (ShStructget3of6<Ref> y))
            (and
              (= (ShStructget4of6<Ref> x) (ShStructget4of6<Ref> y))
              (=
                (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x)
                (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> y))))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev0of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget0of6<Ref> x))
    x)
  :pattern ((ShStructget0of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev2of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget2of6<Ref> x))
    x)
  :pattern ((ShStructget2of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev5of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x))
    x)
  :pattern ((ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev4of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget4of6<Ref> x))
    x)
  :pattern ((ShStructget4of6<Ref> x))
  )))
(assert (forall ((l ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (r ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget1of4<Ref> x))
    x)
  :pattern ((ShStructget1of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget3of4<Ref> x))
    x)
  :pattern ((ShStructget3of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget0of4<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of4<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (y ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of4<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of4<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of4<Ref> x) (ShStructget1of4<Ref> y))
        (and
          (= (ShStructget2of4<Ref> x) (ShStructget2of4<Ref> y))
          (= (ShStructget3of4<Ref> x) (ShStructget3of4<Ref> y))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget2of4<Ref> x))
    x)
  :pattern ((ShStructget2of4<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (=
        (ShArrayfirst<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> a i))
        a)
      (= (ShArraysecond<Int> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> a i)) i)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> a i))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (r ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((y Tuple2<Ref~_Types>)) (!
  (=>
    (= (get1of2<Types> y) (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
    (= (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> y))) (get0of2<Ref> y)))
  :pattern ((unbox_Poly<Tuple0> (get0of2<Ref> y)))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> y))
  )))
(assert (forall ((y Tuple2<Ref~_Types>)) (!
  (=>
    (= (get1of2<Types> y) (as Path_4cddb96f_T_Types<Types>  Types))
    (= (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> y))) (get0of2<Ref> y)))
  :pattern ((unbox_Poly<Tuple0> (get0of2<Ref> y)))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct0> y)) y)
  :pattern ((unbox_Poly<ShStruct0> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<Int> y)) y)
  :pattern ((unbox_Poly<Int> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> y))
    y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> y)) y)
  :pattern ((unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> y))
    y)
  :pattern ((unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct2<Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<Slice<Ref>> y)) y)
  :pattern ((unbox_Poly<Slice<Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of2<ShStruct2<Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x Tuple0)) (!
  (= (unbox_Poly<Tuple0> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x Slice<Ref>)) (!
  (= (unbox_Poly<Slice<Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct4<Ref~_Ref~_Ref~_Ref>) (r ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct2<Ref~_Ref>) (r ShStruct2<Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((t0 $Ref) (t1 Types)) (!
  (and
    (= (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> t0 t1)) t0)
    (= (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> t0 t1)) t1))
  :pattern ((tuple2<Tuple2<Ref~_Types>> t0 t1))
  :qid |prog.getter_over_tuple2|)))
(assert (forall ((p Tuple2<Ref~_Types>)) (!
  (= (tuple2<Tuple2<Ref~_Types>> (get0of2<Ref> p) (get1of2<Types> p)) p)
  :pattern ((get0of2<Ref> p))
  :pattern ((get1of2<Types> p))
  :qid |prog.tuple2_over_getter|)))
(assert (forall ((l ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) (r ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct1<ShStruct2<Ref~_Ref>>) (r ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev1of2<ShStruct2<Ref~_Ref>> (ShStructget1of2<Ref> x)) x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>) (y ShStruct2<Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of2<Ref> x) (ShStructget0of2<Ref> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev0of2<ShStruct2<Ref~_Ref>> (ShStructget0of2<Ref> x)) x)
  :pattern ((ShStructget0of2<Ref> x))
  )))
(assert (forall ((l ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) (r ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct0) (r ShStruct0)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) (y ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x)
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (sarray<ShArray<Ref>> (smake<Slice<Ref>> a o l c)) a))
  :pattern ((sarray<ShArray<Ref>> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<Ref>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<Ref>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<Ref>> s)))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (slen<Int> (smake<Slice<Ref>> a o l c)) l))
  :pattern ((slen<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (soffset<Int> (smake<Slice<Ref>> a o l c)) o))
  :pattern ((soffset<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (scap<Int> (smake<Slice<Ref>> a o l c)) c))
  :pattern ((scap<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<Ref>)) (!
  (=
    s
    (smake<Slice<Ref>> (sarray<ShArray<Ref>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<Ref>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((t0 Bool) (t1 Bool)) (!
  (and
    (= (get0of2<Bool> (tuple2<Tuple2<Bool~_Bool>> t0 t1)) t0)
    (= (get1of2<Bool> (tuple2<Tuple2<Bool~_Bool>> t0 t1)) t1))
  :pattern ((tuple2<Tuple2<Bool~_Bool>> t0 t1))
  :qid |prog.getter_over_tuple2|)))
(assert (forall ((p Tuple2<Bool~_Bool>)) (!
  (= (tuple2<Tuple2<Bool~_Bool>> (get0of2<Bool> p) (get1of2<Bool> p)) p)
  :pattern ((get0of2<Bool> p))
  :pattern ((get1of2<Bool> p))
  :qid |prog.tuple2_over_getter|)))
(assert (forall ((l ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (r ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev4of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> x))
    x)
  :pattern ((ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev1of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget1of5<Ref> x))
    x)
  :pattern ((ShStructget1of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (y ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of5<Ref> x) (ShStructget0of5<Ref> y))
      (and
        (= (ShStructget1of5<Ref> x) (ShStructget1of5<Ref> y))
        (and
          (= (ShStructget2of5<Ref> x) (ShStructget2of5<Ref> y))
          (and
            (= (ShStructget3of5<Ref> x) (ShStructget3of5<Ref> y))
            (=
              (ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> x)
              (ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> y)))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev3of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget3of5<Ref> x))
    x)
  :pattern ((ShStructget3of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev2of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget2of5<Ref> x))
    x)
  :pattern ((ShStructget2of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev0of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget0of5<Ref> x))
    x)
  :pattern ((ShStructget0of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev4of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget4of5<Ref> x))
    x)
  :pattern ((ShStructget4of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget1of5<Ref> x))
    x)
  :pattern ((ShStructget1of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) (y ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of5<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of5<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of5<Ref> x) (ShStructget1of5<Ref> y))
        (and
          (= (ShStructget2of5<Ref> x) (ShStructget2of5<Ref> y))
          (and
            (= (ShStructget3of5<Ref> x) (ShStructget3of5<Ref> y))
            (= (ShStructget4of5<Ref> x) (ShStructget4of5<Ref> y)))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget3of5<Ref> x))
    x)
  :pattern ((ShStructget3of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget2of5<Ref> x))
    x)
  :pattern ((ShStructget2of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget0of5<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of5<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((a ShArray<Ref>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (= (ShArrayfirst<ShArray<Ref>> (ShArrayloc<Ref> a i)) a)
      (= (ShArraysecond<Int> (ShArrayloc<Ref> a i)) i)))
  :pattern ((ShArrayloc<Ref> a i))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) (y ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (=
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x)
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev1of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget0of3<Ref> x))
    x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev2of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x))
    x)
  :pattern ((ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x))
  )))
(assert (forall ((x0 Types)) (!
  (= (get_0_pointer_Types<Types> (pointer_Types<Types> x0)) x0)
  :pattern ((pointer_Types<Types> x0))
  )))
(assert (=
  (tag_Types<Int> (as rawPath_a6ceb89d_T_Types<Types>  Types))
  (as rawPath_a6ceb89d_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCION_840d9458_T_Types<Types>  Types))
  (as SCION_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as HostSVC_cd675838_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as HostSVC_cd675838_T_Types<Types>  Types))
  (as HostSVC_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$c2e55be_72f0d887__Types<Types>  Types))
  (as Y$c2e55be_72f0d887__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$3191b69e_b41831d7__Types<Types>  Types))
  (as Y$3191b69e_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as IA_cd675838_T_Types<Types>  Types))
  (as IA_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$49c4c25f_d3743b4f__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Y$35202e5_cd675838__Types<Types>  Types))
  (as Y$35202e5_cd675838__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$b28ae4_ac87dd1d__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Path_c6e60a1d_T_Types<Types>  Types))
  (as Path_c6e60a1d_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$c2e55be_72f0d887__Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as rawPath_a6ceb89d_T_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as Path_c385169_T_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as Decoded_daeaf66a_T_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as nil_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as SCMP_840d9458_T_Types<Types>  Types))
  (as SCMP_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))
  (as SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$53a71dc3_5c610647__Types<Types>  Types))
  (as Y$53a71dc3_5c610647__Types_tag<Int>  Int)))
(assert (= (tag_Types<Int> (as byte_Types<Types>  Types)) (as byte_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Path_c6e60a1d_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as string_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as littleEndian_72f0d887_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as LayerType_b41831d7_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as HopByHopExtn_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$68d3cee9_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Raw_daeaf66a_T_Types<Types>  Types))
  (as Raw_daeaf66a_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$9127f611_b41831d7__Types<Types>  Types))
  (as Y$9127f611_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as AS_cd675838_T_Types<Types>  Types))
  (as AS_cd675838_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as int_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$68d3cee9_b41831d7__Types<Types>  Types))
  (as Y$68d3cee9_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
  (as nilDecodeFeedback_b41831d7_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as EndToEndExtn_840d9458_T_Types<Types>  Types))
  (as EndToEndExtn_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as IA_cd675838_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as Y$6914870a_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$3191b69e_b41831d7__Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as byte_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))
  (as SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$b28ae4_ac87dd1d__Types<Types>  Types))
  (as Y$b28ae4_ac87dd1d__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as IPAddr_5c610647_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as HostIPv6_cd675838_T_Types<Types>  Types))
  (as HostIPv6_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HopByHopExtn_840d9458_T_Types<Types>  Types))
  (as HopByHopExtn_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPCode_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as AddrType_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as UDPAddr_5c610647_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))
  (as SCMPPacketTooBig_840d9458_T_Types_tag<Int>  Int)))
(assert (forall ((p0 Types)) (!
  (= (tag_Types<Int> (pointer_Types<Types> p0)) (as pointer_Types_tag<Int>  Int))
  :pattern ((pointer_Types<Types> p0))
  )))
(assert (=
  (tag_Types<Int> (as SCMPCode_840d9458_T_Types<Types>  Types))
  (as SCMPCode_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as integer_Types<Types>  Types))
  (as integer_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Raw_daeaf66a_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as Y$9c78df5f_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as LayerType_b41831d7_T_Types<Types>  Types))
  (as LayerType_b41831d7_T_Types_tag<Int>  Int)))
(assert (forall ((a Types)) (!
  (behavioral_subtype_Types<Bool> a a)
  :pattern ((behavioral_subtype_Types<Bool> a a))
  )))
(assert (=
  (comparableType_Types<Bool> (as SCMPType_840d9458_T_Types<Types>  Types))
  true))
(assert (forall ((a Types) (b Types) (c Types)) (!
  (=>
    (and
      (behavioral_subtype_Types<Bool> a b)
      (behavioral_subtype_Types<Bool> b c))
    (behavioral_subtype_Types<Bool> a c))
  :pattern ((behavioral_subtype_Types<Bool> a b) (behavioral_subtype_Types<Bool> b c))
  )))
(assert (=
  (tag_Types<Int> (as Y$febd64e7_b41831d7__Types<Types>  Types))
  (as Y$febd64e7_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HostNone_cd675838_T_Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as HostIPv6_cd675838_T_Types<Types>  Types))
  false))
(assert (forall ((p0 Types)) (!
  (= (comparableType_Types<Bool> (slice_Types<Types> p0)) false)
  :pattern ((comparableType_Types<Bool> (slice_Types<Types> p0)))
  )))
(assert (=
  (tag_Types<Int> (as Path_c385169_T_Types<Types>  Types))
  (as Path_c385169_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$febd64e7_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$8f734176_14a7fb6d__Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as uint16_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as HostNone_cd675838_T_Types<Types>  Types))
  (as HostNone_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as UDPAddr_5c610647_T_Types<Types>  Types))
  (as UDPAddr_5c610647_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Payload_b41831d7_T_Types<Types>  Types))
  (as Payload_b41831d7_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as EndToEndExtn_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as SCMPType_840d9458_T_Types<Types>  Types))
  (as SCMPType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))
  (as EndToEndExtnSkipper_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as AS_cd675838_T_Types<Types>  Types)) true))
(assert (forall ((p0 Types)) (!
  (= (comparableType_Types<Bool> (pointer_Types<Types> p0)) true)
  :pattern ((comparableType_Types<Bool> (pointer_Types<Types> p0)))
  )))
(assert (=
  (comparableType_Types<Bool> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as HostIPv4_cd675838_T_Types<Types>  Types))
  (as HostIPv4_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))
  (as HopByHopExtnSkipper_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$6914870a_b41831d7__Types<Types>  Types))
  (as Y$6914870a_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as L4ProtocolType_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$558431e4_a6ceb89d__Types<Types>  Types))
  false))
(assert (= (tag_Types<Int> (as nil_Types<Types>  Types)) (as nil_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as string_Types<Types>  Types))
  (as string_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Decoded_daeaf66a_T_Types<Types>  Types))
  (as Decoded_daeaf66a_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as bigEndian_72f0d887_T_Types<Types>  Types))
  (as bigEndian_72f0d887_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as L4ProtocolType_840d9458_T_Types<Types>  Types))
  (as L4ProtocolType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$49c4c25f_d3743b4f__Types<Types>  Types))
  (as Y$49c4c25f_d3743b4f__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$9127f611_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as HostIPv4_cd675838_T_Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$17800ab4_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPTypeCode_840d9458_T_Types<Types>  Types))
  (as SCMPTypeCode_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))
  (as SCMPDestinationUnreachable_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$17800ab4_b41831d7__Types<Types>  Types))
  (as Y$17800ab4_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$558431e4_a6ceb89d__Types<Types>  Types))
  (as Y$558431e4_a6ceb89d__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as BFD_6416454f_T_Types<Types>  Types))
  (as BFD_6416454f_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$60c7bddc_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as uint16_Types<Types>  Types))
  (as uint16_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as BFD_6416454f_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as SCMPEcho_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as SCION_840d9458_T_Types<Types>  Types)) true))
(assert (= (tag_Types<Int> (as int_Types<Types>  Types)) (as int_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPTypeCode_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as Path_4cddb96f_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))
  true))
(assert (forall ((a Types)) (!
  (behavioral_subtype_Types<Bool> a (as empty_interface_Types<Types>  Types))
  :pattern ((behavioral_subtype_Types<Bool> a (as empty_interface_Types<Types>  Types)))
  )))
(assert (forall ((p0 Types)) (!
  (= (tag_Types<Int> (slice_Types<Types> p0)) (as slice_Types_tag<Int>  Int))
  :pattern ((slice_Types<Types> p0))
  )))
(assert (= (comparableType_Types<Bool> (as SCMP_840d9458_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as Y$53a71dc3_5c610647__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as AddrType_840d9458_T_Types<Types>  Types))
  (as AddrType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))
  (as SCMPParameterProblem_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as littleEndian_72f0d887_T_Types<Types>  Types))
  (as littleEndian_72f0d887_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as bigEndian_72f0d887_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as empty_interface_Types<Types>  Types))
  (as empty_interface_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as IPAddr_5c610647_T_Types<Types>  Types))
  (as IPAddr_5c610647_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$35202e5_cd675838__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))
  (as SCMPTraceroute_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$60c7bddc_b41831d7__Types<Types>  Types))
  (as Y$60c7bddc_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$9c78df5f_b41831d7__Types<Types>  Types))
  (as Y$9c78df5f_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as integer_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$8f734176_14a7fb6d__Types<Types>  Types))
  (as Y$8f734176_14a7fb6d__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Path_4cddb96f_T_Types<Types>  Types))
  (as Path_4cddb96f_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as empty_interface_Types<Types>  Types)) false))
(assert (=
  (comparableType_Types<Bool> (as Payload_b41831d7_T_Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPEcho_840d9458_T_Types<Types>  Types))
  (as SCMPEcho_840d9458_T_Types_tag<Int>  Int)))
(assert (forall ((i Tuple2<Ref~_Types>)) (!
  (=>
    (comparableType_Types<Bool> (get1of2<Types> i))
    (comparableInterface<Bool> i))
  :pattern ((comparableInterface<Bool> i))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct2<Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) (r ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (r ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (y ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)
        (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct0) (y ShStruct0)) (!
  (= (eq<Bool> x y) true)
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (= (unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) (r ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (= (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (=
        (ShArrayfirst<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> a i))
        a)
      (=
        (ShArraysecond<Int> (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> a i))
        i)))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> a i))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (y ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)
        (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> y))
      (and
        (=
          (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)
          (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> y))
        (=
          (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)
          (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
  )))
(assert (forall ((l ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct0)) (!
  (= (unbox_Poly<ShStruct0> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c))
      a))
  :pattern ((sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s)))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (slen<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)) l))
  :pattern ((slen<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (soffset<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)) o))
  :pattern ((soffset<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (scap<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)) c))
  :pattern ((scap<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    s
    (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev10of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget10of17<Ref> x))
    x)
  :pattern ((ShStructget10of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget1of17<Ref> x))
    x)
  :pattern ((ShStructget1of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget2of17<Ref> x))
    x)
  :pattern ((ShStructget2of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev16of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget16of17<Ref> x))
    x)
  :pattern ((ShStructget16of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev8of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget8of17<Ref> x))
    x)
  :pattern ((ShStructget8of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget3of17<Ref> x))
    x)
  :pattern ((ShStructget3of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev12of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget12of17<Ref> x))
    x)
  :pattern ((ShStructget12of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev7of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget7of17<Ref> x))
    x)
  :pattern ((ShStructget7of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev11of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget11of17<Ref> x))
    x)
  :pattern ((ShStructget11of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (y ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of17<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of17<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of17<Ref> x) (ShStructget1of17<Ref> y))
        (and
          (= (ShStructget2of17<Ref> x) (ShStructget2of17<Ref> y))
          (and
            (= (ShStructget3of17<Ref> x) (ShStructget3of17<Ref> y))
            (and
              (= (ShStructget4of17<Ref> x) (ShStructget4of17<Ref> y))
              (and
                (= (ShStructget5of17<Ref> x) (ShStructget5of17<Ref> y))
                (and
                  (= (ShStructget6of17<Ref> x) (ShStructget6of17<Ref> y))
                  (and
                    (= (ShStructget7of17<Ref> x) (ShStructget7of17<Ref> y))
                    (and
                      (= (ShStructget8of17<Ref> x) (ShStructget8of17<Ref> y))
                      (and
                        (= (ShStructget9of17<Ref> x) (ShStructget9of17<Ref> y))
                        (and
                          (=
                            (ShStructget10of17<Ref> x)
                            (ShStructget10of17<Ref> y))
                          (and
                            (=
                              (ShStructget11of17<Ref> x)
                              (ShStructget11of17<Ref> y))
                            (and
                              (=
                                (ShStructget12of17<Ref> x)
                                (ShStructget12of17<Ref> y))
                              (and
                                (=
                                  (ShStructget13of17<Ref> x)
                                  (ShStructget13of17<Ref> y))
                                (and
                                  (=
                                    (ShStructget14of17<Ref> x)
                                    (ShStructget14of17<Ref> y))
                                  (and
                                    (=
                                      (ShStructget15of17<Ref> x)
                                      (ShStructget15of17<Ref> y))
                                    (=
                                      (ShStructget16of17<Ref> x)
                                      (ShStructget16of17<Ref> y)))))))))))))))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev5of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget5of17<Ref> x))
    x)
  :pattern ((ShStructget5of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev4of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget4of17<Ref> x))
    x)
  :pattern ((ShStructget4of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev6of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget6of17<Ref> x))
    x)
  :pattern ((ShStructget6of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev15of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget15of17<Ref> x))
    x)
  :pattern ((ShStructget15of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev9of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget9of17<Ref> x))
    x)
  :pattern ((ShStructget9of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget0of17<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of17<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev14of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget14of17<Ref> x))
    x)
  :pattern ((ShStructget14of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev13of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget13of17<Ref> x))
    x)
  :pattern ((ShStructget13of17<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (ShStructrev0of1<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) (y ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (eq<Bool> x y)
    (=
      (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)
      (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) (y ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of3<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget0of3<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      a))
  :pattern ((sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s)))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (slen<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      l))
  :pattern ((slen<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (soffset<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      o))
  :pattern ((soffset<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (scap<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      c))
  :pattern ((scap<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    s
    (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
  )))
(assert (forall ((x Int)) (!
  (= (unbox_Poly<Int> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<Ref~_Ref~_Ref>) (r ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget1of4<Ref> x)) x)
  :pattern ((ShStructget1of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev3of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget3of4<Ref> x)) x)
  :pattern ((ShStructget3of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget0of4<Ref> x)) x)
  :pattern ((ShStructget0of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>) (y ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of4<Ref> x) (ShStructget0of4<Ref> y))
      (and
        (= (ShStructget1of4<Ref> x) (ShStructget1of4<Ref> y))
        (and
          (= (ShStructget2of4<Ref> x) (ShStructget2of4<Ref> y))
          (= (ShStructget3of4<Ref> x) (ShStructget3of4<Ref> y))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget2of4<Ref> x)) x)
  :pattern ((ShStructget2of4<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (=
    (ShStructrev0of1<ShStruct1<ShStruct2<Ref~_Ref>>> (ShStructget0of1<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of1<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>) (y ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (=
    (eq<Bool> x y)
    (=
      (ShStructget0of1<ShStruct2<Ref~_Ref>> x)
      (ShStructget0of1<ShStruct2<Ref~_Ref>> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)
        (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((l ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (r ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>) (y ShStruct3<Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget1of3<Ref> x)) x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget0of3<Ref> x)) x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget2of3<Ref> x)) x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) (r ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
; /field_value_functions_axioms.smt2 [PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(assert (forall ((vs $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ws $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
    (= ($FVF.loc_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(assert (forall ((vs $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<Ref>)) (!
    (= ($FVF.loc_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(assert (forall ((vs $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ws $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
    (= ($FVF.loc_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(assert (forall ((vs $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<Ref>)) (!
    (= ($FVF.loc_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intbyte$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intbyte$$$$_E_$$$>) (ws $FVF<Intbyte$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intbyte$$$$_E_$$$ vs) ($FVF.domain_Intbyte$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intbyte$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intbyte$$$$_E_$$$ vs x) ($FVF.lookup_Intbyte$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ vs x) ($FVF.lookup_Intbyte$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intbyte$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intbyte$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intbyte$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intbyte$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intbyte$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intbyte$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Bool$$$$_E_$$$: Bool]
(assert (forall ((vs $FVF<Bool$$$$_E_$$$>) (ws $FVF<Bool$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Bool$$$$_E_$$$ vs) ($FVF.domain_Bool$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Bool$$$$_E_$$$ vs))
            (= ($FVF.lookup_Bool$$$$_E_$$$ vs x) ($FVF.lookup_Bool$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Bool$$$$_E_$$$ vs x) ($FVF.lookup_Bool$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Bool$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Bool$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Bool$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Bool$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Bool)) (!
    (= ($FVF.loc_Bool$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Bool$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intuint16$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intuint16$$$$_E_$$$>) (ws $FVF<Intuint16$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intuint16$$$$_E_$$$ vs) ($FVF.domain_Intuint16$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intuint16$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intuint16$$$$_E_$$$ vs x) ($FVF.lookup_Intuint16$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intuint16$$$$_E_$$$ vs x) ($FVF.lookup_Intuint16$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intuint16$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intuint16$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intuint16$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intuint16$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intuint16$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intuint16$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intuint32$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intuint32$$$$_E_$$$>) (ws $FVF<Intuint32$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intuint32$$$$_E_$$$ vs) ($FVF.domain_Intuint32$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intuint32$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intuint32$$$$_E_$$$ vs x) ($FVF.lookup_Intuint32$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intuint32$$$$_E_$$$ vs x) ($FVF.lookup_Intuint32$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intuint32$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intuint32$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intuint32$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intuint32$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intuint32$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intuint32$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$: Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]
(assert (forall ((vs $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= ($FVF.loc_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Interfaceempty_interface$$$$_E_$$$: Tuple2[Ref, Types]]
(assert (forall ((vs $FVF<Interfaceempty_interface$$$$_E_$$$>) (ws $FVF<Interfaceempty_interface$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ vs) ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ vs))
            (= ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ vs x) ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ vs x) ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Interfaceempty_interface$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Interfaceempty_interface$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Interfaceempty_interface$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Tuple2<Ref~_Types>)) (!
    (= ($FVF.loc_Interfaceempty_interface$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Interfaceempty_interface$$$$_E_$$$ f r)))))
; /predicate_snap_functions_axioms.smt2 [Mem_840d9458_PMEndToEndOption: Snap]
(assert (forall ((vs $PSF<Mem_840d9458_PMEndToEndOption>) (ws $PSF<Mem_840d9458_PMEndToEndOption>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Mem_840d9458_PMEndToEndOption vs) ($PSF.domain_Mem_840d9458_PMEndToEndOption ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Mem_840d9458_PMEndToEndOption vs))
            (= ($PSF.lookup_Mem_840d9458_PMEndToEndOption vs x) ($PSF.lookup_Mem_840d9458_PMEndToEndOption ws x)))
          :pattern (($PSF.lookup_Mem_840d9458_PMEndToEndOption vs x) ($PSF.lookup_Mem_840d9458_PMEndToEndOption ws x))
          :qid |qp.$PSF<Mem_840d9458_PMEndToEndOption>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap vs)
              ($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap ws)
              )
    :qid |qp.$PSF<Mem_840d9458_PMEndToEndOption>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Mem_840d9458_PMEndToEndOption pm s))
    :pattern (($PSF.perm_Mem_840d9458_PMEndToEndOption pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Mem_840d9458_PMEndToEndOption f s) true)
    :pattern (($PSF.loc_Mem_840d9458_PMEndToEndOption f s)))))
; /predicate_snap_functions_axioms.smt2 [Mem_840d9458_PMHopByHopOption: Snap]
(assert (forall ((vs $PSF<Mem_840d9458_PMHopByHopOption>) (ws $PSF<Mem_840d9458_PMHopByHopOption>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Mem_840d9458_PMHopByHopOption vs) ($PSF.domain_Mem_840d9458_PMHopByHopOption ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Mem_840d9458_PMHopByHopOption vs))
            (= ($PSF.lookup_Mem_840d9458_PMHopByHopOption vs x) ($PSF.lookup_Mem_840d9458_PMHopByHopOption ws x)))
          :pattern (($PSF.lookup_Mem_840d9458_PMHopByHopOption vs x) ($PSF.lookup_Mem_840d9458_PMHopByHopOption ws x))
          :qid |qp.$PSF<Mem_840d9458_PMHopByHopOption>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap vs)
              ($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap ws)
              )
    :qid |qp.$PSF<Mem_840d9458_PMHopByHopOption>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Mem_840d9458_PMHopByHopOption pm s))
    :pattern (($PSF.perm_Mem_840d9458_PMHopByHopOption pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Mem_840d9458_PMHopByHopOption f s) true)
    :pattern (($PSF.loc_Mem_840d9458_PMHopByHopOption f s)))))
; /predicate_snap_functions_axioms.smt2 [Mem_a6ceb89d_PMHopField: Snap]
(assert (forall ((vs $PSF<Mem_a6ceb89d_PMHopField>) (ws $PSF<Mem_a6ceb89d_PMHopField>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Mem_a6ceb89d_PMHopField vs) ($PSF.domain_Mem_a6ceb89d_PMHopField ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Mem_a6ceb89d_PMHopField vs))
            (= ($PSF.lookup_Mem_a6ceb89d_PMHopField vs x) ($PSF.lookup_Mem_a6ceb89d_PMHopField ws x)))
          :pattern (($PSF.lookup_Mem_a6ceb89d_PMHopField vs x) ($PSF.lookup_Mem_a6ceb89d_PMHopField ws x))
          :qid |qp.$PSF<Mem_a6ceb89d_PMHopField>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap vs)
              ($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap ws)
              )
    :qid |qp.$PSF<Mem_a6ceb89d_PMHopField>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Mem_a6ceb89d_PMHopField pm s))
    :pattern (($PSF.perm_Mem_a6ceb89d_PMHopField pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Mem_a6ceb89d_PMHopField f s) true)
    :pattern (($PSF.loc_Mem_a6ceb89d_PMHopField f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ---------- FUNCTION arrayNil_3_Intuint8$$$_S_$$$----------
(declare-fun result@0@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(declare-const $t@158@00 $Snap)
(assert (= $t@158@00 ($Snap.combine ($Snap.first $t@158@00) ($Snap.second $t@158@00))))
(assert (= ($Snap.first $t@158@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(assert (= (ShArraylen<Int> result@0@00) 1))
(assert (= ($Snap.second $t@158@00) $Snap.unit))
; [eval] (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)
(declare-const idx@159@00 Int)
(push) ; 2
; [eval] (ShArrayloc(result, idx): Ref) == null
; [eval] (ShArrayloc(result, idx): Ref)
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((idx@159@00 Int)) (!
  (= (ShArrayloc<Ref> result@0@00 idx@159@00) $Ref.null)
  :pattern ((ShArrayloc<Ref> result@0@00 idx@159@00))
  :qid |prog.l2503|)))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_3_Intuint8$$$_S_$$$%limited s@$)
    (arrayNil_3_Intuint8$$$_S_$$$ s@$))
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$ s@$))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_3_Intuint8$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_3_Intuint8$$$_S_$$$%limited s@$))) (=>
    (arrayNil_3_Intuint8$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@0@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@0@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@0@00 idx))
        )))))
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-136|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_3_Intuint8$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-137|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_3_Intuint8$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-138|)))
; ---------- FUNCTION unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref----------
(declare-fun y@1@00 () Emb_3_Intuint8$$$_S_$$$)
(declare-fun result@2@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@160@00 $Snap)
(assert (= $t@160@00 ($Snap.combine ($Snap.first $t@160@00) ($Snap.second $t@160@00))))
(assert (= ($Snap.first $t@160@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 3 || result == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] (ShArraylen(result): Int) == 3
; [eval] (ShArraylen(result): Int)
(push) ; 2
; [then-branch: 0 | ShArraylen[Int](result@2@00) == 3 | live]
; [else-branch: 0 | ShArraylen[Int](result@2@00) != 3 | live]
(push) ; 3
; [then-branch: 0 | ShArraylen[Int](result@2@00) == 3]
(assert (= (ShArraylen<Int> result@2@00) 3))
(pop) ; 3
(push) ; 3
; [else-branch: 0 | ShArraylen[Int](result@2@00) != 3]
(assert (not (= (ShArraylen<Int> result@2@00) 3)))
; [eval] result == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] arrayNil_3_Intuint8$$$_S_$$$()
(push) ; 4
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> result@2@00) 3))
  (and
    (not (= (ShArraylen<Int> result@2@00) 3))
    (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))))
(assert (or
  (not (= (ShArraylen<Int> result@2@00) 3))
  (= (ShArraylen<Int> result@2@00) 3)))
(assert (or
  (= (ShArraylen<Int> result@2@00) 3)
  (= result@2@00 (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit))))
(assert (= ($Snap.second $t@160@00) $Snap.unit))
; [eval] box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref(result) == y
; [eval] box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
; [eval] (ShArraylen(x): Int) == 3 || x == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 3
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 1 | ShArraylen[Int](result@2@00) == 3 | live]
; [else-branch: 1 | ShArraylen[Int](result@2@00) != 3 | live]
(push) ; 4
; [then-branch: 1 | ShArraylen[Int](result@2@00) == 3]
(assert (= (ShArraylen<Int> result@2@00) 3))
(pop) ; 4
(push) ; 4
; [else-branch: 1 | ShArraylen[Int](result@2@00) != 3]
(assert (not (= (ShArraylen<Int> result@2@00) 3)))
; [eval] x == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] arrayNil_3_Intuint8$$$_S_$$$()
(push) ; 5
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@2@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@2@00))
(assert (= (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit result@2@00) y@1@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (=
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00)
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ y@1@00))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ y@1@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless y@1@00)
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (let ((result@2@00 (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))) (=>
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ y@1@00)
    (and
      (or
        (= (ShArraylen<Int> result@2@00) 3)
        (= result@2@00 (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@2@00)
        y@1@00))))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-139|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (let ((result@2@00 (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))) (=>
    (and
      (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ y@1@00)
      (not (= (ShArraylen<Int> result@2@00) 3)))
    (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-140|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (let ((result@2@00 (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))) (=>
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ y@1@00)
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@2@00)))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-141|)))
; ---------- FUNCTION box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref----------
(declare-fun x@3@00 () ShArray<Ref>)
(declare-fun result@4@00 () Emb_3_Intuint8$$$_S_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] (ShArraylen(x): Int) == 3 || x == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 3
; [eval] (ShArraylen(x): Int)
(push) ; 2
; [then-branch: 2 | ShArraylen[Int](x@3@00) == 3 | live]
; [else-branch: 2 | ShArraylen[Int](x@3@00) != 3 | live]
(push) ; 3
; [then-branch: 2 | ShArraylen[Int](x@3@00) == 3]
(assert (= (ShArraylen<Int> x@3@00) 3))
(pop) ; 3
(push) ; 3
; [else-branch: 2 | ShArraylen[Int](x@3@00) != 3]
(assert (not (= (ShArraylen<Int> x@3@00) 3)))
; [eval] x == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] arrayNil_3_Intuint8$$$_S_$$$()
(push) ; 4
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> x@3@00) 3))
  (and
    (not (= (ShArraylen<Int> x@3@00) 3))
    (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))))
(assert (or (not (= (ShArraylen<Int> x@3@00) 3)) (= (ShArraylen<Int> x@3@00) 3)))
(assert (or
  (= (ShArraylen<Int> x@3@00) 3)
  (= x@3@00 (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit))))
(declare-const $t@161@00 $Snap)
(assert (= $t@161@00 $Snap.unit))
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref(result) == x
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@4@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@4@00))
(assert (= (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit result@4@00) x@3@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (=
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00)
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ x@3@00))
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ x@3@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless x@3@00)
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (let ((result@4@00 (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))) (=>
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ x@3@00)
    (=
      (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@4@00)
      x@3@00)))
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))
  :qid |quant-u-142|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (let ((result@4@00 (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))) (=>
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ x@3@00)
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@4@00)))
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))
  :qid |quant-u-143|)))
; ---------- FUNCTION shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$----------
(declare-fun result@5@00 () ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@162@00 $Snap)
(assert (= $t@162@00 ($Snap.combine ($Snap.first $t@162@00) ($Snap.second $t@162@00))))
(assert (= ($Snap.first $t@162@00) $Snap.unit))
; [eval] (ShStructget0of3(result): Ref) == null
; [eval] (ShStructget0of3(result): Ref)
(assert (= (ShStructget0of3<Ref> result@5@00) $Ref.null))
(assert (=
  ($Snap.second $t@162@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@162@00))
    ($Snap.second ($Snap.second $t@162@00)))))
(assert (= ($Snap.first ($Snap.second $t@162@00)) $Snap.unit))
; [eval] (ShStructget1of3(result): Ref) == null
; [eval] (ShStructget1of3(result): Ref)
(assert (= (ShStructget1of3<Ref> result@5@00) $Ref.null))
(assert (= ($Snap.second ($Snap.second $t@162@00)) $Snap.unit))
; [eval] (ShStructget2of3(result): Emb_3_Intuint8$$$_S_$$$) == box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref(arrayNil_3_Intuint8$$$_S_$$$())
; [eval] (ShStructget2of3(result): Emb_3_Intuint8$$$_S_$$$)
; [eval] box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref(arrayNil_3_Intuint8$$$_S_$$$())
; [eval] arrayNil_3_Intuint8$$$_S_$$$()
(push) ; 2
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit))
(push) ; 2
; [eval] (ShArraylen(x): Int) == 3 || x == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 3
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 3 | ShArraylen[Int](arrayNil_3_Intuint8$$$_S_$$$(_)) == 3 | live]
; [else-branch: 3 | ShArraylen[Int](arrayNil_3_Intuint8$$$_S_$$$(_)) != 3 | live]
(push) ; 4
; [then-branch: 3 | ShArraylen[Int](arrayNil_3_Intuint8$$$_S_$$$(_)) == 3]
(assert (= (ShArraylen<Int> (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)) 3))
(pop) ; 4
(push) ; 4
; [else-branch: 3 | ShArraylen[Int](arrayNil_3_Intuint8$$$_S_$$$(_)) != 3]
(assert (not (= (ShArraylen<Int> (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)) 3)))
; [eval] x == arrayNil_3_Intuint8$$$_S_$$$()
; [eval] arrayNil_3_Intuint8$$$_S_$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= (ShArraylen<Int> (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)) 3))
  (= (ShArraylen<Int> (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)) 3)))
(assert (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))
(pop) ; 2
; Joined path conditions
(assert (and
  (or
    (not (= (ShArraylen<Int> (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)) 3))
    (= (ShArraylen<Int> (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)) 3))
  (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit))))
(assert (=
  (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> result@5@00)
  (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit))))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of3<Ref> result@5@00) $Ref.null)
      (and
        (= (ShStructget1of3<Ref> result@5@00) $Ref.null)
        (=
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> result@5@00)
          (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))))))
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-144|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (and
      (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition s@$)
      (and
        (= (ShStructget0of3<Ref> result@5@00) $Ref.null)
        (= (ShStructget1of3<Ref> result@5@00) $Ref.null)))
    (and
      (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit)
      (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))))
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-145|)))
; ---------- FUNCTION shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$----------
(declare-fun result@6@00 () ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@163@00 $Snap)
(assert (= $t@163@00 ($Snap.combine ($Snap.first $t@163@00) ($Snap.second $t@163@00))))
(assert (= ($Snap.first $t@163@00) $Snap.unit))
; [eval] (ShStructget0of3(result): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$]) == shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of3(result): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
; [eval] shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$()
(push) ; 2
(assert (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> result@6@00)
  (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second $t@163@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@163@00))
    ($Snap.second ($Snap.second $t@163@00)))))
(assert (= ($Snap.first ($Snap.second $t@163@00)) $Snap.unit))
; [eval] (ShStructget1of3(result): Ref) == null
; [eval] (ShStructget1of3(result): Ref)
(assert (= (ShStructget1of3<Ref> result@6@00) $Ref.null))
(assert (= ($Snap.second ($Snap.second $t@163@00)) $Snap.unit))
; [eval] (ShStructget2of3(result): Ref) == null
; [eval] (ShStructget2of3(result): Ref)
(assert (= (ShStructget2of3<Ref> result@6@00) $Ref.null))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$)
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ s@$))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@6@00 (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> result@6@00)
        (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ $Snap.unit))
      (and
        (= (ShStructget1of3<Ref> result@6@00) $Ref.null)
        (= (ShStructget2of3<Ref> result@6@00) $Ref.null)))))
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-146|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@6@00 (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition s@$)
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-147|)))
; ---------- FUNCTION Len_daeaf66a_PMBase----------
(declare-fun s_V0@7@00 () ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun result@8@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $k@164@00 $Perm)
(assert ($Perm.isReadVar $k@164@00))
(assert (<= $Perm.No $k@164@00))
(declare-const $t@165@00 $Snap)
(assert (= $t@165@00 ($Snap.combine ($Snap.first $t@165@00) ($Snap.second $t@165@00))))
(assert (= ($Snap.first $t@165@00) $Snap.unit))
; [eval] result >= 4
(assert (>= result@8@00 4))
(assert (= ($Snap.second $t@165@00) $Snap.unit))
; [eval] result == (unfolding acc(Mem_daeaf66a_PMBase(s_V0), wildcard) in 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12)
; [eval] (unfolding acc(Mem_daeaf66a_PMBase(s_V0), wildcard) in 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12)
(declare-const $k@166@00 $Perm)
(assert ($Perm.isReadVar $k@166@00))
(push) ; 2
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@167@00 $Perm)
(assert ($Perm.isReadVar $k@167@00))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@164@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@167@00 $k@164@00))
(assert (<= $Perm.No (- $k@164@00 $k@167@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@167@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Mem_daeaf66a_PMBase%trigger s@$ s_V0@7@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= $Perm.No $k@166@00))
(assert (<= $k@166@00 $Perm.Write))
(assert (=> (< $Perm.No $k@166@00) (not (= (ShStructget1of3<Ref> s_V0@7@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> s_V0@7@00) (ShStructget2of3<Ref> s_V0@7@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No $k@166@00) (not (= (ShStructget2of3<Ref> s_V0@7@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget0of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(assert (=>
  (< $Perm.No $k@166@00)
  (not
    (=
      (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget1of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@166@00)
  (not
    (=
      (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 0): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))))
(pop) ; 3
; Joined path conditions
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@166@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 1): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@166@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 2): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@166@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ <= 3
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ ==> 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | 0 < First:(s@$) | live]
; [else-branch: 4 | !(0 < First:(s@$)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 4 | 0 < First:(s@$)]
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 4 | !(0 < First:(s@$))]
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(assert (=>
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
; [eval] 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12
; [eval] 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8
; [eval] (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8
; [eval] (ShStructget1of3(s_V0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12
; [eval] (ShStructget2of3(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@167@00))
(assert (and
  (< $k@167@00 $k@164@00)
  (<= $Perm.No (- $k@164@00 $k@167@00))
  (Mem_daeaf66a_PMBase%trigger s@$ s_V0@7@00)
  (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
  (<= $Perm.No $k@166@00)
  (<= $k@166@00 $Perm.Write)
  (=>
    (< $Perm.No $k@166@00)
    (not (= (ShStructget1of3<Ref> s_V0@7@00) $Ref.null)))
  (=
    ($Snap.second s@$)
    ($Snap.combine
      ($Snap.first ($Snap.second s@$))
      ($Snap.second ($Snap.second s@$))))
  (=>
    (< $Perm.No $k@166@00)
    (not (= (ShStructget2of3<Ref> s_V0@7@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second s@$))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second s@$)))
      ($Snap.second ($Snap.second ($Snap.second s@$)))))
  (=>
    (< $Perm.No $k@166@00)
    (not
      (=
        (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second s@$)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=>
    (< $Perm.No $k@166@00)
    (not
      (=
        (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00)))
  (=>
    (< $Perm.No $k@166@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=>
    (< $Perm.No $k@166@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=>
    (< $Perm.No $k@166@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (or
    (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (=>
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))))
(assert (=
  result@8@00
  (+
    (+ 4 (* ($SortWrappers.$SnapToInt ($Snap.first s@$)) 8))
    (* ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))) 12))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00)
    (Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :pattern ((Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (Len_daeaf66a_PMBase%stateless s_V0@7@00)
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@8@00 (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))) (and
    ($Perm.isReadVar $k@164@00)
    ($Perm.isReadVar $k@166@00)
    ($Perm.isReadVar $k@167@00)
    (=>
      (Len_daeaf66a_PMBase%precondition s@$ s_V0@7@00)
      (and
        (>= result@8@00 4)
        (=
          result@8@00
          (+
            (+ 4 (* ($SortWrappers.$SnapToInt ($Snap.first s@$)) 8))
            (* ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))) 12)))))))
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-148|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@8@00 (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))) true)
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-149|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@8@00 (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))) true)
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-150|)))
; ----- Verification of function body and postcondition -----
(set-option :timeout 0)
(push) ; 1
(assert ($Perm.isReadVar $k@164@00))
(assert (<= $Perm.No $k@164@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(Mem_daeaf66a_PMBase(s_V0), wildcard) in 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12)
(declare-const $k@168@00 $Perm)
(assert ($Perm.isReadVar $k@168@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@169@00 $Perm)
(assert ($Perm.isReadVar $k@169@00))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@164@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@169@00 $k@164@00))
(assert (<= $Perm.No (- $k@164@00 $k@169@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@169@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Mem_daeaf66a_PMBase%trigger s@$ s_V0@7@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= $Perm.No $k@168@00))
(assert (<= $k@168@00 $Perm.Write))
(assert (=> (< $Perm.No $k@168@00) (not (= (ShStructget1of3<Ref> s_V0@7@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> s_V0@7@00) (ShStructget2of3<Ref> s_V0@7@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No $k@168@00) (not (= (ShStructget2of3<Ref> s_V0@7@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget0of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(assert (=>
  (< $Perm.No $k@168@00)
  (not
    (=
      (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget1of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@168@00)
  (not
    (=
      (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 0): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))))
(pop) ; 3
; Joined path conditions
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@168@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 1): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@168@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 2): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@168@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ <= 3
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ ==> 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | 0 < First:(s@$) | live]
; [else-branch: 5 | !(0 < First:(s@$)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5 | 0 < First:(s@$)]
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 5 | !(0 < First:(s@$))]
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(assert (=>
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
; [eval] 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12
; [eval] 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8
; [eval] (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8
; [eval] (ShStructget1of3(s_V0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12
; [eval] (ShStructget2of3(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@169@00))
(assert (and
  (< $k@169@00 $k@164@00)
  (<= $Perm.No (- $k@164@00 $k@169@00))
  (Mem_daeaf66a_PMBase%trigger s@$ s_V0@7@00)
  (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
  (<= $Perm.No $k@168@00)
  (<= $k@168@00 $Perm.Write)
  (=>
    (< $Perm.No $k@168@00)
    (not (= (ShStructget1of3<Ref> s_V0@7@00) $Ref.null)))
  (=
    ($Snap.second s@$)
    ($Snap.combine
      ($Snap.first ($Snap.second s@$))
      ($Snap.second ($Snap.second s@$))))
  (=>
    (< $Perm.No $k@168@00)
    (not (= (ShStructget2of3<Ref> s_V0@7@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second s@$))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second s@$)))
      ($Snap.second ($Snap.second ($Snap.second s@$)))))
  (=>
    (< $Perm.No $k@168@00)
    (not
      (=
        (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second s@$)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=>
    (< $Perm.No $k@168@00)
    (not
      (=
        (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00)))
  (=>
    (< $Perm.No $k@168@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=>
    (< $Perm.No $k@168@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=>
    (< $Perm.No $k@168@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (or
    (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (=>
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))))
(assert (=
  result@8@00
  (+
    (+ 4 (* ($SortWrappers.$SnapToInt ($Snap.first s@$)) 8))
    (* ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))) 12))))
; [eval] result >= 4
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@8@00 4)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@8@00 4))
; [eval] result == (unfolding acc(Mem_daeaf66a_PMBase(s_V0), wildcard) in 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12)
; [eval] (unfolding acc(Mem_daeaf66a_PMBase(s_V0), wildcard) in 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12)
(declare-const $k@170@00 $Perm)
(assert ($Perm.isReadVar $k@170@00))
(push) ; 2
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@171@00 $Perm)
(assert ($Perm.isReadVar $k@171@00))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@164@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@171@00 $k@164@00))
(assert (<= $Perm.No (- $k@164@00 $k@171@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= $Perm.No $k@170@00))
(assert (<= $k@170@00 $Perm.Write))
(assert (=> (< $Perm.No $k@170@00) (not (= (ShStructget1of3<Ref> s_V0@7@00) $Ref.null))))
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> s_V0@7@00) (ShStructget2of3<Ref> s_V0@7@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No $k@170@00) (not (= (ShStructget2of3<Ref> s_V0@7@00) $Ref.null))))
; [eval] (ShStructget0of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(assert (=>
  (< $Perm.No $k@170@00)
  (not
    (=
      (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
      $Ref.null))))
; [eval] (ShStructget1of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@170@00)
  (not
    (=
      (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
      $Ref.null))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 0): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@170@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
      $Ref.null))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 1): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@170@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
      $Ref.null))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 2): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@170@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2)
      $Ref.null))))
; [eval] 0 <= (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ <= 3
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ ==> 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | 0 < First:(s@$) | live]
; [else-branch: 6 | !(0 < First:(s@$)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | 0 < First:(s@$)]
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 6 | !(0 < First:(s@$))]
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8 + (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12
; [eval] 4 + (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8
; [eval] (ShStructget1of3(s_V0): Ref).Intint$$$$_E_$$$ * 8
; [eval] (ShStructget1of3(s_V0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(s_V0): Ref).Intint$$$$_E_$$$ * 12
; [eval] (ShStructget2of3(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@171@00))
(assert (and
  (< $k@171@00 $k@164@00)
  (<= $Perm.No (- $k@164@00 $k@171@00))
  (<= $Perm.No $k@170@00)
  (<= $k@170@00 $Perm.Write)
  (=>
    (< $Perm.No $k@170@00)
    (not (= (ShStructget1of3<Ref> s_V0@7@00) $Ref.null)))
  (=>
    (< $Perm.No $k@170@00)
    (not (= (ShStructget2of3<Ref> s_V0@7@00) $Ref.null)))
  (=>
    (< $Perm.No $k@170@00)
    (not
      (=
        (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
        $Ref.null)))
  (=>
    (< $Perm.No $k@170@00)
    (not
      (=
        (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))
        $Ref.null)))
  (=>
    (< $Perm.No $k@170@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 0)
        $Ref.null)))
  (=>
    (< $Perm.No $k@170@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 1)
        $Ref.null)))
  (=>
    (< $Perm.No $k@170@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> s_V0@7@00))) 2)
        $Ref.null)))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@164@00)
    ($Perm.isReadVar $k@168@00)
    ($Perm.isReadVar $k@169@00)
    ($Perm.isReadVar $k@170@00)
    ($Perm.isReadVar $k@171@00)
    (=>
      (Len_daeaf66a_PMBase%precondition s@$ s_V0@7@00)
      (=
        (Len_daeaf66a_PMBase s@$ s_V0@7@00)
        (+
          (+ 4 (* ($SortWrappers.$SnapToInt ($Snap.first s@$)) 8))
          (* ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))) 12)))))
  :pattern ((Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :qid |quant-u-151|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  true
  :pattern ((Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :qid |quant-u-152|)))
; ---------- FUNCTION shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$----------
(declare-fun result@9@00 () ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(declare-const $t@172@00 $Snap)
(assert (= $t@172@00 ($Snap.combine ($Snap.first $t@172@00) ($Snap.second $t@172@00))))
(assert (= ($Snap.first $t@172@00) $Snap.unit))
; [eval] (ShStructget0of2(result): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]) == shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$()
; [eval] (ShStructget0of2(result): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$()
(push) ; 2
(assert (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> result@9@00)
  (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.second $t@172@00) $Snap.unit))
; [eval] (ShStructget1of2(result): Ref) == null
; [eval] (ShStructget1of2(result): Ref)
(assert (= (ShStructget1of2<Ref> result@9@00) $Ref.null))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@9@00 (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> result@9@00)
        (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ $Snap.unit))
      (= (ShStructget1of2<Ref> result@9@00) $Ref.null))))
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-153|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@9@00 (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-154|)))
; ---------- FUNCTION ssliceFromSlice_Ref----------
(declare-fun s@10@00 () Slice<Ref>)
(declare-fun i@11@00 () Int)
(declare-fun j@12@00 () Int)
(declare-fun result@13@00 () Slice<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] 0 <= i
(assert (<= 0 i@11@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (= ($Snap.first ($Snap.second s@$)) $Snap.unit))
; [eval] i <= j
(assert (<= i@11@00 j@12@00))
(assert (= ($Snap.second ($Snap.second s@$)) $Snap.unit))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (<= j@12@00 (scap<Int> s@10@00)))
(declare-const $t@173@00 $Snap)
(assert (= $t@173@00 ($Snap.combine ($Snap.first $t@173@00) ($Snap.second $t@173@00))))
(assert (= ($Snap.first $t@173@00) $Snap.unit))
; [eval] (soffset(result): Int) == (soffset(s): Int) + i
; [eval] (soffset(result): Int)
; [eval] (soffset(s): Int) + i
; [eval] (soffset(s): Int)
(assert (= (soffset<Int> result@13@00) (+ (soffset<Int> s@10@00) i@11@00)))
(assert (=
  ($Snap.second $t@173@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@173@00))
    ($Snap.second ($Snap.second $t@173@00)))))
(assert (= ($Snap.first ($Snap.second $t@173@00)) $Snap.unit))
; [eval] (slen(result): Int) == j - i
; [eval] (slen(result): Int)
; [eval] j - i
(assert (= (slen<Int> result@13@00) (- j@12@00 i@11@00)))
(assert (=
  ($Snap.second ($Snap.second $t@173@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@173@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@173@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@173@00))) $Snap.unit))
; [eval] (scap(result): Int) == (scap(s): Int) - i
; [eval] (scap(result): Int)
; [eval] (scap(s): Int) - i
; [eval] (scap(s): Int)
(assert (= (scap<Int> result@13@00) (- (scap<Int> s@10@00) i@11@00)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@173@00))) $Snap.unit))
; [eval] (sarray(result): ShArray[Ref]) == (sarray(s): ShArray[Ref])
; [eval] (sarray(result): ShArray[Ref])
; [eval] (sarray(s): ShArray[Ref])
(assert (= (sarray<ShArray<Ref>> result@13@00) (sarray<ShArray<Ref>> s@10@00)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (=
    (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00)
    (ssliceFromSlice_Ref s@$ s@10@00 i@11@00 j@12@00))
  :pattern ((ssliceFromSlice_Ref s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-14|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (ssliceFromSlice_Ref%stateless s@10@00 i@11@00 j@12@00)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-15|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) (=>
    (ssliceFromSlice_Ref%precondition s@$ s@10@00 i@11@00 j@12@00)
    (and
      (= (soffset<Int> result@13@00) (+ (soffset<Int> s@10@00) i@11@00))
      (= (slen<Int> result@13@00) (- j@12@00 i@11@00))
      (= (scap<Int> result@13@00) (- (scap<Int> s@10@00) i@11@00))
      (= (sarray<ShArray<Ref>> result@13@00) (sarray<ShArray<Ref>> s@10@00)))))
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-155|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-156|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-157|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-158|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-159|)))
; ---------- FUNCTION Len_daeaf66a_PMRaw----------
(declare-fun s_V0@14@00 () ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun buf_V0@15@00 () Slice<Ref>)
(declare-fun result@16@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(declare-const $k@174@00 $Perm)
(assert ($Perm.isReadVar $k@174@00))
(assert (<= $Perm.No $k@174@00))
(declare-const $t@175@00 $Snap)
(assert (= $t@175@00 ($Snap.combine ($Snap.first $t@175@00) ($Snap.second $t@175@00))))
(assert (= ($Snap.first $t@175@00) $Snap.unit))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in result == Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(declare-const $k@176@00 $Perm)
(assert ($Perm.isReadVar $k@176@00))
(push) ; 2
(assert (not (< $Perm.No $k@176@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@177@00 $Perm)
(assert ($Perm.isReadVar $k@177@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@174@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@177@00 $k@174@00))
(assert (<= $Perm.No (- $k@174@00 $k@177@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@177@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))) buf_V0@15@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 7 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 7 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 8 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 8 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 9 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 9 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 10 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 10 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
; [else-branch: 11 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 11 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | dead]
; [else-branch: 12 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 12 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 13 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 13 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@176@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $k@176@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@176@00)
  (not
    (=
      (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) <= (slen(x0): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (slen<Int> buf_V0@15@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
(push) ; 11
(assert (not (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 11
(assert (not (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (scap<Int> buf_V0@15@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (scap<Int> buf_V0@15@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
(pop) ; 10
; Joined path conditions
(assert (and
  (<=
    0
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
  (<=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (scap<Int> buf_V0@15@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@178@00 $Perm)
(assert ($Perm.isReadVar $k@178@00))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@176@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@178@00 $k@176@00) $k@176@00))
(assert (<= $Perm.No (- $k@176@00 (* $k@178@00 $k@176@00))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@178@00 $k@176@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@178@00))
(assert (and
  (< (* $k@178@00 $k@176@00) $k@176@00)
  (<= $Perm.No (- $k@176@00 (* $k@178@00 $k@176@00)))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))))
; [eval] result == Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
(set-option :timeout 0)
(push) ; 10
(declare-const $k@179@00 $Perm)
(assert ($Perm.isReadVar $k@179@00))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@176@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@179@00 $k@176@00))
(assert (<= $Perm.No (- $k@176@00 $k@179@00)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@179@00))
(assert (and
  (< $k@179@00 $k@176@00)
  (<= $Perm.No (- $k@176@00 $k@179@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@177@00))
(assert ($Perm.isReadVar $k@178@00))
(assert ($Perm.isReadVar $k@179@00))
(assert (and
  (< $k@177@00 $k@174@00)
  (<= $Perm.No (- $k@174@00 $k@177@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))) buf_V0@15@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                  (as Path_4cddb96f_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@176@00)
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $k@176@00 $Perm.Write)
    (=>
      (< $Perm.No $k@176@00)
      (not
        (=
          (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit)
    (<=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (slen<Int> buf_V0@15@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit)
    (<=
      0
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
    (<=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (scap<Int> buf_V0@15@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      $Snap.unit)
    (< (* $k@178@00 $k@176@00) $k@176@00)
    (<= $Perm.No (- $k@176@00 (* $k@178@00 $k@176@00)))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))))
    (< $k@179@00 $k@176@00)
    (<= $Perm.No (- $k@176@00 $k@179@00))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@16@00
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(assert (= ($Snap.second $t@175@00) $Snap.unit))
; [eval] result >= 0
(assert (>= result@16@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (=
    (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00)
    (Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :pattern ((Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-16|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (Len_daeaf66a_PMRaw%stateless s_V0@14@00 buf_V0@15@00)
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-17|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (let ((result@16@00 (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))) (and
    ($Perm.isReadVar $k@174@00)
    ($Perm.isReadVar $k@176@00)
    ($Perm.isReadVar $k@177@00)
    ($Perm.isReadVar $k@178@00)
    ($Perm.isReadVar $k@179@00)
    (=>
      (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
      (and
        (=
          result@16@00
          (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
        (>= result@16@00 0)))))
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-160|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (let ((result@16@00 (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))) (=>
    (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-161|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (let ((result@16@00 (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))) true)
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-162|)))
; ----- Verification of function body and postcondition -----
(set-option :timeout 0)
(push) ; 1
(assert ($Perm.isReadVar $k@174@00))
(assert (<= $Perm.No $k@174@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(declare-const $k@180@00 $Perm)
(assert ($Perm.isReadVar $k@180@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@180@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@181@00 $Perm)
(assert ($Perm.isReadVar $k@181@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@174@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@181@00 $k@174@00))
(assert (<= $Perm.No (- $k@174@00 $k@181@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@181@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))) buf_V0@15@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 14 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 14 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 15 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 15 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 16 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 16 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 17 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 17 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
; [else-branch: 18 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 18 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | dead]
; [else-branch: 19 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 19 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 20 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 20 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@180@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $k@180@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@180@00)
  (not
    (=
      (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) <= (slen(x0): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (slen<Int> buf_V0@15@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
(push) ; 11
(assert (not (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 11
(assert (not (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (scap<Int> buf_V0@15@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (scap<Int> buf_V0@15@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
(pop) ; 10
; Joined path conditions
(assert (and
  (<=
    0
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
  (<=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (scap<Int> buf_V0@15@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@182@00 $Perm)
(assert ($Perm.isReadVar $k@182@00))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@180@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@182@00 $k@180@00) $k@180@00))
(assert (<= $Perm.No (- $k@180@00 (* $k@182@00 $k@180@00))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@182@00 $k@180@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@182@00))
(assert (and
  (< (* $k@182@00 $k@180@00) $k@180@00)
  (<= $Perm.No (- $k@180@00 (* $k@182@00 $k@180@00)))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))))
; [eval] Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
(set-option :timeout 0)
(push) ; 10
(declare-const $k@183@00 $Perm)
(assert ($Perm.isReadVar $k@183@00))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@180@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@183@00 $k@180@00))
(assert (<= $Perm.No (- $k@180@00 $k@183@00)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@183@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@183@00))
(assert (and
  (< $k@183@00 $k@180@00)
  (<= $Perm.No (- $k@180@00 $k@183@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@181@00))
(assert ($Perm.isReadVar $k@182@00))
(assert ($Perm.isReadVar $k@183@00))
(assert (and
  (< $k@181@00 $k@174@00)
  (<= $Perm.No (- $k@174@00 $k@181@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))) buf_V0@15@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                  (as Path_4cddb96f_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@180@00)
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $k@180@00 $Perm.Write)
    (=>
      (< $Perm.No $k@180@00)
      (not
        (=
          (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit)
    (<=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (slen<Int> buf_V0@15@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit)
    (<=
      0
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
    (<=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (scap<Int> buf_V0@15@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      $Snap.unit)
    (< (* $k@182@00 $k@180@00) $k@180@00)
    (<= $Perm.No (- $k@180@00 (* $k@182@00 $k@180@00)))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))))
    (< $k@183@00 $k@180@00)
    (<= $Perm.No (- $k@180@00 $k@183@00))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@16@00
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in result == Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(declare-const $k@184@00 $Perm)
(assert ($Perm.isReadVar $k@184@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@184@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@185@00 $Perm)
(assert ($Perm.isReadVar $k@185@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@174@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@185@00 $k@174@00))
(assert (<= $Perm.No (- $k@174@00 $k@185@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
; [then-branch: 21 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 21 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 21 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
; [then-branch: 22 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 22 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(push) ; 4
; [else-branch: 22 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
; [then-branch: 23 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 23 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(push) ; 5
; [else-branch: 23 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
; [then-branch: 24 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 24 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(push) ; 6
; [else-branch: 24 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
; [then-branch: 25 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
; [else-branch: 25 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(push) ; 7
; [else-branch: 25 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
; [then-branch: 26 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | dead]
; [else-branch: 26 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(push) ; 8
; [else-branch: 26 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 27 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 27 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@14@00), pointer_Types[Types](Raw_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@184@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $k@184@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@184@00)
  (not
    (=
      (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) <= (slen(x0): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (slen<Int> buf_V0@15@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
(push) ; 11
(assert (not (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 11
(assert (not (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (scap<Int> buf_V0@15@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (scap<Int> buf_V0@15@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
(pop) ; 10
; Joined path conditions
(assert (and
  (<=
    0
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
  (<=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (scap<Int> buf_V0@15@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@186@00 $Perm)
(assert ($Perm.isReadVar $k@186@00))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@184@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@186@00 $k@184@00) $k@184@00))
(assert (<= $Perm.No (- $k@184@00 (* $k@186@00 $k@184@00))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@186@00 $k@184@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@186@00))
(assert (and
  (< (* $k@186@00 $k@184@00) $k@184@00)
  (<= $Perm.No (- $k@184@00 (* $k@186@00 $k@184@00)))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))))
; [eval] result == Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] Len_daeaf66a_PMBase((ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2(s_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
(set-option :timeout 0)
(push) ; 10
(declare-const $k@187@00 $Perm)
(assert ($Perm.isReadVar $k@187@00))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
  (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@184@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@187@00 $k@184@00))
(assert (<= $Perm.No (- $k@184@00 $k@187@00)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@187@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@187@00))
(assert (and
  (< $k@187@00 $k@184@00)
  (<= $Perm.No (- $k@184@00 $k@187@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@185@00))
(assert ($Perm.isReadVar $k@186@00))
(assert ($Perm.isReadVar $k@187@00))
(assert (and (< $k@185@00 $k@174@00) (<= $Perm.No (- $k@174@00 $k@185@00))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                  (as Path_4cddb96f_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (and
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@184@00)
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $k@184@00 $Perm.Write)
    (=>
      (< $Perm.No $k@184@00)
      (not
        (=
          (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit)
    (<=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (slen<Int> buf_V0@15@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit)
    (<=
      0
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
    (<=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (scap<Int> buf_V0@15@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@15@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      $Snap.unit)
    (< (* $k@186@00 $k@184@00) $k@184@00)
    (<= $Perm.No (- $k@184@00 (* $k@186@00 $k@184@00)))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
      (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))))
    (< $k@187@00 $k@184@00)
    (<= $Perm.No (- $k@184@00 $k@187@00))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@16@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@16@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@174@00)
    ($Perm.isReadVar $k@180@00)
    ($Perm.isReadVar $k@181@00)
    ($Perm.isReadVar $k@182@00)
    ($Perm.isReadVar $k@183@00)
    ($Perm.isReadVar $k@184@00)
    ($Perm.isReadVar $k@185@00)
    ($Perm.isReadVar $k@186@00)
    ($Perm.isReadVar $k@187@00)
    (=>
      (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
      (=
        (Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00)
        (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))))
  :pattern ((Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :pattern ((Len_daeaf66a_PMRaw%stateless s_V0@14@00 buf_V0@15@00) (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))) buf_V0@15@00))
  :qid |quant-u-163|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (=>
    (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
  :pattern ((Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-164|)))
; ---------- FUNCTION hasScionPath_c6e60a1d_PMPath----------
(declare-fun p_V0@17@00 () ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun buf_V0@18@00 () Slice<Ref>)
(declare-fun result@19@00 () Bool)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@188@00 $Perm)
(assert ($Perm.isReadVar $k@188@00))
(assert (<= $Perm.No $k@188@00))
(declare-const $t@189@00 $Snap)
(assert (= $t@189@00 $Snap.unit))
; [eval] result == (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@190@00 $Perm)
(assert ($Perm.isReadVar $k@190@00))
(push) ; 2
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@191@00 $Perm)
(assert ($Perm.isReadVar $k@191@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@188@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@191@00 $k@188@00))
(assert (<= $Perm.No (- $k@188@00 $k@191@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@191@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) buf_V0@18@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 28 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 28 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 29 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 29 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 30 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 30 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 31 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 31 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 32 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 32 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first s@$)
  ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.second ($Snap.first s@$)))))
; [eval] (ShStructget0of2(fn$$3): Ref)
(declare-fun sm@192@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@192@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@190@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@190@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@190@00)
    false)
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$3): Ref)
(declare-fun sm@193@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@193@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@190@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@190@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@190@00)
    false)
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@190@00))
(assert (<= $k@190@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@190@00)
  (not
    (=
      (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@190@00)
  (not
    (=
      (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@190@00)
  (not
    (=
      (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  $Snap.unit))
; [eval] !((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 8
; Joined path conditions
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 16 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 16 (slen<Int> buf_V0@18@00)))
; [eval] (tuple2((box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
; [eval] ssliceFromSlice_Ref(x0, 16, (slen(x0): Int))
; [eval] (slen(x0): Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00))))
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    buf_V0@18@00
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4(p_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget3of4<Ref> p_V0@17@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@191@00))
(assert (and
  (< $k@191@00 $k@188@00)
  (<= $Perm.No (- $k@188@00 $k@191@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) buf_V0@18@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (=
      ($Snap.first s@$)
      ($Snap.combine
        ($Snap.first ($Snap.first s@$))
        ($Snap.second ($Snap.first s@$)))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@192@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@190@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@190@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@190@00)
        false)
      (not
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@193@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@190@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@190@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@190@00)
        false)
      (not
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $Perm.No $k@190@00)
    (<= $k@190@00 $Perm.Write)
    (=>
      (< $Perm.No $k@190@00)
      (not
        (=
          (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (=>
      (< $Perm.No $k@190@00)
      (not
        (=
          (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=>
      (< $Perm.No $k@190@00)
      (not
        (=
          (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      $Snap.unit)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      $Snap.unit)
    (<= 16 (slen<Int> buf_V0@18@00))
    (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@19@00
  (not
    (=
      ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (=
    (hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00)
    (hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :pattern ((hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-18|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (hasScionPath_c6e60a1d_PMPath%stateless p_V0@17@00 buf_V0@18@00)
  :pattern ((hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-19|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (let ((result@19@00 (hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))) (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@192@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@193@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    ($Perm.isReadVar $k@188@00)
    ($Perm.isReadVar $k@190@00)
    ($Perm.isReadVar $k@191@00)
    (=>
      (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
      (=
        result@19@00
        (not
          (=
            ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
            (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
  :pattern ((hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-165|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (let ((result@19@00 (hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))) (=>
    (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-166|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@188@00))
(assert (<= $Perm.No $k@188@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@194@00 $Perm)
(assert ($Perm.isReadVar $k@194@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@195@00 $Perm)
(assert ($Perm.isReadVar $k@195@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@188@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@195@00 $k@188@00))
(assert (<= $Perm.No (- $k@188@00 $k@195@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@195@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) buf_V0@18@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 33 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 33 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 34 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 34 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 35 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 35 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 36 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 36 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 37 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 37 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first s@$)
  ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.second ($Snap.first s@$)))))
; [eval] (ShStructget0of2(fn$$3): Ref)
(declare-fun sm@196@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@196@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@194@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@194@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@194@00)
    false)
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$3): Ref)
(declare-fun sm@197@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@197@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@194@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@194@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@194@00)
    false)
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@194@00))
(assert (<= $k@194@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@194@00)
  (not
    (=
      (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@194@00)
  (not
    (=
      (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@194@00)
  (not
    (=
      (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  $Snap.unit))
; [eval] !((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 8
; Joined path conditions
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 16 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 16 (slen<Int> buf_V0@18@00)))
; [eval] (tuple2((box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
; [eval] ssliceFromSlice_Ref(x0, 16, (slen(x0): Int))
; [eval] (slen(x0): Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00))))
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    buf_V0@18@00
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4(p_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget3of4<Ref> p_V0@17@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@195@00))
(assert (and
  (< $k@195@00 $k@188@00)
  (<= $Perm.No (- $k@188@00 $k@195@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) buf_V0@18@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (=
      ($Snap.first s@$)
      ($Snap.combine
        ($Snap.first ($Snap.first s@$))
        ($Snap.second ($Snap.first s@$)))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@196@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@194@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@194@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@194@00)
        false)
      (not
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@197@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@194@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@194@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@194@00)
        false)
      (not
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $Perm.No $k@194@00)
    (<= $k@194@00 $Perm.Write)
    (=>
      (< $Perm.No $k@194@00)
      (not
        (=
          (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (=>
      (< $Perm.No $k@194@00)
      (not
        (=
          (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=>
      (< $Perm.No $k@194@00)
      (not
        (=
          (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      $Snap.unit)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      $Snap.unit)
    (<= 16 (slen<Int> buf_V0@18@00))
    (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@19@00
  (not
    (=
      ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] result == (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), buf_V0), wildcard) in !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@198@00 $Perm)
(assert ($Perm.isReadVar $k@198@00))
(push) ; 2
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@199@00 $Perm)
(assert ($Perm.isReadVar $k@199@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@188@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@199@00 $k@188@00))
(assert (<= $Perm.No (- $k@188@00 $k@199@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@199@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
; [then-branch: 38 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 38 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 38 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
; [then-branch: 39 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 39 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(push) ; 4
; [else-branch: 39 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
; [then-branch: 40 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 40 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(push) ; 5
; [else-branch: 40 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
; [then-branch: 41 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 41 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(push) ; 6
; [else-branch: 41 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 42 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 42 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@17@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first s@$)
  ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.second ($Snap.first s@$)))))
; [eval] (ShStructget0of2(fn$$3): Ref)
(declare-fun sm@200@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@200@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@198@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@198@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@198@00)
    false)
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$3): Ref)
(declare-fun sm@201@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@201@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@198@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@198@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@198@00)
    false)
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@198@00))
(assert (<= $k@198@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@198@00)
  (not
    (=
      (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@198@00)
  (not
    (=
      (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@198@00)
  (not
    (=
      (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  $Snap.unit))
; [eval] !((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 8
; Joined path conditions
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 16 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 16 (slen<Int> buf_V0@18@00)))
; [eval] (tuple2((box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
; [eval] ssliceFromSlice_Ref(x0, 16, (slen(x0): Int))
; [eval] (slen(x0): Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00))))
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    buf_V0@18@00
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4(p_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget3of4<Ref> p_V0@17@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@199@00))
(assert (and (< $k@199@00 $k@188@00) (<= $Perm.No (- $k@188@00 $k@199@00))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (=
      ($Snap.first s@$)
      ($Snap.combine
        ($Snap.first ($Snap.first s@$))
        ($Snap.second ($Snap.first s@$)))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@200@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@198@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@198@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@198@00)
        false)
      (not
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@201@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@198@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@198@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@198@00)
        false)
      (not
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $Perm.No $k@198@00)
    (<= $k@198@00 $Perm.Write)
    (=>
      (< $Perm.No $k@198@00)
      (not
        (=
          (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (=>
      (< $Perm.No $k@198@00)
      (not
        (=
          (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=>
      (< $Perm.No $k@198@00)
      (not
        (=
          (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      $Snap.unit)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      $Snap.unit)
    (<= 16 (slen<Int> buf_V0@18@00))
    (<= (slen<Int> buf_V0@18@00) (scap<Int> buf_V0@18@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) buf_V0@18@00 16 (slen<Int> buf_V0@18@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@196@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@197@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@200@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@201@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    ($Perm.isReadVar $k@188@00)
    ($Perm.isReadVar $k@194@00)
    ($Perm.isReadVar $k@195@00)
    ($Perm.isReadVar $k@198@00)
    ($Perm.isReadVar $k@199@00)
    (=>
      (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
      (=
        (hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00)
        (not
          (=
            ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
            (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
  :pattern ((hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :pattern ((hasScionPath_c6e60a1d_PMPath%stateless p_V0@17@00 buf_V0@18@00) (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) buf_V0@18@00))
  :qid |quant-u-167|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (=>
    (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
  :pattern ((hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-168|)))
; ---------- FUNCTION intBitwiseAnd----------
(declare-fun left@20@00 () Int)
(declare-fun right@21@00 () Int)
(declare-fun result@22@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(pop) ; 1
(assert (forall ((s@$ $Snap) (left@20@00 Int) (right@21@00 Int)) (!
  (=
    (intBitwiseAnd%limited s@$ left@20@00 right@21@00)
    (intBitwiseAnd s@$ left@20@00 right@21@00))
  :pattern ((intBitwiseAnd s@$ left@20@00 right@21@00))
  :qid |quant-u-20|)))
(assert (forall ((s@$ $Snap) (left@20@00 Int) (right@21@00 Int)) (!
  (intBitwiseAnd%stateless left@20@00 right@21@00)
  :pattern ((intBitwiseAnd%limited s@$ left@20@00 right@21@00))
  :qid |quant-u-21|)))
; ---------- FUNCTION Len_a6ceb89d_PMrawPath----------
(declare-fun p_V0@23@00 () ShStruct2<Ref~_Ref>)
(declare-fun underlyingBuf_V0@24@00 () Slice<Ref>)
(declare-fun result@25@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(declare-const $k@202@00 $Perm)
(assert ($Perm.isReadVar $k@202@00))
(assert (<= $Perm.No $k@202@00))
(declare-const $t@203@00 $Snap)
(assert (= $t@203@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@25@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (=
    (Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00)
    (Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :pattern ((Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-22|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (Len_a6ceb89d_PMrawPath%stateless p_V0@23@00 underlyingBuf_V0@24@00)
  :pattern ((Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-23|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (let ((result@25@00 (Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))) (and
    ($Perm.isReadVar $k@202@00)
    (=>
      (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@23@00 underlyingBuf_V0@24@00)
      (>= result@25@00 0))))
  :pattern ((Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-169|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (let ((result@25@00 (Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))) true)
  :pattern ((Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-170|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@202@00))
(assert (<= $Perm.No $k@202@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types]), underlyingBuf_V0), wildcard) in (slen((ShStructget0of2(p_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(declare-const $k@204@00 $Perm)
(assert ($Perm.isReadVar $k@204@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@204@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@205@00 $Perm)
(assert ($Perm.isReadVar $k@205@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@202@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@205@00 $k@202@00))
(assert (<= $Perm.No (- $k@202@00 $k@205@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@205@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))) underlyingBuf_V0@24@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 43 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 43 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 44 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 44 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
; [else-branch: 45 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 45 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@23@00), pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first s@$)
  ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.second ($Snap.first s@$)))))
; [eval] (ShStructget0of2(fn$$1): Ref)
(assert (<= $Perm.No $k@204@00))
(assert (<= $k@204@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@204@00)
  (not
    (=
      (ShStructget0of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$1): Ref)
(assert (=>
  (< $Perm.No $k@204@00)
  (not
    (=
      (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (= ($Snap.second s@$) $Snap.unit))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == x0
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@204@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))
  underlyingBuf_V0@24@00))
; [eval] (slen((ShStructget0of2(p_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of2(p_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
  (ShStructget0of2<Ref> p_V0@23@00))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@204@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@205@00))
(assert (and
  (< $k@205@00 $k@202@00)
  (<= $Perm.No (- $k@202@00 $k@205@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))) underlyingBuf_V0@24@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (=
      ($Snap.first s@$)
      ($Snap.combine
        ($Snap.first ($Snap.first s@$))
        ($Snap.second ($Snap.first s@$))))
    (<= $Perm.No $k@204@00)
    (<= $k@204@00 $Perm.Write)
    (=>
      (< $Perm.No $k@204@00)
      (not
        (=
          (ShStructget0of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=>
      (< $Perm.No $k@204@00)
      (not
        (=
          (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
          $Ref.null)))
    (= ($Snap.second s@$) $Snap.unit)
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))
      underlyingBuf_V0@24@00))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@23@00) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@25@00
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))))))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@25@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@25@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@202@00)
    ($Perm.isReadVar $k@204@00)
    ($Perm.isReadVar $k@205@00)
    (=>
      (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@23@00 underlyingBuf_V0@24@00)
      (=
        (Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))))
  :pattern ((Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-171|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  true
  :pattern ((Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-172|)))
; ---------- FUNCTION Len_c6e60a1d_PMPath----------
(declare-fun p_V0@26@00 () ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ubuf_V0@27@00 () Slice<Ref>)
(declare-fun result@28@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@206@00 $Perm)
(assert ($Perm.isReadVar $k@206@00))
(assert (<= $Perm.No $k@206@00))
(declare-const $t@207@00 $Snap)
(assert (= $t@207@00 ($Snap.combine ($Snap.first $t@207@00) ($Snap.second $t@207@00))))
(assert (= ($Snap.first $t@207@00) $Snap.unit))
; [eval] !hasScionPath_c6e60a1d_PMPath(p_V0, ubuf_V0) ==> result == 16
; [eval] !hasScionPath_c6e60a1d_PMPath(p_V0, ubuf_V0)
; [eval] hasScionPath_c6e60a1d_PMPath(p_V0, ubuf_V0)
(push) ; 2
(declare-const $k@208@00 $Perm)
(assert ($Perm.isReadVar $k@208@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@206@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@208@00 $k@206@00))
(assert (<= $Perm.No (- $k@206@00 $k@208@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@208@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@208@00))
(assert (and
  (< $k@208@00 $k@206@00)
  (<= $Perm.No (- $k@206@00 $k@208@00))
  (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)))
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | !(hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00)) | live]
; [else-branch: 46 | hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 46 | !(hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00))]
(assert (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)))
; [eval] result == 16
(pop) ; 3
(push) ; 3
; [else-branch: 46 | hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00)]
(assert (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
  (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))))
(assert (=>
  (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
  (= result@28@00 16)))
(assert (= ($Snap.second $t@207@00) $Snap.unit))
; [eval] hasScionPath_c6e60a1d_PMPath(p_V0, ubuf_V0) ==> result == 16 + (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in Len_daeaf66a_PMRaw((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$, ssliceFromSlice_Ref(ubuf_V0, 16, (slen(ubuf_V0): Int))))
; [eval] hasScionPath_c6e60a1d_PMPath(p_V0, ubuf_V0)
(push) ; 2
(declare-const $k@209@00 $Perm)
(assert ($Perm.isReadVar $k@209@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@206@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@209@00 $k@206@00))
(assert (<= $Perm.No (- $k@206@00 $k@209@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@209@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@209@00))
(assert (and (< $k@209@00 $k@206@00) (<= $Perm.No (- $k@206@00 $k@209@00))))
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00) | live]
; [else-branch: 47 | !(hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 47 | hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00)]
(assert (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
; [eval] result == 16 + (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in Len_daeaf66a_PMRaw((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$, ssliceFromSlice_Ref(ubuf_V0, 16, (slen(ubuf_V0): Int))))
; [eval] 16 + (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in Len_daeaf66a_PMRaw((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$, ssliceFromSlice_Ref(ubuf_V0, 16, (slen(ubuf_V0): Int))))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in Len_daeaf66a_PMRaw((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$, ssliceFromSlice_Ref(ubuf_V0, 16, (slen(ubuf_V0): Int))))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@210@00 $Perm)
(assert ($Perm.isReadVar $k@210@00))
(push) ; 4
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(declare-const $k@211@00 $Perm)
(assert ($Perm.isReadVar $k@211@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@206@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@211@00 $k@206@00))
(assert (<= $Perm.No (- $k@206@00 $k@211@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@211@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) ubuf_V0@27@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 48 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 48 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 49 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 49 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 50 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 50 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 51 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 51 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 52 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 52 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](p_V0@26@00), pointer_Types[Types](Path_c6e60a1d_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first s@$)
  ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.second ($Snap.first s@$)))))
; [eval] (ShStructget0of2(fn$$3): Ref)
(declare-fun sm@212@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@212@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@210@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@210@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@210@00)
    false)
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$3): Ref)
(declare-fun sm@213@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@213@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@210@00
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    $k@210@00
    $Perm.No)
  $Perm.Write))
(assert (=>
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
    (< $Perm.No $k@210@00)
    false)
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
      $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@210@00))
(assert (<= $k@210@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@210@00)
  (not
    (=
      (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@210@00)
  (not
    (=
      (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$)))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second s@$))))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@210@00)
  (not
    (=
      (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  $Snap.unit))
; [eval] !((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 10
; Joined path conditions
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 16 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 16 (slen<Int> ubuf_V0@27@00)))
; [eval] (tuple2((box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
; [eval] ssliceFromSlice_Ref(x0, 16, (slen(x0): Int))
; [eval] (slen(x0): Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 11
(assert (not (<= (slen<Int> ubuf_V0@27@00) (scap<Int> ubuf_V0@27@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> ubuf_V0@27@00) (scap<Int> ubuf_V0@27@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00)))
(pop) ; 10
; Joined path conditions
(assert (and
  (<= (slen<Int> ubuf_V0@27@00) (scap<Int> ubuf_V0@27@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (=
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    ubuf_V0@27@00
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Len_daeaf66a_PMRaw((ShStructget3of4(p_V0): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$, ssliceFromSlice_Ref(ubuf_V0, 16, (slen(ubuf_V0): Int)))
; [eval] (ShStructget3of4(p_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
  (ShStructget3of4<Ref> p_V0@26@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 16, (slen(ubuf_V0): Int))
; [eval] (slen(ubuf_V0): Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 10
; Joined path conditions
(push) ; 10
(declare-const $k@214@00 $Perm)
(assert ($Perm.isReadVar $k@214@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@210@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@214@00 $k@210@00))
(assert (<= $Perm.No (- $k@210@00 $k@214@00)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@214@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMRaw%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@214@00))
(assert (and
  (< $k@214@00 $k@210@00)
  (<= $Perm.No (- $k@210@00 $k@214@00))
  (Len_daeaf66a_PMRaw%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00)))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@211@00))
(assert ($Perm.isReadVar $k@214@00))
(assert (and
  (< $k@211@00 $k@206@00)
  (<= $Perm.No (- $k@206@00 $k@211@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) ubuf_V0@27@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (=
      ($Snap.first s@$)
      ($Snap.combine
        ($Snap.first ($Snap.first s@$))
        ($Snap.second ($Snap.first s@$)))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@212@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@210@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@210@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@210@00)
        false)
      (not
        (=
          (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@213@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (<=
      $Perm.No
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@210@00
        $Perm.No))
    (<=
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        $k@210@00
        $Perm.No)
      $Perm.Write)
    (=>
      (ite
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
        (< $Perm.No $k@210@00)
        false)
      (not
        (=
          (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $Perm.No $k@210@00)
    (<= $k@210@00 $Perm.Write)
    (=>
      (< $Perm.No $k@210@00)
      (not
        (=
          (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (=>
      (< $Perm.No $k@210@00)
      (not
        (=
          (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=>
      (< $Perm.No $k@210@00)
      (not
        (=
          (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      $Snap.unit)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      $Snap.unit)
    (<= 16 (slen<Int> ubuf_V0@27@00))
    (<= (slen<Int> ubuf_V0@27@00) (scap<Int> ubuf_V0@27@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))
    (< $k@214@00 $k@210@00)
    (<= $Perm.No (- $k@210@00 $k@214@00))
    (Len_daeaf66a_PMRaw%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 47 | !(hasScionPath_c6e60a1d_PMPath(s@$, p_V0@26@00, ubuf_V0@27@00))]
(assert (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@210@00))
(assert ($Perm.isReadVar $k@211@00))
(assert ($Perm.isReadVar $k@214@00))
(assert (=>
  (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
  (and
    (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
    (< $k@211@00 $k@206@00)
    (<= $Perm.No (- $k@206@00 $k@211@00))
    (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) ubuf_V0@27@00)
    (=>
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (=>
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (=>
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (=>
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                  (as Path_4cddb96f_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (and
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
        (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
        (=
          ($Snap.first s@$)
          ($Snap.combine
            ($Snap.first ($Snap.first s@$))
            ($Snap.second ($Snap.first s@$))))))
    (=>
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                  (as Path_4cddb96f_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (and
        (=
          ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@212@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
        (<=
          $Perm.No
          (ite
            (=
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
            $k@210@00
            $Perm.No))
        (<=
          (ite
            (=
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
            $k@210@00
            $Perm.No)
          $Perm.Write)
        (=>
          (ite
            (=
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
            (< $Perm.No $k@210@00)
            false)
          (not
            (=
              (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              $Ref.null)))))
    (=>
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                  (as Path_4cddb96f_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
                (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (and
        (=
          ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@213@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
        (<=
          $Perm.No
          (ite
            (=
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
            $k@210@00
            $Perm.No))
        (<=
          (ite
            (=
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
            $k@210@00
            $Perm.No)
          $Perm.Write)
        (=>
          (ite
            (=
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
            (< $Perm.No $k@210@00)
            false)
          (not
            (=
              (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))))
              $Ref.null)))
        (=
          ($Snap.second s@$)
          ($Snap.combine
            ($Snap.first ($Snap.second s@$))
            ($Snap.second ($Snap.second s@$))))
        (<= $Perm.No $k@210@00)
        (<= $k@210@00 $Perm.Write)
        (=>
          (< $Perm.No $k@210@00)
          (not
            (=
              (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second s@$))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second s@$)))
            ($Snap.second ($Snap.second ($Snap.second s@$)))))
        (=
          ($Snap.second ($Snap.second ($Snap.second s@$)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        (=>
          (< $Perm.No $k@210@00)
          (not
            (=
              (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        (=>
          (< $Perm.No $k@210@00)
          (not
            (=
              (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
          $Snap.unit)
        (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
            (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          $Snap.unit)
        (<= 16 (slen<Int> ubuf_V0@27@00))
        (<= (slen<Int> ubuf_V0@27@00) (scap<Int> ubuf_V0@27@00))
        (ssliceFromSlice_Ref%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))
        (< $k@214@00 $k@210@00)
        (<= $Perm.No (- $k@210@00 $k@214@00))
        (Len_daeaf66a_PMRaw%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types))))))
; Joined path conditions
(assert (or
  (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
  (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)))
(assert (=>
  (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
  (=
    result@28@00
    (+
      16
      (Len_daeaf66a_PMRaw ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00)))))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (=
    (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00)
    (Len_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
  :pattern ((Len_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-24|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (Len_c6e60a1d_PMPath%stateless p_V0@26@00 ubuf_V0@27@00)
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-25|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (let ((result@28@00 (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))) (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@212@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@213@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    ($Perm.isReadVar $k@206@00)
    ($Perm.isReadVar $k@208@00)
    ($Perm.isReadVar $k@209@00)
    ($Perm.isReadVar $k@210@00)
    ($Perm.isReadVar $k@211@00)
    ($Perm.isReadVar $k@214@00)
    (=>
      (Len_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
      (and
        (=>
          (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
          (= result@28@00 16))
        (=>
          (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
          (=
            result@28@00
            (+
              16
              (Len_daeaf66a_PMRaw ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))))))))
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-173|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (let ((result@28@00 (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))) (=>
    (Len_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
    (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)))
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-174|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (let ((result@28@00 (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))) (=>
    (Len_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
    (and
      (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
      (=>
        (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
        (and
          (ssliceFromSlice_Ref%precondition ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))
          (Len_daeaf66a_PMRaw%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))))))
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-175|)))
; ---------- FUNCTION Len_c385169_PMPath----------
(declare-fun o_V0@29@00 () ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ubuf_V0@30@00 () Slice<Ref>)
(declare-fun result@31@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@215@00 $Snap)
(assert (= $t@215@00 $Snap.unit))
; [eval] result == 32
(assert (= result@31@00 32))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (=
    (Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00)
    (Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :pattern ((Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-26|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (Len_c385169_PMPath%stateless o_V0@29@00 ubuf_V0@30@00)
  :pattern ((Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-27|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (let ((result@31@00 (Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))) (=>
    (Len_c385169_PMPath%precondition s@$ o_V0@29@00 ubuf_V0@30@00)
    (= result@31@00 32)))
  :pattern ((Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-176|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (let ((result@31@00 (Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))) true)
  :pattern ((Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-177|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@31@00 32))
; [eval] result == 32
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (=>
    (Len_c385169_PMPath%precondition s@$ o_V0@29@00 ubuf_V0@30@00)
    (= (Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00) 32))
  :pattern ((Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-178|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  true
  :pattern ((Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-179|)))
; ---------- FUNCTION Len_daeaf66a_PMDecoded----------
(declare-fun d_V0@32@00 () ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ubuf_V0@33@00 () Slice<Ref>)
(declare-fun result@34@00 () Int)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(declare-const $k@216@00 $Perm)
(assert ($Perm.isReadVar $k@216@00))
(assert (<= $Perm.No $k@216@00))
(declare-const $t@217@00 $Snap)
(assert (= $t@217@00 ($Snap.combine ($Snap.first $t@217@00) ($Snap.second $t@217@00))))
(assert (= ($Snap.first $t@217@00) $Snap.unit))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in result == Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(declare-const $k@218@00 $Perm)
(assert ($Perm.isReadVar $k@218@00))
(push) ; 2
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@219@00 $Perm)
(assert ($Perm.isReadVar $k@219@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@216@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@219@00 $k@216@00))
(assert (<= $Perm.No (- $k@216@00 $k@219@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@219@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))) ubuf_V0@33@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 53 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 53 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 54 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 54 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 55 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 55 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 56 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 56 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
; [else-branch: 57 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 57 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 58 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 58 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@218@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $k@218@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@218@00)
  (not
    (=
      (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])) <= 3
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(declare-const $k@220@00 $Perm)
(assert ($Perm.isReadVar $k@220@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@218@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@220@00 $k@218@00) $k@218@00))
(assert (<= $Perm.No (- $k@218@00 (* $k@220@00 $k@218@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@220@00 $k@218@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@220@00))
(assert (and
  (< (* $k@220@00 $k@218@00) $k@218@00)
  (<= $Perm.No (- $k@218@00 (* $k@220@00 $k@218@00)))
  (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (<=
  (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@221@00 $Perm)
(assert ($Perm.isReadVar $k@221@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@218@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@221@00 $k@218@00) $k@218@00))
(assert (<= $Perm.No (- $k@218@00 (* $k@221@00 $k@218@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@221@00 $k@218@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@221@00))
(assert (and
  (< (* $k@221@00 $k@218@00) $k@218@00)
  (<= $Perm.No (- $k@218@00 (* $k@221@00 $k@218@00)))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))
  (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(declare-const i_V1@222@00 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 59 | 0 <= i_V1@222@00 | live]
; [else-branch: 59 | !(0 <= i_V1@222@00) | live]
(push) ; 11
; [then-branch: 59 | 0 <= i_V1@222@00]
(assert (<= 0 i_V1@222@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 60 | i_V1@222@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 60 | !(i_V1@222@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 60 | i_V1@222@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@222@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))
(declare-fun letvar@223@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@223@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@222@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 60 | !(i_V1@222@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@222@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@222@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@222@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)
    (=
      (letvar@223@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@222@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@222@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@222@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 59 | !(0 <= i_V1@222@00)]
(assert (not (<= 0 i_V1@222@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@222@00)
  (and
    (<= 0 i_V1@222@00)
    (=>
      (<
        i_V1@222@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@222@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)
        (=
          (letvar@223@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@222@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))))
    (or
      (not
        (<
          i_V1@222@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@222@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@222@00)) (<= 0 i_V1@222@00)))
(assert (and
  (<
    i_V1@222@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@222@00)))
; [eval] (ShStructget0of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))
(pop) ; 9
(declare-fun inv@224@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@222@00 Int)) (!
  (=>
    (and
      (<
        i_V1@222@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@222@00))
    (and
      (=>
        (<= 0 i_V1@222@00)
        (and
          (<= 0 i_V1@222@00)
          (=>
            (<
              i_V1@222@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@222@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)
              (=
                (letvar@223@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@222@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))))
          (or
            (not
              (<
                i_V1@222@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@222@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@222@00)) (<= 0 i_V1@222@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@222@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@222@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@222@00))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :qid |quant-u-181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@222@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@222@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@222@00))
      (< $Perm.No $k@218@00))
    (=
      (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))))
      i_V1@222@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :qid |quant-u-181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@222@00 Int)) (!
  (<= $Perm.No $k@218@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :qid |Bool$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@222@00 Int)) (!
  (<= $k@218@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :qid |Bool$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@222@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@222@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@222@00))
      (< $Perm.No $k@218@00))
    (not
      (=
        (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
(declare-const i_V1@225@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 61 | 0 <= i_V1@225@00 | live]
; [else-branch: 61 | !(0 <= i_V1@225@00) | live]
(push) ; 11
; [then-branch: 61 | 0 <= i_V1@225@00]
(assert (<= 0 i_V1@225@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 62 | i_V1@225@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 62 | !(i_V1@225@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 62 | i_V1@225@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@225@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))
(declare-fun letvar@226@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@226@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@225@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 62 | !(i_V1@225@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@225@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@225@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@225@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)
    (=
      (letvar@226@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@225@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@225@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@225@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 61 | !(0 <= i_V1@225@00)]
(assert (not (<= 0 i_V1@225@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@225@00)
  (and
    (<= 0 i_V1@225@00)
    (=>
      (<
        i_V1@225@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@225@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)
        (=
          (letvar@226@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@225@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))))
    (or
      (not
        (<
          i_V1@225@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@225@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@225@00)) (<= 0 i_V1@225@00)))
(assert (and
  (<
    i_V1@225@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@225@00)))
; [eval] (ShStructget1of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))
(pop) ; 9
(declare-fun inv@227@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@225@00 Int)) (!
  (=>
    (and
      (<
        i_V1@225@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@225@00))
    (and
      (=>
        (<= 0 i_V1@225@00)
        (and
          (<= 0 i_V1@225@00)
          (=>
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@225@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)
              (=
                (letvar@226@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@225@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))))
          (or
            (not
              (<
                i_V1@225@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@225@00)) (<= 0 i_V1@225@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@225@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@225@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@225@00))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :qid |quant-u-183|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@225@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@225@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@225@00))
      (< $Perm.No $k@218@00))
    (=
      (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))))
      i_V1@225@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :qid |quant-u-183|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@225@00 Int)) (!
  (<= $Perm.No $k@218@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :qid |Bool$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@225@00 Int)) (!
  (<= $k@218@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :qid |Bool$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@225@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@225@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@225@00))
      (< $Perm.No $k@218@00))
    (not
      (=
        (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(declare-const i_V1@228@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 63 | 0 <= i_V1@228@00 | live]
; [else-branch: 63 | !(0 <= i_V1@228@00) | live]
(push) ; 11
; [then-branch: 63 | 0 <= i_V1@228@00]
(assert (<= 0 i_V1@228@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 64 | i_V1@228@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 64 | !(i_V1@228@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 64 | i_V1@228@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@228@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))
(declare-fun letvar@229@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@229@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@228@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 64 | !(i_V1@228@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@228@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@228@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@228@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)
    (=
      (letvar@229@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@228@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@228@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@228@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 63 | !(0 <= i_V1@228@00)]
(assert (not (<= 0 i_V1@228@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@228@00)
  (and
    (<= 0 i_V1@228@00)
    (=>
      (<
        i_V1@228@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@228@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)
        (=
          (letvar@229@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@228@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))))
    (or
      (not
        (<
          i_V1@228@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@228@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@228@00)) (<= 0 i_V1@228@00)))
(assert (and
  (<
    i_V1@228@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@228@00)))
; [eval] (ShStructget2of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))
(pop) ; 9
(declare-fun inv@230@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@228@00 Int)) (!
  (=>
    (and
      (<
        i_V1@228@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@228@00))
    (and
      (=>
        (<= 0 i_V1@228@00)
        (and
          (<= 0 i_V1@228@00)
          (=>
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@228@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)
              (=
                (letvar@229@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@228@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))))
          (or
            (not
              (<
                i_V1@228@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@228@00)) (<= 0 i_V1@228@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :qid |Intuint16$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@228@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@228@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@228@00))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :qid |quant-u-185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@228@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@228@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@228@00))
      (< $Perm.No $k@218@00))
    (=
      (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))))
      i_V1@228@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :qid |quant-u-185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@228@00 Int)) (!
  (<= $Perm.No $k@218@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :qid |Intuint16$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@228@00 Int)) (!
  (<= $k@218@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :qid |Intuint16$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@228@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@228@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@228@00))
      (< $Perm.No $k@218@00))
    (not
      (=
        (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
  :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(declare-const i_V1@231@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 65 | 0 <= i_V1@231@00 | live]
; [else-branch: 65 | !(0 <= i_V1@231@00) | live]
(push) ; 11
; [then-branch: 65 | 0 <= i_V1@231@00]
(assert (<= 0 i_V1@231@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 66 | i_V1@231@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 66 | !(i_V1@231@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 66 | i_V1@231@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@231@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))
(declare-fun letvar@232@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@232@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@231@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 66 | !(i_V1@231@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@231@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@231@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@231@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)
    (=
      (letvar@232@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@231@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@231@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@231@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 65 | !(0 <= i_V1@231@00)]
(assert (not (<= 0 i_V1@231@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@231@00)
  (and
    (<= 0 i_V1@231@00)
    (=>
      (<
        i_V1@231@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@231@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)
        (=
          (letvar@232@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@231@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))))
    (or
      (not
        (<
          i_V1@231@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@231@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@231@00)) (<= 0 i_V1@231@00)))
(assert (and
  (<
    i_V1@231@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@231@00)))
; [eval] (ShStructget3of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))
(pop) ; 9
(declare-fun inv@233@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@231@00 Int)) (!
  (=>
    (and
      (<
        i_V1@231@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@231@00))
    (and
      (=>
        (<= 0 i_V1@231@00)
        (and
          (<= 0 i_V1@231@00)
          (=>
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@231@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)
              (=
                (letvar@232@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@231@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))))
          (or
            (not
              (<
                i_V1@231@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@231@00)) (<= 0 i_V1@231@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :qid |Intuint32$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@231@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@231@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@231@00))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :qid |quant-u-187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@231@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@231@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@231@00))
      (< $Perm.No $k@218@00))
    (=
      (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))))
      i_V1@231@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :qid |quant-u-187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@231@00 Int)) (!
  (<= $Perm.No $k@218@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :qid |Intuint32$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@231@00 Int)) (!
  (<= $k@218@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :qid |Intuint32$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@231@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@231@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@231@00))
      (< $Perm.No $k@218@00))
    (not
      (=
        (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
  :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@218@00)
  (not
    (=
      (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@234@00 $Perm)
(assert ($Perm.isReadVar $k@234@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@218@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@234@00 $k@218@00) $k@218@00))
(assert (<= $Perm.No (- $k@218@00 (* $k@234@00 $k@218@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@234@00 $k@218@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@234@00))
(assert (and
  (< (* $k@234@00 $k@218@00) $k@218@00)
  (<= $Perm.No (- $k@218@00 (* $k@234@00 $k@218@00)))
  (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (getNumHops_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(declare-const i_V2@235@00 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V2 && i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V2
(push) ; 10
; [then-branch: 67 | 0 <= i_V2@235@00 | live]
; [else-branch: 67 | !(0 <= i_V2@235@00) | live]
(push) ; 11
; [then-branch: 67 | 0 <= i_V2@235@00]
(assert (<= 0 i_V2@235@00))
; [eval] i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 67 | !(0 <= i_V2@235@00)]
(assert (not (<= 0 i_V2@235@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V2@235@00)) (<= 0 i_V2@235@00)))
(assert (and
  (<
    i_V2@235@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (<= 0 i_V2@235@00)))
; [eval] (ShArrayloc((sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
; [eval] (sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)
; [eval] (soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00))
(pop) ; 9
(declare-fun inv@236@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@235@00 Int)) (!
  (=>
    (and
      (<
        i_V2@235@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (<= 0 i_V2@235@00))
    (and
      (or (not (<= 0 i_V2@235@00)) (<= 0 i_V2@235@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
  :qid |Mem_a6ceb89d_PMHopField-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V2@235@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V2@235@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 i_V2@235@00))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
  :qid |quant-u-189|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
  :pattern ((inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((i_V2@235@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V2@235@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 i_V2@235@00))
      (< $Perm.No $k@218@00))
    (=
      (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      i_V2@235@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
  :qid |quant-u-189|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@218@00))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      h_V0))
  :pattern ((inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V2@235@00 Int)) (!
  (<= $Perm.No $k@218@00)
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
  :qid |Mem_a6ceb89d_PMHopField-permAtLeastZero|)))
; [eval] result == Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
(push) ; 9
(declare-const $k@237@00 $Perm)
(assert ($Perm.isReadVar $k@237@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
  (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@218@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@237@00 $k@218@00))
(assert (<= $Perm.No (- $k@218@00 $k@237@00)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@237@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@237@00))
(assert (and
  (< $k@237@00 $k@218@00)
  (<= $Perm.No (- $k@218@00 $k@237@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@219@00))
(assert ($Perm.isReadVar $k@220@00))
(assert ($Perm.isReadVar $k@221@00))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@218@00))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert ($Perm.isReadVar $k@234@00))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@218@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
  :pattern ((inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@218@00))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      h_V0))
  :pattern ((inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert ($Perm.isReadVar $k@237@00))
(assert (and
  (< $k@219@00 $k@216@00)
  (<= $Perm.No (- $k@216@00 $k@219@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))) ubuf_V0@33@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@218@00)
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $k@218@00 $Perm.Write)
    (=>
      (< $Perm.No $k@218@00)
      (not
        (=
          (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit)
    (< (* $k@220@00 $k@218@00) $k@218@00)
    (<= $Perm.No (- $k@218@00 (* $k@220@00 $k@218@00)))
    (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
    (<=
      (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
      3)
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit)
    (< (* $k@221@00 $k@218@00) $k@218@00)
    (<= $Perm.No (- $k@218@00 (* $k@221@00 $k@218@00)))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))
      (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (forall ((i_V1@222@00 Int)) (!
      (=>
        (and
          (<
            i_V1@222@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@222@00))
        (and
          (=>
            (<= 0 i_V1@222@00)
            (and
              (<= 0 i_V1@222@00)
              (=>
                (<
                  i_V1@222@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@222@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)
                  (=
                    (letvar@223@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@222@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))))
              (or
                (not
                  (<
                    i_V1@222@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@222@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@222@00)) (<= 0 i_V1@222@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |Bool$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@222@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@222@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@222@00))
          (< $Perm.No $k@218@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |quant-u-181|))
    (forall ((i_V1@222@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@222@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@222@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))))
          i_V1@222@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |quant-u-181|))
    (forall ((i_V1@222@00 Int)) (!
      (<= $Perm.No $k@218@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |Bool$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@222@00 Int)) (!
      (<= $k@218@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |Bool$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@222@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@222@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@222@00))
          (< $Perm.No $k@218@00))
        (not
          (=
            (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |Bool$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (forall ((i_V1@225@00 Int)) (!
      (=>
        (and
          (<
            i_V1@225@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@225@00))
        (and
          (=>
            (<= 0 i_V1@225@00)
            (and
              (<= 0 i_V1@225@00)
              (=>
                (<
                  i_V1@225@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@225@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)
                  (=
                    (letvar@226@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@225@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))))
              (or
                (not
                  (<
                    i_V1@225@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@225@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@225@00)) (<= 0 i_V1@225@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |Bool$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@225@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@225@00))
          (< $Perm.No $k@218@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |quant-u-183|))
    (forall ((i_V1@225@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@225@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))))
          i_V1@225@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |quant-u-183|))
    (forall ((i_V1@225@00 Int)) (!
      (<= $Perm.No $k@218@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |Bool$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@225@00 Int)) (!
      (<= $k@218@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |Bool$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@225@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@225@00))
          (< $Perm.No $k@218@00))
        (not
          (=
            (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |Bool$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (forall ((i_V1@228@00 Int)) (!
      (=>
        (and
          (<
            i_V1@228@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@228@00))
        (and
          (=>
            (<= 0 i_V1@228@00)
            (and
              (<= 0 i_V1@228@00)
              (=>
                (<
                  i_V1@228@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@228@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)
                  (=
                    (letvar@229@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@228@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))))
              (or
                (not
                  (<
                    i_V1@228@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@228@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@228@00)) (<= 0 i_V1@228@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |Intuint16$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@228@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@228@00))
          (< $Perm.No $k@218@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |quant-u-185|))
    (forall ((i_V1@228@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@228@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))))
          i_V1@228@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |quant-u-185|))
    (forall ((i_V1@228@00 Int)) (!
      (<= $Perm.No $k@218@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |Intuint16$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@228@00 Int)) (!
      (<= $k@218@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |Intuint16$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@228@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@228@00))
          (< $Perm.No $k@218@00))
        (not
          (=
            (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (forall ((i_V1@231@00 Int)) (!
      (=>
        (and
          (<
            i_V1@231@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@231@00))
        (and
          (=>
            (<= 0 i_V1@231@00)
            (and
              (<= 0 i_V1@231@00)
              (=>
                (<
                  i_V1@231@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@231@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)
                  (=
                    (letvar@232@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@231@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))))
              (or
                (not
                  (<
                    i_V1@231@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@231@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@231@00)) (<= 0 i_V1@231@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |Intuint32$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@231@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@231@00))
          (< $Perm.No $k@218@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |quant-u-187|))
    (forall ((i_V1@231@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@231@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))))
          i_V1@231@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |quant-u-187|))
    (forall ((i_V1@231@00 Int)) (!
      (<= $Perm.No $k@218@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |Intuint32$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@231@00 Int)) (!
      (<= $k@218@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |Intuint32$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@231@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@231@00))
          (< $Perm.No $k@218@00))
        (not
          (=
            (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=>
      (< $Perm.No $k@218@00)
      (not
        (=
          (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      $Snap.unit)
    (< (* $k@234@00 $k@218@00) $k@218@00)
    (<= $Perm.No (- $k@218@00 (* $k@234@00 $k@218@00)))
    (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      (getNumHops_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
    (forall ((i_V2@235@00 Int)) (!
      (=>
        (and
          (<
            i_V2@235@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          (<= 0 i_V2@235@00))
        (and
          (or (not (<= 0 i_V2@235@00)) (<= 0 i_V2@235@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      :qid |Mem_a6ceb89d_PMHopField-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V2@235@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@235@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@235@00))
          (< $Perm.No $k@218@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      :qid |quant-u-189|))
    (forall ((i_V2@235@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@235@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@235@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
          i_V2@235@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      :qid |quant-u-189|))
    (forall ((i_V2@235@00 Int)) (!
      (<= $Perm.No $k@218@00)
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      :qid |Mem_a6ceb89d_PMHopField-permAtLeastZero|))
    (< $k@237@00 $k@218@00)
    (<= $Perm.No (- $k@218@00 $k@237@00))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@34@00
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(assert (= ($Snap.second $t@217@00) $Snap.unit))
; [eval] result >= 0
(assert (>= result@34@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (=
    (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00)
    (Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :pattern ((Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-28|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (Len_daeaf66a_PMDecoded%stateless d_V0@32@00 ubuf_V0@33@00)
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-29|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (let ((result@34@00 (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))) (and
    (forall ((i_V1@222@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@222@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@222@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00))))
          i_V1@222@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@222@00)))
      :qid |quant-u-181|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@218@00))
        (=
          (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@224@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@225@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@225@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))))
          i_V1@225@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |quant-u-183|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@218@00))
        (=
          (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@228@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@228@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))))
          i_V1@228@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |quant-u-185|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@218@00))
        (=
          (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint16$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@231@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@231@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))))
          i_V1@231@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |quant-u-187|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@218@00))
        (=
          (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint32$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@235@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@235@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@235@00))
          (< $Perm.No $k@218@00))
        (=
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
          i_V2@235@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@235@00)))
      :qid |quant-u-189|))
    (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
      (=>
        (and
          (and
            (<
              (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          (< $Perm.No $k@218@00))
        (=
          (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          h_V0))
      :pattern ((inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
      :qid |Mem_a6ceb89d_PMHopField-fctOfInv|))
    ($Perm.isReadVar $k@216@00)
    ($Perm.isReadVar $k@218@00)
    ($Perm.isReadVar $k@219@00)
    ($Perm.isReadVar $k@220@00)
    ($Perm.isReadVar $k@221@00)
    ($Perm.isReadVar $k@234@00)
    ($Perm.isReadVar $k@237@00)
    (=>
      (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
      (and
        (=
          result@34@00
          (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
        (>= result@34@00 0)))))
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-190|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (let ((result@34@00 (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))) (=>
    (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-191|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (let ((result@34@00 (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))) true)
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-192|)))
; ----- Verification of function body and postcondition -----
(set-option :timeout 0)
(push) ; 1
(assert ($Perm.isReadVar $k@216@00))
(assert (<= $Perm.No $k@216@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(declare-const $k@238@00 $Perm)
(assert ($Perm.isReadVar $k@238@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@239@00 $Perm)
(assert ($Perm.isReadVar $k@239@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@216@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@239@00 $k@216@00))
(assert (<= $Perm.No (- $k@216@00 $k@239@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@239@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))) ubuf_V0@33@00))
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 68 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 68 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 69 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 69 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 70 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 70 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 71 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 71 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
; [else-branch: 72 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 72 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 73 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 73 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@238@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $k@238@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@238@00)
  (not
    (=
      (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])) <= 3
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(declare-const $k@240@00 $Perm)
(assert ($Perm.isReadVar $k@240@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@238@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@240@00 $k@238@00) $k@238@00))
(assert (<= $Perm.No (- $k@238@00 (* $k@240@00 $k@238@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@240@00 $k@238@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@240@00))
(assert (and
  (< (* $k@240@00 $k@238@00) $k@238@00)
  (<= $Perm.No (- $k@238@00 (* $k@240@00 $k@238@00)))
  (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (<=
  (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@241@00 $Perm)
(assert ($Perm.isReadVar $k@241@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@238@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@241@00 $k@238@00) $k@238@00))
(assert (<= $Perm.No (- $k@238@00 (* $k@241@00 $k@238@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@241@00 $k@238@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@241@00))
(assert (and
  (< (* $k@241@00 $k@238@00) $k@238@00)
  (<= $Perm.No (- $k@238@00 (* $k@241@00 $k@238@00)))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))
  (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(declare-const i_V1@242@00 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 74 | 0 <= i_V1@242@00 | live]
; [else-branch: 74 | !(0 <= i_V1@242@00) | live]
(push) ; 11
; [then-branch: 74 | 0 <= i_V1@242@00]
(assert (<= 0 i_V1@242@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 75 | i_V1@242@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 75 | !(i_V1@242@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 75 | i_V1@242@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@242@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))
(declare-fun letvar@243@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@243@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@242@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 75 | !(i_V1@242@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@242@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@242@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@242@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)
    (=
      (letvar@243@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@242@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@242@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@242@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 74 | !(0 <= i_V1@242@00)]
(assert (not (<= 0 i_V1@242@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@242@00)
  (and
    (<= 0 i_V1@242@00)
    (=>
      (<
        i_V1@242@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@242@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)
        (=
          (letvar@243@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@242@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))))
    (or
      (not
        (<
          i_V1@242@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@242@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@242@00)) (<= 0 i_V1@242@00)))
(assert (and
  (<
    i_V1@242@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@242@00)))
; [eval] (ShStructget0of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))
(pop) ; 9
(declare-fun inv@244@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@242@00 Int)) (!
  (=>
    (and
      (<
        i_V1@242@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@242@00))
    (and
      (=>
        (<= 0 i_V1@242@00)
        (and
          (<= 0 i_V1@242@00)
          (=>
            (<
              i_V1@242@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@242@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)
              (=
                (letvar@243@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@242@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))))
          (or
            (not
              (<
                i_V1@242@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@242@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@242@00)) (<= 0 i_V1@242@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@242@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@242@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@242@00))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :qid |quant-u-194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@242@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@242@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@242@00))
      (< $Perm.No $k@238@00))
    (=
      (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))))
      i_V1@242@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :qid |quant-u-194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@242@00 Int)) (!
  (<= $Perm.No $k@238@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :qid |Bool$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@242@00 Int)) (!
  (<= $k@238@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :qid |Bool$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@242@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@242@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@242@00))
      (< $Perm.No $k@238@00))
    (not
      (=
        (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
(declare-const i_V1@245@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 76 | 0 <= i_V1@245@00 | live]
; [else-branch: 76 | !(0 <= i_V1@245@00) | live]
(push) ; 11
; [then-branch: 76 | 0 <= i_V1@245@00]
(assert (<= 0 i_V1@245@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 77 | i_V1@245@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 77 | !(i_V1@245@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 77 | i_V1@245@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@245@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))
(declare-fun letvar@246@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@246@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@245@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 77 | !(i_V1@245@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@245@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@245@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@245@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)
    (=
      (letvar@246@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@245@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@245@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@245@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 76 | !(0 <= i_V1@245@00)]
(assert (not (<= 0 i_V1@245@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@245@00)
  (and
    (<= 0 i_V1@245@00)
    (=>
      (<
        i_V1@245@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@245@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)
        (=
          (letvar@246@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@245@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))))
    (or
      (not
        (<
          i_V1@245@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@245@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@245@00)) (<= 0 i_V1@245@00)))
(assert (and
  (<
    i_V1@245@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@245@00)))
; [eval] (ShStructget1of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))
(pop) ; 9
(declare-fun inv@247@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@245@00 Int)) (!
  (=>
    (and
      (<
        i_V1@245@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@245@00))
    (and
      (=>
        (<= 0 i_V1@245@00)
        (and
          (<= 0 i_V1@245@00)
          (=>
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@245@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)
              (=
                (letvar@246@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@245@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))))
          (or
            (not
              (<
                i_V1@245@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@245@00)) (<= 0 i_V1@245@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@245@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@245@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@245@00))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :qid |quant-u-196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@245@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@245@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@245@00))
      (< $Perm.No $k@238@00))
    (=
      (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))))
      i_V1@245@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :qid |quant-u-196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@245@00 Int)) (!
  (<= $Perm.No $k@238@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :qid |Bool$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@245@00 Int)) (!
  (<= $k@238@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :qid |Bool$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@245@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@245@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@245@00))
      (< $Perm.No $k@238@00))
    (not
      (=
        (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(declare-const i_V1@248@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 78 | 0 <= i_V1@248@00 | live]
; [else-branch: 78 | !(0 <= i_V1@248@00) | live]
(push) ; 11
; [then-branch: 78 | 0 <= i_V1@248@00]
(assert (<= 0 i_V1@248@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 79 | i_V1@248@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 79 | !(i_V1@248@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 79 | i_V1@248@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@248@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))
(declare-fun letvar@249@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@249@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@248@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 79 | !(i_V1@248@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@248@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@248@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@248@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)
    (=
      (letvar@249@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@248@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@248@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@248@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 78 | !(0 <= i_V1@248@00)]
(assert (not (<= 0 i_V1@248@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@248@00)
  (and
    (<= 0 i_V1@248@00)
    (=>
      (<
        i_V1@248@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@248@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)
        (=
          (letvar@249@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@248@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))))
    (or
      (not
        (<
          i_V1@248@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@248@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@248@00)) (<= 0 i_V1@248@00)))
(assert (and
  (<
    i_V1@248@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@248@00)))
; [eval] (ShStructget2of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))
(pop) ; 9
(declare-fun inv@250@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@248@00 Int)) (!
  (=>
    (and
      (<
        i_V1@248@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@248@00))
    (and
      (=>
        (<= 0 i_V1@248@00)
        (and
          (<= 0 i_V1@248@00)
          (=>
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@248@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)
              (=
                (letvar@249@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@248@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))))
          (or
            (not
              (<
                i_V1@248@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@248@00)) (<= 0 i_V1@248@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :qid |Intuint16$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@248@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@248@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@248@00))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :qid |quant-u-198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@248@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@248@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@248@00))
      (< $Perm.No $k@238@00))
    (=
      (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))))
      i_V1@248@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :qid |quant-u-198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@248@00 Int)) (!
  (<= $Perm.No $k@238@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :qid |Intuint16$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@248@00 Int)) (!
  (<= $k@238@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :qid |Intuint16$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@248@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@248@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@248@00))
      (< $Perm.No $k@238@00))
    (not
      (=
        (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
  :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(declare-const i_V1@251@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 80 | 0 <= i_V1@251@00 | live]
; [else-branch: 80 | !(0 <= i_V1@251@00) | live]
(push) ; 11
; [then-branch: 80 | 0 <= i_V1@251@00]
(assert (<= 0 i_V1@251@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 81 | i_V1@251@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 81 | !(i_V1@251@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 81 | i_V1@251@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@251@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))
(declare-fun letvar@252@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@252@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@251@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 81 | !(i_V1@251@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@251@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@251@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@251@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)
    (=
      (letvar@252@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@251@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@251@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@251@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 80 | !(0 <= i_V1@251@00)]
(assert (not (<= 0 i_V1@251@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@251@00)
  (and
    (<= 0 i_V1@251@00)
    (=>
      (<
        i_V1@251@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@251@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)
        (=
          (letvar@252@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@251@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))))
    (or
      (not
        (<
          i_V1@251@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@251@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@251@00)) (<= 0 i_V1@251@00)))
(assert (and
  (<
    i_V1@251@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@251@00)))
; [eval] (ShStructget3of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))
(pop) ; 9
(declare-fun inv@253@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@251@00 Int)) (!
  (=>
    (and
      (<
        i_V1@251@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@251@00))
    (and
      (=>
        (<= 0 i_V1@251@00)
        (and
          (<= 0 i_V1@251@00)
          (=>
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@251@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)
              (=
                (letvar@252@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@251@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))))
          (or
            (not
              (<
                i_V1@251@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@251@00)) (<= 0 i_V1@251@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :qid |Intuint32$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@251@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@251@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@251@00))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :qid |quant-u-200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@251@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@251@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@251@00))
      (< $Perm.No $k@238@00))
    (=
      (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))))
      i_V1@251@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :qid |quant-u-200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@251@00 Int)) (!
  (<= $Perm.No $k@238@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :qid |Intuint32$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@251@00 Int)) (!
  (<= $k@238@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :qid |Intuint32$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@251@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@251@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@251@00))
      (< $Perm.No $k@238@00))
    (not
      (=
        (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
  :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@238@00)
  (not
    (=
      (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@254@00 $Perm)
(assert ($Perm.isReadVar $k@254@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@238@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@254@00 $k@238@00) $k@238@00))
(assert (<= $Perm.No (- $k@238@00 (* $k@254@00 $k@238@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@254@00 $k@238@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@254@00))
(assert (and
  (< (* $k@254@00 $k@238@00) $k@238@00)
  (<= $Perm.No (- $k@238@00 (* $k@254@00 $k@238@00)))
  (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (getNumHops_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(declare-const i_V2@255@00 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V2 && i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V2
(push) ; 10
; [then-branch: 82 | 0 <= i_V2@255@00 | live]
; [else-branch: 82 | !(0 <= i_V2@255@00) | live]
(push) ; 11
; [then-branch: 82 | 0 <= i_V2@255@00]
(assert (<= 0 i_V2@255@00))
; [eval] i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 82 | !(0 <= i_V2@255@00)]
(assert (not (<= 0 i_V2@255@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V2@255@00)) (<= 0 i_V2@255@00)))
(assert (and
  (<
    i_V2@255@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (<= 0 i_V2@255@00)))
; [eval] (ShArrayloc((sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
; [eval] (sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)
; [eval] (soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00))
(pop) ; 9
(declare-fun inv@256@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@255@00 Int)) (!
  (=>
    (and
      (<
        i_V2@255@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (<= 0 i_V2@255@00))
    (and
      (or (not (<= 0 i_V2@255@00)) (<= 0 i_V2@255@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
  :qid |Mem_a6ceb89d_PMHopField-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V2@255@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V2@255@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 i_V2@255@00))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
  :qid |quant-u-202|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
  :pattern ((inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((i_V2@255@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V2@255@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 i_V2@255@00))
      (< $Perm.No $k@238@00))
    (=
      (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      i_V2@255@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
  :qid |quant-u-202|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@238@00))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      h_V0))
  :pattern ((inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V2@255@00 Int)) (!
  (<= $Perm.No $k@238@00)
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
  :qid |Mem_a6ceb89d_PMHopField-permAtLeastZero|)))
; [eval] Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
(push) ; 9
(declare-const $k@257@00 $Perm)
(assert ($Perm.isReadVar $k@257@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
  (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@238@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@257@00 $k@238@00))
(assert (<= $Perm.No (- $k@238@00 $k@257@00)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@257@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@257@00))
(assert (and
  (< $k@257@00 $k@238@00)
  (<= $Perm.No (- $k@238@00 $k@257@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@239@00))
(assert ($Perm.isReadVar $k@240@00))
(assert ($Perm.isReadVar $k@241@00))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@238@00))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert ($Perm.isReadVar $k@254@00))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@238@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
  :pattern ((inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@238@00))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      h_V0))
  :pattern ((inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert ($Perm.isReadVar $k@257@00))
(assert (and
  (< $k@239@00 $k@216@00)
  (<= $Perm.No (- $k@216@00 $k@239@00))
  (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))) ubuf_V0@33@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (as Path_4cddb96f_T_Types<Types>  Types)))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (as Path_4cddb96f_T_Types<Types>  Types)))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (as Path_4cddb96f_T_Types<Types>  Types)))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@238@00)
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $k@238@00 $Perm.Write)
    (=>
      (< $Perm.No $k@238@00)
      (not
        (=
          (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit)
    (< (* $k@240@00 $k@238@00) $k@238@00)
    (<= $Perm.No (- $k@238@00 (* $k@240@00 $k@238@00)))
    (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
    (<=
      (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
      3)
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit)
    (< (* $k@241@00 $k@238@00) $k@238@00)
    (<= $Perm.No (- $k@238@00 (* $k@241@00 $k@238@00)))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))
      (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (forall ((i_V1@242@00 Int)) (!
      (=>
        (and
          (<
            i_V1@242@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@242@00))
        (and
          (=>
            (<= 0 i_V1@242@00)
            (and
              (<= 0 i_V1@242@00)
              (=>
                (<
                  i_V1@242@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@242@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)
                  (=
                    (letvar@243@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@242@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))))
              (or
                (not
                  (<
                    i_V1@242@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@242@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@242@00)) (<= 0 i_V1@242@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |Bool$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@242@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@242@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@242@00))
          (< $Perm.No $k@238@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |quant-u-194|))
    (forall ((i_V1@242@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@242@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@242@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))))
          i_V1@242@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |quant-u-194|))
    (forall ((i_V1@242@00 Int)) (!
      (<= $Perm.No $k@238@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |Bool$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@242@00 Int)) (!
      (<= $k@238@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |Bool$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@242@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@242@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@242@00))
          (< $Perm.No $k@238@00))
        (not
          (=
            (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |Bool$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (forall ((i_V1@245@00 Int)) (!
      (=>
        (and
          (<
            i_V1@245@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@245@00))
        (and
          (=>
            (<= 0 i_V1@245@00)
            (and
              (<= 0 i_V1@245@00)
              (=>
                (<
                  i_V1@245@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@245@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)
                  (=
                    (letvar@246@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@245@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))))
              (or
                (not
                  (<
                    i_V1@245@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@245@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@245@00)) (<= 0 i_V1@245@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |Bool$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@245@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@245@00))
          (< $Perm.No $k@238@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |quant-u-196|))
    (forall ((i_V1@245@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@245@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))))
          i_V1@245@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |quant-u-196|))
    (forall ((i_V1@245@00 Int)) (!
      (<= $Perm.No $k@238@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |Bool$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@245@00 Int)) (!
      (<= $k@238@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |Bool$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@245@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@245@00))
          (< $Perm.No $k@238@00))
        (not
          (=
            (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |Bool$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (forall ((i_V1@248@00 Int)) (!
      (=>
        (and
          (<
            i_V1@248@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@248@00))
        (and
          (=>
            (<= 0 i_V1@248@00)
            (and
              (<= 0 i_V1@248@00)
              (=>
                (<
                  i_V1@248@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@248@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)
                  (=
                    (letvar@249@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@248@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))))
              (or
                (not
                  (<
                    i_V1@248@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@248@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@248@00)) (<= 0 i_V1@248@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |Intuint16$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@248@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@248@00))
          (< $Perm.No $k@238@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |quant-u-198|))
    (forall ((i_V1@248@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@248@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))))
          i_V1@248@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |quant-u-198|))
    (forall ((i_V1@248@00 Int)) (!
      (<= $Perm.No $k@238@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |Intuint16$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@248@00 Int)) (!
      (<= $k@238@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |Intuint16$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@248@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@248@00))
          (< $Perm.No $k@238@00))
        (not
          (=
            (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (forall ((i_V1@251@00 Int)) (!
      (=>
        (and
          (<
            i_V1@251@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@251@00))
        (and
          (=>
            (<= 0 i_V1@251@00)
            (and
              (<= 0 i_V1@251@00)
              (=>
                (<
                  i_V1@251@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@251@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)
                  (=
                    (letvar@252@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@251@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))))
              (or
                (not
                  (<
                    i_V1@251@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@251@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@251@00)) (<= 0 i_V1@251@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |Intuint32$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@251@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@251@00))
          (< $Perm.No $k@238@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |quant-u-200|))
    (forall ((i_V1@251@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@251@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))))
          i_V1@251@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |quant-u-200|))
    (forall ((i_V1@251@00 Int)) (!
      (<= $Perm.No $k@238@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |Intuint32$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@251@00 Int)) (!
      (<= $k@238@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |Intuint32$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@251@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@251@00))
          (< $Perm.No $k@238@00))
        (not
          (=
            (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=>
      (< $Perm.No $k@238@00)
      (not
        (=
          (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      $Snap.unit)
    (< (* $k@254@00 $k@238@00) $k@238@00)
    (<= $Perm.No (- $k@238@00 (* $k@254@00 $k@238@00)))
    (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      (getNumHops_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
    (forall ((i_V2@255@00 Int)) (!
      (=>
        (and
          (<
            i_V2@255@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          (<= 0 i_V2@255@00))
        (and
          (or (not (<= 0 i_V2@255@00)) (<= 0 i_V2@255@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      :qid |Mem_a6ceb89d_PMHopField-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V2@255@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@255@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@255@00))
          (< $Perm.No $k@238@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      :qid |quant-u-202|))
    (forall ((i_V2@255@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@255@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@255@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
          i_V2@255@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      :qid |quant-u-202|))
    (forall ((i_V2@255@00 Int)) (!
      (<= $Perm.No $k@238@00)
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      :qid |Mem_a6ceb89d_PMHopField-permAtLeastZero|))
    (< $k@257@00 $k@238@00)
    (<= $Perm.No (- $k@238@00 $k@257@00))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
(assert (=
  result@34@00
  (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
; [eval] (unfolding acc(dynamic_pred_6((tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in result == Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(declare-const $k@258@00 $Perm)
(assert ($Perm.isReadVar $k@258@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@259@00 $Perm)
(assert ($Perm.isReadVar $k@259@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@216@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@259@00 $k@216@00))
(assert (<= $Perm.No (- $k@216@00 $k@259@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@259@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
; [then-branch: 83 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == Path_4cddb96f_T_Types[Types] | dead]
; [else-branch: 83 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 83 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != Path_4cddb96f_T_Types[Types]]
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
; [then-branch: 84 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | dead]
; [else-branch: 84 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(push) ; 4
; [else-branch: 84 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
; [then-branch: 85 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | dead]
; [else-branch: 85 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(push) ; 5
; [else-branch: 85 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
; [then-branch: 86 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | dead]
; [else-branch: 86 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(push) ; 6
; [else-branch: 86 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
; [then-branch: 87 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | dead]
; [else-branch: 87 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(push) ; 7
; [else-branch: 87 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 88 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 88 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](d_V0@32@00), pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]))) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@258@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $k@258@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@258@00)
  (not
    (=
      (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])) <= 3
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(declare-const $k@260@00 $Perm)
(assert ($Perm.isReadVar $k@260@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@258@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@260@00 $k@258@00) $k@258@00))
(assert (<= $Perm.No (- $k@258@00 (* $k@260@00 $k@258@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@260@00 $k@258@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@260@00))
(assert (and
  (< (* $k@260@00 $k@258@00) $k@258@00)
  (<= $Perm.No (- $k@258@00 (* $k@260@00 $k@258@00)))
  (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (<=
  (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@261@00 $Perm)
(assert ($Perm.isReadVar $k@261@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@258@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@261@00 $k@258@00) $k@258@00))
(assert (<= $Perm.No (- $k@258@00 (* $k@261@00 $k@258@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@261@00 $k@258@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@261@00))
(assert (and
  (< (* $k@261@00 $k@258@00) $k@258@00)
  (<= $Perm.No (- $k@258@00 (* $k@261@00 $k@258@00)))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))
  (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(declare-const i_V1@262@00 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 89 | 0 <= i_V1@262@00 | live]
; [else-branch: 89 | !(0 <= i_V1@262@00) | live]
(push) ; 11
; [then-branch: 89 | 0 <= i_V1@262@00]
(assert (<= 0 i_V1@262@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 90 | i_V1@262@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 90 | !(i_V1@262@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 90 | i_V1@262@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@262@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))
(declare-fun letvar@263@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@263@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@262@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 90 | !(i_V1@262@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@262@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@262@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@262@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)
    (=
      (letvar@263@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@262@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@262@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@262@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 89 | !(0 <= i_V1@262@00)]
(assert (not (<= 0 i_V1@262@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@262@00)
  (and
    (<= 0 i_V1@262@00)
    (=>
      (<
        i_V1@262@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@262@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)
        (=
          (letvar@263@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@262@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))))
    (or
      (not
        (<
          i_V1@262@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@262@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@262@00)) (<= 0 i_V1@262@00)))
(assert (and
  (<
    i_V1@262@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@262@00)))
; [eval] (ShStructget0of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))
(pop) ; 9
(declare-fun inv@264@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@262@00 Int)) (!
  (=>
    (and
      (<
        i_V1@262@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@262@00))
    (and
      (=>
        (<= 0 i_V1@262@00)
        (and
          (<= 0 i_V1@262@00)
          (=>
            (<
              i_V1@262@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@262@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)
              (=
                (letvar@263@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@262@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))))
          (or
            (not
              (<
                i_V1@262@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@262@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@262@00)) (<= 0 i_V1@262@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@262@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@262@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@262@00))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :qid |quant-u-204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@262@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@262@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@262@00))
      (< $Perm.No $k@258@00))
    (=
      (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))))
      i_V1@262@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :qid |quant-u-204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@262@00 Int)) (!
  (<= $Perm.No $k@258@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :qid |Bool$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@262@00 Int)) (!
  (<= $k@258@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :qid |Bool$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@262@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@262@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@262@00))
      (< $Perm.No $k@258@00))
    (not
      (=
        (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
(declare-const i_V1@265@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 91 | 0 <= i_V1@265@00 | live]
; [else-branch: 91 | !(0 <= i_V1@265@00) | live]
(push) ; 11
; [then-branch: 91 | 0 <= i_V1@265@00]
(assert (<= 0 i_V1@265@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 92 | i_V1@265@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 92 | !(i_V1@265@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 92 | i_V1@265@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@265@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))
(declare-fun letvar@266@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@266@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@265@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 92 | !(i_V1@265@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@265@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@265@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@265@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)
    (=
      (letvar@266@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@265@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@265@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@265@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 91 | !(0 <= i_V1@265@00)]
(assert (not (<= 0 i_V1@265@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@265@00)
  (and
    (<= 0 i_V1@265@00)
    (=>
      (<
        i_V1@265@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@265@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)
        (=
          (letvar@266@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@265@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))))
    (or
      (not
        (<
          i_V1@265@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@265@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@265@00)) (<= 0 i_V1@265@00)))
(assert (and
  (<
    i_V1@265@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@265@00)))
; [eval] (ShStructget1of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))
(pop) ; 9
(declare-fun inv@267@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@265@00 Int)) (!
  (=>
    (and
      (<
        i_V1@265@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@265@00))
    (and
      (=>
        (<= 0 i_V1@265@00)
        (and
          (<= 0 i_V1@265@00)
          (=>
            (<
              i_V1@265@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@265@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)
              (=
                (letvar@266@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@265@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))))
          (or
            (not
              (<
                i_V1@265@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@265@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@265@00)) (<= 0 i_V1@265@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@265@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@265@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@265@00))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :qid |quant-u-206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@265@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@265@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@265@00))
      (< $Perm.No $k@258@00))
    (=
      (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))))
      i_V1@265@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :qid |quant-u-206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@265@00 Int)) (!
  (<= $Perm.No $k@258@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :qid |Bool$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@265@00 Int)) (!
  (<= $k@258@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :qid |Bool$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@265@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@265@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@265@00))
      (< $Perm.No $k@258@00))
    (not
      (=
        (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(declare-const i_V1@268@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 93 | 0 <= i_V1@268@00 | live]
; [else-branch: 93 | !(0 <= i_V1@268@00) | live]
(push) ; 11
; [then-branch: 93 | 0 <= i_V1@268@00]
(assert (<= 0 i_V1@268@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 94 | i_V1@268@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 94 | !(i_V1@268@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 94 | i_V1@268@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@268@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))
(declare-fun letvar@269@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@269@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@268@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 94 | !(i_V1@268@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@268@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@268@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@268@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)
    (=
      (letvar@269@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@268@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@268@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@268@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 93 | !(0 <= i_V1@268@00)]
(assert (not (<= 0 i_V1@268@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@268@00)
  (and
    (<= 0 i_V1@268@00)
    (=>
      (<
        i_V1@268@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@268@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)
        (=
          (letvar@269@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@268@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))))
    (or
      (not
        (<
          i_V1@268@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@268@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@268@00)) (<= 0 i_V1@268@00)))
(assert (and
  (<
    i_V1@268@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@268@00)))
; [eval] (ShStructget2of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))
(pop) ; 9
(declare-fun inv@270@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@268@00 Int)) (!
  (=>
    (and
      (<
        i_V1@268@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@268@00))
    (and
      (=>
        (<= 0 i_V1@268@00)
        (and
          (<= 0 i_V1@268@00)
          (=>
            (<
              i_V1@268@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@268@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)
              (=
                (letvar@269@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@268@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))))
          (or
            (not
              (<
                i_V1@268@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@268@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@268@00)) (<= 0 i_V1@268@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :qid |Intuint16$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@268@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@268@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@268@00))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :qid |quant-u-208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@268@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@268@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@268@00))
      (< $Perm.No $k@258@00))
    (=
      (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))))
      i_V1@268@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :qid |quant-u-208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@268@00 Int)) (!
  (<= $Perm.No $k@258@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :qid |Intuint16$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@268@00 Int)) (!
  (<= $k@258@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :qid |Intuint16$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@268@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@268@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@268@00))
      (< $Perm.No $k@258@00))
    (not
      (=
        (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
  :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(declare-const i_V1@271@00 Int)
(push) ; 9
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 95 | 0 <= i_V1@271@00 | live]
; [else-branch: 95 | !(0 <= i_V1@271@00) | live]
(push) ; 11
; [then-branch: 95 | 0 <= i_V1@271@00]
(assert (<= 0 i_V1@271@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 96 | i_V1@271@00 < slen[Int](First:(Second:(s@$))) | live]
; [else-branch: 96 | !(i_V1@271@00 < slen[Int](First:(Second:(s@$)))) | live]
(push) ; 13
; [then-branch: 96 | i_V1@271@00 < slen[Int](First:(Second:(s@$)))]
(assert (<
  i_V1@271@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))
(pop) ; 14
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))
(declare-fun letvar@272@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@272@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@271@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))))
(pop) ; 13
(push) ; 13
; [else-branch: 96 | !(i_V1@271@00 < slen[Int](First:(Second:(s@$))))]
(assert (not
  (<
    i_V1@271@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V1@271@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (and
    (<
      i_V1@271@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)
    (=
      (letvar@272@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@271@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@271@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
  (<
    i_V1@271@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 95 | !(0 <= i_V1@271@00)]
(assert (not (<= 0 i_V1@271@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i_V1@271@00)
  (and
    (<= 0 i_V1@271@00)
    (=>
      (<
        i_V1@271@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (and
        (<
          i_V1@271@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)
        (=
          (letvar@272@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@271@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))))
    (or
      (not
        (<
          i_V1@271@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
      (<
        i_V1@271@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@271@00)) (<= 0 i_V1@271@00)))
(assert (and
  (<
    i_V1@271@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
  (<= 0 i_V1@271@00)))
; [eval] (ShStructget3of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))
(pop) ; 9
(declare-fun inv@273@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@271@00 Int)) (!
  (=>
    (and
      (<
        i_V1@271@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
      (<= 0 i_V1@271@00))
    (and
      (=>
        (<= 0 i_V1@271@00)
        (and
          (<= 0 i_V1@271@00)
          (=>
            (<
              i_V1@271@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (and
              (<
                i_V1@271@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)
              (=
                (letvar@272@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@271@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))))
          (or
            (not
              (<
                i_V1@271@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
            (<
              i_V1@271@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
      (or (not (<= 0 i_V1@271@00)) (<= 0 i_V1@271@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :qid |Intuint32$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@271@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@271@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@271@00))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :qid |quant-u-210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@271@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@271@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@271@00))
      (< $Perm.No $k@258@00))
    (=
      (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))))
      i_V1@271@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :qid |quant-u-210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V1@271@00 Int)) (!
  (<= $Perm.No $k@258@00)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :qid |Intuint32$$$$_E_$$$-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i_V1@271@00 Int)) (!
  (<= $k@258@00 $Perm.Write)
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :qid |Intuint32$$$$_E_$$$-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i_V1@271@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V1@271@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 i_V1@271@00))
      (< $Perm.No $k@258@00))
    (not
      (=
        (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
  :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@258@00)
  (not
    (=
      (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@274@00 $Perm)
(assert ($Perm.isReadVar $k@274@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@258@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@274@00 $k@258@00) $k@258@00))
(assert (<= $Perm.No (- $k@258@00 (* $k@274@00 $k@258@00))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@274@00 $k@258@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@274@00))
(assert (and
  (< (* $k@274@00 $k@258@00) $k@258@00)
  (<= $Perm.No (- $k@258@00 (* $k@274@00 $k@258@00)))
  (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (getNumHops_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))))
(declare-const i_V2@275@00 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V2 && i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V2
(push) ; 10
; [then-branch: 97 | 0 <= i_V2@275@00 | live]
; [else-branch: 97 | !(0 <= i_V2@275@00) | live]
(push) ; 11
; [then-branch: 97 | 0 <= i_V2@275@00]
(assert (<= 0 i_V2@275@00))
; [eval] i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 97 | !(0 <= i_V2@275@00)]
(assert (not (<= 0 i_V2@275@00)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V2@275@00)) (<= 0 i_V2@275@00)))
(assert (and
  (<
    i_V2@275@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (<= 0 i_V2@275@00)))
; [eval] (ShArrayloc((sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
; [eval] (sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)
; [eval] (soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00))
(pop) ; 10
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00))
(pop) ; 9
(declare-fun inv@276@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@275@00 Int)) (!
  (=>
    (and
      (<
        i_V2@275@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (<= 0 i_V2@275@00))
    (and
      (or (not (<= 0 i_V2@275@00)) (<= 0 i_V2@275@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
  :qid |Mem_a6ceb89d_PMHopField-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V2@275@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V2@275@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 i_V2@275@00))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
  :qid |quant-u-212|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
  :pattern ((inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((i_V2@275@00 Int)) (!
  (=>
    (and
      (and
        (<
          i_V2@275@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 i_V2@275@00))
      (< $Perm.No $k@258@00))
    (=
      (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      i_V2@275@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
  :qid |quant-u-212|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@258@00))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      h_V0))
  :pattern ((inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i_V2@275@00 Int)) (!
  (<= $Perm.No $k@258@00)
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
  :qid |Mem_a6ceb89d_PMHopField-permAtLeastZero|)))
; [eval] result == Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] Len_daeaf66a_PMBase((ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3(d_V0): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
(push) ; 9
(declare-const $k@277@00 $Perm)
(assert ($Perm.isReadVar $k@277@00))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
  (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@258@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@277@00 $k@258@00))
(assert (<= $Perm.No (- $k@258@00 $k@277@00)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@277@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@277@00))
(assert (and
  (< $k@277@00 $k@258@00)
  (<= $Perm.No (- $k@258@00 $k@277@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@259@00))
(assert ($Perm.isReadVar $k@260@00))
(assert ($Perm.isReadVar $k@261@00))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
  :pattern ((inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
        (<= 0 (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
      (< $Perm.No $k@258@00))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
      r))
  :pattern ((inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert ($Perm.isReadVar $k@274@00))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@258@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
  :pattern ((inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (and
        (<
          (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (<= 0 (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      (< $Perm.No $k@258@00))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
      h_V0))
  :pattern ((inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert ($Perm.isReadVar $k@277@00))
(assert (and (< $k@259@00 $k@216@00) (<= $Perm.No (- $k@216@00 $k@259@00))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@258@00)
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (<= $k@258@00 $Perm.Write)
    (=>
      (< $Perm.No $k@258@00)
      (not
        (=
          (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit)
    (< (* $k@260@00 $k@258@00) $k@258@00)
    (<= $Perm.No (- $k@258@00 (* $k@260@00 $k@258@00)))
    (getNumINF_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
    (<=
      (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
      3)
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) $Snap.unit)
    (< (* $k@261@00 $k@258@00) $k@258@00)
    (<= $Perm.No (- $k@258@00 (* $k@261@00 $k@258@00)))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))
      (getNumINF_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (forall ((i_V1@262@00 Int)) (!
      (=>
        (and
          (<
            i_V1@262@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@262@00))
        (and
          (=>
            (<= 0 i_V1@262@00)
            (and
              (<= 0 i_V1@262@00)
              (=>
                (<
                  i_V1@262@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@262@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)
                  (=
                    (letvar@263@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@262@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))))
              (or
                (not
                  (<
                    i_V1@262@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@262@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@262@00)) (<= 0 i_V1@262@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |Bool$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@262@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@262@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@262@00))
          (< $Perm.No $k@258@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |quant-u-204|))
    (forall ((i_V1@262@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@262@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@262@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))))
          i_V1@262@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |quant-u-204|))
    (forall ((i_V1@262@00 Int)) (!
      (<= $Perm.No $k@258@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |Bool$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@262@00 Int)) (!
      (<= $k@258@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |Bool$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@262@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@262@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@262@00))
          (< $Perm.No $k@258@00))
        (not
          (=
            (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |Bool$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (forall ((i_V1@265@00 Int)) (!
      (=>
        (and
          (<
            i_V1@265@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@265@00))
        (and
          (=>
            (<= 0 i_V1@265@00)
            (and
              (<= 0 i_V1@265@00)
              (=>
                (<
                  i_V1@265@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@265@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)
                  (=
                    (letvar@266@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@265@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))))
              (or
                (not
                  (<
                    i_V1@265@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@265@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@265@00)) (<= 0 i_V1@265@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |Bool$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@265@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@265@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@265@00))
          (< $Perm.No $k@258@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |quant-u-206|))
    (forall ((i_V1@265@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@265@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@265@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))))
          i_V1@265@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |quant-u-206|))
    (forall ((i_V1@265@00 Int)) (!
      (<= $Perm.No $k@258@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |Bool$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@265@00 Int)) (!
      (<= $k@258@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |Bool$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@265@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@265@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@265@00))
          (< $Perm.No $k@258@00))
        (not
          (=
            (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |Bool$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (forall ((i_V1@268@00 Int)) (!
      (=>
        (and
          (<
            i_V1@268@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@268@00))
        (and
          (=>
            (<= 0 i_V1@268@00)
            (and
              (<= 0 i_V1@268@00)
              (=>
                (<
                  i_V1@268@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@268@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)
                  (=
                    (letvar@269@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@268@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))))
              (or
                (not
                  (<
                    i_V1@268@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@268@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@268@00)) (<= 0 i_V1@268@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |Intuint16$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@268@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@268@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@268@00))
          (< $Perm.No $k@258@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |quant-u-208|))
    (forall ((i_V1@268@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@268@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@268@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))))
          i_V1@268@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |quant-u-208|))
    (forall ((i_V1@268@00 Int)) (!
      (<= $Perm.No $k@258@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |Intuint16$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@268@00 Int)) (!
      (<= $k@258@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |Intuint16$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@268@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@268@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@268@00))
          (< $Perm.No $k@258@00))
        (not
          (=
            (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (forall ((i_V1@271@00 Int)) (!
      (=>
        (and
          (<
            i_V1@271@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
          (<= 0 i_V1@271@00))
        (and
          (=>
            (<= 0 i_V1@271@00)
            (and
              (<= 0 i_V1@271@00)
              (=>
                (<
                  i_V1@271@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                (and
                  (<
                    i_V1@271@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
                  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)
                  (=
                    (letvar@272@00 s@$ d_V0@32@00 ubuf_V0@33@00 i_V1@271@00)
                    (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))))
              (or
                (not
                  (<
                    i_V1@271@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))
                (<
                  i_V1@271@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$))))))))
          (or (not (<= 0 i_V1@271@00)) (<= 0 i_V1@271@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |Intuint32$$$$_E_$$$-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V1@271@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@271@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@271@00))
          (< $Perm.No $k@258@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |quant-u-210|))
    (forall ((i_V1@271@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@271@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@271@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))))
          i_V1@271@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |quant-u-210|))
    (forall ((i_V1@271@00 Int)) (!
      (<= $Perm.No $k@258@00)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |Intuint32$$$$_E_$$$-permAtLeastZero|))
    (forall ((i_V1@271@00 Int)) (!
      (<= $k@258@00 $Perm.Write)
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |Intuint32$$$$_E_$$$-permAtMostOne|))
    (forall ((i_V1@271@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@271@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@271@00))
          (< $Perm.No $k@258@00))
        (not
          (=
            (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
            $Ref.null)))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=>
      (< $Perm.No $k@258@00)
      (not
        (=
          (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      $Snap.unit)
    (< (* $k@274@00 $k@258@00) $k@258@00)
    (<= $Perm.No (- $k@258@00 (* $k@274@00 $k@258@00)))
    (getNumHops_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))))
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      (getNumHops_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))))
    (forall ((i_V2@275@00 Int)) (!
      (=>
        (and
          (<
            i_V2@275@00
            (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          (<= 0 i_V2@275@00))
        (and
          (or (not (<= 0 i_V2@275@00)) (<= 0 i_V2@275@00))
          (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      :qid |Mem_a6ceb89d_PMHopField-aux|)))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (as Path_4cddb96f_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
                (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
              (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (and
    (forall ((i_V2@275@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@275@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@275@00))
          (< $Perm.No $k@258@00))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      :qid |quant-u-212|))
    (forall ((i_V2@275@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@275@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@275@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
          i_V2@275@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      :qid |quant-u-212|))
    (forall ((i_V2@275@00 Int)) (!
      (<= $Perm.No $k@258@00)
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      :qid |Mem_a6ceb89d_PMHopField-permAtLeastZero|))
    (< $k@277@00 $k@258@00)
    (<= $Perm.No (- $k@258@00 $k@277@00))
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))))
(assert (and
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
      (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@34@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@34@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (and
    (forall ((i_V1@242@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@242@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@242@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00))))
          i_V1@242@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@242@00)))
      :qid |quant-u-194|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@238@00))
        (=
          (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@244@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@245@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@245@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))))
          i_V1@245@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |quant-u-196|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@238@00))
        (=
          (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@248@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@248@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))))
          i_V1@248@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |quant-u-198|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@238@00))
        (=
          (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint16$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@251@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@251@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))))
          i_V1@251@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |quant-u-200|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@238@00))
        (=
          (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint32$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@255@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@255@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@255@00))
          (< $Perm.No $k@238@00))
        (=
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
          i_V2@255@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@255@00)))
      :qid |quant-u-202|))
    (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
      (=>
        (and
          (and
            (<
              (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          (< $Perm.No $k@238@00))
        (=
          (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          h_V0))
      :pattern ((inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
      :qid |Mem_a6ceb89d_PMHopField-fctOfInv|))
    (forall ((i_V1@262@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@262@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@262@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00))))
          i_V1@262@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@262@00)))
      :qid |quant-u-204|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@258@00))
        (=
          (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@264@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@265@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@265@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@265@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00))))
          i_V1@265@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@265@00)))
      :qid |quant-u-206|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@258@00))
        (=
          (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@267@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@268@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@268@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@268@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00))))
          i_V1@268@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@268@00)))
      :qid |quant-u-208|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@258@00))
        (=
          (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@270@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint16$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@271@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@271@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@271@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00))))
          i_V1@271@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@271@00)))
      :qid |quant-u-210|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@258@00))
        (=
          (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@273@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint32$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@275@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@275@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@275@00))
          (< $Perm.No $k@258@00))
        (=
          (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
          i_V2@275@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@275@00)))
      :qid |quant-u-212|))
    (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
      (=>
        (and
          (and
            (<
              (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          (< $Perm.No $k@258@00))
        (=
          (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          h_V0))
      :pattern ((inv@276@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
      :qid |Mem_a6ceb89d_PMHopField-fctOfInv|))
    ($Perm.isReadVar $k@216@00)
    ($Perm.isReadVar $k@238@00)
    ($Perm.isReadVar $k@239@00)
    ($Perm.isReadVar $k@240@00)
    ($Perm.isReadVar $k@241@00)
    ($Perm.isReadVar $k@254@00)
    ($Perm.isReadVar $k@257@00)
    ($Perm.isReadVar $k@258@00)
    ($Perm.isReadVar $k@259@00)
    ($Perm.isReadVar $k@260@00)
    ($Perm.isReadVar $k@261@00)
    ($Perm.isReadVar $k@274@00)
    ($Perm.isReadVar $k@277@00)
    (=>
      (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
      (=
        (Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00)
        (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))))
  :pattern ((Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :pattern ((Len_daeaf66a_PMDecoded%stateless d_V0@32@00 ubuf_V0@33@00) (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))) ubuf_V0@33@00))
  :qid |quant-u-213|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (=>
    (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
  :pattern ((Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-214|)))
; ---------- FUNCTION Len_4cddb96f_MPath----------
(declare-fun o_V0@35@00 () Tuple0)
(declare-fun underlyingBuf_V0@36@00 () Slice<Ref>)
(declare-fun result@37@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@278@00 $Snap)
(assert (= $t@278@00 $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@37@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (=
    (Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00)
    (Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :pattern ((Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-30|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (Len_4cddb96f_MPath%stateless o_V0@35@00 underlyingBuf_V0@36@00)
  :pattern ((Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-31|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (let ((result@37@00 (Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))) (=>
    (Len_4cddb96f_MPath%precondition s@$ o_V0@35@00 underlyingBuf_V0@36@00)
    (<= 0 result@37@00)))
  :pattern ((Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-215|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (let ((result@37@00 (Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))) true)
  :pattern ((Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-216|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@37@00 0))
; [eval] 0 <= result
(set-option :timeout 0)
(push) ; 2
(assert (not (<= 0 result@37@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 result@37@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (=>
    (Len_4cddb96f_MPath%precondition s@$ o_V0@35@00 underlyingBuf_V0@36@00)
    (= (Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00) 0))
  :pattern ((Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-217|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  true
  :pattern ((Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-218|)))
; ---------- FUNCTION arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$----------
(declare-fun result@38@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@279@00 $Snap)
(assert (= $t@279@00 ($Snap.combine ($Snap.first $t@279@00) ($Snap.second $t@279@00))))
(assert (= ($Snap.first $t@279@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(assert (= (ShArraylen<Int> result@38@00) 1))
(assert (= ($Snap.second $t@279@00) $Snap.unit))
; [eval] (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)
(declare-const idx@280@00 Int)
(push) ; 2
; [eval] (ShArrayloc(result, idx): Ref) == null
; [eval] (ShArrayloc(result, idx): Ref)
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((idx@280@00 Int)) (!
  (= (ShArrayloc<Ref> result@38@00 idx@280@00) $Ref.null)
  :pattern ((ShArrayloc<Ref> result@38@00 idx@280@00))
  :qid |prog.l2895|)))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$)
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :qid |quant-u-32|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-33|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@38@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) (=>
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@38@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@38@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@38@00 idx))
        )))))
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-219|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@38@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-220|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@38@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-221|)))
; ---------- FUNCTION BitAnd3_ca158f5e_F----------
(declare-fun b_V0@39@00 () Int)
(declare-fun result@40@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@281@00 $Snap)
(assert (= $t@281@00 ($Snap.combine ($Snap.first $t@281@00) ($Snap.second $t@281@00))))
(assert (= ($Snap.first $t@281@00) $Snap.unit))
; [eval] 0 <= intBitwiseAnd(b_V0, 3)
; [eval] intBitwiseAnd(b_V0, 3)
(push) ; 2
(assert (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3))
(pop) ; 2
; Joined path conditions
(assert (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3))
(assert (<= 0 (intBitwiseAnd $Snap.unit b_V0@39@00 3)))
(assert (=
  ($Snap.second $t@281@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@281@00))
    ($Snap.second ($Snap.second $t@281@00)))))
(assert (= ($Snap.first ($Snap.second $t@281@00)) $Snap.unit))
; [eval] intBitwiseAnd(b_V0, 3) <= 3
; [eval] intBitwiseAnd(b_V0, 3)
(push) ; 2
(pop) ; 2
; Joined path conditions
(assert (<= (intBitwiseAnd $Snap.unit b_V0@39@00 3) 3))
(assert (=
  ($Snap.second ($Snap.second $t@281@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@281@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@281@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@281@00))) $Snap.unit))
; [eval] b_V0 == 0 ==> result == 0
; [eval] b_V0 == 0
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= b_V0@39@00 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= b_V0@39@00 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | b_V0@39@00 == 0 | live]
; [else-branch: 98 | b_V0@39@00 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 98 | b_V0@39@00 == 0]
(assert (= b_V0@39@00 0))
; [eval] result == 0
(pop) ; 3
(push) ; 3
; [else-branch: 98 | b_V0@39@00 != 0]
(assert (not (= b_V0@39@00 0)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= b_V0@39@00 0)) (= b_V0@39@00 0)))
(assert (=> (= b_V0@39@00 0) (= result@40@00 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@281@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@281@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@281@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@281@00))))
  $Snap.unit))
; [eval] b_V0 == 3 ==> result == 3
; [eval] b_V0 == 3
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= b_V0@39@00 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= b_V0@39@00 3)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | b_V0@39@00 == 3 | live]
; [else-branch: 99 | b_V0@39@00 != 3 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 99 | b_V0@39@00 == 3]
(assert (= b_V0@39@00 3))
; [eval] result == 3
(pop) ; 3
(push) ; 3
; [else-branch: 99 | b_V0@39@00 != 3]
(assert (not (= b_V0@39@00 3)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= b_V0@39@00 3)) (= b_V0@39@00 3)))
(assert (=> (= b_V0@39@00 3) (= result@40@00 3)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@281@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@281@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@281@00))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@281@00)))))
  $Snap.unit))
; [eval] b_V0 == 4 ==> result == 0
; [eval] b_V0 == 4
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= b_V0@39@00 4))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= b_V0@39@00 4)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | b_V0@39@00 == 4 | live]
; [else-branch: 100 | b_V0@39@00 != 4 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 100 | b_V0@39@00 == 4]
(assert (= b_V0@39@00 4))
; [eval] result == 0
(pop) ; 3
(push) ; 3
; [else-branch: 100 | b_V0@39@00 != 4]
(assert (not (= b_V0@39@00 4)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= b_V0@39@00 4)) (= b_V0@39@00 4)))
(assert (=> (= b_V0@39@00 4) (= result@40@00 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@281@00)))))
  $Snap.unit))
; [eval] result == intBitwiseAnd(b_V0, 3)
; [eval] intBitwiseAnd(b_V0, 3)
(push) ; 2
(pop) ; 2
; Joined path conditions
(assert (= result@40@00 (intBitwiseAnd $Snap.unit b_V0@39@00 3)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (=
    (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00)
    (BitAnd3_ca158f5e_F s@$ b_V0@39@00))
  :pattern ((BitAnd3_ca158f5e_F s@$ b_V0@39@00))
  :qid |quant-u-34|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (BitAnd3_ca158f5e_F%stateless b_V0@39@00)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-35|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) (=>
    (BitAnd3_ca158f5e_F%precondition s@$ b_V0@39@00)
    (and
      (and
        (<= 0 (intBitwiseAnd $Snap.unit b_V0@39@00 3))
        (<= (intBitwiseAnd $Snap.unit b_V0@39@00 3) 3))
      (=> (= b_V0@39@00 0) (= result@40@00 0))
      (=> (= b_V0@39@00 3) (= result@40@00 3))
      (=> (= b_V0@39@00 4) (= result@40@00 0))
      (= result@40@00 (intBitwiseAnd $Snap.unit b_V0@39@00 3)))))
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-222|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) (=>
    (BitAnd3_ca158f5e_F%precondition s@$ b_V0@39@00)
    (and
      (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3)
      (=>
        (<= 0 (intBitwiseAnd $Snap.unit b_V0@39@00 3))
        (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3)))))
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-223|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) true)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-224|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) true)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-225|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) true)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-226|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) (=>
    (BitAnd3_ca158f5e_F%precondition s@$ b_V0@39@00)
    (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3)))
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-227|)))
; ---------- FUNCTION PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof----------
(declare-fun p_V0@41@00 () ShStruct2<Ref~_Ref>)
(declare-fun underlyingBuf_V0@42@00 () Slice<Ref>)
(declare-fun result@43@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(declare-const $k@282@00 $Perm)
(assert ($Perm.isReadVar $k@282@00))
(assert (<= $Perm.No $k@282@00))
(declare-const $t@283@00 $Snap)
(assert (= $t@283@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@43@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (=
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00)
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-36|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless p_V0@41@00 underlyingBuf_V0@42@00)
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-37|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (let ((result@43@00 (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))) (and
    ($Perm.isReadVar $k@282@00)
    (=>
      (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)
      (>= result@43@00 0))))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-228|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (let ((result@43@00 (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))) true)
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-229|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@282@00))
(assert (<= $Perm.No $k@282@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] Len_a6ceb89d_PMrawPath(p_V0, underlyingBuf_V0)
(set-option :timeout 0)
(push) ; 2
(declare-const $k@284@00 $Perm)
(assert ($Perm.isReadVar $k@284@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@282@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@284@00 $k@282@00))
(assert (<= $Perm.No (- $k@282@00 $k@284@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@284@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@284@00))
(assert (and
  (< $k@284@00 $k@282@00)
  (<= $Perm.No (- $k@282@00 $k@284@00))
  (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)))
(assert (= result@43@00 (Len_a6ceb89d_PMrawPath s@$ p_V0@41@00 underlyingBuf_V0@42@00)))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@43@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@43@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@282@00)
    ($Perm.isReadVar $k@284@00)
    (=>
      (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)
      (=
        (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00)
        (Len_a6ceb89d_PMrawPath s@$ p_V0@41@00 underlyingBuf_V0@42@00))))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-230|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)
    (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-231|)))
; ---------- FUNCTION PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof----------
(declare-fun s_V0@44@00 () ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun buf_V0@45@00 () Slice<Ref>)
(declare-fun result@46@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(declare-const $k@285@00 $Perm)
(assert ($Perm.isReadVar $k@285@00))
(assert (<= $Perm.No $k@285@00))
(declare-const $t@286@00 $Snap)
(assert (= $t@286@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@46@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (=
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00)
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-38|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless s_V0@44@00 buf_V0@45@00)
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-39|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (let ((result@46@00 (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))) (and
    ($Perm.isReadVar $k@285@00)
    (=>
      (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ s_V0@44@00 buf_V0@45@00)
      (>= result@46@00 0))))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-232|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (let ((result@46@00 (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))) true)
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-233|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@285@00))
(assert (<= $Perm.No $k@285@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] Len_daeaf66a_PMRaw(s_V0, buf_V0)
(set-option :timeout 0)
(push) ; 2
(declare-const $k@287@00 $Perm)
(assert ($Perm.isReadVar $k@287@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@285@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@287@00 $k@285@00))
(assert (<= $Perm.No (- $k@285@00 $k@287@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@287@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMRaw%precondition s@$ s_V0@44@00 buf_V0@45@00))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@287@00))
(assert (and
  (< $k@287@00 $k@285@00)
  (<= $Perm.No (- $k@285@00 $k@287@00))
  (Len_daeaf66a_PMRaw%precondition s@$ s_V0@44@00 buf_V0@45@00)))
(assert (= result@46@00 (Len_daeaf66a_PMRaw s@$ s_V0@44@00 buf_V0@45@00)))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@46@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@46@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@285@00)
    ($Perm.isReadVar $k@287@00)
    (=>
      (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ s_V0@44@00 buf_V0@45@00)
      (=
        (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00)
        (Len_daeaf66a_PMRaw s@$ s_V0@44@00 buf_V0@45@00))))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-234|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ s_V0@44@00 buf_V0@45@00)
    (Len_daeaf66a_PMRaw%precondition s@$ s_V0@44@00 buf_V0@45@00))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-235|)))
; ---------- FUNCTION PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof----------
(declare-fun p_V0@47@00 () ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ubuf_V0@48@00 () Slice<Ref>)
(declare-fun result@49@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(declare-const $k@288@00 $Perm)
(assert ($Perm.isReadVar $k@288@00))
(assert (<= $Perm.No $k@288@00))
(declare-const $t@289@00 $Snap)
(assert (= $t@289@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@49@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (=
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00)
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-40|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless p_V0@47@00 ubuf_V0@48@00)
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-41|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (let ((result@49@00 (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))) (and
    ($Perm.isReadVar $k@288@00)
    (=>
      (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@47@00 ubuf_V0@48@00)
      (>= result@49@00 0))))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-236|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (let ((result@49@00 (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))) true)
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-237|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@288@00))
(assert (<= $Perm.No $k@288@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] Len_c6e60a1d_PMPath(p_V0, ubuf_V0)
(set-option :timeout 0)
(push) ; 2
(declare-const $k@290@00 $Perm)
(assert ($Perm.isReadVar $k@290@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@288@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@290@00 $k@288@00))
(assert (<= $Perm.No (- $k@288@00 $k@290@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@290@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Len_c6e60a1d_PMPath%precondition s@$ p_V0@47@00 ubuf_V0@48@00))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@290@00))
(assert (and
  (< $k@290@00 $k@288@00)
  (<= $Perm.No (- $k@288@00 $k@290@00))
  (Len_c6e60a1d_PMPath%precondition s@$ p_V0@47@00 ubuf_V0@48@00)))
(assert (= result@49@00 (Len_c6e60a1d_PMPath s@$ p_V0@47@00 ubuf_V0@48@00)))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@49@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@49@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@288@00)
    ($Perm.isReadVar $k@290@00)
    (=>
      (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@47@00 ubuf_V0@48@00)
      (=
        (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00)
        (Len_c6e60a1d_PMPath s@$ p_V0@47@00 ubuf_V0@48@00))))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-238|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@47@00 ubuf_V0@48@00)
    (Len_c6e60a1d_PMPath%precondition s@$ p_V0@47@00 ubuf_V0@48@00))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-239|)))
; ---------- FUNCTION PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof----------
(declare-fun o_V0@50@00 () ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ubuf_V0@51@00 () Slice<Ref>)
(declare-fun result@52@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(o_V0): Ref), pointer_Types(Path_c385169_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(declare-const $k@291@00 $Perm)
(assert ($Perm.isReadVar $k@291@00))
(assert (<= $Perm.No $k@291@00))
(declare-const $t@292@00 $Snap)
(assert (= $t@292@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@52@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (=
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00)
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-42|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless o_V0@50@00 ubuf_V0@51@00)
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-43|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (let ((result@52@00 (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))) (and
    ($Perm.isReadVar $k@291@00)
    (=>
      (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@50@00 ubuf_V0@51@00)
      (>= result@52@00 0))))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-240|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (let ((result@52@00 (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))) true)
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-241|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@291@00))
(assert (<= $Perm.No $k@291@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] Len_c385169_PMPath(o_V0, ubuf_V0)
(set-option :timeout 0)
(push) ; 2
(assert (Len_c385169_PMPath%precondition $Snap.unit o_V0@50@00 ubuf_V0@51@00))
(pop) ; 2
; Joined path conditions
(assert (Len_c385169_PMPath%precondition $Snap.unit o_V0@50@00 ubuf_V0@51@00))
(assert (= result@52@00 (Len_c385169_PMPath $Snap.unit o_V0@50@00 ubuf_V0@51@00)))
; [eval] result >= 0
(push) ; 2
(assert (not (>= result@52@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@52@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@291@00)
    (=>
      (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@50@00 ubuf_V0@51@00)
      (=
        (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00)
        (Len_c385169_PMPath $Snap.unit o_V0@50@00 ubuf_V0@51@00))))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-242|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@50@00 ubuf_V0@51@00)
    (Len_c385169_PMPath%precondition $Snap.unit o_V0@50@00 ubuf_V0@51@00))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-243|)))
; ---------- FUNCTION PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof----------
(declare-fun d_V0@53@00 () ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ubuf_V0@54@00 () Slice<Ref>)
(declare-fun result@55@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(declare-const $k@293@00 $Perm)
(assert ($Perm.isReadVar $k@293@00))
(assert (<= $Perm.No $k@293@00))
(declare-const $t@294@00 $Snap)
(assert (= $t@294@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@55@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (=
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00)
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-44|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless d_V0@53@00 ubuf_V0@54@00)
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-45|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (let ((result@55@00 (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))) (and
    ($Perm.isReadVar $k@293@00)
    (=>
      (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ d_V0@53@00 ubuf_V0@54@00)
      (>= result@55@00 0))))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-244|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (let ((result@55@00 (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))) true)
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-245|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@293@00))
(assert (<= $Perm.No $k@293@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] Len_daeaf66a_PMDecoded(d_V0, ubuf_V0)
(set-option :timeout 0)
(push) ; 2
(declare-const $k@295@00 $Perm)
(assert ($Perm.isReadVar $k@295@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@293@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@295@00 $k@293@00))
(assert (<= $Perm.No (- $k@293@00 $k@295@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@295@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@53@00 ubuf_V0@54@00))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@295@00))
(assert (and
  (< $k@295@00 $k@293@00)
  (<= $Perm.No (- $k@293@00 $k@295@00))
  (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@53@00 ubuf_V0@54@00)))
(assert (= result@55@00 (Len_daeaf66a_PMDecoded s@$ d_V0@53@00 ubuf_V0@54@00)))
; [eval] result >= 0
(set-option :timeout 0)
(push) ; 2
(assert (not (>= result@55@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@55@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@293@00)
    ($Perm.isReadVar $k@295@00)
    (=>
      (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ d_V0@53@00 ubuf_V0@54@00)
      (=
        (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00)
        (Len_daeaf66a_PMDecoded s@$ d_V0@53@00 ubuf_V0@54@00))))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-246|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ d_V0@53@00 ubuf_V0@54@00)
    (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@53@00 ubuf_V0@54@00))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-247|)))
; ---------- FUNCTION DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof----------
(declare-fun o_V0@56@00 () Tuple0)
(declare-fun underlyingBuf_V0@57@00 () Slice<Ref>)
(declare-fun result@58@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(o_V0): Ref), Path_4cddb96f_T_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] Path_4cddb96f_T_Types()
(declare-const $k@296@00 $Perm)
(assert ($Perm.isReadVar $k@296@00))
(assert (<= $Perm.No $k@296@00))
(declare-const $t@297@00 $Snap)
(assert (= $t@297@00 $Snap.unit))
; [eval] result >= 0
(assert (>= result@58@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (=
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00)
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-46|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless o_V0@56@00 underlyingBuf_V0@57@00)
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-47|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (let ((result@58@00 (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))) (and
    ($Perm.isReadVar $k@296@00)
    (=>
      (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@56@00 underlyingBuf_V0@57@00)
      (>= result@58@00 0))))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-248|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (let ((result@58@00 (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))) true)
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-249|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@296@00))
(assert (<= $Perm.No $k@296@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] Len_4cddb96f_MPath(o_V0, underlyingBuf_V0)
(set-option :timeout 0)
(push) ; 2
(assert (Len_4cddb96f_MPath%precondition $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00))
(pop) ; 2
; Joined path conditions
(assert (Len_4cddb96f_MPath%precondition $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00))
(assert (=
  result@58@00
  (Len_4cddb96f_MPath $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00)))
; [eval] result >= 0
(push) ; 2
(assert (not (>= result@58@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@58@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@296@00)
    (=>
      (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@56@00 underlyingBuf_V0@57@00)
      (=
        (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00)
        (Len_4cddb96f_MPath $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00))))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-250|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (=>
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@56@00 underlyingBuf_V0@57@00)
    (Len_4cddb96f_MPath%precondition $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-251|)))
; ---------- FUNCTION box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref----------
(declare-fun x@59@00 () ShArray<Ref>)
(declare-fun result@60@00 () Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] (ShArraylen(x): Int) == 1 || x == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 1
; [eval] (ShArraylen(x): Int)
(push) ; 2
; [then-branch: 101 | ShArraylen[Int](x@59@00) == 1 | live]
; [else-branch: 101 | ShArraylen[Int](x@59@00) != 1 | live]
(push) ; 3
; [then-branch: 101 | ShArraylen[Int](x@59@00) == 1]
(assert (= (ShArraylen<Int> x@59@00) 1))
(pop) ; 3
(push) ; 3
; [else-branch: 101 | ShArraylen[Int](x@59@00) != 1]
(assert (not (= (ShArraylen<Int> x@59@00) 1)))
; [eval] x == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 4
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> x@59@00) 1))
  (and
    (not (= (ShArraylen<Int> x@59@00) 1))
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))))
(assert (or (not (= (ShArraylen<Int> x@59@00) 1)) (= (ShArraylen<Int> x@59@00) 1)))
(assert (or
  (= (ShArraylen<Int> x@59@00) 1)
  (= x@59@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(declare-const $t@298@00 $Snap)
(assert (= $t@298@00 $Snap.unit))
; [eval] unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(result) == x
; [eval] unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
(assert (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@60@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@60@00))
(assert (=
  (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit result@60@00)
  x@59@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@59@00 ShArray<Ref>)) (!
  (=
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@59@00)
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ x@59@00))
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ x@59@00))
  :qid |quant-u-48|)))
(assert (forall ((s@$ $Snap) (x@59@00 ShArray<Ref>)) (!
  (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless x@59@00)
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@59@00))
  :qid |quant-u-49|)))
(assert (forall ((s@$ $Snap) (x@59@00 ShArray<Ref>)) (!
  (let ((result@60@00 (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@59@00))) (=>
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ x@59@00)
    (=
      (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@60@00)
      x@59@00)))
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@59@00))
  :qid |quant-u-252|)))
(assert (forall ((s@$ $Snap) (x@59@00 ShArray<Ref>)) (!
  (let ((result@60@00 (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@59@00))) (=>
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ x@59@00)
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@60@00)))
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@59@00))
  :qid |quant-u-253|)))
; ---------- FUNCTION unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref----------
(declare-fun y@61@00 () Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(declare-fun result@62@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@299@00 $Snap)
(assert (= $t@299@00 ($Snap.combine ($Snap.first $t@299@00) ($Snap.second $t@299@00))))
(assert (= ($Snap.first $t@299@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1 || result == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(push) ; 2
; [then-branch: 102 | ShArraylen[Int](result@62@00) == 1 | live]
; [else-branch: 102 | ShArraylen[Int](result@62@00) != 1 | live]
(push) ; 3
; [then-branch: 102 | ShArraylen[Int](result@62@00) == 1]
(assert (= (ShArraylen<Int> result@62@00) 1))
(pop) ; 3
(push) ; 3
; [else-branch: 102 | ShArraylen[Int](result@62@00) != 1]
(assert (not (= (ShArraylen<Int> result@62@00) 1)))
; [eval] result == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 4
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> result@62@00) 1))
  (and
    (not (= (ShArraylen<Int> result@62@00) 1))
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))))
(assert (or
  (not (= (ShArraylen<Int> result@62@00) 1))
  (= (ShArraylen<Int> result@62@00) 1)))
(assert (or
  (= (ShArraylen<Int> result@62@00) 1)
  (= result@62@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (= ($Snap.second $t@299@00) $Snap.unit))
; [eval] box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(result) == y
; [eval] box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
; [eval] (ShArraylen(x): Int) == 1 || x == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 1
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 103 | ShArraylen[Int](result@62@00) == 1 | live]
; [else-branch: 103 | ShArraylen[Int](result@62@00) != 1 | live]
(push) ; 4
; [then-branch: 103 | ShArraylen[Int](result@62@00) == 1]
(assert (= (ShArraylen<Int> result@62@00) 1))
(pop) ; 4
(push) ; 4
; [else-branch: 103 | ShArraylen[Int](result@62@00) != 1]
(assert (not (= (ShArraylen<Int> result@62@00) 1)))
; [eval] x == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 5
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@62@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@62@00))
(assert (=
  (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit result@62@00)
  y@61@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@61@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (=
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00)
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ y@61@00))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ y@61@00))
  :qid |quant-u-50|)))
(assert (forall ((s@$ $Snap) (y@61@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless y@61@00)
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))
  :qid |quant-u-51|)))
(assert (forall ((s@$ $Snap) (y@61@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (let ((result@62@00 (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))) (=>
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ y@61@00)
    (and
      (or
        (= (ShArraylen<Int> result@62@00) 1)
        (= result@62@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@62@00)
        y@61@00))))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))
  :qid |quant-u-254|)))
(assert (forall ((s@$ $Snap) (y@61@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (let ((result@62@00 (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))) (=>
    (and
      (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ y@61@00)
      (not (= (ShArraylen<Int> result@62@00) 1)))
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))
  :qid |quant-u-255|)))
(assert (forall ((s@$ $Snap) (y@61@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (let ((result@62@00 (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))) (=>
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ y@61@00)
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@62@00)))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@61@00))
  :qid |quant-u-256|)))
; ---------- FUNCTION arrayNil_1_Intbyte$$$_S_$$$----------
(declare-fun result@63@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@300@00 $Snap)
(assert (= $t@300@00 ($Snap.combine ($Snap.first $t@300@00) ($Snap.second $t@300@00))))
(assert (= ($Snap.first $t@300@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(assert (= (ShArraylen<Int> result@63@00) 1))
(assert (= ($Snap.second $t@300@00) $Snap.unit))
; [eval] (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)
(declare-const idx@301@00 Int)
(push) ; 2
; [eval] (ShArrayloc(result, idx): Ref) == null
; [eval] (ShArrayloc(result, idx): Ref)
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((idx@301@00 Int)) (!
  (= (ShArrayloc<Ref> result@63@00 idx@301@00) $Ref.null)
  :pattern ((ShArrayloc<Ref> result@63@00 idx@301@00))
  :qid |prog.l2495|)))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (= (arrayNil_1_Intbyte$$$_S_$$$%limited s@$) (arrayNil_1_Intbyte$$$_S_$$$ s@$))
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$ s@$))
  :qid |quant-u-52|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_1_Intbyte$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-53|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@63@00 (arrayNil_1_Intbyte$$$_S_$$$%limited s@$))) (=>
    (arrayNil_1_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@63@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@63@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@63@00 idx))
        )))))
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-257|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@63@00 (arrayNil_1_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-258|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@63@00 (arrayNil_1_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-259|)))
; ---------- FUNCTION Length_840d9458_MAddrType----------
(declare-fun tl_V0@64@00 () Int)
(declare-fun result@65@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@302@00 $Snap)
(assert (= $t@302@00 ($Snap.combine ($Snap.first $t@302@00) ($Snap.second $t@302@00))))
(assert (= ($Snap.first $t@302@00) $Snap.unit))
; [eval] result == 4 * (1 + BitAnd3_ca158f5e_F(tl_V0))
; [eval] 4 * (1 + BitAnd3_ca158f5e_F(tl_V0))
; [eval] 1 + BitAnd3_ca158f5e_F(tl_V0)
; [eval] BitAnd3_ca158f5e_F(tl_V0)
(push) ; 2
(assert (BitAnd3_ca158f5e_F%precondition $Snap.unit tl_V0@64@00))
(pop) ; 2
; Joined path conditions
(assert (BitAnd3_ca158f5e_F%precondition $Snap.unit tl_V0@64@00))
(assert (= result@65@00 (* 4 (+ 1 (BitAnd3_ca158f5e_F $Snap.unit tl_V0@64@00)))))
(assert (=
  ($Snap.second $t@302@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@302@00))
    ($Snap.second ($Snap.second $t@302@00)))))
(assert (= ($Snap.first ($Snap.second $t@302@00)) $Snap.unit))
; [eval] tl_V0 == 0 ==> result == 4
; [eval] tl_V0 == 0
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tl_V0@64@00 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tl_V0@64@00 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | tl_V0@64@00 == 0 | live]
; [else-branch: 104 | tl_V0@64@00 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 104 | tl_V0@64@00 == 0]
(assert (= tl_V0@64@00 0))
; [eval] result == 4
(pop) ; 3
(push) ; 3
; [else-branch: 104 | tl_V0@64@00 != 0]
(assert (not (= tl_V0@64@00 0)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= tl_V0@64@00 0)) (= tl_V0@64@00 0)))
(assert (=> (= tl_V0@64@00 0) (= result@65@00 4)))
(assert (=
  ($Snap.second ($Snap.second $t@302@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@302@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@302@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@302@00))) $Snap.unit))
; [eval] tl_V0 == 4 ==> result == 4
; [eval] tl_V0 == 4
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tl_V0@64@00 4))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tl_V0@64@00 4)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | tl_V0@64@00 == 4 | live]
; [else-branch: 105 | tl_V0@64@00 != 4 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 105 | tl_V0@64@00 == 4]
(assert (= tl_V0@64@00 4))
; [eval] result == 4
(pop) ; 3
(push) ; 3
; [else-branch: 105 | tl_V0@64@00 != 4]
(assert (not (= tl_V0@64@00 4)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= tl_V0@64@00 4)) (= tl_V0@64@00 4)))
(assert (=> (= tl_V0@64@00 4) (= result@65@00 4)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@302@00))) $Snap.unit))
; [eval] tl_V0 == 3 ==> result == 4 * 4
; [eval] tl_V0 == 3
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tl_V0@64@00 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tl_V0@64@00 3)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | tl_V0@64@00 == 3 | live]
; [else-branch: 106 | tl_V0@64@00 != 3 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 106 | tl_V0@64@00 == 3]
(assert (= tl_V0@64@00 3))
; [eval] result == 4 * 4
; [eval] 4 * 4
(pop) ; 3
(push) ; 3
; [else-branch: 106 | tl_V0@64@00 != 3]
(assert (not (= tl_V0@64@00 3)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= tl_V0@64@00 3)) (= tl_V0@64@00 3)))
(assert (=> (= tl_V0@64@00 3) (= result@65@00 16)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (=
    (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00)
    (Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :pattern ((Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :qid |quant-u-54|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (Length_840d9458_MAddrType%stateless tl_V0@64@00)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-55|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (and
      (= result@65@00 (* 4 (+ 1 (BitAnd3_ca158f5e_F $Snap.unit tl_V0@64@00))))
      (=> (= tl_V0@64@00 0) (= result@65@00 4))
      (=> (= tl_V0@64@00 4) (= result@65@00 4))
      (=> (= tl_V0@64@00 3) (= result@65@00 16)))))
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-260|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (BitAnd3_ca158f5e_F%precondition $Snap.unit tl_V0@64@00)))
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-261|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) true)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-262|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) true)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-263|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) true)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-264|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] 4 * (1 + intBitwiseAnd(tl_V0, 3))
; [eval] 1 + intBitwiseAnd(tl_V0, 3)
; [eval] intBitwiseAnd(tl_V0, 3)
(set-option :timeout 0)
(push) ; 2
(assert (intBitwiseAnd%precondition $Snap.unit tl_V0@64@00 3))
(pop) ; 2
; Joined path conditions
(assert (intBitwiseAnd%precondition $Snap.unit tl_V0@64@00 3))
(assert (= result@65@00 (* 4 (+ 1 (intBitwiseAnd $Snap.unit tl_V0@64@00 3)))))
; [eval] result == 4 * (1 + BitAnd3_ca158f5e_F(tl_V0))
; [eval] 4 * (1 + BitAnd3_ca158f5e_F(tl_V0))
; [eval] 1 + BitAnd3_ca158f5e_F(tl_V0)
; [eval] BitAnd3_ca158f5e_F(tl_V0)
(push) ; 2
(assert (BitAnd3_ca158f5e_F%precondition $Snap.unit tl_V0@64@00))
(pop) ; 2
; Joined path conditions
(assert (BitAnd3_ca158f5e_F%precondition $Snap.unit tl_V0@64@00))
(push) ; 2
(assert (not (= result@65@00 (* 4 (+ 1 (BitAnd3_ca158f5e_F $Snap.unit tl_V0@64@00))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (= result@65@00 (* 4 (+ 1 (BitAnd3_ca158f5e_F $Snap.unit tl_V0@64@00)))))
; [eval] tl_V0 == 0 ==> result == 4
; [eval] tl_V0 == 0
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tl_V0@64@00 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tl_V0@64@00 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | tl_V0@64@00 == 0 | live]
; [else-branch: 107 | tl_V0@64@00 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 107 | tl_V0@64@00 == 0]
(assert (= tl_V0@64@00 0))
; [eval] result == 4
(pop) ; 3
(push) ; 3
; [else-branch: 107 | tl_V0@64@00 != 0]
(assert (not (= tl_V0@64@00 0)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= tl_V0@64@00 0)) (= tl_V0@64@00 0)))
(push) ; 2
(assert (not (=> (= tl_V0@64@00 0) (= result@65@00 4))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=> (= tl_V0@64@00 0) (= result@65@00 4)))
; [eval] tl_V0 == 4 ==> result == 4
; [eval] tl_V0 == 4
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tl_V0@64@00 4))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tl_V0@64@00 4)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | tl_V0@64@00 == 4 | live]
; [else-branch: 108 | tl_V0@64@00 != 4 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 108 | tl_V0@64@00 == 4]
(assert (= tl_V0@64@00 4))
; [eval] result == 4
(pop) ; 3
(push) ; 3
; [else-branch: 108 | tl_V0@64@00 != 4]
(assert (not (= tl_V0@64@00 4)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= tl_V0@64@00 4)) (= tl_V0@64@00 4)))
(push) ; 2
(assert (not (=> (= tl_V0@64@00 4) (= result@65@00 4))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=> (= tl_V0@64@00 4) (= result@65@00 4)))
; [eval] tl_V0 == 3 ==> result == 4 * 4
; [eval] tl_V0 == 3
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tl_V0@64@00 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tl_V0@64@00 3)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | tl_V0@64@00 == 3 | live]
; [else-branch: 109 | tl_V0@64@00 != 3 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 109 | tl_V0@64@00 == 3]
(assert (= tl_V0@64@00 3))
; [eval] result == 4 * 4
; [eval] 4 * 4
(pop) ; 3
(push) ; 3
; [else-branch: 109 | tl_V0@64@00 != 3]
(assert (not (= tl_V0@64@00 3)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= tl_V0@64@00 3)) (= tl_V0@64@00 3)))
(push) ; 2
(assert (not (=> (= tl_V0@64@00 3) (= result@65@00 16))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=> (= tl_V0@64@00 3) (= result@65@00 16)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (=
      (Length_840d9458_MAddrType s@$ tl_V0@64@00)
      (* 4 (+ 1 (intBitwiseAnd $Snap.unit tl_V0@64@00 3)))))
  :pattern ((Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :qid |quant-u-265|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (intBitwiseAnd%precondition $Snap.unit tl_V0@64@00 3))
  :pattern ((Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :qid |quant-u-266|)))
; ---------- FUNCTION Has3Bits_840d9458_MAddrType----------
(declare-fun a_V0@66@00 () Int)
(declare-fun result@67@00 () Bool)
; ----- Well-definedness of specifications -----
(push) ; 1
(pop) ; 1
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  (=
    (Has3Bits_840d9458_MAddrType%limited s@$ a_V0@66@00)
    (Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :pattern ((Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :qid |quant-u-56|)))
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  (Has3Bits_840d9458_MAddrType%stateless a_V0@66@00)
  :pattern ((Has3Bits_840d9458_MAddrType%limited s@$ a_V0@66@00))
  :qid |quant-u-57|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] 0 <= a_V0 && a_V0 <= 7
; [eval] 0 <= a_V0
(set-option :timeout 0)
(push) ; 2
; [then-branch: 110 | 0 <= a_V0@66@00 | live]
; [else-branch: 110 | !(0 <= a_V0@66@00) | live]
(push) ; 3
; [then-branch: 110 | 0 <= a_V0@66@00]
(assert (<= 0 a_V0@66@00))
; [eval] a_V0 <= 7
(pop) ; 3
(push) ; 3
; [else-branch: 110 | !(0 <= a_V0@66@00)]
(assert (not (<= 0 a_V0@66@00)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 a_V0@66@00)) (<= 0 a_V0@66@00)))
(assert (= result@67@00 (and (<= a_V0@66@00 7) (<= 0 a_V0@66@00))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  (=>
    (Has3Bits_840d9458_MAddrType%precondition s@$ a_V0@66@00)
    (=
      (Has3Bits_840d9458_MAddrType s@$ a_V0@66@00)
      (and (<= 0 a_V0@66@00) (<= a_V0@66@00 7))))
  :pattern ((Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :qid |quant-u-267|)))
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  true
  :pattern ((Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :qid |quant-u-268|)))
; ---------- FUNCTION assertArg2_Tuple0----------
(declare-fun b@68@00 () Bool)
(declare-fun y@69@00 () Tuple0)
(declare-fun result@70@00 () Tuple0)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@68@00)
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  (=
    (assertArg2_Tuple0%limited s@$ b@68@00 y@69@00)
    (assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :pattern ((assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :qid |quant-u-58|)))
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  (assertArg2_Tuple0%stateless b@68@00 y@69@00)
  :pattern ((assertArg2_Tuple0%limited s@$ b@68@00 y@69@00))
  :qid |quant-u-59|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@68@00)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@70@00 y@69@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  (=>
    (assertArg2_Tuple0%precondition s@$ b@68@00 y@69@00)
    (= (assertArg2_Tuple0 s@$ b@68@00 y@69@00) y@69@00))
  :pattern ((assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :qid |quant-u-269|)))
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  true
  :pattern ((assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :qid |quant-u-270|)))
; ---------- FUNCTION assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef----------
(declare-fun b@71@00 () Bool)
(declare-fun y@72@00 () ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun result@73@00 () ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@71@00)
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%limited s@$ b@71@00 y@72@00)
    (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :qid |quant-u-60|)))
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%stateless b@71@00 y@72@00)
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%limited s@$ b@71@00 y@72@00))
  :qid |quant-u-61|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@71@00)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@73@00 y@72@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=>
    (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%precondition s@$ b@71@00 y@72@00)
    (=
      (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00)
      y@72@00))
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :qid |quant-u-271|)))
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :qid |quant-u-272|)))
; ---------- FUNCTION assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$----------
(declare-fun b@74@00 () Bool)
(declare-fun y@75@00 () ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun result@76@00 () ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@74@00)
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%limited s@$ b@74@00 y@75@00)
    (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :qid |quant-u-62|)))
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%stateless b@74@00 y@75@00)
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%limited s@$ b@74@00 y@75@00))
  :qid |quant-u-63|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@74@00)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@76@00 y@75@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=>
    (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%precondition s@$ b@74@00 y@75@00)
    (=
      (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00)
      y@75@00))
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :qid |quant-u-273|)))
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  true
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :qid |quant-u-274|)))
; ---------- FUNCTION assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef----------
(declare-fun b@77@00 () Bool)
(declare-fun y@78@00 () ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun result@79@00 () ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@77@00)
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%limited s@$ b@77@00 y@78@00)
    (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :qid |quant-u-64|)))
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%stateless b@77@00 y@78@00)
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%limited s@$ b@77@00 y@78@00))
  :qid |quant-u-65|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@77@00)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@79@00 y@78@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=>
    (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%precondition s@$ b@77@00 y@78@00)
    (=
      (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00)
      y@78@00))
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :qid |quant-u-275|)))
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :qid |quant-u-276|)))
; ---------- FUNCTION assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef----------
(declare-fun b@80@00 () Bool)
(declare-fun y@81@00 () ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun result@82@00 () ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@80@00)
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%limited s@$ b@80@00 y@81@00)
    (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :qid |quant-u-66|)))
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%stateless b@80@00 y@81@00)
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%limited s@$ b@80@00 y@81@00))
  :qid |quant-u-67|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@80@00)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@82@00 y@81@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=>
    (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%precondition s@$ b@80@00 y@81@00)
    (=
      (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00)
      y@81@00))
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :qid |quant-u-277|)))
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :qid |quant-u-278|)))
; ---------- FUNCTION assertArg2_ShStruct2_RefRef----------
(declare-fun b@83@00 () Bool)
(declare-fun y@84@00 () ShStruct2<Ref~_Ref>)
(declare-fun result@85@00 () ShStruct2<Ref~_Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@83@00)
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  (=
    (assertArg2_ShStruct2_RefRef%limited s@$ b@83@00 y@84@00)
    (assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :pattern ((assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :qid |quant-u-68|)))
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  (assertArg2_ShStruct2_RefRef%stateless b@83@00 y@84@00)
  :pattern ((assertArg2_ShStruct2_RefRef%limited s@$ b@83@00 y@84@00))
  :qid |quant-u-69|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert (= s@$ $Snap.unit))
(assert b@83@00)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(assert (= result@85@00 y@84@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  (=>
    (assertArg2_ShStruct2_RefRef%precondition s@$ b@83@00 y@84@00)
    (= (assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00) y@84@00))
  :pattern ((assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :qid |quant-u-279|)))
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :qid |quant-u-280|)))
; ---------- FUNCTION typeOfInterface_Y$558431e4_a6ceb89d_----------
(declare-fun itf@86@00 () Tuple2<Ref~_Types>)
(declare-fun result@87@00 () Types)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(declare-const $t@303@00 $Snap)
(assert (= $t@303@00 ($Snap.combine ($Snap.first $t@303@00) ($Snap.second $t@303@00))))
(assert (= ($Snap.first $t@303@00) $Snap.unit))
; [eval] result == (get1of2(itf): Types)
; [eval] (get1of2(itf): Types)
(assert (= result@87@00 (get1of2<Types> itf@86@00)))
(assert (= ($Snap.second $t@303@00) $Snap.unit))
; [eval] behavioral_subtype_Types(result, Y$558431e4_a6ceb89d__Types())
; [eval] Y$558431e4_a6ceb89d__Types()
(assert (behavioral_subtype_Types<Bool> result@87@00 (as Y$558431e4_a6ceb89d__Types<Types>  Types)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00)
    (typeOfInterface_Y$558431e4_a6ceb89d_ s@$ itf@86@00))
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_ s@$ itf@86@00))
  :qid |quant-u-70|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (typeOfInterface_Y$558431e4_a6ceb89d_%stateless itf@86@00)
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-71|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (let ((result@87@00 (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))) (=>
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition s@$ itf@86@00)
    (and
      (= result@87@00 (get1of2<Types> itf@86@00))
      (behavioral_subtype_Types<Bool> result@87@00 (as Y$558431e4_a6ceb89d__Types<Types>  Types)))))
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-281|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (let ((result@87@00 (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))) true)
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-282|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (let ((result@87@00 (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))) true)
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-283|)))
; ---------- FUNCTION Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback----------
(declare-fun thisItf@88@00 () Tuple2<Ref~_Types>)
(declare-fun underlyingBuf_V0@89@00 () Slice<Ref>)
(declare-fun result@90@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    thisItf@88@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(declare-const $k@304@00 $Perm)
(assert ($Perm.isReadVar $k@304@00))
(assert (<= $Perm.No $k@304@00))
(declare-const $t@305@00 $Snap)
(assert (= $t@305@00 ($Snap.combine ($Snap.first $t@305@00) ($Snap.second $t@305@00))))
(assert (= ($Snap.first $t@305@00) $Snap.unit))
; [eval] (get1of2(thisItf): Types) == Path_4cddb96f_T_Types() ==> result == DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(thisItf): Types)
; [eval] Path_4cddb96f_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | get1of2[Types](thisItf@88@00) == Path_4cddb96f_T_Types[Types] | live]
; [else-branch: 111 | get1of2[Types](thisItf@88@00) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 111 | get1of2[Types](thisItf@88@00) == Path_4cddb96f_T_Types[Types]]
(assert (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types)))
; [eval] result == DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): Tuple0)
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@306@00 $Perm)
(assert ($Perm.isReadVar $k@306@00))
; [eval] (tuple2((box_Poly(o_V0): Ref), Path_4cddb96f_T_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] Path_4cddb96f_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@88@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00))) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@304@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@306@00 $k@304@00))
(assert (<= $Perm.No (- $k@304@00 $k@306@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@306@00))
(assert (and
  (< $k@306@00 $k@304@00)
  (<= $Perm.No (- $k@304@00 $k@306@00))
  (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 111 | get1of2[Types](thisItf@88@00) != Path_4cddb96f_T_Types[Types]]
(assert (not (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@306@00))
(assert (=>
  (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (and
    (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types))
    (< $k@306@00 $k@304@00)
    (<= $Perm.No (- $k@304@00 $k@306@00))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
; Joined path conditions
(assert (or
  (not
    (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types)))
  (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(assert (=>
  (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    result@90@00
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
(assert (=
  ($Snap.second $t@305@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@305@00))
    ($Snap.second ($Snap.second $t@305@00)))))
(assert (= ($Snap.first ($Snap.second $t@305@00)) $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Decoded_daeaf66a_T_Types()) ==> result == PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 112 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 112 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
; [eval] result == PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@307@00 $Perm)
(assert ($Perm.isReadVar $k@307@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@88@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00))) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@304@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@307@00 $k@304@00))
(assert (<= $Perm.No (- $k@304@00 $k@307@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@307@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@307@00))
(assert (and
  (< $k@307@00 $k@304@00)
  (<= $Perm.No (- $k@304@00 $k@307@00))
  (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 112 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@307@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
    (< $k@307@00 $k@304@00)
    (<= $Perm.No (- $k@304@00 $k@307@00))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (=
    result@90@00
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
(assert (=
  ($Snap.second ($Snap.second $t@305@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@305@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@305@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@305@00))) $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c385169_T_Types()) ==> result == PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 113 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 113 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] result == PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@308@00 $Perm)
(assert ($Perm.isReadVar $k@308@00))
; [eval] (tuple2((box_Poly(o_V0): Ref), pointer_Types(Path_c385169_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@88@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00))) (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@304@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@308@00 $k@304@00))
(assert (<= $Perm.No (- $k@304@00 $k@308@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@308@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@308@00))
(assert (and
  (< $k@308@00 $k@304@00)
  (<= $Perm.No (- $k@304@00 $k@308@00))
  (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 113 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@308@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< $k@308@00 $k@304@00)
    (<= $Perm.No (- $k@304@00 $k@308@00))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    result@90@00
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@305@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@305@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@305@00))))
  $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c6e60a1d_T_Types()) ==> result == PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 114 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 114 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
; [eval] result == PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@309@00 $Perm)
(assert ($Perm.isReadVar $k@309@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@88@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00))) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@304@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@309@00 $k@304@00))
(assert (<= $Perm.No (- $k@304@00 $k@309@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@309@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@309@00))
(assert (and
  (< $k@309@00 $k@304@00)
  (<= $Perm.No (- $k@304@00 $k@309@00))
  (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 114 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@309@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (< $k@309@00 $k@304@00)
    (<= $Perm.No (- $k@304@00 $k@309@00))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (=
    result@90@00
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00)))))
  $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Raw_daeaf66a_T_Types()) ==> result == PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 115 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 115 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
; [eval] result == PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@310@00 $Perm)
(assert ($Perm.isReadVar $k@310@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@88@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@304@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@310@00 $k@304@00))
(assert (<= $Perm.No (- $k@304@00 $k@310@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@310@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@310@00))
(assert (and
  (< $k@310@00 $k@304@00)
  (<= $Perm.No (- $k@304@00 $k@310@00))
  (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 115 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@310@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (< $k@310@00 $k@304@00)
    (<= $Perm.No (- $k@304@00 $k@310@00))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (=
    result@90@00
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00))))))
  $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(rawPath_a6ceb89d_T_Types()) ==> result == PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
; [else-branch: 116 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 116 | get1of2[Types](thisItf@88@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@88@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
; [eval] result == PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@311@00 $Perm)
(assert ($Perm.isReadVar $k@311@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@88@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00))) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@304@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@311@00 $k@304@00))
(assert (<= $Perm.No (- $k@304@00 $k@311@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@311@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@311@00))
(assert (and
  (< $k@311@00 $k@304@00)
  (<= $Perm.No (- $k@304@00 $k@311@00))
  (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 116 | get1of2[Types](thisItf@88@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@311@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
    (< $k@311@00 $k@304@00)
    (<= $Perm.No (- $k@304@00 $k@311@00))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@88@00)
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@88@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (=
    result@90@00
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@00))))))
  $Snap.unit))
; [eval] result >= 0
(assert (>= result@90@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (=
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00)
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-72|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%stateless thisItf@88@00 underlyingBuf_V0@89@00)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-73|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (and
    ($Perm.isReadVar $k@304@00)
    ($Perm.isReadVar $k@306@00)
    ($Perm.isReadVar $k@307@00)
    ($Perm.isReadVar $k@308@00)
    ($Perm.isReadVar $k@309@00)
    ($Perm.isReadVar $k@310@00)
    ($Perm.isReadVar $k@311@00)
    (=>
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (and
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (as Path_4cddb96f_T_Types<Types>  Types))
          (=
            result@90@00
            (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (>= result@90@00 0)))))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-284|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types)))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-285|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-286|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-287|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-288|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-289|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-290|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) true)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-291|)))
; ---------- FUNCTION arrayNil_4_Interfaceempty_interface$$$_S_$$$----------
(declare-fun result@91@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@312@00 $Snap)
(assert (= $t@312@00 ($Snap.combine ($Snap.first $t@312@00) ($Snap.second $t@312@00))))
(assert (= ($Snap.first $t@312@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(assert (= (ShArraylen<Int> result@91@00) 1))
(assert (= ($Snap.second $t@312@00) $Snap.unit))
; [eval] (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)
(declare-const idx@313@00 Int)
(push) ; 2
; [eval] (ShArrayloc(result, idx): Ref) == null
; [eval] (ShArrayloc(result, idx): Ref)
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((idx@313@00 Int)) (!
  (= (ShArrayloc<Ref> result@91@00 idx@313@00) $Ref.null)
  :pattern ((ShArrayloc<Ref> result@91@00 idx@313@00))
  :qid |prog.l2783|)))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$)
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$ s@$))
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$ s@$))
  :qid |quant-u-74|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_4_Interfaceempty_interface$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-75|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@91@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))) (=>
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@91@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@91@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@91@00 idx))
        )))))
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-292|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@91@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-293|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@91@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-294|)))
; ---------- FUNCTION sadd----------
(declare-fun left@92@00 () Int)
(declare-fun right@93@00 () Int)
(declare-fun result@94@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@314@00 $Snap)
(assert (= $t@314@00 $Snap.unit))
; [eval] result == left + right
; [eval] left + right
(assert (= result@94@00 (+ left@92@00 right@93@00)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (= (sadd%limited s@$ left@92@00 right@93@00) (sadd s@$ left@92@00 right@93@00))
  :pattern ((sadd s@$ left@92@00 right@93@00))
  :qid |quant-u-76|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (sadd%stateless left@92@00 right@93@00)
  :pattern ((sadd%limited s@$ left@92@00 right@93@00))
  :qid |quant-u-77|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (let ((result@94@00 (sadd%limited s@$ left@92@00 right@93@00))) (=>
    (sadd%precondition s@$ left@92@00 right@93@00)
    (= result@94@00 (+ left@92@00 right@93@00))))
  :pattern ((sadd%limited s@$ left@92@00 right@93@00))
  :qid |quant-u-295|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (let ((result@94@00 (sadd%limited s@$ left@92@00 right@93@00))) true)
  :pattern ((sadd%limited s@$ left@92@00 right@93@00))
  :qid |quant-u-296|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] left + right
(assert (= result@94@00 (+ left@92@00 right@93@00)))
; [eval] result == left + right
; [eval] left + right
(pop) ; 1
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (=>
    (sadd%precondition s@$ left@92@00 right@93@00)
    (= (sadd s@$ left@92@00 right@93@00) (+ left@92@00 right@93@00)))
  :pattern ((sadd s@$ left@92@00 right@93@00))
  :qid |quant-u-297|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  true
  :pattern ((sadd s@$ left@92@00 right@93@00))
  :qid |quant-u-298|)))
; ---------- FUNCTION sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$----------
(declare-fun result@95@00 () Slice<Ref>)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
(declare-const $t@315@00 $Snap)
(assert (= $t@315@00 ($Snap.combine ($Snap.first $t@315@00) ($Snap.second $t@315@00))))
(assert (= ($Snap.first $t@315@00) $Snap.unit))
; [eval] (soffset(result): Int) == 0
; [eval] (soffset(result): Int)
(assert (= (soffset<Int> result@95@00) 0))
(assert (=
  ($Snap.second $t@315@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@315@00))
    ($Snap.second ($Snap.second $t@315@00)))))
(assert (= ($Snap.first ($Snap.second $t@315@00)) $Snap.unit))
; [eval] (slen(result): Int) == 0
; [eval] (slen(result): Int)
(assert (= (slen<Int> result@95@00) 0))
(assert (=
  ($Snap.second ($Snap.second $t@315@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@315@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@315@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@315@00))) $Snap.unit))
; [eval] (scap(result): Int) == 0
; [eval] (scap(result): Int)
(assert (= (scap<Int> result@95@00) 0))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@315@00))) $Snap.unit))
; [eval] (sarray(result): ShArray[Ref]) == unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()))
; [eval] (sarray(result): ShArray[Ref])
; [eval] unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()))
; [eval] box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref(arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 2
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(push) ; 2
; [eval] (ShArraylen(x): Int) == 1 || x == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 1
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 117 | ShArraylen[Int](arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$(_)) == 1 | live]
; [else-branch: 117 | ShArraylen[Int](arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$(_)) != 1 | live]
(push) ; 4
; [then-branch: 117 | ShArraylen[Int](arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$(_)) == 1]
(assert (= (ShArraylen<Int> (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)) 1))
(pop) ; 4
(push) ; 4
; [else-branch: 117 | ShArraylen[Int](arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$(_)) != 1]
(assert (not
  (= (ShArraylen<Int> (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)) 1)))
; [eval] x == arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      (ShArraylen<Int> (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))
      1))
  (= (ShArraylen<Int> (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)) 1)))
(assert (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
(pop) ; 2
; Joined path conditions
(assert (and
  (or
    (not
      (=
        (ShArraylen<Int> (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))
        1))
    (=
      (ShArraylen<Int> (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))
      1))
  (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(push) ; 2
(assert (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (=
  (sarray<ShArray<Ref>> result@95@00)
  (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$)
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :qid |quant-u-78|)))
(assert (forall ((s@$ $Snap)) (!
  (as sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless  Bool)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-79|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition s@$)
    (and
      (= (soffset<Int> result@95@00) 0)
      (= (slen<Int> result@95@00) 0)
      (= (scap<Int> result@95@00) 0)
      (=
        (sarray<ShArray<Ref>> result@95@00)
        (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))))))
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-299|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-300|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-301|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-302|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition s@$)
    (and
      (and
        (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit)
        (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
      (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))))
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-303|)))
; ---------- FUNCTION arrayNil_2_Interfaceempty_interface$$$_S_$$$----------
(declare-fun result@96@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@316@00 $Snap)
(assert (= $t@316@00 ($Snap.combine ($Snap.first $t@316@00) ($Snap.second $t@316@00))))
(assert (= ($Snap.first $t@316@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(assert (= (ShArraylen<Int> result@96@00) 1))
(assert (= ($Snap.second $t@316@00) $Snap.unit))
; [eval] (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)
(declare-const idx@317@00 Int)
(push) ; 2
; [eval] (ShArrayloc(result, idx): Ref) == null
; [eval] (ShArrayloc(result, idx): Ref)
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((idx@317@00 Int)) (!
  (= (ShArrayloc<Ref> result@96@00 idx@317@00) $Ref.null)
  :pattern ((ShArrayloc<Ref> result@96@00 idx@317@00))
  :qid |prog.l2652|)))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$)
    (arrayNil_2_Interfaceempty_interface$$$_S_$$$ s@$))
  :pattern ((arrayNil_2_Interfaceempty_interface$$$_S_$$$ s@$))
  :qid |quant-u-80|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_2_Interfaceempty_interface$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-81|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@96@00 (arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))) (=>
    (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@96@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@96@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@96@00 idx))
        )))))
  :pattern ((arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-304|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@96@00 (arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-305|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@96@00 (arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_2_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-306|)))
; ---------- FUNCTION box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref----------
(declare-fun x@97@00 () ShArray<Ref>)
(declare-fun result@98@00 () Emb_1_Intbyte$$$_S_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] (ShArraylen(x): Int) == 1 || x == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 1
; [eval] (ShArraylen(x): Int)
(push) ; 2
; [then-branch: 118 | ShArraylen[Int](x@97@00) == 1 | live]
; [else-branch: 118 | ShArraylen[Int](x@97@00) != 1 | live]
(push) ; 3
; [then-branch: 118 | ShArraylen[Int](x@97@00) == 1]
(assert (= (ShArraylen<Int> x@97@00) 1))
(pop) ; 3
(push) ; 3
; [else-branch: 118 | ShArraylen[Int](x@97@00) != 1]
(assert (not (= (ShArraylen<Int> x@97@00) 1)))
; [eval] x == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] arrayNil_1_Intbyte$$$_S_$$$()
(push) ; 4
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> x@97@00) 1))
  (and
    (not (= (ShArraylen<Int> x@97@00) 1))
    (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))))
(assert (or (not (= (ShArraylen<Int> x@97@00) 1)) (= (ShArraylen<Int> x@97@00) 1)))
(assert (or
  (= (ShArraylen<Int> x@97@00) 1)
  (= x@97@00 (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))
(declare-const $t@318@00 $Snap)
(assert (= $t@318@00 $Snap.unit))
; [eval] unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(result) == x
; [eval] unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
(assert (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@98@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@98@00))
(assert (= (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit result@98@00) x@97@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@97@00 ShArray<Ref>)) (!
  (=
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@97@00)
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ x@97@00))
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ x@97@00))
  :qid |quant-u-82|)))
(assert (forall ((s@$ $Snap) (x@97@00 ShArray<Ref>)) (!
  (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless x@97@00)
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@97@00))
  :qid |quant-u-83|)))
(assert (forall ((s@$ $Snap) (x@97@00 ShArray<Ref>)) (!
  (let ((result@98@00 (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@97@00))) (=>
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ x@97@00)
    (=
      (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@98@00)
      x@97@00)))
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@97@00))
  :qid |quant-u-307|)))
(assert (forall ((s@$ $Snap) (x@97@00 ShArray<Ref>)) (!
  (let ((result@98@00 (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@97@00))) (=>
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ x@97@00)
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@98@00)))
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@97@00))
  :qid |quant-u-308|)))
; ---------- FUNCTION unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref----------
(declare-fun y@99@00 () Emb_1_Intbyte$$$_S_$$$)
(declare-fun result@100@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@319@00 $Snap)
(assert (= $t@319@00 ($Snap.combine ($Snap.first $t@319@00) ($Snap.second $t@319@00))))
(assert (= ($Snap.first $t@319@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 1 || result == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] (ShArraylen(result): Int) == 1
; [eval] (ShArraylen(result): Int)
(push) ; 2
; [then-branch: 119 | ShArraylen[Int](result@100@00) == 1 | live]
; [else-branch: 119 | ShArraylen[Int](result@100@00) != 1 | live]
(push) ; 3
; [then-branch: 119 | ShArraylen[Int](result@100@00) == 1]
(assert (= (ShArraylen<Int> result@100@00) 1))
(pop) ; 3
(push) ; 3
; [else-branch: 119 | ShArraylen[Int](result@100@00) != 1]
(assert (not (= (ShArraylen<Int> result@100@00) 1)))
; [eval] result == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] arrayNil_1_Intbyte$$$_S_$$$()
(push) ; 4
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> result@100@00) 1))
  (and
    (not (= (ShArraylen<Int> result@100@00) 1))
    (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))))
(assert (or
  (not (= (ShArraylen<Int> result@100@00) 1))
  (= (ShArraylen<Int> result@100@00) 1)))
(assert (or
  (= (ShArraylen<Int> result@100@00) 1)
  (= result@100@00 (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))
(assert (= ($Snap.second $t@319@00) $Snap.unit))
; [eval] box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(result) == y
; [eval] box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
; [eval] (ShArraylen(x): Int) == 1 || x == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 1
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 120 | ShArraylen[Int](result@100@00) == 1 | live]
; [else-branch: 120 | ShArraylen[Int](result@100@00) != 1 | live]
(push) ; 4
; [then-branch: 120 | ShArraylen[Int](result@100@00) == 1]
(assert (= (ShArraylen<Int> result@100@00) 1))
(pop) ; 4
(push) ; 4
; [else-branch: 120 | ShArraylen[Int](result@100@00) != 1]
(assert (not (= (ShArraylen<Int> result@100@00) 1)))
; [eval] x == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] arrayNil_1_Intbyte$$$_S_$$$()
(push) ; 5
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@100@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@100@00))
(assert (= (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit result@100@00) y@99@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@99@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (=
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00)
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ y@99@00))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ y@99@00))
  :qid |quant-u-84|)))
(assert (forall ((s@$ $Snap) (y@99@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless y@99@00)
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))
  :qid |quant-u-85|)))
(assert (forall ((s@$ $Snap) (y@99@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (let ((result@100@00 (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))) (=>
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@99@00)
    (and
      (or
        (= (ShArraylen<Int> result@100@00) 1)
        (= result@100@00 (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@100@00)
        y@99@00))))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))
  :qid |quant-u-309|)))
(assert (forall ((s@$ $Snap) (y@99@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (let ((result@100@00 (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))) (=>
    (and
      (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@99@00)
      (not (= (ShArraylen<Int> result@100@00) 1)))
    (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))
  :qid |quant-u-310|)))
(assert (forall ((s@$ $Snap) (y@99@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (let ((result@100@00 (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))) (=>
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@99@00)
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@100@00)))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@99@00))
  :qid |quant-u-311|)))
; ---------- FUNCTION shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$----------
(declare-fun result@101@00 () ShStruct2<Ref~_Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@320@00 $Snap)
(assert (= $t@320@00 ($Snap.combine ($Snap.first $t@320@00) ($Snap.second $t@320@00))))
(assert (= ($Snap.first $t@320@00) $Snap.unit))
; [eval] (ShStructget0of2(result): Ref) == null
; [eval] (ShStructget0of2(result): Ref)
(assert (= (ShStructget0of2<Ref> result@101@00) $Ref.null))
(assert (= ($Snap.second $t@320@00) $Snap.unit))
; [eval] (ShStructget1of2(result): Ref) == null
; [eval] (ShStructget1of2(result): Ref)
(assert (= (ShStructget1of2<Ref> result@101@00) $Ref.null))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-86|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-87|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@101@00 (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of2<Ref> result@101@00) $Ref.null)
      (= (ShStructget1of2<Ref> result@101@00) $Ref.null))))
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-312|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@101@00 (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-313|)))
; ---------- FUNCTION AddrHdrLenNoAbstractionLeak_840d9458_PMSCION----------
(declare-fun s_V0@102@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ubuf_V0@103@00 () Slice<Ref>)
(declare-fun result@104@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(declare-const $k@321@00 $Perm)
(assert ($Perm.isReadVar $k@321@00))
(assert (<= $Perm.No $k@321@00))
(declare-const $t@322@00 $Snap)
(assert (= $t@322@00 $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@104@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@102@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@103@00 Slice<Ref>)) (!
  (=
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@102@00 ubuf_V0@103@00)
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@102@00 ubuf_V0@103@00))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@102@00 ubuf_V0@103@00))
  :qid |quant-u-88|)))
(assert (forall ((s@$ $Snap) (s_V0@102@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@103@00 Slice<Ref>)) (!
  (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%stateless s_V0@102@00 ubuf_V0@103@00)
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@102@00 ubuf_V0@103@00))
  :qid |quant-u-89|)))
(assert (forall ((s@$ $Snap) (s_V0@102@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@103@00 Slice<Ref>)) (!
  (let ((result@104@00 (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@102@00 ubuf_V0@103@00))) (and
    ($Perm.isReadVar $k@321@00)
    (=>
      (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@102@00 ubuf_V0@103@00)
      (<= 0 result@104@00))))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@102@00 ubuf_V0@103@00))
  :qid |quant-u-314|)))
(assert (forall ((s@$ $Snap) (s_V0@102@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@103@00 Slice<Ref>)) (!
  (let ((result@104@00 (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@102@00 ubuf_V0@103@00))) true)
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@102@00 ubuf_V0@103@00))
  :qid |quant-u-315|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@321@00))
(assert (<= $Perm.No $k@321@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(dynamic_pred_0((tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types]), ubuf_V0), wildcard) in (unfolding acc(HeaderMem_840d9458_PMSCION(s_V0, ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))), wildcard) in 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(declare-const $k@323@00 $Perm)
(assert ($Perm.isReadVar $k@323@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@324@00 $Perm)
(assert ($Perm.isReadVar $k@324@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@321@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@324@00 $k@321@00))
(assert (<= $Perm.No (- $k@321@00 $k@324@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@324@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ubuf_V0@103@00))
; [eval] (get1of2(i): Types) == pointer_Types(EndToEndExtn_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(EndToEndExtn_840d9458_T_Types())
; [eval] EndToEndExtn_840d9458_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types]) | dead]
; [else-branch: 121 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 121 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(EndToEndExtnSkipper_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(EndToEndExtnSkipper_840d9458_T_Types())
; [eval] EndToEndExtnSkipper_840d9458_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types]) | dead]
; [else-branch: 122 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 122 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(HopByHopExtn_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(HopByHopExtn_840d9458_T_Types())
; [eval] HopByHopExtn_840d9458_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types]) | dead]
; [else-branch: 123 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 123 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(HopByHopExtnSkipper_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(HopByHopExtnSkipper_840d9458_T_Types())
; [eval] HopByHopExtnSkipper_840d9458_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types]) | dead]
; [else-branch: 124 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 124 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCION_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](SCION_840d9458_T_Types[Types]) | live]
; [else-branch: 125 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](SCION_840d9458_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 125 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](SCION_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget1of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@323@00))
(assert (<= $k@323@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget2of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget3of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget3of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget4of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget4of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShStructget6of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget6of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget7of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
; [eval] (ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.Write))
(assert (=>
  (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(pop) ; 8
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
; [eval] (ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(pop) ; 8
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  $Snap.unit))
; [eval] 0 <= 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 8
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 8
; Joined path conditions
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | True | live]
; [else-branch: 126 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 126 | True]
(declare-const $k@325@00 $Perm)
(assert ($Perm.isReadVar $k@325@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@325@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@325@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@326@00 $Perm)
(assert ($Perm.isReadVar $k@326@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@326@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@326@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | True | live]
; [else-branch: 127 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 127 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 128 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 128 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 13
; [then-branch: 128 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 128 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(push) ; 10
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 129 | False | dead]
; [else-branch: 129 | True | live]
(push) ; 10
; [else-branch: 129 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 10
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@325@00))
(assert ($Perm.isReadVar $k@326@00))
(assert (and
  (< (* $k@325@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@326@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (or
    (not
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(assert (<=
  0
  (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  $Snap.unit))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4 <= (slen(x0): Int)
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(assert (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)
  (slen<Int> ubuf_V0@103@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  $Snap.unit))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) <= (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | True | live]
; [else-branch: 130 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 130 | True]
(declare-const $k@327@00 $Perm)
(assert ($Perm.isReadVar $k@327@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@327@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@327@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@328@00 $Perm)
(assert ($Perm.isReadVar $k@328@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@328@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@328@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | True | live]
; [else-branch: 131 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 131 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 132 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 132 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 13
; [then-branch: 132 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 132 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 133 | False | dead]
; [else-branch: 133 | True | live]
(push) ; 10
; [else-branch: 133 | True]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@327@00))
(assert ($Perm.isReadVar $k@328@00))
(assert (and
  (< (* $k@327@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@328@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | True | live]
; [else-branch: 134 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 134 | True]
(declare-const $k@329@00 $Perm)
(assert ($Perm.isReadVar $k@329@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@329@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@329@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@330@00 $Perm)
(assert ($Perm.isReadVar $k@330@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@330@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@330@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | True | live]
; [else-branch: 135 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 135 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 136 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 136 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 13
; [then-branch: 136 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 136 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 137 | False | dead]
; [else-branch: 137 | True | live]
(push) ; 10
; [else-branch: 137 | True]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@329@00))
(assert ($Perm.isReadVar $k@330@00))
(assert (and
  (< (* $k@329@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@330@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)
  (scap<Int> ubuf_V0@103@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)
  (scap<Int> ubuf_V0@103@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<=
    (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4)
    (scap<Int> ubuf_V0@103@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
; [eval] (ShStructget0of2(fn$$0): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget0of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] (ShStructget0of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref)
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
(push) ; 9
(assert (not (<=
  0
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 0 (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<=
    0
    (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 0 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 0 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget1of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4, (slen(x0): Int))
; [eval] (ShStructget1of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref)
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4, (slen(x0): Int))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<= (slen<Int> ubuf_V0@103@00) (scap<Int> ubuf_V0@103@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> ubuf_V0@103@00) (scap<Int> ubuf_V0@103@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4) (slen<Int> ubuf_V0@103@00)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= (slen<Int> ubuf_V0@103@00) (scap<Int> ubuf_V0@103@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4) (slen<Int> ubuf_V0@103@00))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4) (slen<Int> ubuf_V0@103@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  $Snap.unit))
; [eval] 12 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 12 (slen<Int> ubuf_V0@103@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 12, (slen(x0): Int))
; [eval] (slen(x0): Int)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))
(pop) ; 8
; Joined path conditions
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$ < 256
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  256))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@323@00)
  (not
    (=
      (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
; [eval] !pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@331@00 $Perm)
(assert ($Perm.isReadVar $k@331@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@331@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@331@00 $k@323@00))))
(assert (<= (- $k@323@00 (* $k@331@00 $k@323@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@323@00 (* $k@331@00 $k@323@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@331@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@331@00))
(assert (and
  (< (* $k@331@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@331@00 $k@323@00)))
  (<= (- $k@323@00 (* $k@331@00 $k@323@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@323@00 (* $k@331@00 $k@323@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))) | live]
; [else-branch: 138 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 138 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))))]
(assert (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@332@00 $Perm)
(assert ($Perm.isReadVar $k@332@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@332@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@332@00 $k@323@00))))
(assert (<= (- $k@323@00 (* $k@332@00 $k@323@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@323@00 (* $k@332@00 $k@323@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@332@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@332@00))
(assert (and
  (< (* $k@332@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@332@00 $k@323@00)))
  (<= (- $k@323@00 (* $k@332@00 $k@323@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@323@00 (* $k@332@00 $k@323@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))))
; [then-branch: 139 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))) | dead]
; [else-branch: 139 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 139 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()) ==> 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(pop) ; 10
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 140 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 140 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | True | live]
; [else-branch: 141 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 141 | True]
(declare-const $k@333@00 $Perm)
(assert ($Perm.isReadVar $k@333@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@333@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@333@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@334@00 $Perm)
(assert ($Perm.isReadVar $k@334@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@334@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@334@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | True | live]
; [else-branch: 142 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 142 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 143 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 143 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 143 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 143 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 144 | False | dead]
; [else-branch: 144 | True | live]
(push) ; 14
; [else-branch: 144 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@333@00))
(assert ($Perm.isReadVar $k@334@00))
(assert (and
  (< (* $k@333@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@334@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 145 | True | live]
; [else-branch: 145 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 145 | True]
(declare-const $k@335@00 $Perm)
(assert ($Perm.isReadVar $k@335@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@335@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@335@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@336@00 $Perm)
(assert ($Perm.isReadVar $k@336@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@336@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@336@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 146 | True | live]
; [else-branch: 146 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 146 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 147 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 147 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 147 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 147 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 148 | False | dead]
; [else-branch: 148 | True | live]
(push) ; 14
; [else-branch: 148 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@335@00))
(assert ($Perm.isReadVar $k@336@00))
(assert (and
  (< (* $k@335@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@336@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@337@00 $Perm)
(assert ($Perm.isReadVar $k@337@00))
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@337@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@337@00 $k@323@00))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@337@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@337@00))
(assert (and
  (< (* $k@337@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@337@00 $k@323@00)))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))))
; [eval] (slen(x0): Int)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 140 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@333@00))
(assert ($Perm.isReadVar $k@334@00))
(assert ($Perm.isReadVar $k@335@00))
(assert ($Perm.isReadVar $k@336@00))
(assert ($Perm.isReadVar $k@337@00))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< (* $k@333@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@334@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (< (* $k@335@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@336@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@337@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@337@00 $k@323@00)))
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))))))
; Joined path conditions
(assert (or
  (not
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (<=
    (+
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))))
    (slen<Int> ubuf_V0@103@00))))
; [eval] (unfolding acc(HeaderMem_840d9458_PMSCION(s_V0, ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))), wildcard) in 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))
; [eval] (slen(ubuf_V0): Int)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 10
; Joined path conditions
(declare-const $k@338@00 $Perm)
(assert ($Perm.isReadVar $k@338@00))
(push) ; 10
(assert (not (< $Perm.No $k@338@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(declare-const $k@339@00 $Perm)
(assert ($Perm.isReadVar $k@339@00))
; [eval] ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))
; [eval] (slen(ubuf_V0): Int)
(push) ; 11
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))
  s_V0@102@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@339@00 $k@323@00))
(assert (<= $Perm.No (- $k@323@00 $k@339@00)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@339@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (HeaderMem_840d9458_PMSCION%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))) s_V0@102@00 (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
; [eval] (ShStructget10of17(s_V0): Ref)
(assert (<= $Perm.No $k@338@00))
(assert (<= $k@338@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@338@00)
  (not (= (ShStructget10of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
; [eval] (ShStructget11of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= (ShStructget10of17<Ref> s_V0@102@00) (ShStructget11of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@338@00)
  (not (= (ShStructget11of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@340@00 Int)
(assert (and
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@340@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (=
      $t@340@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@340@00))
(pop) ; 11
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@340@00))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@341@00 Int)
(assert (and
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@341@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (=
      $t@341@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
(assert (=>
  (<
    $Perm.No
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@341@00))
(pop) ; 11
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@341@00))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0) <= (slen(ubuf_V0): Int)
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 11
(declare-const $k@342@00 $Perm)
(assert ($Perm.isReadVar $k@342@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@342@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@342@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@342@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@342@00 $k@338@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@342@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@343@00 $Perm)
(assert ($Perm.isReadVar $k@343@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@343@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@343@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@343@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@343@00 $k@338@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@343@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(assert (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
  ($SortWrappers.IntTo$Snap $t@340@00)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@341@00)
    ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@342@00))
(assert ($Perm.isReadVar $k@343@00))
(assert (and
  (<
    (* $k@342@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@342@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@342@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@342@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@343@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@343@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@343@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@343@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@340@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@341@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)))
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@340@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@341@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
  (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 149 | True | live]
; [else-branch: 149 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 149 | True]
(declare-const $k@344@00 $Perm)
(assert ($Perm.isReadVar $k@344@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@344@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@344@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@344@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@344@00 $k@338@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@344@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@345@00 $Perm)
(assert ($Perm.isReadVar $k@345@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@345@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@345@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@345@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@345@00 $k@338@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@345@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 150 | True | live]
; [else-branch: 150 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 150 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 151 | Has3Bits_840d9458_MAddrType(_, $t@340@00) | live]
; [else-branch: 151 | !(Has3Bits_840d9458_MAddrType(_, $t@340@00)) | live]
(push) ; 16
; [then-branch: 151 | Has3Bits_840d9458_MAddrType(_, $t@340@00)]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 151 | !(Has3Bits_840d9458_MAddrType(_, $t@340@00))]
(assert (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (or
  (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
; [eval] !insideSlayers_V0
; [then-branch: 152 | False | dead]
; [else-branch: 152 | True | live]
(push) ; 13
; [else-branch: 152 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@340@00)
    ($SortWrappers.IntTo$Snap $t@341@00))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@344@00))
(assert ($Perm.isReadVar $k@345@00))
(assert (and
  (<
    (* $k@344@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@344@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@344@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@344@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@345@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@345@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@345@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@345@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (or
    (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@340@00)
    ($SortWrappers.IntTo$Snap $t@341@00))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 11
(declare-const $k@346@00 $Perm)
(assert ($Perm.isReadVar $k@346@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@346@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@346@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@346@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@346@00 $k@338@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@346@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@347@00 $Perm)
(assert ($Perm.isReadVar $k@347@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@347@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@347@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@347@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@347@00 $k@338@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@347@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@346@00))
(assert ($Perm.isReadVar $k@347@00))
(assert (and
  (<
    (* $k@346@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@346@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@346@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@346@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@347@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@347@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@347@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@347@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))))
(assert (=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@340@00)
      ($SortWrappers.IntTo$Snap $t@341@00))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@340@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@341@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) <= (slen(ubuf_V0): Int)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 153 | True | live]
; [else-branch: 153 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 153 | True]
(declare-const $k@348@00 $Perm)
(assert ($Perm.isReadVar $k@348@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@348@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@348@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@348@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@348@00 $k@338@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@348@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@349@00 $Perm)
(assert ($Perm.isReadVar $k@349@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@349@00 $k@338@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@349@00 $k@338@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (* $k@349@00 $k@338@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@349@00 $k@338@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@349@00 $k@338@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 154 | True | live]
; [else-branch: 154 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 154 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 155 | Has3Bits_840d9458_MAddrType(_, $t@340@00) | live]
; [else-branch: 155 | !(Has3Bits_840d9458_MAddrType(_, $t@340@00)) | live]
(push) ; 16
; [then-branch: 155 | Has3Bits_840d9458_MAddrType(_, $t@340@00)]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 155 | !(Has3Bits_840d9458_MAddrType(_, $t@340@00))]
(assert (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
; [eval] !insideSlayers_V0
; [then-branch: 156 | False | dead]
; [else-branch: 156 | True | live]
(push) ; 13
; [else-branch: 156 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@348@00))
(assert ($Perm.isReadVar $k@349@00))
(assert (and
  (<
    (* $k@348@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@348@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@348@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@348@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@349@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@349@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@349@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@349@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)))
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@340@00)
      ($SortWrappers.IntTo$Snap $t@341@00))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@340@00))
(pop) ; 11
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@340@00))
(assert (< 0 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@341@00))
(pop) ; 11
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@341@00))
(assert (< 0 (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 < 2 * 8
; [eval] 2 * 8
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (< 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (<
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) <= (slen(ubuf_V0): Int)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00))
  (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget12of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget12of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@338@00)
  (not (= (ShStructget12of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget13of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget13of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= (ShStructget12of17<Ref> s_V0@102@00) (ShStructget13of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@338@00)
  (not (= (ShStructget13of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@338@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] 0 <= i
; [eval] i <= j
(push) ; 12
(assert (not (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 12
(assert (not (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
  16
  (Length_840d9458_MAddrType $Snap.unit $t@340@00))))
(pop) ; 11
; Joined path conditions
(assert (and
  (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@340@00)))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@340@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@338@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] 0 <= i
(push) ; 12
(assert (not (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))))
; [eval] i <= j
(push) ; 12
(assert (not (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 12
(assert (not (<=
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
  16
  (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (Length_840d9458_MAddrType $Snap.unit $t@341@00))))
(pop) ; 11
; Joined path conditions
(assert (and
  (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
  (<=
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00)))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00)))))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@338@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@339@00))
(assert ($Perm.isReadVar $k@342@00))
(assert ($Perm.isReadVar $k@343@00))
(assert ($Perm.isReadVar $k@344@00))
(assert ($Perm.isReadVar $k@345@00))
(assert ($Perm.isReadVar $k@346@00))
(assert ($Perm.isReadVar $k@347@00))
(assert ($Perm.isReadVar $k@348@00))
(assert ($Perm.isReadVar $k@349@00))
(assert (and
  (< $k@339@00 $k@323@00)
  (<= $Perm.No (- $k@323@00 $k@339@00))
  (HeaderMem_840d9458_PMSCION%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))) s_V0@102@00 (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
  (<= $Perm.No $k@338@00)
  (<= $k@338@00 $Perm.Write)
  (=>
    (< $Perm.No $k@338@00)
    (not (= (ShStructget10of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  (=>
    (< $Perm.No $k@338@00)
    (not (= (ShStructget11of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@340@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (=
      $t@340@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  (<=
    $Perm.No
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    $Snap.unit)
  (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@340@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@341@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@338@00))
    (=
      $t@341@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  (=>
    (<
      $Perm.No
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    $Snap.unit)
  (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@341@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (* $k@342@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@342@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@342@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@342@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@343@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@343@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@343@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@343@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@340@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@341@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
  (<=
    (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@340@00)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@341@00)
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
    (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (* $k@344@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@344@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@344@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@344@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@345@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@345@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@345@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@345@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (or
    (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
  (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@340@00)
      ($SortWrappers.IntTo$Snap $t@341@00))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (<
    (* $k@346@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@346@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@346@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@346@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@347@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@347@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@347@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@347@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (=
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@340@00)
        ($SortWrappers.IntTo$Snap $t@341@00))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@340@00)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@341@00)
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (* $k@348@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@348@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@348@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@348@00 $k@338@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@349@00 $k@338@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@338@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@349@00 $k@338@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (* $k@349@00 $k@338@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@349@00 $k@338@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<=
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@340@00)
        ($SortWrappers.IntTo$Snap $t@341@00))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    $Snap.unit)
  (Length_840d9458_MAddrType%precondition $Snap.unit $t@340@00)
  (< 0 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (Length_840d9458_MAddrType%precondition $Snap.unit $t@341@00)
  (< 0 (Length_840d9458_MAddrType $Snap.unit $t@341@00))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (< 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<=
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00))
    (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  (=>
    (< $Perm.No $k@338@00)
    (not (= (ShStructget12of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))
  (=>
    (< $Perm.No $k@338@00)
    (not (= (ShStructget13of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@340@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
  (<=
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00))))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 138 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))]
(assert (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(declare-const $k@350@00 $Perm)
(assert ($Perm.isReadVar $k@350@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@350@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@350@00 $k@323@00))))
(assert (<= (- $k@323@00 (* $k@350@00 $k@323@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@323@00 (* $k@350@00 $k@323@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@350@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@350@00))
(assert (and
  (< (* $k@350@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@350@00 $k@323@00)))
  (<= (- $k@323@00 (* $k@350@00 $k@323@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@323@00 (* $k@350@00 $k@323@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))) | live]
; [else-branch: 157 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 157 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@102@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 10
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 10
; Joined path conditions
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == getPathPure_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] getPathPure_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= pathType_V0
; [eval] pathType_V0 < 256
(declare-const $k@351@00 $Perm)
(assert ($Perm.isReadVar $k@351@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@351@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@351@00 $k@323@00))))
(assert (<= (- $k@323@00 (* $k@351@00 $k@323@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@323@00 (* $k@351@00 $k@323@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@351@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@352@00 $Perm)
(assert ($Perm.isReadVar $k@352@00))
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@352@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@352@00 $k@323@00))))
(assert (<= (- $k@323@00 (* $k@352@00 $k@323@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@323@00 (* $k@352@00 $k@323@00)))
  (not
    (=
      (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@352@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const $k@353@00 $Perm)
(assert ($Perm.isReadVar $k@353@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@353@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@353@00 $k@323@00))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@353@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@351@00))
(assert ($Perm.isReadVar $k@352@00))
(assert ($Perm.isReadVar $k@353@00))
(assert (and
  (< (* $k@351@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@351@00 $k@323@00)))
  (<= (- $k@323@00 (* $k@351@00 $k@323@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@323@00 (* $k@351@00 $k@323@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@352@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@352@00 $k@323@00)))
  (<= (- $k@323@00 (* $k@352@00 $k@323@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@323@00 (* $k@352@00 $k@323@00)))
    (not
      (=
        (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@353@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@353@00 $k@323@00)))
  (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  (getPathPure_840d9458_PMSCION ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()) ==> 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(pop) ; 10
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 158 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 158 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | True | live]
; [else-branch: 159 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 159 | True]
(declare-const $k@354@00 $Perm)
(assert ($Perm.isReadVar $k@354@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@354@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@354@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@355@00 $Perm)
(assert ($Perm.isReadVar $k@355@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@355@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@355@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | True | live]
; [else-branch: 160 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 160 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 161 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 161 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 161 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 161 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 162 | False | dead]
; [else-branch: 162 | True | live]
(push) ; 14
; [else-branch: 162 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@354@00))
(assert ($Perm.isReadVar $k@355@00))
(assert (and
  (< (* $k@354@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@355@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | True | live]
; [else-branch: 163 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 163 | True]
(declare-const $k@356@00 $Perm)
(assert ($Perm.isReadVar $k@356@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@356@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@356@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@357@00 $Perm)
(assert ($Perm.isReadVar $k@357@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@357@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@357@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | True | live]
; [else-branch: 164 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 164 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 165 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 165 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 165 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 165 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 166 | False | dead]
; [else-branch: 166 | True | live]
(push) ; 14
; [else-branch: 166 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@356@00))
(assert ($Perm.isReadVar $k@357@00))
(assert (and
  (< (* $k@356@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@357@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@358@00 $Perm)
(assert ($Perm.isReadVar $k@358@00))
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@358@00 $k@323@00) $k@323@00))
(assert (<= $Perm.No (- $k@323@00 (* $k@358@00 $k@323@00))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@358@00 $k@323@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@358@00))
(assert (and
  (< (* $k@358@00 $k@323@00) $k@323@00)
  (<= $Perm.No (- $k@323@00 (* $k@358@00 $k@323@00)))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))))
; [eval] (slen(x0): Int)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 158 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@354@00))
(assert ($Perm.isReadVar $k@355@00))
(assert ($Perm.isReadVar $k@356@00))
(assert ($Perm.isReadVar $k@357@00))
(assert ($Perm.isReadVar $k@358@00))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< (* $k@354@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@355@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (< (* $k@356@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@357@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@358@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@358@00 $k@323@00)))
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))))))
; Joined path conditions
(assert (or
  (not
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (<=
    (+
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))))
    (slen<Int> ubuf_V0@103@00))))
; [eval] (unfolding acc(HeaderMem_840d9458_PMSCION(s_V0, ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))), wildcard) in 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))
; [eval] (slen(ubuf_V0): Int)
(push) ; 10
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 10
; Joined path conditions
(declare-const $k@359@00 $Perm)
(assert ($Perm.isReadVar $k@359@00))
(push) ; 10
(assert (not (< $Perm.No $k@359@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(declare-const $k@360@00 $Perm)
(assert ($Perm.isReadVar $k@360@00))
; [eval] ssliceFromSlice_Ref(ubuf_V0, 12, (slen(ubuf_V0): Int))
; [eval] (slen(ubuf_V0): Int)
(push) ; 11
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))
  s_V0@102@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@323@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@360@00 $k@323@00))
(assert (<= $Perm.No (- $k@323@00 $k@360@00)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@360@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (HeaderMem_840d9458_PMSCION%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))) s_V0@102@00 (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
; [eval] (ShStructget10of17(s_V0): Ref)
(assert (<= $Perm.No $k@359@00))
(assert (<= $k@359@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@359@00)
  (not (= (ShStructget10of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
; [eval] (ShStructget11of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= (ShStructget10of17<Ref> s_V0@102@00) (ShStructget11of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@359@00)
  (not (= (ShStructget11of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@361@00 Int)
(assert (and
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@361@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (=
      $t@361@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@361@00))
(pop) ; 11
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@361@00))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@362@00 Int)
(assert (and
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@362@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (=
      $t@362@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
(assert (=>
  (<
    $Perm.No
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@362@00))
(pop) ; 11
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@362@00))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0) <= (slen(ubuf_V0): Int)
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 11
(declare-const $k@363@00 $Perm)
(assert ($Perm.isReadVar $k@363@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@363@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@363@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@363@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@363@00 $k@359@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@363@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@364@00 $Perm)
(assert ($Perm.isReadVar $k@364@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@364@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@364@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@364@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@364@00 $k@359@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@364@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(assert (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
  ($SortWrappers.IntTo$Snap $t@361@00)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@362@00)
    ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@363@00))
(assert ($Perm.isReadVar $k@364@00))
(assert (and
  (<
    (* $k@363@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@363@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@363@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@363@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@364@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@364@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@364@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@364@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@361@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@362@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)))
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@361@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@362@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
  (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 167 | True | live]
; [else-branch: 167 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 167 | True]
(declare-const $k@365@00 $Perm)
(assert ($Perm.isReadVar $k@365@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@365@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@365@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@365@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@365@00 $k@359@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@365@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@366@00 $Perm)
(assert ($Perm.isReadVar $k@366@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@366@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@366@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@366@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@366@00 $k@359@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@366@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 168 | True | live]
; [else-branch: 168 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 168 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 169 | Has3Bits_840d9458_MAddrType(_, $t@361@00) | live]
; [else-branch: 169 | !(Has3Bits_840d9458_MAddrType(_, $t@361@00)) | live]
(push) ; 16
; [then-branch: 169 | Has3Bits_840d9458_MAddrType(_, $t@361@00)]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 169 | !(Has3Bits_840d9458_MAddrType(_, $t@361@00))]
(assert (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (or
  (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
; [eval] !insideSlayers_V0
; [then-branch: 170 | False | dead]
; [else-branch: 170 | True | live]
(push) ; 13
; [else-branch: 170 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@361@00)
    ($SortWrappers.IntTo$Snap $t@362@00))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@365@00))
(assert ($Perm.isReadVar $k@366@00))
(assert (and
  (<
    (* $k@365@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@365@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@365@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@365@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@366@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@366@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@366@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@366@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (or
    (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@361@00)
    ($SortWrappers.IntTo$Snap $t@362@00))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 11
(declare-const $k@367@00 $Perm)
(assert ($Perm.isReadVar $k@367@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@367@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@367@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@367@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@367@00 $k@359@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@367@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@368@00 $Perm)
(assert ($Perm.isReadVar $k@368@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@368@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@368@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@368@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@368@00 $k@359@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@368@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@367@00))
(assert ($Perm.isReadVar $k@368@00))
(assert (and
  (<
    (* $k@367@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@367@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@367@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@367@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@368@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@368@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@368@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@368@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))))
(assert (=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@361@00)
      ($SortWrappers.IntTo$Snap $t@362@00))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@361@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@362@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) <= (slen(ubuf_V0): Int)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 171 | True | live]
; [else-branch: 171 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 171 | True]
(declare-const $k@369@00 $Perm)
(assert ($Perm.isReadVar $k@369@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@369@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@369@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@369@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@369@00 $k@359@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@369@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@370@00 $Perm)
(assert ($Perm.isReadVar $k@370@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@370@00 $k@359@00)
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00))))
(assert (<=
  $Perm.No
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@370@00 $k@359@00))))
(assert (<=
  (-
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (* $k@370@00 $k@359@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@370@00 $k@359@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@370@00 $k@359@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 172 | True | live]
; [else-branch: 172 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 172 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 173 | Has3Bits_840d9458_MAddrType(_, $t@361@00) | live]
; [else-branch: 173 | !(Has3Bits_840d9458_MAddrType(_, $t@361@00)) | live]
(push) ; 16
; [then-branch: 173 | Has3Bits_840d9458_MAddrType(_, $t@361@00)]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 173 | !(Has3Bits_840d9458_MAddrType(_, $t@361@00))]
(assert (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
; [eval] !insideSlayers_V0
; [then-branch: 174 | False | dead]
; [else-branch: 174 | True | live]
(push) ; 13
; [else-branch: 174 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@369@00))
(assert ($Perm.isReadVar $k@370@00))
(assert (and
  (<
    (* $k@369@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@369@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@369@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@369@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@370@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@370@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@370@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@370@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)))
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@361@00)
      ($SortWrappers.IntTo$Snap $t@362@00))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@361@00))
(pop) ; 11
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@361@00))
(assert (< 0 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@362@00))
(pop) ; 11
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit $t@362@00))
(assert (< 0 (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 < 2 * 8
; [eval] 2 * 8
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (< 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (<
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) <= (slen(ubuf_V0): Int)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00))
  (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget12of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget12of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@359@00)
  (not (= (ShStructget12of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget13of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget13of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= (ShStructget12of17<Ref> s_V0@102@00) (ShStructget13of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@359@00)
  (not (= (ShStructget13of17<Ref> s_V0@102@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] 0 <= i
; [eval] i <= j
(push) ; 12
(assert (not (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 12
(assert (not (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
  16
  (Length_840d9458_MAddrType $Snap.unit $t@361@00))))
(pop) ; 11
; Joined path conditions
(assert (and
  (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@361@00)))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@361@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] 0 <= i
(push) ; 12
(assert (not (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))))
; [eval] i <= j
(push) ; 12
(assert (not (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 12
(assert (not (<=
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00))
  (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
  16
  (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
  (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (Length_840d9458_MAddrType $Snap.unit $t@362@00))))
(pop) ; 11
; Joined path conditions
(assert (and
  (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
  (<=
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00)))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00)))))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget8of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> s_V0@102@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (* (/ (to_real 1) (to_real 2)) $k@323@00)
    (* (/ (to_real 1) (to_real 2)) $k@359@00)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@360@00))
(assert ($Perm.isReadVar $k@363@00))
(assert ($Perm.isReadVar $k@364@00))
(assert ($Perm.isReadVar $k@365@00))
(assert ($Perm.isReadVar $k@366@00))
(assert ($Perm.isReadVar $k@367@00))
(assert ($Perm.isReadVar $k@368@00))
(assert ($Perm.isReadVar $k@369@00))
(assert ($Perm.isReadVar $k@370@00))
(assert (and
  (< $k@360@00 $k@323@00)
  (<= $Perm.No (- $k@323@00 $k@360@00))
  (HeaderMem_840d9458_PMSCION%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))) s_V0@102@00 (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
  (<= $Perm.No $k@359@00)
  (<= $k@359@00 $Perm.Write)
  (=>
    (< $Perm.No $k@359@00)
    (not (= (ShStructget10of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  (=>
    (< $Perm.No $k@359@00)
    (not (= (ShStructget11of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@361@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (=
      $t@361@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  (<=
    $Perm.No
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    $Snap.unit)
  (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@361@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (=
      $t@362@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=>
    (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@359@00))
    (=
      $t@362@00
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  (=>
    (<
      $Perm.No
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    $Snap.unit)
  (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@362@00)
  (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (* $k@363@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@363@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@363@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@363@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@364@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@364@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@364@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@364@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@361@00)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@362@00)
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
  (<=
    (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@361@00)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@362@00)
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
    (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (* $k@365@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@365@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@365@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@365@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@366@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@366@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@366@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@366@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (or
    (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
  (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@361@00)
      ($SortWrappers.IntTo$Snap $t@362@00))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (<
    (* $k@367@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@367@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@367@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@367@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@368@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@368@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@368@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@368@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (=
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@361@00)
        ($SortWrappers.IntTo$Snap $t@362@00))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@361@00)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@362@00)
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (* $k@369@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@369@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@369@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@369@00 $k@359@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<
    (* $k@370@00 $k@359@00)
    (+
      (* (/ (to_real 1) (to_real 2)) $k@323@00)
      (* (/ (to_real 1) (to_real 2)) $k@359@00)))
  (<=
    $Perm.No
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@370@00 $k@359@00)))
  (<=
    (-
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (* $k@370@00 $k@359@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@370@00 $k@359@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (<=
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@361@00)
        ($SortWrappers.IntTo$Snap $t@362@00))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    $Snap.unit)
  (Length_840d9458_MAddrType%precondition $Snap.unit $t@361@00)
  (< 0 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (Length_840d9458_MAddrType%precondition $Snap.unit $t@362@00)
  (< 0 (Length_840d9458_MAddrType $Snap.unit $t@362@00))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (< 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<=
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00))
    (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
  (=>
    (< $Perm.No $k@359@00)
    (not (= (ShStructget12of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))
  (=>
    (< $Perm.No $k@359@00)
    (not (= (ShStructget13of17<Ref> s_V0@102@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@361@00))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    $Snap.unit)
  (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
  (<=
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
  (<=
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00))
    (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
    16
    (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
    (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00))))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(declare-fun joined_unfolding@371@00 ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(assert (=>
  (and
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
  (=
    (joined_unfolding@371@00 s@$ s_V0@102@00 ubuf_V0@103@00)
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00)))))
(assert (=>
  (and
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
  (=
    (joined_unfolding@371@00 s@$ s_V0@102@00 ubuf_V0@103@00)
    (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00)))))
; Joined path conditions
(assert ($Perm.isReadVar $k@324@00))
(assert ($Perm.isReadVar $k@325@00))
(assert ($Perm.isReadVar $k@326@00))
(assert ($Perm.isReadVar $k@327@00))
(assert ($Perm.isReadVar $k@328@00))
(assert ($Perm.isReadVar $k@329@00))
(assert ($Perm.isReadVar $k@330@00))
(assert ($Perm.isReadVar $k@331@00))
(assert ($Perm.isReadVar $k@332@00))
(assert ($Perm.isReadVar $k@333@00))
(assert ($Perm.isReadVar $k@334@00))
(assert ($Perm.isReadVar $k@335@00))
(assert ($Perm.isReadVar $k@336@00))
(assert ($Perm.isReadVar $k@337@00))
(assert ($Perm.isReadVar $k@338@00))
(assert ($Perm.isReadVar $k@339@00))
(assert ($Perm.isReadVar $k@342@00))
(assert ($Perm.isReadVar $k@343@00))
(assert ($Perm.isReadVar $k@344@00))
(assert ($Perm.isReadVar $k@345@00))
(assert ($Perm.isReadVar $k@346@00))
(assert ($Perm.isReadVar $k@347@00))
(assert ($Perm.isReadVar $k@348@00))
(assert ($Perm.isReadVar $k@349@00))
(assert (and
  (< $k@324@00 $k@321@00)
  (<= $Perm.No (- $k@321@00 $k@324@00))
  (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ubuf_V0@103@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@323@00)
    (<= $k@323@00 $Perm.Write)
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget3of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget4of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget6of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget7of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (<= $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<= (* (/ (to_real 1) (to_real 2)) $k@323@00) $Perm.Write)
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      $Snap.unit)
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      $Snap.unit)
    (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit)
    (< (* $k@325@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@325@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@326@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@326@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (or
      (not
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (<=
      0
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      $Snap.unit)
    (<=
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4)
      (slen<Int> ubuf_V0@103@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      $Snap.unit)
    (< (* $k@327@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@327@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@328@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@328@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<=
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    (< (* $k@329@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@329@00 $k@323@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@330@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@330@00 $k@323@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<=
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4)
      (scap<Int> ubuf_V0@103@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      $Snap.unit)
    (<=
      0
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 0 (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 0 (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      $Snap.unit)
    (<= (slen<Int> ubuf_V0@103@00) (scap<Int> ubuf_V0@103@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4) (slen<Int> ubuf_V0@103@00))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4) (slen<Int> ubuf_V0@103@00)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      $Snap.unit)
    (<= 12 (slen<Int> ubuf_V0@103@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      $Snap.unit)
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      $Snap.unit)
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      256)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@323@00)
      (not
        (=
          (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    (< (* $k@331@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@331@00 $k@323@00)))
    (<= (- $k@323@00 (* $k@331@00 $k@323@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@323@00 (* $k@331@00 $k@323@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
  (and
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (< (* $k@332@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@332@00 $k@323@00)))
    (<= (- $k@323@00 (* $k@332@00 $k@323@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@323@00 (* $k@332@00 $k@323@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (not
        (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
  (and
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (and
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
        (< (* $k@333@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@333@00 $k@323@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@334@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@334@00 $k@323@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        (< (* $k@335@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@335@00 $k@323@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@336@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@336@00 $k@323@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@337@00 $k@323@00) $k@323@00)
        (<= $Perm.No (- $k@323@00 (* $k@337@00 $k@323@00)))
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
          12
          (AddrHdrLen_840d9458_PMSCION ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
          4)))))
    (or
      (not
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (<=
        (+
          (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
          (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
            4))))
        (slen<Int> ubuf_V0@103@00)))
    (< $k@339@00 $k@323@00)
    (<= $Perm.No (- $k@323@00 $k@339@00))
    (HeaderMem_840d9458_PMSCION%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))) s_V0@102@00 (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
        ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (<= $Perm.No $k@338@00)
    (<= $k@338@00 $Perm.Write)
    (=>
      (< $Perm.No $k@338@00)
      (not (= (ShStructget10of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@338@00)
      (not (= (ShStructget11of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
      (=
        $t@340@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (=
        $t@340@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    (<=
      $Perm.No
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@340@00)
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
      (=
        $t@341@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@338@00))
      (=
        $t@341@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (=>
      (<
        $Perm.No
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@341@00)
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@341@00)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (* $k@342@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@342@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@342@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@342@00 $k@338@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@343@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@343@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@343@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@343@00 $k@338@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@340@00)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@341@00)
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
    (<=
      (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@340@00)
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@341@00)
          ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
      (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (* $k@344@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@344@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@344@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@344@00 $k@338@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@345@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@345@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@345@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@345@00 $k@338@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (or
      (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
      (Has3Bits_840d9458_MAddrType $Snap.unit $t@340@00))
    (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@340@00)
        ($SortWrappers.IntTo$Snap $t@341@00))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (<
      (* $k@346@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@346@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@346@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@346@00 $k@338@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@347@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@347@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@347@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@347@00 $k@338@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@340@00)
          ($SortWrappers.IntTo$Snap $t@341@00))
        ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
      (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@340@00)
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@341@00)
          ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (* $k@348@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@348@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@348@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@348@00 $k@338@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@349@00 $k@338@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@338@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@349@00 $k@338@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@338@00))
        (* $k@349@00 $k@338@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@338@00))
          (* $k@349@00 $k@338@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<=
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@340@00)
          ($SortWrappers.IntTo$Snap $t@341@00))
        ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
      (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
      $Snap.unit)
    (Length_840d9458_MAddrType%precondition $Snap.unit $t@340@00)
    (< 0 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (Length_840d9458_MAddrType%precondition $Snap.unit $t@341@00)
    (< 0 (Length_840d9458_MAddrType $Snap.unit $t@341@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (< 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
        (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<=
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
        (Length_840d9458_MAddrType $Snap.unit $t@341@00))
      (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@338@00)
      (not (= (ShStructget12of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@338@00)
      (not (= (ShStructget13of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
    (<=
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
        16
        (Length_840d9458_MAddrType $Snap.unit $t@340@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00)))
    (<=
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
        (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
    (<=
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
        (Length_840d9458_MAddrType $Snap.unit $t@341@00))
      (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
      (Length_840d9458_MAddrType $Snap.unit $t@341@00)))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
        16
        (Length_840d9458_MAddrType $Snap.unit $t@340@00)) (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@340@00))
        (Length_840d9458_MAddrType $Snap.unit $t@341@00)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@350@00))
(assert ($Perm.isReadVar $k@351@00))
(assert ($Perm.isReadVar $k@352@00))
(assert ($Perm.isReadVar $k@353@00))
(assert ($Perm.isReadVar $k@354@00))
(assert ($Perm.isReadVar $k@355@00))
(assert ($Perm.isReadVar $k@356@00))
(assert ($Perm.isReadVar $k@357@00))
(assert ($Perm.isReadVar $k@358@00))
(assert ($Perm.isReadVar $k@359@00))
(assert ($Perm.isReadVar $k@360@00))
(assert ($Perm.isReadVar $k@363@00))
(assert ($Perm.isReadVar $k@364@00))
(assert ($Perm.isReadVar $k@365@00))
(assert ($Perm.isReadVar $k@366@00))
(assert ($Perm.isReadVar $k@367@00))
(assert ($Perm.isReadVar $k@368@00))
(assert ($Perm.isReadVar $k@369@00))
(assert ($Perm.isReadVar $k@370@00))
(assert (and
  (< $k@324@00 $k@321@00)
  (<= $Perm.No (- $k@321@00 $k@324@00))
  (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ubuf_V0@103@00)))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (and
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (< (* $k@350@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@350@00 $k@323@00)))
    (<= (- $k@323@00 (* $k@350@00 $k@323@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@323@00 (* $k@350@00 $k@323@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (and
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      $Snap.unit)
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
    (=
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      $Snap.unit)
    (< (* $k@351@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@351@00 $k@323@00)))
    (<= (- $k@323@00 (* $k@351@00 $k@323@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@323@00 (* $k@351@00 $k@323@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@352@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@352@00 $k@323@00)))
    (<= (- $k@323@00 (* $k@352@00 $k@323@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@323@00 (* $k@352@00 $k@323@00)))
      (not
        (=
          (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@353@00 $k@323@00) $k@323@00)
    (<= $Perm.No (- $k@323@00 (* $k@353@00 $k@323@00)))
    (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      (getPathPure_840d9458_PMSCION ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (and
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
        (< (* $k@354@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@354@00 $k@323@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@355@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@355@00 $k@323@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        (< (* $k@356@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@356@00 $k@323@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@357@00 $k@323@00) (* (/ (to_real 1) (to_real 2)) $k@323@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@323@00) (* $k@357@00 $k@323@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@358@00 $k@323@00) $k@323@00)
        (<= $Perm.No (- $k@323@00 (* $k@358@00 $k@323@00)))
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
          12
          (AddrHdrLen_840d9458_PMSCION ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
          4)))))
    (or
      (not
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (<=
        (+
          (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
          (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
            4))))
        (slen<Int> ubuf_V0@103@00)))
    (< $k@360@00 $k@323@00)
    (<= $Perm.No (- $k@323@00 $k@360@00))
    (HeaderMem_840d9458_PMSCION%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))) s_V0@102@00 (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
        ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (<= $Perm.No $k@359@00)
    (<= $k@359@00 $Perm.Write)
    (=>
      (< $Perm.No $k@359@00)
      (not (= (ShStructget10of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@359@00)
      (not (= (ShStructget11of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
      (=
        $t@361@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (=
        $t@361@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    (<=
      $Perm.No
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@361@00)
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@323@00))
      (=
        $t@362@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@359@00))
      (=
        $t@362@00
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (=>
      (<
        $Perm.No
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit $t@362@00)
    (Has3Bits_840d9458_MAddrType $Snap.unit $t@362@00)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (* $k@363@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@363@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@363@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@363@00 $k@359@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@364@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@364@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@364@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@364@00 $k@359@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
      ($SortWrappers.IntTo$Snap $t@361@00)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@362@00)
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
    (<=
      (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@361@00)
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@362@00)
          ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00)
      (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (* $k@365@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@365@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@365@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@365@00 $k@359@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@366@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@366@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@366@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@366@00 $k@359@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (or
      (not (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
      (Has3Bits_840d9458_MAddrType $Snap.unit $t@361@00))
    (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@361@00)
        ($SortWrappers.IntTo$Snap $t@362@00))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (<
      (* $k@367@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@367@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@367@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@367@00 $k@359@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@368@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@368@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@368@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@368@00 $k@359@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@361@00)
          ($SortWrappers.IntTo$Snap $t@362@00))
        ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
      (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@361@00)
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@362@00)
          ($Snap.combine $Snap.unit $Snap.unit))) s_V0@102@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (* $k@369@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@369@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@369@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@369@00 $k@359@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<
      (* $k@370@00 $k@359@00)
      (+
        (* (/ (to_real 1) (to_real 2)) $k@323@00)
        (* (/ (to_real 1) (to_real 2)) $k@359@00)))
    (<=
      $Perm.No
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@370@00 $k@359@00)))
    (<=
      (-
        (+
          (* (/ (to_real 1) (to_real 2)) $k@323@00)
          (* (/ (to_real 1) (to_real 2)) $k@359@00))
        (* $k@370@00 $k@359@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (-
          (+
            (* (/ (to_real 1) (to_real 2)) $k@323@00)
            (* (/ (to_real 1) (to_real 2)) $k@359@00))
          (* $k@370@00 $k@359@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<=
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $t@361@00)
          ($SortWrappers.IntTo$Snap $t@362@00))
        ($Snap.combine $Snap.unit $Snap.unit)) s_V0@102@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
      (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
      $Snap.unit)
    (Length_840d9458_MAddrType%precondition $Snap.unit $t@361@00)
    (< 0 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (Length_840d9458_MAddrType%precondition $Snap.unit $t@362@00)
    (< 0 (Length_840d9458_MAddrType $Snap.unit $t@362@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (< 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
        (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<=
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
        (Length_840d9458_MAddrType $Snap.unit $t@362@00))
      (slen<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@359@00)
      (not (= (ShStructget12of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@359@00)
      (not (= (ShStructget13of17<Ref> s_V0@102@00) $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<= 16 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
    (<=
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) 16 (+
        16
        (Length_840d9458_MAddrType $Snap.unit $t@361@00))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      $Snap.unit)
    (<= 0 (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00)))
    (<=
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
        (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
    (<=
      (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
        (Length_840d9458_MAddrType $Snap.unit $t@362@00))
      (scap<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00))))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
      16
      (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
      (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
      (Length_840d9458_MAddrType $Snap.unit $t@362@00)))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@103@00 12 (slen<Int> ubuf_V0@103@00)) (+
        16
        (Length_840d9458_MAddrType $Snap.unit $t@361@00)) (+
        (+ 16 (Length_840d9458_MAddrType $Snap.unit $t@361@00))
        (Length_840d9458_MAddrType $Snap.unit $t@362@00)))))))
(assert (or
  (and
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
  (and
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))))
(assert (= result@104@00 (joined_unfolding@371@00 s@$ s_V0@102@00 ubuf_V0@103@00)))
; [eval] 0 <= result
(push) ; 2
(assert (not (<= 0 result@104@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 result@104@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@102@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@103@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@321@00)
    ($Perm.isReadVar $k@323@00)
    ($Perm.isReadVar $k@324@00)
    ($Perm.isReadVar $k@325@00)
    ($Perm.isReadVar $k@326@00)
    ($Perm.isReadVar $k@327@00)
    ($Perm.isReadVar $k@328@00)
    ($Perm.isReadVar $k@329@00)
    ($Perm.isReadVar $k@330@00)
    ($Perm.isReadVar $k@331@00)
    ($Perm.isReadVar $k@332@00)
    ($Perm.isReadVar $k@333@00)
    ($Perm.isReadVar $k@334@00)
    ($Perm.isReadVar $k@335@00)
    ($Perm.isReadVar $k@336@00)
    ($Perm.isReadVar $k@337@00)
    ($Perm.isReadVar $k@338@00)
    ($Perm.isReadVar $k@339@00)
    ($Perm.isReadVar $k@342@00)
    ($Perm.isReadVar $k@343@00)
    ($Perm.isReadVar $k@344@00)
    ($Perm.isReadVar $k@345@00)
    ($Perm.isReadVar $k@346@00)
    ($Perm.isReadVar $k@347@00)
    ($Perm.isReadVar $k@348@00)
    ($Perm.isReadVar $k@349@00)
    ($Perm.isReadVar $k@350@00)
    ($Perm.isReadVar $k@351@00)
    ($Perm.isReadVar $k@352@00)
    ($Perm.isReadVar $k@353@00)
    ($Perm.isReadVar $k@354@00)
    ($Perm.isReadVar $k@355@00)
    ($Perm.isReadVar $k@356@00)
    ($Perm.isReadVar $k@357@00)
    ($Perm.isReadVar $k@358@00)
    ($Perm.isReadVar $k@359@00)
    ($Perm.isReadVar $k@360@00)
    ($Perm.isReadVar $k@363@00)
    ($Perm.isReadVar $k@364@00)
    ($Perm.isReadVar $k@365@00)
    ($Perm.isReadVar $k@366@00)
    ($Perm.isReadVar $k@367@00)
    ($Perm.isReadVar $k@368@00)
    ($Perm.isReadVar $k@369@00)
    ($Perm.isReadVar $k@370@00)
    (=>
      (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@102@00 ubuf_V0@103@00)
      (=
        (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@102@00 ubuf_V0@103@00)
        (+
          (+
            16
            (Length_840d9458_MAddrType $Snap.unit (ite
              (and
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
                (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
              $t@361@00
              $t@340@00)))
          (Length_840d9458_MAddrType $Snap.unit (ite
            (and
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
              (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
            $t@362@00
            $t@341@00))))))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@102@00 ubuf_V0@103@00))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%stateless s_V0@102@00 ubuf_V0@103@00) (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ubuf_V0@103@00))
  :qid |quant-u-316|)))
(assert (forall ((s@$ $Snap) (s_V0@102@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@103@00 Slice<Ref>)) (!
  (=>
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@102@00 ubuf_V0@103@00)
    (and
      (and
        (=>
          (and
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
              (and
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
                (and
                  (not
                    (=
                      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                      (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
                  (not
                    (=
                      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                      (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))))
          (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
        (Length_840d9458_MAddrType%precondition $Snap.unit (ite
          (and
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
            (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $t@361@00
          $t@340@00)))
      (and
        (=>
          (and
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
              (and
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
                (and
                  (not
                    (=
                      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                      (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
                  (not
                    (=
                      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                      (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))))
          (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
        (Length_840d9458_MAddrType%precondition $Snap.unit (ite
          (and
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
            (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@102@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $t@362@00
          $t@341@00)))))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@102@00 ubuf_V0@103@00))
  :qid |quant-u-317|)))
; ---------- FUNCTION addrHdrLenAbstractionLeak_840d9458_PMSCION----------
(declare-fun s_V0@105@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun result@106@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget8of17(s_V0): Ref)
(declare-const $k@372@00 $Perm)
(assert ($Perm.isReadVar $k@372@00))
(assert (<= $Perm.No $k@372@00))
(assert (<= $k@372@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@372@00)
  (not (= (ShStructget8of17<Ref> s_V0@105@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget9of17(s_V0): Ref)
(declare-const $k@373@00 $Perm)
(assert ($Perm.isReadVar $k@373@00))
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget8of17<Ref> s_V0@105@00) (ShStructget9of17<Ref> s_V0@105@00))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No $k@373@00))
(assert (<= $k@373@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@373@00)
  (not (= (ShStructget9of17<Ref> s_V0@105@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@372@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(pop) ; 2
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (= ($Snap.second ($Snap.second ($Snap.second s@$))) $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@373@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(pop) ; 2
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(declare-const $t@374@00 $Snap)
(assert (= $t@374@00 $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@106@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@105@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@105@00)
    (addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@105@00))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@105@00))
  :qid |quant-u-90|)))
(assert (forall ((s@$ $Snap) (s_V0@105@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%stateless s_V0@105@00)
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@105@00))
  :qid |quant-u-91|)))
(assert (forall ((s@$ $Snap) (s_V0@105@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (let ((result@106@00 (addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@105@00))) (and
    ($Perm.isReadVar $k@372@00)
    ($Perm.isReadVar $k@373@00)
    (=>
      (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@105@00)
      (<= 0 result@106@00))))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@105@00))
  :qid |quant-u-318|)))
(assert (forall ((s@$ $Snap) (s_V0@105@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (let ((result@106@00 (addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@105@00))) true)
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@105@00))
  :qid |quant-u-319|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@372@00))
(assert ($Perm.isReadVar $k@373@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (<= $Perm.No $k@372@00))
(assert (<= $k@372@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@372@00)
  (not (= (ShStructget8of17<Ref> s_V0@105@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (<= $Perm.No $k@373@00))
(assert (<= $k@373@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@373@00)
  (not (= (ShStructget9of17<Ref> s_V0@105@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second s@$))) $Snap.unit))
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (= ($Snap.second ($Snap.second ($Snap.second s@$))) $Snap.unit))
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@372@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(pop) ; 2
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@373@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(pop) ; 2
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (=
  result@106@00
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))))
; [eval] 0 <= result
(push) ; 2
(assert (not (<= 0 result@106@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 result@106@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@105@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@372@00)
    ($Perm.isReadVar $k@373@00)
    (=>
      (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@105@00)
      (=
        (addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@105@00)
        (+
          (+
            16
            (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
          (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@105@00))
  :qid |quant-u-320|)))
(assert (forall ((s@$ $Snap) (s_V0@105@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=>
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@105@00)
    (and
      (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$)))
      (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@105@00))
  :qid |quant-u-321|)))
; ---------- FUNCTION IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_----------
(declare-fun thisItf@107@00 () Tuple2<Ref~_Types>)
(declare-fun result@108@00 () Bool)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    thisItf@107@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(declare-const $k@375@00 $Perm)
(assert ($Perm.isReadVar $k@375@00))
(assert (<= $Perm.No $k@375@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (thisItf@107@00 Tuple2<Ref~_Types>)) (!
  (=
    (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited s@$ thisItf@107@00)
    (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ s@$ thisItf@107@00))
  :pattern ((IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ s@$ thisItf@107@00))
  :qid |quant-u-92|)))
(assert (forall ((s@$ $Snap) (thisItf@107@00 Tuple2<Ref~_Types>)) (!
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%stateless thisItf@107@00)
  :pattern ((IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited s@$ thisItf@107@00))
  :qid |quant-u-93|)))
; ---------- FUNCTION Len_a6ceb89d_SY$558431e4_a6ceb89d_----------
(declare-fun thisItf@109@00 () Tuple2<Ref~_Types>)
(declare-fun underlyingBuf_V0@110@00 () Slice<Ref>)
(declare-fun result@111@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    thisItf@109@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(declare-const $k@376@00 $Perm)
(assert ($Perm.isReadVar $k@376@00))
(assert (<= $Perm.No $k@376@00))
(declare-const $t@377@00 $Snap)
(assert (= $t@377@00 ($Snap.combine ($Snap.first $t@377@00) ($Snap.second $t@377@00))))
(assert (= ($Snap.first $t@377@00) $Snap.unit))
; [eval] (get1of2(thisItf): Types) == Path_4cddb96f_T_Types() ==> result == DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(thisItf): Types)
; [eval] Path_4cddb96f_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | get1of2[Types](thisItf@109@00) == Path_4cddb96f_T_Types[Types] | live]
; [else-branch: 175 | get1of2[Types](thisItf@109@00) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 175 | get1of2[Types](thisItf@109@00) == Path_4cddb96f_T_Types[Types]]
(assert (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types)))
; [eval] result == DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): Tuple0)
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@378@00 $Perm)
(assert ($Perm.isReadVar $k@378@00))
; [eval] (tuple2((box_Poly(o_V0): Ref), Path_4cddb96f_T_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] Path_4cddb96f_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00))) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@378@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@378@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@378@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@378@00))
(assert (and
  (< $k@378@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@378@00))
  (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 175 | get1of2[Types](thisItf@109@00) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@378@00))
(assert (=>
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (and
    (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
    (< $k@378@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@378@00))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types)))
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(assert (=>
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    result@111@00
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
(assert (=
  ($Snap.second $t@377@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@377@00))
    ($Snap.second ($Snap.second $t@377@00)))))
(assert (= ($Snap.first ($Snap.second $t@377@00)) $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Decoded_daeaf66a_T_Types()) ==> result == PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 176 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 176 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
; [eval] result == PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@379@00 $Perm)
(assert ($Perm.isReadVar $k@379@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@379@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@379@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@379@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@379@00))
(assert (and
  (< $k@379@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@379@00))
  (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 176 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@379@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
    (< $k@379@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@379@00))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
(assert (=
  ($Snap.second ($Snap.second $t@377@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@377@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@377@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@377@00))) $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c385169_T_Types()) ==> result == PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 177 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 177 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] result == PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@380@00 $Perm)
(assert ($Perm.isReadVar $k@380@00))
; [eval] (tuple2((box_Poly(o_V0): Ref), pointer_Types(Path_c385169_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@380@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@380@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@380@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@380@00))
(assert (and
  (< $k@380@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@380@00))
  (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 177 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@380@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< $k@380@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@380@00))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@377@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@00))))
  $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c6e60a1d_T_Types()) ==> result == PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 178 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 178 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
; [eval] result == PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@381@00 $Perm)
(assert ($Perm.isReadVar $k@381@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@381@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@381@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@381@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@381@00))
(assert (and
  (< $k@381@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@381@00))
  (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 178 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@381@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (< $k@381@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@381@00))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00)))))
  $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Raw_daeaf66a_T_Types()) ==> result == PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 179 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 179 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
; [eval] result == PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@382@00 $Perm)
(assert ($Perm.isReadVar $k@382@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@382@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@382@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@382@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@382@00))
(assert (and
  (< $k@382@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@382@00))
  (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 179 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@382@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (< $k@382@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@382@00))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00))))))
  $Snap.unit))
; [eval] (get1of2(thisItf): Types) == pointer_Types(rawPath_a6ceb89d_T_Types()) ==> result == PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
; [else-branch: 180 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 180 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
; [eval] result == PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@383@00 $Perm)
(assert ($Perm.isReadVar $k@383@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@383@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@383@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@383@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@383@00))
(assert (and
  (< $k@383@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@383@00))
  (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 180 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@383@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
    (< $k@383@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@383@00))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@00))))))
  $Snap.unit))
; [eval] result >= 0
(assert (>= result@111@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (=
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00)
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-94|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%stateless thisItf@109@00 underlyingBuf_V0@110@00)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-95|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (and
    ($Perm.isReadVar $k@376@00)
    ($Perm.isReadVar $k@378@00)
    ($Perm.isReadVar $k@379@00)
    ($Perm.isReadVar $k@380@00)
    ($Perm.isReadVar $k@381@00)
    ($Perm.isReadVar $k@382@00)
    ($Perm.isReadVar $k@383@00)
    (=>
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (and
        (=>
          (=
            (get1of2<Types> thisItf@109@00)
            (as Path_4cddb96f_T_Types<Types>  Types))
          (=
            result@111@00
            (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
        (=>
          (=
            (get1of2<Types> thisItf@109@00)
            (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
          (=
            result@111@00
            (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
        (=>
          (=
            (get1of2<Types> thisItf@109@00)
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
          (=
            result@111@00
            (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
        (=>
          (=
            (get1of2<Types> thisItf@109@00)
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
          (=
            result@111@00
            (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
        (=>
          (=
            (get1of2<Types> thisItf@109@00)
            (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
          (=
            result@111@00
            (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
        (=>
          (=
            (get1of2<Types> thisItf@109@00)
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
          (=
            result@111@00
            (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
        (>= result@111@00 0)))))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-322|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (get1of2<Types> thisItf@109@00)
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-323|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (get1of2<Types> thisItf@109@00)
        (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-324|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (get1of2<Types> thisItf@109@00)
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-325|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (get1of2<Types> thisItf@109@00)
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-326|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (get1of2<Types> thisItf@109@00)
        (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-327|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (get1of2<Types> thisItf@109@00)
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-328|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (let ((result@111@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))) true)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-329|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@376@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
(assert (not
  (=
    thisItf@109@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (<= $Perm.No $k@376@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (true ? Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback(thisItf, underlyingBuf_V0) : (typeOfInterface_Y$558431e4_a6ceb89d_(thisItf) == pointer_Types(rawPath_a6ceb89d_T_Types()) ? Len_a6ceb89d_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$558431e4_a6ceb89d_(thisItf), pointer_Types(rawPath_a6ceb89d_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])), underlyingBuf_V0) : (typeOfInterface_Y$558431e4_a6ceb89d_(thisItf) == pointer_Types(Raw_daeaf66a_T_Types()) ? Len_daeaf66a_PMRaw(assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef(behavioral_subtype_Types(typeOfInterface_Y$558431e4_a6ceb89d_(thisItf), pointer_Types(Raw_daeaf66a_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])), underlyingBuf_V0) : (typeOfInterface_Y$558431e4_a6ceb89d_(thisItf) == pointer_Types(Path_c6e60a1d_T_Types()) ? Len_c6e60a1d_PMPath(assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef(behavioral_subtype_Types(typeOfInterface_Y$558431e4_a6ceb89d_(thisItf), pointer_Types(Path_c6e60a1d_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])), underlyingBuf_V0) : (typeOfInterface_Y$558431e4_a6ceb89d_(thisItf) == pointer_Types(Path_c385169_T_Types()) ? Len_c385169_PMPath(assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$(behavioral_subtype_Types(typeOfInterface_Y$558431e4_a6ceb89d_(thisItf), pointer_Types(Path_c385169_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])), underlyingBuf_V0) : (typeOfInterface_Y$558431e4_a6ceb89d_(thisItf) == pointer_Types(Decoded_daeaf66a_T_Types()) ? Len_daeaf66a_PMDecoded(assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef(behavioral_subtype_Types(typeOfInterface_Y$558431e4_a6ceb89d_(thisItf), pointer_Types(Decoded_daeaf66a_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])), underlyingBuf_V0) : (typeOfInterface_Y$558431e4_a6ceb89d_(thisItf) == Path_4cddb96f_T_Types() ? Len_4cddb96f_MPath(assertArg2_Tuple0(behavioral_subtype_Types(typeOfInterface_Y$558431e4_a6ceb89d_(thisItf), Path_4cddb96f_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Tuple0)), underlyingBuf_V0) : Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback(thisItf, underlyingBuf_V0))))))))
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | True | live]
; [else-branch: 181 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 181 | True]
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback(thisItf, underlyingBuf_V0)
(push) ; 4
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@384@00 $Perm)
(assert ($Perm.isReadVar $k@384@00))
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@384@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@384@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@384@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap.combine
  $Snap.unit
  ($Snap.second s@$)) thisItf@109@00 underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@384@00))
(assert (and
  (< $k@384@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@384@00))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap.combine
    $Snap.unit
    ($Snap.second s@$)) thisItf@109@00 underlyingBuf_V0@110@00)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@384@00))
(assert (and
  (< $k@384@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@384@00))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap.combine
    $Snap.unit
    ($Snap.second s@$)) thisItf@109@00 underlyingBuf_V0@110@00)))
(assert (=
  result@111@00
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback ($Snap.combine
    $Snap.unit
    ($Snap.second s@$)) thisItf@109@00 underlyingBuf_V0@110@00)))
; [eval] (get1of2(thisItf): Types) == Path_4cddb96f_T_Types() ==> result == DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(thisItf): Types)
; [eval] Path_4cddb96f_T_Types()
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | get1of2[Types](thisItf@109@00) == Path_4cddb96f_T_Types[Types] | live]
; [else-branch: 182 | get1of2[Types](thisItf@109@00) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 182 | get1of2[Types](thisItf@109@00) == Path_4cddb96f_T_Types[Types]]
(assert (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types)))
; [eval] result == DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): Tuple0), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): Tuple0)
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@385@00 $Perm)
(assert ($Perm.isReadVar $k@385@00))
; [eval] (tuple2((box_Poly(o_V0): Ref), Path_4cddb96f_T_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] Path_4cddb96f_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00))) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@385@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@385@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@385@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@385@00))
(assert (and
  (< $k@385@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@385@00))
  (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 182 | get1of2[Types](thisItf@109@00) != Path_4cddb96f_T_Types[Types]]
(assert (not
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@385@00))
(assert (=>
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (and
    (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
    (< $k@385@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@385@00))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types)))
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(push) ; 2
(assert (not (=>
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    result@111@00
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= (get1of2<Types> thisItf@109@00) (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    result@111@00
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Decoded_daeaf66a_T_Types()) ==> result == PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 183 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 183 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
; [eval] result == PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@386@00 $Perm)
(assert ($Perm.isReadVar $k@386@00))
; [eval] (tuple2((box_Poly(d_V0): Ref), pointer_Types(Decoded_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(d_V0): Ref)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@386@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@386@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@386@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@386@00))
(assert (and
  (< $k@386@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@386@00))
  (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 183 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@386@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
    (< $k@386@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@386@00))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(push) ; 2
(assert (not (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c385169_T_Types()) ==> result == PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 184 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 184 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] result == PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@387@00 $Perm)
(assert ($Perm.isReadVar $k@387@00))
; [eval] (tuple2((box_Poly(o_V0): Ref), pointer_Types(Path_c385169_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(o_V0): Ref)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@387@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@387@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@387@00))
(assert (and
  (< $k@387@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@387@00))
  (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 184 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@387@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< $k@387@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@387@00))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(push) ; 2
(assert (not (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c6e60a1d_T_Types()) ==> result == PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 185 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 185 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
; [eval] result == PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@388@00 $Perm)
(assert ($Perm.isReadVar $k@388@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(Path_c6e60a1d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@388@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@388@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@388@00))
(assert (and
  (< $k@388@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@388@00))
  (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 185 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@388@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (< $k@388@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@388@00))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(push) ; 2
(assert (not (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; [eval] (get1of2(thisItf): Types) == pointer_Types(Raw_daeaf66a_T_Types()) ==> result == PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 186 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 186 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
; [eval] result == PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@389@00 $Perm)
(assert ($Perm.isReadVar $k@389@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@389@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@389@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@389@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@389@00))
(assert (and
  (< $k@389@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@389@00))
  (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 186 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@389@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (< $k@389@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@389@00))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(push) ; 2
(assert (not (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; [eval] (get1of2(thisItf): Types) == pointer_Types(rawPath_a6ceb89d_T_Types()) ==> result == PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] (get1of2(thisItf): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(thisItf): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
; [else-branch: 187 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 187 | get1of2[Types](thisItf@109@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (=
  (get1of2<Types> thisItf@109@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
; [eval] result == PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]), underlyingBuf_V0)
; [eval] (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(thisItf): Ref)
(push) ; 4
(declare-const $k@390@00 $Perm)
(assert ($Perm.isReadVar $k@390@00))
; [eval] (tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_a6ceb89d_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(p_V0): Ref)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  thisItf@109@00
  (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00))) (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@376@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@390@00 $k@376@00))
(assert (<= $Perm.No (- $k@376@00 $k@390@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@390@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@390@00))
(assert (and
  (< $k@390@00 $k@376@00)
  (<= $Perm.No (- $k@376@00 $k@390@00))
  (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 187 | get1of2[Types](thisItf@109@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@390@00))
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (and
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
    (< $k@390@00 $k@376@00)
    (<= $Perm.No (- $k@376@00 $k@390@00))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; Joined path conditions
(assert (or
  (not
    (=
      (get1of2<Types> thisItf@109@00)
      (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(push) ; 2
(assert (not (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (get1of2<Types> thisItf@109@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
  (=
    result@111@00
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@109@00)) underlyingBuf_V0@110@00))))
; [eval] result >= 0
(push) ; 2
(assert (not (>= result@111@00 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (>= result@111@00 0))
(pop) ; 1
(declare-const $unresolved@391@00 $Snap)
(declare-const $unresolved@392@00 $Snap)
(declare-const $unresolved@393@00 $Snap)
(declare-const $unresolved@394@00 $Snap)
(declare-const $unresolved@395@00 $Snap)
(declare-const $unresolved@396@00 $Snap)
(declare-const $unresolved@397@00 $Snap)
(declare-const $unresolved@398@00 $Snap)
(declare-const $unresolved@399@00 $Snap)
(declare-const $unresolved@400@00 $Snap)
(declare-const $unresolved@401@00 $Snap)
(declare-const $unresolved@402@00 $Snap)
(declare-const $unresolved@403@00 $Snap)
(declare-const $unresolved@404@00 $Snap)
(declare-const $unresolved@405@00 $Snap)
(declare-const $unresolved@406@00 $Snap)
(declare-const $unresolved@407@00 $Snap)
(declare-const $unresolved@408@00 $Snap)
(declare-const $unresolved@409@00 $Snap)
(declare-const $unresolved@410@00 $Snap)
(declare-const $unresolved@411@00 $Snap)
(declare-const $unresolved@412@00 $Snap)
(declare-const $unresolved@413@00 $Snap)
(declare-const $unresolved@414@00 $Snap)
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@376@00)
    ($Perm.isReadVar $k@384@00)
    ($Perm.isReadVar $k@385@00)
    ($Perm.isReadVar $k@386@00)
    ($Perm.isReadVar $k@387@00)
    ($Perm.isReadVar $k@388@00)
    ($Perm.isReadVar $k@389@00)
    ($Perm.isReadVar $k@390@00)
    (=>
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
      (=
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@109@00 underlyingBuf_V0@110@00)
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback ($Snap.combine
          $Snap.unit
          ($Snap.second s@$)) thisItf@109@00 underlyingBuf_V0@110@00))))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-330|)))
(assert (forall ((s@$ $Snap) (thisItf@109@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@110@00 Slice<Ref>)) (!
  (=>
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@109@00 underlyingBuf_V0@110@00)
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap.combine
      $Snap.unit
      ($Snap.second s@$)) thisItf@109@00 underlyingBuf_V0@110@00))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@109@00 underlyingBuf_V0@110@00))
  :qid |quant-u-331|)))
; ---------- FUNCTION box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes----------
(declare-fun x@112@00 () Seq<Tuple2<Ref~_Types>>)
(declare-fun result@113@00 () Emb_4_Interfaceempty_interface$$$$_E_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] |x| == 4
; [eval] |x|
(assert (= (Seq_length x@112@00) 4))
(declare-const $t@415@00 $Snap)
(assert (= $t@415@00 $Snap.unit))
; [eval] unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == x
; [eval] unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)
(push) ; 2
(assert (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@113@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@113@00))
(assert (Seq_equal
  (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit result@113@00)
  x@112@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@112@00 Seq<Tuple2<Ref~_Types>>)) (!
  (=
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@112@00)
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ x@112@00))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ x@112@00))
  :qid |quant-u-96|)))
(assert (forall ((s@$ $Snap) (x@112@00 Seq<Tuple2<Ref~_Types>>)) (!
  (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless x@112@00)
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@112@00))
  :qid |quant-u-97|)))
(assert (forall ((s@$ $Snap) (x@112@00 Seq<Tuple2<Ref~_Types>>)) (!
  (let ((result@113@00 (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@112@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ x@112@00)
    (Seq_equal
      (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited $Snap.unit result@113@00)
      x@112@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@112@00))
  :qid |quant-u-332|)))
(assert (forall ((s@$ $Snap) (x@112@00 Seq<Tuple2<Ref~_Types>>)) (!
  (let ((result@113@00 (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@112@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ x@112@00)
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@113@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@112@00))
  :qid |quant-u-333|)))
; ---------- FUNCTION unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes----------
(declare-fun y@114@00 () Emb_4_Interfaceempty_interface$$$$_E_$$$)
(declare-fun result@115@00 () Seq<Tuple2<Ref~_Types>>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@416@00 $Snap)
(assert (= $t@416@00 ($Snap.combine ($Snap.first $t@416@00) ($Snap.second $t@416@00))))
(assert (= ($Snap.first $t@416@00) $Snap.unit))
; [eval] |result| == 4
; [eval] |result|
(assert (= (Seq_length result@115@00) 4))
(assert (= ($Snap.second $t@416@00) $Snap.unit))
; [eval] box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == y
; [eval] box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)
(push) ; 2
; [eval] |x| == 4
; [eval] |x|
(assert (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@115@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@115@00))
(assert (=
  (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit result@115@00)
  y@114@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@114@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (Seq_equal
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00)
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ y@114@00))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ y@114@00))
  :qid |quant-u-98|)))
(assert (forall ((s@$ $Snap) (y@114@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless y@114@00)
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))
  :qid |quant-u-99|)))
(assert (forall ((s@$ $Snap) (y@114@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@115@00 (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ y@114@00)
    (and
      (= (Seq_length result@115@00) 4)
      (=
        (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited $Snap.unit result@115@00)
        y@114@00))))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))
  :qid |quant-u-334|)))
(assert (forall ((s@$ $Snap) (y@114@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@115@00 (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))) true)
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))
  :qid |quant-u-335|)))
(assert (forall ((s@$ $Snap) (y@114@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@115@00 (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ y@114@00)
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@115@00)))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@114@00))
  :qid |quant-u-336|)))
; ---------- FUNCTION box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref----------
(declare-fun x@116@00 () ShArray<Ref>)
(declare-fun result@117@00 () Emb_4_Interfaceempty_interface$$$_S_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] (ShArraylen(x): Int) == 4 || x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 4
; [eval] (ShArraylen(x): Int)
(push) ; 2
; [then-branch: 188 | ShArraylen[Int](x@116@00) == 4 | live]
; [else-branch: 188 | ShArraylen[Int](x@116@00) != 4 | live]
(push) ; 3
; [then-branch: 188 | ShArraylen[Int](x@116@00) == 4]
(assert (= (ShArraylen<Int> x@116@00) 4))
(pop) ; 3
(push) ; 3
; [else-branch: 188 | ShArraylen[Int](x@116@00) != 4]
(assert (not (= (ShArraylen<Int> x@116@00) 4)))
; [eval] x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_4_Interfaceempty_interface$$$_S_$$$()
(push) ; 4
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> x@116@00) 4))
  (and
    (not (= (ShArraylen<Int> x@116@00) 4))
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))))
(assert (or (not (= (ShArraylen<Int> x@116@00) 4)) (= (ShArraylen<Int> x@116@00) 4)))
(assert (or
  (= (ShArraylen<Int> x@116@00) 4)
  (= x@116@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))))
(declare-const $t@417@00 $Snap)
(assert (= $t@417@00 $Snap.unit))
; [eval] unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == x
; [eval] unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@117@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@117@00))
(assert (=
  (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit result@117@00)
  x@116@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@116@00 ShArray<Ref>)) (!
  (=
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@116@00)
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@116@00))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@116@00))
  :qid |quant-u-100|)))
(assert (forall ((s@$ $Snap) (x@116@00 ShArray<Ref>)) (!
  (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless x@116@00)
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@116@00))
  :qid |quant-u-101|)))
(assert (forall ((s@$ $Snap) (x@116@00 ShArray<Ref>)) (!
  (let ((result@117@00 (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@116@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@116@00)
    (=
      (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@117@00)
      x@116@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@116@00))
  :qid |quant-u-337|)))
(assert (forall ((s@$ $Snap) (x@116@00 ShArray<Ref>)) (!
  (let ((result@117@00 (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@116@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@116@00)
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@117@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@116@00))
  :qid |quant-u-338|)))
; ---------- FUNCTION unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref----------
(declare-fun y@118@00 () Emb_4_Interfaceempty_interface$$$_S_$$$)
(declare-fun result@119@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@418@00 $Snap)
(assert (= $t@418@00 ($Snap.combine ($Snap.first $t@418@00) ($Snap.second $t@418@00))))
(assert (= ($Snap.first $t@418@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 4 || result == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(result): Int) == 4
; [eval] (ShArraylen(result): Int)
(push) ; 2
; [then-branch: 189 | ShArraylen[Int](result@119@00) == 4 | live]
; [else-branch: 189 | ShArraylen[Int](result@119@00) != 4 | live]
(push) ; 3
; [then-branch: 189 | ShArraylen[Int](result@119@00) == 4]
(assert (= (ShArraylen<Int> result@119@00) 4))
(pop) ; 3
(push) ; 3
; [else-branch: 189 | ShArraylen[Int](result@119@00) != 4]
(assert (not (= (ShArraylen<Int> result@119@00) 4)))
; [eval] result == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_4_Interfaceempty_interface$$$_S_$$$()
(push) ; 4
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> result@119@00) 4))
  (and
    (not (= (ShArraylen<Int> result@119@00) 4))
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))))
(assert (or
  (not (= (ShArraylen<Int> result@119@00) 4))
  (= (ShArraylen<Int> result@119@00) 4)))
(assert (or
  (= (ShArraylen<Int> result@119@00) 4)
  (= result@119@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))))
(assert (= ($Snap.second $t@418@00) $Snap.unit))
; [eval] box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == y
; [eval] box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
; [eval] (ShArraylen(x): Int) == 4 || x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 4
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 190 | ShArraylen[Int](result@119@00) == 4 | live]
; [else-branch: 190 | ShArraylen[Int](result@119@00) != 4 | live]
(push) ; 4
; [then-branch: 190 | ShArraylen[Int](result@119@00) == 4]
(assert (= (ShArraylen<Int> result@119@00) 4))
(pop) ; 4
(push) ; 4
; [else-branch: 190 | ShArraylen[Int](result@119@00) != 4]
(assert (not (= (ShArraylen<Int> result@119@00) 4)))
; [eval] x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_4_Interfaceempty_interface$$$_S_$$$()
(push) ; 5
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@119@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@119@00))
(assert (=
  (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit result@119@00)
  y@118@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@118@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (=
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00)
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@118@00))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@118@00))
  :qid |quant-u-102|)))
(assert (forall ((s@$ $Snap) (y@118@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless y@118@00)
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))
  :qid |quant-u-103|)))
(assert (forall ((s@$ $Snap) (y@118@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@119@00 (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@118@00)
    (and
      (or
        (= (ShArraylen<Int> result@119@00) 4)
        (=
          result@119@00
          (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@119@00)
        y@118@00))))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))
  :qid |quant-u-339|)))
(assert (forall ((s@$ $Snap) (y@118@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@119@00 (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))) (=>
    (and
      (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@118@00)
      (not (= (ShArraylen<Int> result@119@00) 4)))
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))
  :qid |quant-u-340|)))
(assert (forall ((s@$ $Snap) (y@118@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@119@00 (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@118@00)
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@119@00)))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@118@00))
  :qid |quant-u-341|)))
; ---------- FUNCTION intBitwiseOr----------
(declare-fun left@120@00 () Int)
(declare-fun right@121@00 () Int)
(declare-fun result@122@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(pop) ; 1
(assert (forall ((s@$ $Snap) (left@120@00 Int) (right@121@00 Int)) (!
  (=
    (intBitwiseOr%limited s@$ left@120@00 right@121@00)
    (intBitwiseOr s@$ left@120@00 right@121@00))
  :pattern ((intBitwiseOr s@$ left@120@00 right@121@00))
  :qid |quant-u-104|)))
(assert (forall ((s@$ $Snap) (left@120@00 Int) (right@121@00 Int)) (!
  (intBitwiseOr%stateless left@120@00 right@121@00)
  :pattern ((intBitwiseOr%limited s@$ left@120@00 right@121@00))
  :qid |quant-u-105|)))
; ---------- FUNCTION intShiftLeft----------
(declare-fun left@123@00 () Int)
(declare-fun right@124@00 () Int)
(declare-fun result@125@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] right >= 0
(assert (>= right@124@00 0))
(pop) ; 1
(assert (forall ((s@$ $Snap) (left@123@00 Int) (right@124@00 Int)) (!
  (=
    (intShiftLeft%limited s@$ left@123@00 right@124@00)
    (intShiftLeft s@$ left@123@00 right@124@00))
  :pattern ((intShiftLeft s@$ left@123@00 right@124@00))
  :qid |quant-u-106|)))
(assert (forall ((s@$ $Snap) (left@123@00 Int) (right@124@00 Int)) (!
  (intShiftLeft%stateless left@123@00 right@124@00)
  :pattern ((intShiftLeft%limited s@$ left@123@00 right@124@00))
  :qid |quant-u-107|)))
; ---------- FUNCTION UBuf_b41831d7_SY$3e1378f2_b41831d7_----------
(declare-fun thisItf@126@00 () Tuple2<Ref~_Types>)
(declare-fun result@127@00 () Slice<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    thisItf@126@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(declare-const $k@419@00 $Perm)
(assert ($Perm.isReadVar $k@419@00))
(assert (<= $Perm.No $k@419@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (thisItf@126@00 Tuple2<Ref~_Types>)) (!
  (=
    (UBuf_b41831d7_SY$3e1378f2_b41831d7_%limited s@$ thisItf@126@00)
    (UBuf_b41831d7_SY$3e1378f2_b41831d7_ s@$ thisItf@126@00))
  :pattern ((UBuf_b41831d7_SY$3e1378f2_b41831d7_ s@$ thisItf@126@00))
  :qid |quant-u-108|)))
(assert (forall ((s@$ $Snap) (thisItf@126@00 Tuple2<Ref~_Types>)) (!
  (UBuf_b41831d7_SY$3e1378f2_b41831d7_%stateless thisItf@126@00)
  :pattern ((UBuf_b41831d7_SY$3e1378f2_b41831d7_%limited s@$ thisItf@126@00))
  :qid |quant-u-109|)))
; ---------- FUNCTION getNumINF_daeaf66a_PMBase----------
(declare-fun b_V0@128@00 () ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun result@129@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $k@420@00 $Perm)
(assert ($Perm.isReadVar $k@420@00))
(assert (<= $Perm.No $k@420@00))
(declare-const $t@421@00 $Snap)
(assert (= $t@421@00 ($Snap.combine ($Snap.first $t@421@00) ($Snap.second $t@421@00))))
(assert (= ($Snap.first $t@421@00) $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@129@00))
(assert (= ($Snap.second $t@421@00) $Snap.unit))
; [eval] result <= 3
(assert (<= result@129@00 3))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b_V0@128@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (getNumINF_daeaf66a_PMBase%limited s@$ b_V0@128@00)
    (getNumINF_daeaf66a_PMBase s@$ b_V0@128@00))
  :pattern ((getNumINF_daeaf66a_PMBase s@$ b_V0@128@00))
  :qid |quant-u-110|)))
(assert (forall ((s@$ $Snap) (b_V0@128@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (getNumINF_daeaf66a_PMBase%stateless b_V0@128@00)
  :pattern ((getNumINF_daeaf66a_PMBase%limited s@$ b_V0@128@00))
  :qid |quant-u-111|)))
(assert (forall ((s@$ $Snap) (b_V0@128@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@129@00 (getNumINF_daeaf66a_PMBase%limited s@$ b_V0@128@00))) (and
    ($Perm.isReadVar $k@420@00)
    (=>
      (getNumINF_daeaf66a_PMBase%precondition s@$ b_V0@128@00)
      (and (<= 0 result@129@00) (<= result@129@00 3)))))
  :pattern ((getNumINF_daeaf66a_PMBase%limited s@$ b_V0@128@00))
  :qid |quant-u-342|)))
(assert (forall ((s@$ $Snap) (b_V0@128@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@129@00 (getNumINF_daeaf66a_PMBase%limited s@$ b_V0@128@00))) true)
  :pattern ((getNumINF_daeaf66a_PMBase%limited s@$ b_V0@128@00))
  :qid |quant-u-343|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@420@00))
(assert (<= $Perm.No $k@420@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(Mem_daeaf66a_PMBase(b_V0), wildcard) in (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$)
(declare-const $k@422@00 $Perm)
(assert ($Perm.isReadVar $k@422@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@423@00 $Perm)
(assert ($Perm.isReadVar $k@423@00))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@420@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@423@00 $k@420@00))
(assert (<= $Perm.No (- $k@420@00 $k@423@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@423@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Mem_daeaf66a_PMBase%trigger s@$ b_V0@128@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= $Perm.No $k@422@00))
(assert (<= $k@422@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@422@00)
  (not (= (ShStructget1of3<Ref> b_V0@128@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> b_V0@128@00) (ShStructget2of3<Ref> b_V0@128@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@422@00)
  (not (= (ShStructget2of3<Ref> b_V0@128@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget0of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(assert (=>
  (< $Perm.No $k@422@00)
  (not
    (=
      (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget1of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@422@00)
  (not
    (=
      (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 0): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))))
(pop) ; 3
; Joined path conditions
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@422@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 0)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 1): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@422@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 2): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 1)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@422@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 2)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ <= 3
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ ==> 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | 0 < First:(s@$) | live]
; [else-branch: 191 | !(0 < First:(s@$)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 191 | 0 < First:(s@$)]
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 191 | !(0 < First:(s@$))]
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(assert (=>
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
; [eval] (ShStructget1of3(b_V0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@423@00))
(assert (and
  (< $k@423@00 $k@420@00)
  (<= $Perm.No (- $k@420@00 $k@423@00))
  (Mem_daeaf66a_PMBase%trigger s@$ b_V0@128@00)
  (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
  (<= $Perm.No $k@422@00)
  (<= $k@422@00 $Perm.Write)
  (=>
    (< $Perm.No $k@422@00)
    (not (= (ShStructget1of3<Ref> b_V0@128@00) $Ref.null)))
  (=
    ($Snap.second s@$)
    ($Snap.combine
      ($Snap.first ($Snap.second s@$))
      ($Snap.second ($Snap.second s@$))))
  (=>
    (< $Perm.No $k@422@00)
    (not (= (ShStructget2of3<Ref> b_V0@128@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second s@$))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second s@$)))
      ($Snap.second ($Snap.second ($Snap.second s@$)))))
  (=>
    (< $Perm.No $k@422@00)
    (not
      (=
        (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second s@$)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=>
    (< $Perm.No $k@422@00)
    (not
      (=
        (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00)))
  (=>
    (< $Perm.No $k@422@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 0)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=>
    (< $Perm.No $k@422@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 1)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=>
    (< $Perm.No $k@422@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@128@00))) 2)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (or
    (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (=>
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))))
(assert (= result@129@00 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] 0 <= result
(set-option :timeout 0)
(push) ; 2
(assert (not (<= 0 result@129@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 result@129@00))
; [eval] result <= 3
(push) ; 2
(assert (not (<= result@129@00 3)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= result@129@00 3))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b_V0@128@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@420@00)
    ($Perm.isReadVar $k@422@00)
    ($Perm.isReadVar $k@423@00)
    (=>
      (getNumINF_daeaf66a_PMBase%precondition s@$ b_V0@128@00)
      (=
        (getNumINF_daeaf66a_PMBase s@$ b_V0@128@00)
        ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
  :pattern ((getNumINF_daeaf66a_PMBase s@$ b_V0@128@00))
  :qid |quant-u-344|)))
(assert (forall ((s@$ $Snap) (b_V0@128@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  true
  :pattern ((getNumINF_daeaf66a_PMBase s@$ b_V0@128@00))
  :qid |quant-u-345|)))
; ---------- FUNCTION getPathPure_840d9458_PMSCION----------
(declare-fun s_V0@130@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun pathType_V0@131@00 () Int)
(declare-fun result@132@00 () Tuple2<Ref~_Types>)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] 0 <= pathType_V0
(assert (<= 0 pathType_V0@131@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (= ($Snap.first ($Snap.second s@$)) $Snap.unit))
; [eval] pathType_V0 < 256
(assert (< pathType_V0@131@00 256))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget15of17(s_V0): Ref)
(declare-const $k@424@00 $Perm)
(assert ($Perm.isReadVar $k@424@00))
(assert (<= $Perm.No $k@424@00))
(assert (<= $k@424@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@424@00)
  (not (= (ShStructget15of17<Ref> s_V0@130@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget16of17(s_V0): Ref)
(declare-const $k@425@00 $Perm)
(assert ($Perm.isReadVar $k@425@00))
(assert (<= $Perm.No $k@425@00))
(assert (<= $k@425@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@425@00)
  (not (= (ShStructget16of17<Ref> s_V0@130@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  $Snap.unit))
; [eval] !((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 2
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@425@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const $k@426@00 $Perm)
(assert ($Perm.isReadVar $k@426@00))
(assert (<= $Perm.No $k@426@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@130@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@131@00 Int)) (!
  (=
    (getPathPure_840d9458_PMSCION%limited s@$ s_V0@130@00 pathType_V0@131@00)
    (getPathPure_840d9458_PMSCION s@$ s_V0@130@00 pathType_V0@131@00))
  :pattern ((getPathPure_840d9458_PMSCION s@$ s_V0@130@00 pathType_V0@131@00))
  :qid |quant-u-112|)))
(assert (forall ((s@$ $Snap) (s_V0@130@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@131@00 Int)) (!
  (getPathPure_840d9458_PMSCION%stateless s_V0@130@00 pathType_V0@131@00)
  :pattern ((getPathPure_840d9458_PMSCION%limited s@$ s_V0@130@00 pathType_V0@131@00))
  :qid |quant-u-113|)))
; ----- Verification of function body and postcondition -----
(set-option :timeout 0)
(push) ; 1
(assert ($Perm.isReadVar $k@424@00))
(assert ($Perm.isReadVar $k@425@00))
(assert ($Perm.isReadVar $k@426@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
(assert (<= 0 pathType_V0@131@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (= ($Snap.first ($Snap.second s@$)) $Snap.unit))
(assert (< pathType_V0@131@00 256))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
(assert (<= $Perm.No $k@424@00))
(assert (<= $k@424@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@424@00)
  (not (= (ShStructget15of17<Ref> s_V0@130@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
(assert (<= $Perm.No $k@425@00))
(assert (<= $k@425@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@425@00)
  (not (= (ShStructget16of17<Ref> s_V0@130@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  $Snap.unit))
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (<= $Perm.No $k@426@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (pathType_V0 < (slen((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) ? (unfolding acc(PathPoolMemExceptOne_840d9458_F((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$, (ShStructget16of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, pathType_V0), wildcard) in (ShArrayloc((sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) : (ShStructget16of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] pathType_V0 < (slen((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  pathType_V0@131@00
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$)))) | live]
; [else-branch: 192 | !(pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 192 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))]
(assert (<
  pathType_V0@131@00
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
; [eval] (unfolding acc(PathPoolMemExceptOne_840d9458_F((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$, (ShStructget16of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, pathType_V0), wildcard) in (ShArrayloc((sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@425@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@427@00 $Perm)
(assert ($Perm.isReadVar $k@427@00))
(set-option :timeout 0)
(push) ; 4
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(declare-const $k@428@00 $Perm)
(assert ($Perm.isReadVar $k@428@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@425@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@426@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@428@00 $k@426@00))
(assert (<= $Perm.No (- $k@426@00 $k@428@00)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@428@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  $Snap.unit))
; [eval] !(pathPool_V0 == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] pathPool_V0 == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  $Snap.unit))
; [eval] (slen(pathPool_V0): Int) == 4
; [eval] (slen(pathPool_V0): Int)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))
  4))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 0)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No $k@427@00))
(assert (<= $k@427@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 0)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == Path_4cddb96f_T_Types()
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 0)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(pop) ; 5
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
; [eval] Path_4cddb96f_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (as Path_4cddb96f_T_Types<Types>  Types)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
; [eval] !(pathType_V0 == 2)
; [eval] pathType_V0 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not (= pathType_V0@131@00 2)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= pathType_V0@131@00 2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | pathType_V0@131@00 != 2 | live]
; [else-branch: 193 | pathType_V0@131@00 == 2 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 193 | pathType_V0@131@00 != 2]
(assert (not (= pathType_V0@131@00 2)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 6
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
(pop) ; 6
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
; [eval] !(pathType_V0 == 1)
; [eval] pathType_V0 == 1
(push) ; 6
(set-option :timeout 10)
(assert (not (= pathType_V0@131@00 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= pathType_V0@131@00 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | pathType_V0@131@00 != 1 | live]
; [else-branch: 194 | pathType_V0@131@00 == 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 194 | pathType_V0@131@00 != 1]
(assert (not (= pathType_V0@131@00 1)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
; [eval] !(pathType_V0 == 3)
; [eval] pathType_V0 == 3
(push) ; 7
(set-option :timeout 10)
(assert (not (= pathType_V0@131@00 3)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= pathType_V0@131@00 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | pathType_V0@131@00 != 3 | live]
; [else-branch: 195 | pathType_V0@131@00 == 3 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 195 | pathType_V0@131@00 != 3]
(assert (not (= pathType_V0@131@00 3)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$)))) | live]
; [else-branch: 196 | !(pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 196 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))]
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (ShArrayloc((sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)): Ref)
; [eval] (sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)
; [eval] (soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 195 | pathType_V0@131@00 == 3]
(assert (= pathType_V0@131@00 3))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$)))) | live]
; [else-branch: 197 | !(pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 197 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))]
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (ShArrayloc((sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)): Ref)
; [eval] (sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)
; [eval] (soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 194 | pathType_V0@131@00 == 1]
(assert (= pathType_V0@131@00 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
; [eval] !(pathType_V0 == 3)
; [eval] pathType_V0 == 3
(push) ; 7
(set-option :timeout 10)
(assert (not (= pathType_V0@131@00 3)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= pathType_V0@131@00 3))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | pathType_V0@131@00 != 3 | live]
; [else-branch: 198 | pathType_V0@131@00 == 3 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 198 | pathType_V0@131@00 != 3]
(assert (not (= pathType_V0@131@00 3)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$)))) | live]
; [else-branch: 199 | !(pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 199 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))]
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (ShArrayloc((sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)): Ref)
; [eval] (sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)
; [eval] (soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 193 | pathType_V0@131@00 == 2]
(assert (= pathType_V0@131@00 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 6
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
(pop) ; 6
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
; [eval] !(pathType_V0 == 1)
; [eval] pathType_V0 == 1
(push) ; 6
(set-option :timeout 10)
(assert (not (= pathType_V0@131@00 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= pathType_V0@131@00 1))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | pathType_V0@131@00 != 1 | live]
; [else-branch: 200 | pathType_V0@131@00 == 1 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 200 | pathType_V0@131@00 != 1]
(assert (not (= pathType_V0@131@00 1)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@427@00)
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
; [eval] !(pathType_V0 == 3)
; [eval] pathType_V0 == 3
(push) ; 7
(set-option :timeout 10)
(assert (not (= pathType_V0@131@00 3)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= pathType_V0@131@00 3))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | pathType_V0@131@00 != 3 | live]
; [else-branch: 201 | pathType_V0@131@00 == 3 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 201 | pathType_V0@131@00 != 3]
(assert (not (= pathType_V0@131@00 3)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$)))) | live]
; [else-branch: 202 | !(pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 202 | pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$))))]
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (ShArrayloc((sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)): Ref)
; [eval] (sarray((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sadd((soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), pathType_V0)
; [eval] (soffset((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShStructget16of17<Ref> s_V0@130@00)
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(declare-fun joined_unfolding@429@00 ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Tuple2<Ref~_Types>)
(assert (=>
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (not (= pathType_V0@131@00 3))
    (not (= pathType_V0@131@00 1))
    (not (= pathType_V0@131@00 2)))
  (=
    (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=>
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (= pathType_V0@131@00 3)
    (not (= pathType_V0@131@00 1))
    (not (= pathType_V0@131@00 2)))
  (=
    (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=>
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (not (= pathType_V0@131@00 3))
    (= pathType_V0@131@00 1)
    (not (= pathType_V0@131@00 2)))
  (=
    (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(assert (=>
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (not (= pathType_V0@131@00 3))
    (not (= pathType_V0@131@00 1))
    (= pathType_V0@131@00 2))
  (=
    (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@428@00))
(assert (and
  (< $k@428@00 $k@426@00)
  (<= $Perm.No (- $k@426@00 $k@428@00))
  (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    $Snap.unit)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    $Snap.unit)
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))
    4)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0)
  (<= $Perm.No $k@427@00)
  (<= $k@427@00 $Perm.Write)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(assert (=>
  (not (= pathType_V0@131@00 2))
  (and
    (not (= pathType_V0@131@00 2))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=>
  (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
  (and
    (not (= pathType_V0@131@00 1))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
(assert (=>
  (and
    (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
    (not (= pathType_V0@131@00 3)))
  (and
    (not (= pathType_V0@131@00 3))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(assert (=>
  (and
    (and
      (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
      (not (= pathType_V0@131@00 3)))
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))
; Joined path conditions
(assert (and
  (< $k@428@00 $k@426@00)
  (<= $Perm.No (- $k@426@00 $k@428@00))
  (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    $Snap.unit)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    $Snap.unit)
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))
    4)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0)
  (<= $Perm.No $k@427@00)
  (<= $k@427@00 $Perm.Write)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(assert (=>
  (and
    (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
    (= pathType_V0@131@00 3))
  (and
    (= pathType_V0@131@00 3)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(assert (=>
  (and
    (and
      (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
      (= pathType_V0@131@00 3))
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))
; Joined path conditions
(assert (and
  (< $k@428@00 $k@426@00)
  (<= $Perm.No (- $k@426@00 $k@428@00))
  (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    $Snap.unit)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    $Snap.unit)
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))
    4)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0)
  (<= $Perm.No $k@427@00)
  (<= $k@427@00 $Perm.Write)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(assert (=>
  (and (not (= pathType_V0@131@00 2)) (= pathType_V0@131@00 1))
  (and
    (= pathType_V0@131@00 1)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
(assert (=>
  (and
    (and (not (= pathType_V0@131@00 2)) (= pathType_V0@131@00 1))
    (not (= pathType_V0@131@00 3)))
  (and
    (not (= pathType_V0@131@00 3))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(assert (=>
  (and
    (and
      (and (not (= pathType_V0@131@00 2)) (= pathType_V0@131@00 1))
      (not (= pathType_V0@131@00 3)))
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))
; Joined path conditions
(assert (and
  (< $k@428@00 $k@426@00)
  (<= $Perm.No (- $k@426@00 $k@428@00))
  (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    $Snap.unit)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    $Snap.unit)
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))
    4)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0)
  (<= $Perm.No $k@427@00)
  (<= $k@427@00 $Perm.Write)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (as Path_4cddb96f_T_Types<Types>  Types))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)
  (=>
    (< $Perm.No $k@427@00)
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    $Snap.unit)
  (not
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    $Snap.unit)
  (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(assert (=>
  (= pathType_V0@131@00 2)
  (and
    (= pathType_V0@131@00 2)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=>
  (and (= pathType_V0@131@00 2) (not (= pathType_V0@131@00 1)))
  (and
    (not (= pathType_V0@131@00 1))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
(assert (=>
  (and
    (and (= pathType_V0@131@00 2) (not (= pathType_V0@131@00 1)))
    (not (= pathType_V0@131@00 3)))
  (and
    (not (= pathType_V0@131@00 3))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(assert (=>
  (and
    (and
      (and (= pathType_V0@131@00 2) (not (= pathType_V0@131@00 1)))
      (not (= pathType_V0@131@00 3)))
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
  (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)))
(assert (or
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (not (= pathType_V0@131@00 3))
    (not (= pathType_V0@131@00 1))
    (= pathType_V0@131@00 2))
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (not (= pathType_V0@131@00 3))
    (= pathType_V0@131@00 1)
    (not (= pathType_V0@131@00 2)))
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (= pathType_V0@131@00 3)
    (not (= pathType_V0@131@00 1))
    (not (= pathType_V0@131@00 2)))
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (not (= pathType_V0@131@00 3))
    (not (= pathType_V0@131@00 1))
    (not (= pathType_V0@131@00 2)))))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 192 | !(pathType_V0@131@00 < slen[Int](First:(Second:(Second:(s@$)))))]
(assert (not
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget16of17(s_V0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@425@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@427@00))
(assert ($Perm.isReadVar $k@428@00))
(assert (=>
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
  (and
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (=>
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (not (= pathType_V0@131@00 3))
        (not (= pathType_V0@131@00 1))
        (not (= pathType_V0@131@00 2)))
      (=
        (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=>
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (= pathType_V0@131@00 3)
        (not (= pathType_V0@131@00 1))
        (not (= pathType_V0@131@00 2)))
      (=
        (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=>
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (not (= pathType_V0@131@00 3))
        (= pathType_V0@131@00 1)
        (not (= pathType_V0@131@00 2)))
      (=
        (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (not (= pathType_V0@131@00 3))
        (not (= pathType_V0@131@00 1))
        (= pathType_V0@131@00 2))
      (=
        (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    (< $k@428@00 $k@426@00)
    (<= $Perm.No (- $k@426@00 $k@428@00))
    (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      $Snap.unit)
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))
      4)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0)
    (<= $Perm.No $k@427@00)
    (<= $k@427@00 $Perm.Write)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 0))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      (as Path_4cddb96f_T_Types<Types>  Types))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2)
    (=>
      (< $Perm.No $k@427@00)
      (not
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 2))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    (=>
      (not (= pathType_V0@131@00 2))
      (and
        (not (= pathType_V0@131@00 2))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)
        (=>
          (< $Perm.No $k@427@00)
          (not
            (=
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
          $Snap.unit)
        (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
          (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=>
      (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
      (and
        (not (= pathType_V0@131@00 1))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)
        (=>
          (< $Perm.No $k@427@00)
          (not
            (=
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          $Snap.unit)
        (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (=>
      (and
        (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
        (not (= pathType_V0@131@00 3)))
      (and
        (not (= pathType_V0@131@00 3))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
    (=>
      (and
        (and
          (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
          (not (= pathType_V0@131@00 3)))
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
    (=>
      (and
        (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
        (= pathType_V0@131@00 3))
      (and
        (= pathType_V0@131@00 3)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
    (=>
      (and
        (and
          (and (not (= pathType_V0@131@00 2)) (not (= pathType_V0@131@00 1)))
          (= pathType_V0@131@00 3))
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
    (=>
      (and (not (= pathType_V0@131@00 2)) (= pathType_V0@131@00 1))
      (and
        (= pathType_V0@131@00 1)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)
        (=>
          (< $Perm.No $k@427@00)
          (not
            (=
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          $Snap.unit)
        (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (=>
      (and
        (and (not (= pathType_V0@131@00 2)) (= pathType_V0@131@00 1))
        (not (= pathType_V0@131@00 3)))
      (and
        (not (= pathType_V0@131@00 3))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
    (=>
      (and
        (and
          (and (not (= pathType_V0@131@00 2)) (= pathType_V0@131@00 1))
          (not (= pathType_V0@131@00 3)))
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
    (=>
      (= pathType_V0@131@00 2)
      (and
        (= pathType_V0@131@00 2)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1)
        (=>
          (< $Perm.No $k@427@00)
          (not
            (=
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 1))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
          $Snap.unit)
        (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
          (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=>
      (and (= pathType_V0@131@00 2) (not (= pathType_V0@131@00 1)))
      (and
        (not (= pathType_V0@131@00 1))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3)
        (=>
          (< $Perm.No $k@427@00)
          (not
            (=
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) 3))
              $Ref.null)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          $Snap.unit)
        (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (=>
      (and
        (and (= pathType_V0@131@00 2) (not (= pathType_V0@131@00 1)))
        (not (= pathType_V0@131@00 3)))
      (and
        (not (= pathType_V0@131@00 3))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
          $Snap.unit)
        (not
          (=
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))
            (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
    (=>
      (and
        (and
          (and (= pathType_V0@131@00 2) (not (= pathType_V0@131@00 1)))
          (not (= pathType_V0@131@00 3)))
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
    (or
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (not (= pathType_V0@131@00 3))
        (not (= pathType_V0@131@00 1))
        (= pathType_V0@131@00 2))
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (not (= pathType_V0@131@00 3))
        (= pathType_V0@131@00 1)
        (not (= pathType_V0@131@00 2)))
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (= pathType_V0@131@00 3)
        (not (= pathType_V0@131@00 1))
        (not (= pathType_V0@131@00 2)))
      (and
        (<
          pathType_V0@131@00
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
        (not (= pathType_V0@131@00 3))
        (not (= pathType_V0@131@00 1))
        (not (= pathType_V0@131@00 2)))))))
; Joined path conditions
(assert (or
  (not
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
  (<
    pathType_V0@131@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))))
(assert (=
  result@132@00
  (ite
    (<
      pathType_V0@131@00
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
    (joined_unfolding@429@00 s@$ s_V0@130@00 pathType_V0@131@00)
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@130@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@131@00 Int)) (!
  (and
    ($Perm.isReadVar $k@424@00)
    ($Perm.isReadVar $k@425@00)
    ($Perm.isReadVar $k@426@00)
    ($Perm.isReadVar $k@427@00)
    ($Perm.isReadVar $k@428@00)
    (=>
      (getPathPure_840d9458_PMSCION%precondition s@$ s_V0@130@00 pathType_V0@131@00)
      (=
        (getPathPure_840d9458_PMSCION s@$ s_V0@130@00 pathType_V0@131@00)
        (ite
          (<
            pathType_V0@131@00
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
          (ite
            (and
              (= pathType_V0@131@00 2)
              (<
                pathType_V0@131@00
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
              (not (= pathType_V0@131@00 1))
              (not (= pathType_V0@131@00 3)))
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (ite
              (and
                (not (= pathType_V0@131@00 2))
                (<
                  pathType_V0@131@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
                (= pathType_V0@131@00 1)
                (not (= pathType_V0@131@00 3)))
              ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
              (ite
                (and
                  (not (= pathType_V0@131@00 2))
                  (<
                    pathType_V0@131@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
                  (not (= pathType_V0@131@00 1))
                  (= pathType_V0@131@00 3))
                ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
                ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  :pattern ((getPathPure_840d9458_PMSCION s@$ s_V0@130@00 pathType_V0@131@00))
  :pattern ((getPathPure_840d9458_PMSCION%stateless s_V0@130@00 pathType_V0@131@00) (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@131@00))
  :qid |quant-u-346|)))
(assert (forall ((s@$ $Snap) (s_V0@130@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@131@00 Int)) (!
  true
  :pattern ((getPathPure_840d9458_PMSCION s@$ s_V0@130@00 pathType_V0@131@00))
  :qid |quant-u-347|)))
; ---------- FUNCTION pathPoolInitialized_840d9458_PMSCION----------
(declare-fun s_V0@133@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun result@134@00 () Bool)
; ----- Well-definedness of specifications -----
(set-option :timeout 0)
(push) ; 1
; [eval] (ShStructget15of17(s_V0): Ref)
(declare-const $k@430@00 $Perm)
(assert ($Perm.isReadVar $k@430@00))
(assert (<= $Perm.No $k@430@00))
(assert (<= $k@430@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@430@00)
  (not (= (ShStructget15of17<Ref> s_V0@133@00) $Ref.null))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@133@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (pathPoolInitialized_840d9458_PMSCION%limited s@$ s_V0@133@00)
    (pathPoolInitialized_840d9458_PMSCION s@$ s_V0@133@00))
  :pattern ((pathPoolInitialized_840d9458_PMSCION s@$ s_V0@133@00))
  :qid |quant-u-114|)))
(assert (forall ((s@$ $Snap) (s_V0@133@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (pathPoolInitialized_840d9458_PMSCION%stateless s_V0@133@00)
  :pattern ((pathPoolInitialized_840d9458_PMSCION%limited s@$ s_V0@133@00))
  :qid |quant-u-115|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@430@00))
(assert (<= $Perm.No $k@430@00))
(assert (<= $k@430@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@430@00)
  (not (= (ShStructget15of17<Ref> s_V0@133@00) $Ref.null))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] !((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@430@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 2
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (=
  result@134@00
  (not
    (=
      ($SortWrappers.$SnapToSlice<Ref> s@$)
      (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@133@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@430@00)
    (=>
      (pathPoolInitialized_840d9458_PMSCION%precondition s@$ s_V0@133@00)
      (=
        (pathPoolInitialized_840d9458_PMSCION s@$ s_V0@133@00)
        (not
          (=
            ($SortWrappers.$SnapToSlice<Ref> s@$)
            (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))))
  :pattern ((pathPoolInitialized_840d9458_PMSCION s@$ s_V0@133@00))
  :qid |quant-u-348|)))
(assert (forall ((s@$ $Snap) (s_V0@133@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=>
    (pathPoolInitialized_840d9458_PMSCION%precondition s@$ s_V0@133@00)
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
  :pattern ((pathPoolInitialized_840d9458_PMSCION s@$ s_V0@133@00))
  :qid |quant-u-349|)))
; ---------- FUNCTION unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref----------
(declare-fun y@135@00 () Emb_2_Interfaceempty_interface$$$_S_$$$)
(declare-fun result@136@00 () ShArray<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@431@00 $Snap)
(assert (= $t@431@00 ($Snap.combine ($Snap.first $t@431@00) ($Snap.second $t@431@00))))
(assert (= ($Snap.first $t@431@00) $Snap.unit))
; [eval] (ShArraylen(result): Int) == 2 || result == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(result): Int) == 2
; [eval] (ShArraylen(result): Int)
(push) ; 2
; [then-branch: 203 | ShArraylen[Int](result@136@00) == 2 | live]
; [else-branch: 203 | ShArraylen[Int](result@136@00) != 2 | live]
(push) ; 3
; [then-branch: 203 | ShArraylen[Int](result@136@00) == 2]
(assert (= (ShArraylen<Int> result@136@00) 2))
(pop) ; 3
(push) ; 3
; [else-branch: 203 | ShArraylen[Int](result@136@00) != 2]
(assert (not (= (ShArraylen<Int> result@136@00) 2)))
; [eval] result == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_2_Interfaceempty_interface$$$_S_$$$()
(push) ; 4
(assert (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> result@136@00) 2))
  (and
    (not (= (ShArraylen<Int> result@136@00) 2))
    (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))))
(assert (or
  (not (= (ShArraylen<Int> result@136@00) 2))
  (= (ShArraylen<Int> result@136@00) 2)))
(assert (or
  (= (ShArraylen<Int> result@136@00) 2)
  (= result@136@00 (arrayNil_2_Interfaceempty_interface$$$_S_$$$ $Snap.unit))))
(assert (= ($Snap.second $t@431@00) $Snap.unit))
; [eval] box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == y
; [eval] box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
; [eval] (ShArraylen(x): Int) == 2 || x == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 2
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 204 | ShArraylen[Int](result@136@00) == 2 | live]
; [else-branch: 204 | ShArraylen[Int](result@136@00) != 2 | live]
(push) ; 4
; [then-branch: 204 | ShArraylen[Int](result@136@00) == 2]
(assert (= (ShArraylen<Int> result@136@00) 2))
(pop) ; 4
(push) ; 4
; [else-branch: 204 | ShArraylen[Int](result@136@00) != 2]
(assert (not (= (ShArraylen<Int> result@136@00) 2)))
; [eval] x == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_2_Interfaceempty_interface$$$_S_$$$()
(push) ; 5
(assert (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@136@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@136@00))
(assert (=
  (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit result@136@00)
  y@135@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@135@00 Emb_2_Interfaceempty_interface$$$_S_$$$)) (!
  (=
    (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00)
    (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@135@00))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@135@00))
  :qid |quant-u-116|)))
(assert (forall ((s@$ $Snap) (y@135@00 Emb_2_Interfaceempty_interface$$$_S_$$$)) (!
  (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless y@135@00)
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))
  :qid |quant-u-117|)))
(assert (forall ((s@$ $Snap) (y@135@00 Emb_2_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@136@00 (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))) (=>
    (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@135@00)
    (and
      (or
        (= (ShArraylen<Int> result@136@00) 2)
        (=
          result@136@00
          (arrayNil_2_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@136@00)
        y@135@00))))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))
  :qid |quant-u-350|)))
(assert (forall ((s@$ $Snap) (y@135@00 Emb_2_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@136@00 (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))) (=>
    (and
      (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@135@00)
      (not (= (ShArraylen<Int> result@136@00) 2)))
    (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))
  :qid |quant-u-351|)))
(assert (forall ((s@$ $Snap) (y@135@00 Emb_2_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@136@00 (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))) (=>
    (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@135@00)
    (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@136@00)))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@135@00))
  :qid |quant-u-352|)))
; ---------- FUNCTION box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref----------
(declare-fun x@137@00 () ShArray<Ref>)
(declare-fun result@138@00 () Emb_2_Interfaceempty_interface$$$_S_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] (ShArraylen(x): Int) == 2 || x == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 2
; [eval] (ShArraylen(x): Int)
(push) ; 2
; [then-branch: 205 | ShArraylen[Int](x@137@00) == 2 | live]
; [else-branch: 205 | ShArraylen[Int](x@137@00) != 2 | live]
(push) ; 3
; [then-branch: 205 | ShArraylen[Int](x@137@00) == 2]
(assert (= (ShArraylen<Int> x@137@00) 2))
(pop) ; 3
(push) ; 3
; [else-branch: 205 | ShArraylen[Int](x@137@00) != 2]
(assert (not (= (ShArraylen<Int> x@137@00) 2)))
; [eval] x == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_2_Interfaceempty_interface$$$_S_$$$()
(push) ; 4
(assert (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= (ShArraylen<Int> x@137@00) 2))
  (and
    (not (= (ShArraylen<Int> x@137@00) 2))
    (arrayNil_2_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))))
(assert (or (not (= (ShArraylen<Int> x@137@00) 2)) (= (ShArraylen<Int> x@137@00) 2)))
(assert (or
  (= (ShArraylen<Int> x@137@00) 2)
  (= x@137@00 (arrayNil_2_Interfaceempty_interface$$$_S_$$$ $Snap.unit))))
(declare-const $t@432@00 $Snap)
(assert (= $t@432@00 $Snap.unit))
; [eval] unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == x
; [eval] unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result)
(push) ; 2
(assert (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@138@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@138@00))
(assert (=
  (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit result@138@00)
  x@137@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@137@00 ShArray<Ref>)) (!
  (=
    (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@137@00)
    (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@137@00))
  :pattern ((box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@137@00))
  :qid |quant-u-118|)))
(assert (forall ((s@$ $Snap) (x@137@00 ShArray<Ref>)) (!
  (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless x@137@00)
  :pattern ((box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@137@00))
  :qid |quant-u-119|)))
(assert (forall ((s@$ $Snap) (x@137@00 ShArray<Ref>)) (!
  (let ((result@138@00 (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@137@00))) (=>
    (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@137@00)
    (=
      (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@138@00)
      x@137@00)))
  :pattern ((box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@137@00))
  :qid |quant-u-353|)))
(assert (forall ((s@$ $Snap) (x@137@00 ShArray<Ref>)) (!
  (let ((result@138@00 (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@137@00))) (=>
    (box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@137@00)
    (unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@138@00)))
  :pattern ((box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@137@00))
  :qid |quant-u-354|)))
; ---------- FUNCTION unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes----------
(declare-fun y@139@00 () Emb_2_Interfaceempty_interface$$$$_E_$$$)
(declare-fun result@140@00 () Seq<Tuple2<Ref~_Types>>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@433@00 $Snap)
(assert (= $t@433@00 ($Snap.combine ($Snap.first $t@433@00) ($Snap.second $t@433@00))))
(assert (= ($Snap.first $t@433@00) $Snap.unit))
; [eval] |result| == 2
; [eval] |result|
(assert (= (Seq_length result@140@00) 2))
(assert (= ($Snap.second $t@433@00) $Snap.unit))
; [eval] box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == y
; [eval] box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)
(push) ; 2
; [eval] |x| == 2
; [eval] |x|
(assert (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@140@00))
(pop) ; 2
; Joined path conditions
(assert (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@140@00))
(assert (=
  (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit result@140@00)
  y@139@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (y@139@00 Emb_2_Interfaceempty_interface$$$$_E_$$$)) (!
  (Seq_equal
    (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00)
    (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ y@139@00))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ y@139@00))
  :qid |quant-u-120|)))
(assert (forall ((s@$ $Snap) (y@139@00 Emb_2_Interfaceempty_interface$$$$_E_$$$)) (!
  (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless y@139@00)
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))
  :qid |quant-u-121|)))
(assert (forall ((s@$ $Snap) (y@139@00 Emb_2_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@140@00 (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))) (=>
    (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ y@139@00)
    (and
      (= (Seq_length result@140@00) 2)
      (=
        (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited $Snap.unit result@140@00)
        y@139@00))))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))
  :qid |quant-u-355|)))
(assert (forall ((s@$ $Snap) (y@139@00 Emb_2_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@140@00 (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))) true)
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))
  :qid |quant-u-356|)))
(assert (forall ((s@$ $Snap) (y@139@00 Emb_2_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@140@00 (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))) (=>
    (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ y@139@00)
    (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@140@00)))
  :pattern ((unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@139@00))
  :qid |quant-u-357|)))
; ---------- FUNCTION box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes----------
(declare-fun x@141@00 () Seq<Tuple2<Ref~_Types>>)
(declare-fun result@142@00 () Emb_2_Interfaceempty_interface$$$$_E_$$$)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ $Snap.unit))
; [eval] |x| == 2
; [eval] |x|
(assert (= (Seq_length x@141@00) 2))
(declare-const $t@434@00 $Snap)
(assert (= $t@434@00 $Snap.unit))
; [eval] unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == x
; [eval] unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)
(push) ; 2
(assert (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@142@00))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@142@00))
(assert (Seq_equal
  (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit result@142@00)
  x@141@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (x@141@00 Seq<Tuple2<Ref~_Types>>)) (!
  (=
    (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@141@00)
    (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ x@141@00))
  :pattern ((box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ x@141@00))
  :qid |quant-u-122|)))
(assert (forall ((s@$ $Snap) (x@141@00 Seq<Tuple2<Ref~_Types>>)) (!
  (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless x@141@00)
  :pattern ((box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@141@00))
  :qid |quant-u-123|)))
(assert (forall ((s@$ $Snap) (x@141@00 Seq<Tuple2<Ref~_Types>>)) (!
  (let ((result@142@00 (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@141@00))) (=>
    (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ x@141@00)
    (Seq_equal
      (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited $Snap.unit result@142@00)
      x@141@00)))
  :pattern ((box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@141@00))
  :qid |quant-u-358|)))
(assert (forall ((s@$ $Snap) (x@141@00 Seq<Tuple2<Ref~_Types>>)) (!
  (let ((result@142@00 (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@141@00))) (=>
    (box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ x@141@00)
    (unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@142@00)))
  :pattern ((box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@141@00))
  :qid |quant-u-359|)))
; ---------- FUNCTION sliceDefault_Intbyte$$$_S_$$$----------
(declare-fun result@143@00 () Slice<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@435@00 $Snap)
(assert (= $t@435@00 ($Snap.combine ($Snap.first $t@435@00) ($Snap.second $t@435@00))))
(assert (= ($Snap.first $t@435@00) $Snap.unit))
; [eval] (soffset(result): Int) == 0
; [eval] (soffset(result): Int)
(assert (= (soffset<Int> result@143@00) 0))
(assert (=
  ($Snap.second $t@435@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@435@00))
    ($Snap.second ($Snap.second $t@435@00)))))
(assert (= ($Snap.first ($Snap.second $t@435@00)) $Snap.unit))
; [eval] (slen(result): Int) == 0
; [eval] (slen(result): Int)
(assert (= (slen<Int> result@143@00) 0))
(assert (=
  ($Snap.second ($Snap.second $t@435@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@435@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@435@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@435@00))) $Snap.unit))
; [eval] (scap(result): Int) == 0
; [eval] (scap(result): Int)
(assert (= (scap<Int> result@143@00) 0))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@435@00))) $Snap.unit))
; [eval] (sarray(result): ShArray[Ref]) == unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_1_Intbyte$$$_S_$$$()))
; [eval] (sarray(result): ShArray[Ref])
; [eval] unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_1_Intbyte$$$_S_$$$()))
; [eval] box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_1_Intbyte$$$_S_$$$())
; [eval] arrayNil_1_Intbyte$$$_S_$$$()
(push) ; 2
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit))
(push) ; 2
; [eval] (ShArraylen(x): Int) == 1 || x == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 1
; [eval] (ShArraylen(x): Int)
(push) ; 3
; [then-branch: 206 | ShArraylen[Int](arrayNil_1_Intbyte$$$_S_$$$(_)) == 1 | live]
; [else-branch: 206 | ShArraylen[Int](arrayNil_1_Intbyte$$$_S_$$$(_)) != 1 | live]
(push) ; 4
; [then-branch: 206 | ShArraylen[Int](arrayNil_1_Intbyte$$$_S_$$$(_)) == 1]
(assert (= (ShArraylen<Int> (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)) 1))
(pop) ; 4
(push) ; 4
; [else-branch: 206 | ShArraylen[Int](arrayNil_1_Intbyte$$$_S_$$$(_)) != 1]
(assert (not (= (ShArraylen<Int> (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)) 1)))
; [eval] x == arrayNil_1_Intbyte$$$_S_$$$()
; [eval] arrayNil_1_Intbyte$$$_S_$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= (ShArraylen<Int> (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)) 1))
  (= (ShArraylen<Int> (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)) 1)))
(assert (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))
(pop) ; 2
; Joined path conditions
(assert (and
  (or
    (not (= (ShArraylen<Int> (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)) 1))
    (= (ShArraylen<Int> (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)) 1))
  (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))
(push) ; 2
(assert (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))
(assert (=
  (sarray<ShArray<Ref>> result@143@00)
  (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (sliceDefault_Intbyte$$$_S_$$$%limited s@$)
    (sliceDefault_Intbyte$$$_S_$$$ s@$))
  :pattern ((sliceDefault_Intbyte$$$_S_$$$ s@$))
  :qid |quant-u-124|)))
(assert (forall ((s@$ $Snap)) (!
  (as sliceDefault_Intbyte$$$_S_$$$%stateless  Bool)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-125|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@143@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (= (soffset<Int> result@143@00) 0)
      (= (slen<Int> result@143@00) 0)
      (= (scap<Int> result@143@00) 0)
      (=
        (sarray<ShArray<Ref>> result@143@00)
        (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))))))
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-360|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@143@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-361|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@143@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-362|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@143@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-363|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@143@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (and
        (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit)
        (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))
      (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))))
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-364|)))
; ---------- FUNCTION getNumHops_daeaf66a_PMBase----------
(declare-fun b_V0@144@00 () ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun result@145@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $k@436@00 $Perm)
(assert ($Perm.isReadVar $k@436@00))
(assert (<= $Perm.No $k@436@00))
(declare-const $t@437@00 $Snap)
(assert (= $t@437@00 $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@145@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b_V0@144@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (getNumHops_daeaf66a_PMBase%limited s@$ b_V0@144@00)
    (getNumHops_daeaf66a_PMBase s@$ b_V0@144@00))
  :pattern ((getNumHops_daeaf66a_PMBase s@$ b_V0@144@00))
  :qid |quant-u-126|)))
(assert (forall ((s@$ $Snap) (b_V0@144@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (getNumHops_daeaf66a_PMBase%stateless b_V0@144@00)
  :pattern ((getNumHops_daeaf66a_PMBase%limited s@$ b_V0@144@00))
  :qid |quant-u-127|)))
(assert (forall ((s@$ $Snap) (b_V0@144@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@145@00 (getNumHops_daeaf66a_PMBase%limited s@$ b_V0@144@00))) (and
    ($Perm.isReadVar $k@436@00)
    (=>
      (getNumHops_daeaf66a_PMBase%precondition s@$ b_V0@144@00)
      (<= 0 result@145@00))))
  :pattern ((getNumHops_daeaf66a_PMBase%limited s@$ b_V0@144@00))
  :qid |quant-u-365|)))
(assert (forall ((s@$ $Snap) (b_V0@144@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@145@00 (getNumHops_daeaf66a_PMBase%limited s@$ b_V0@144@00))) true)
  :pattern ((getNumHops_daeaf66a_PMBase%limited s@$ b_V0@144@00))
  :qid |quant-u-366|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@436@00))
(assert (<= $Perm.No $k@436@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(Mem_daeaf66a_PMBase(b_V0), wildcard) in (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$)
(declare-const $k@438@00 $Perm)
(assert ($Perm.isReadVar $k@438@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@439@00 $Perm)
(assert ($Perm.isReadVar $k@439@00))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@436@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@439@00 $k@436@00))
(assert (<= $Perm.No (- $k@436@00 $k@439@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@439@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Mem_daeaf66a_PMBase%trigger s@$ b_V0@144@00))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= $Perm.No $k@438@00))
(assert (<= $k@438@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@438@00)
  (not (= (ShStructget1of3<Ref> b_V0@144@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> b_V0@144@00) (ShStructget2of3<Ref> b_V0@144@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@438@00)
  (not (= (ShStructget2of3<Ref> b_V0@144@00) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget0of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(assert (=>
  (< $Perm.No $k@438@00)
  (not
    (=
      (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget1of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@438@00)
  (not
    (=
      (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 0): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))))
(pop) ; 3
; Joined path conditions
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@438@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 0)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 1): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@438@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 2): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 1)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@438@00)
  (not
    (=
      (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 2)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ <= 3
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  $Snap.unit))
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ ==> 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | 0 < First:(s@$) | live]
; [else-branch: 207 | !(0 < First:(s@$)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 207 | 0 < First:(s@$)]
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
; [eval] 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 207 | !(0 < First:(s@$))]
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
(assert (=>
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@439@00))
(assert (and
  (< $k@439@00 $k@436@00)
  (<= $Perm.No (- $k@436@00 $k@439@00))
  (Mem_daeaf66a_PMBase%trigger s@$ b_V0@144@00)
  (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
  (<= $Perm.No $k@438@00)
  (<= $k@438@00 $Perm.Write)
  (=>
    (< $Perm.No $k@438@00)
    (not (= (ShStructget1of3<Ref> b_V0@144@00) $Ref.null)))
  (=
    ($Snap.second s@$)
    ($Snap.combine
      ($Snap.first ($Snap.second s@$))
      ($Snap.second ($Snap.second s@$))))
  (=>
    (< $Perm.No $k@438@00)
    (not (= (ShStructget2of3<Ref> b_V0@144@00) $Ref.null)))
  (=
    ($Snap.second ($Snap.second s@$))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second s@$)))
      ($Snap.second ($Snap.second ($Snap.second s@$)))))
  (=>
    (< $Perm.No $k@438@00)
    (not
      (=
        (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second s@$)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  (=>
    (< $Perm.No $k@438@00)
    (not
      (=
        (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00)))
  (=>
    (< $Perm.No $k@438@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 0)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  (=>
    (< $Perm.No $k@438@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 1)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  (=>
    (< $Perm.No $k@438@00)
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@144@00))) 2)
        $Ref.null)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first s@$)) 3)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    $Snap.unit)
  (or
    (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  (=>
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first s@$)))
    (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))))
(assert (= result@145@00 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$)))))
; [eval] 0 <= result
(set-option :timeout 0)
(push) ; 2
(assert (not (<= 0 result@145@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 result@145@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (b_V0@144@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@436@00)
    ($Perm.isReadVar $k@438@00)
    ($Perm.isReadVar $k@439@00)
    (=>
      (getNumHops_daeaf66a_PMBase%precondition s@$ b_V0@144@00)
      (=
        (getNumHops_daeaf66a_PMBase s@$ b_V0@144@00)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
  :pattern ((getNumHops_daeaf66a_PMBase s@$ b_V0@144@00))
  :qid |quant-u-367|)))
(assert (forall ((s@$ $Snap) (b_V0@144@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  true
  :pattern ((getNumHops_daeaf66a_PMBase s@$ b_V0@144@00))
  :qid |quant-u-368|)))
; ---------- FUNCTION shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$----------
(declare-fun result@146@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(declare-const $t@440@00 $Snap)
(assert (= $t@440@00 ($Snap.combine ($Snap.first $t@440@00) ($Snap.second $t@440@00))))
(assert (= ($Snap.first $t@440@00) $Snap.unit))
; [eval] (ShStructget0of17(result): ShStruct2[Ref, Ref]) == shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of17(result): ShStruct2[Ref, Ref])
; [eval] shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(push) ; 2
(assert (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  (ShStructget0of17<ShStruct2<Ref~_Ref>> result@146@00)
  (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second $t@440@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@440@00))
    ($Snap.second ($Snap.second $t@440@00)))))
(assert (= ($Snap.first ($Snap.second $t@440@00)) $Snap.unit))
; [eval] (ShStructget1of17(result): Ref) == null
; [eval] (ShStructget1of17(result): Ref)
(assert (= (ShStructget1of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second $t@440@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@440@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@440@00))) $Snap.unit))
; [eval] (ShStructget2of17(result): Ref) == null
; [eval] (ShStructget2of17(result): Ref)
(assert (= (ShStructget2of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@440@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@440@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@440@00))))
  $Snap.unit))
; [eval] (ShStructget3of17(result): Ref) == null
; [eval] (ShStructget3of17(result): Ref)
(assert (= (ShStructget3of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))
  $Snap.unit))
; [eval] (ShStructget4of17(result): Ref) == null
; [eval] (ShStructget4of17(result): Ref)
(assert (= (ShStructget4of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))
  $Snap.unit))
; [eval] (ShStructget5of17(result): Ref) == null
; [eval] (ShStructget5of17(result): Ref)
(assert (= (ShStructget5of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))
  $Snap.unit))
; [eval] (ShStructget6of17(result): Ref) == null
; [eval] (ShStructget6of17(result): Ref)
(assert (= (ShStructget6of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))
  $Snap.unit))
; [eval] (ShStructget7of17(result): Ref) == null
; [eval] (ShStructget7of17(result): Ref)
(assert (= (ShStructget7of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))
  $Snap.unit))
; [eval] (ShStructget8of17(result): Ref) == null
; [eval] (ShStructget8of17(result): Ref)
(assert (= (ShStructget8of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))
  $Snap.unit))
; [eval] (ShStructget9of17(result): Ref) == null
; [eval] (ShStructget9of17(result): Ref)
(assert (= (ShStructget9of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))
  $Snap.unit))
; [eval] (ShStructget10of17(result): Ref) == null
; [eval] (ShStructget10of17(result): Ref)
(assert (= (ShStructget10of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))
  $Snap.unit))
; [eval] (ShStructget11of17(result): Ref) == null
; [eval] (ShStructget11of17(result): Ref)
(assert (= (ShStructget11of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))
  $Snap.unit))
; [eval] (ShStructget12of17(result): Ref) == null
; [eval] (ShStructget12of17(result): Ref)
(assert (= (ShStructget12of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))
  $Snap.unit))
; [eval] (ShStructget13of17(result): Ref) == null
; [eval] (ShStructget13of17(result): Ref)
(assert (= (ShStructget13of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))))
  $Snap.unit))
; [eval] (ShStructget14of17(result): Ref) == null
; [eval] (ShStructget14of17(result): Ref)
(assert (= (ShStructget14of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget15of17(result): Ref) == null
; [eval] (ShStructget15of17(result): Ref)
(assert (= (ShStructget15of17<Ref> result@146@00) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@440@00))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget16of17(result): Ref) == null
; [eval] (ShStructget16of17(result): Ref)
(assert (= (ShStructget16of17<Ref> result@146@00) $Ref.null))
(pop) ; 1
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$)
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ s@$))
  :qid |quant-u-128|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-129|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@146@00 (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of17<ShStruct2<Ref~_Ref>> result@146@00)
        (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))
      (and
        (= (ShStructget1of17<Ref> result@146@00) $Ref.null)
        (and
          (= (ShStructget2of17<Ref> result@146@00) $Ref.null)
          (and
            (= (ShStructget3of17<Ref> result@146@00) $Ref.null)
            (and
              (= (ShStructget4of17<Ref> result@146@00) $Ref.null)
              (and
                (= (ShStructget5of17<Ref> result@146@00) $Ref.null)
                (and
                  (= (ShStructget6of17<Ref> result@146@00) $Ref.null)
                  (and
                    (= (ShStructget7of17<Ref> result@146@00) $Ref.null)
                    (and
                      (= (ShStructget8of17<Ref> result@146@00) $Ref.null)
                      (and
                        (= (ShStructget9of17<Ref> result@146@00) $Ref.null)
                        (and
                          (= (ShStructget10of17<Ref> result@146@00) $Ref.null)
                          (and
                            (= (ShStructget11of17<Ref> result@146@00) $Ref.null)
                            (and
                              (=
                                (ShStructget12of17<Ref> result@146@00)
                                $Ref.null)
                              (and
                                (=
                                  (ShStructget13of17<Ref> result@146@00)
                                  $Ref.null)
                                (and
                                  (=
                                    (ShStructget14of17<Ref> result@146@00)
                                    $Ref.null)
                                  (and
                                    (=
                                      (ShStructget15of17<Ref> result@146@00)
                                      $Ref.null)
                                    (=
                                      (ShStructget16of17<Ref> result@146@00)
                                      $Ref.null)))))))))))))))))))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-369|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@146@00 (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition s@$)
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-370|)))
; ---------- FUNCTION HasOneHopPath_840d9458_PMSCION----------
(declare-fun s_V0@147@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ub_V0@148@00 () Slice<Ref>)
(declare-fun result@149@00 () Bool)
; ----- Well-definedness of specifications -----
(push) ; 1
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(declare-const $k@441@00 $Perm)
(assert ($Perm.isReadVar $k@441@00))
(assert (<= $Perm.No $k@441@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@147@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ub_V0@148@00 Slice<Ref>)) (!
  (=
    (HasOneHopPath_840d9458_PMSCION%limited s@$ s_V0@147@00 ub_V0@148@00)
    (HasOneHopPath_840d9458_PMSCION s@$ s_V0@147@00 ub_V0@148@00))
  :pattern ((HasOneHopPath_840d9458_PMSCION s@$ s_V0@147@00 ub_V0@148@00))
  :qid |quant-u-130|)))
(assert (forall ((s@$ $Snap) (s_V0@147@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ub_V0@148@00 Slice<Ref>)) (!
  (HasOneHopPath_840d9458_PMSCION%stateless s_V0@147@00 ub_V0@148@00)
  :pattern ((HasOneHopPath_840d9458_PMSCION%limited s@$ s_V0@147@00 ub_V0@148@00))
  :qid |quant-u-131|)))
; ----- Verification of function body and postcondition -----
(push) ; 1
(assert ($Perm.isReadVar $k@441@00))
(assert (<= $Perm.No $k@441@00))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (unfolding acc(dynamic_pred_0((tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types]), ub_V0), wildcard) in typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(declare-const $k@442@00 $Perm)
(assert ($Perm.isReadVar $k@442@00))
(set-option :timeout 0)
(push) ; 2
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(declare-const $k@443@00 $Perm)
(assert ($Perm.isReadVar $k@443@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@441@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@443@00 $k@441@00))
(assert (<= $Perm.No (- $k@441@00 $k@443@00)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@443@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ub_V0@148@00))
; [eval] (get1of2(i): Types) == pointer_Types(EndToEndExtn_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(EndToEndExtn_840d9458_T_Types())
; [eval] EndToEndExtn_840d9458_T_Types()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types]) | dead]
; [else-branch: 208 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 208 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(EndToEndExtnSkipper_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(EndToEndExtnSkipper_840d9458_T_Types())
; [eval] EndToEndExtnSkipper_840d9458_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types]) | dead]
; [else-branch: 209 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 209 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(HopByHopExtn_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(HopByHopExtn_840d9458_T_Types())
; [eval] HopByHopExtn_840d9458_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types]) | dead]
; [else-branch: 210 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 210 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(HopByHopExtnSkipper_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(HopByHopExtnSkipper_840d9458_T_Types())
; [eval] HopByHopExtnSkipper_840d9458_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types]) | dead]
; [else-branch: 211 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 211 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCION_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 212 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](SCION_840d9458_T_Types[Types]) | live]
; [else-branch: 212 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) != pointer_Types[Types](SCION_840d9458_T_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 212 | get1of2[Types](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))) == pointer_Types[Types](SCION_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
; [eval] (ShStructget1of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No $k@442@00))
(assert (<= $k@442@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
; [eval] (ShStructget2of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second s@$))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second s@$)))
    ($Snap.second ($Snap.second ($Snap.second s@$))))))
; [eval] (ShStructget3of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget3of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second s@$)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
; [eval] (ShStructget4of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget4of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
; [eval] (ShStructget6of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget6of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget7of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
; [eval] (ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<= $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.Write))
(assert (=>
  (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(pop) ; 8
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
; [eval] (ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(pop) ; 8
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  $Snap.unit))
; [eval] 0 <= 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 8
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 8
; Joined path conditions
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | True | live]
; [else-branch: 213 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 213 | True]
(declare-const $k@444@00 $Perm)
(assert ($Perm.isReadVar $k@444@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@444@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@444@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@445@00 $Perm)
(assert ($Perm.isReadVar $k@445@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@445@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@445@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | True | live]
; [else-branch: 214 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 214 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 215 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 215 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 13
; [then-branch: 215 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 215 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(push) ; 10
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 216 | False | dead]
; [else-branch: 216 | True | live]
(push) ; 10
; [else-branch: 216 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 10
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@444@00))
(assert ($Perm.isReadVar $k@445@00))
(assert (and
  (< (* $k@444@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@445@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (or
    (not
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(assert (<=
  0
  (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  $Snap.unit))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4 <= (slen(x0): Int)
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(assert (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)
  (slen<Int> ub_V0@148@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  $Snap.unit))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) <= (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | True | live]
; [else-branch: 217 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 217 | True]
(declare-const $k@446@00 $Perm)
(assert ($Perm.isReadVar $k@446@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@446@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@446@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@447@00 $Perm)
(assert ($Perm.isReadVar $k@447@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@447@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@447@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | True | live]
; [else-branch: 218 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 218 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 219 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 219 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 13
; [then-branch: 219 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 219 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 220 | False | dead]
; [else-branch: 220 | True | live]
(push) ; 10
; [else-branch: 220 | True]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@446@00))
(assert ($Perm.isReadVar $k@447@00))
(assert (and
  (< (* $k@446@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@447@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | True | live]
; [else-branch: 221 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 221 | True]
(declare-const $k@448@00 $Perm)
(assert ($Perm.isReadVar $k@448@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@448@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@448@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@449@00 $Perm)
(assert ($Perm.isReadVar $k@449@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@449@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@449@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | True | live]
; [else-branch: 222 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 222 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 223 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 223 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 13
; [then-branch: 223 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 223 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 224 | False | dead]
; [else-branch: 224 | True | live]
(push) ; 10
; [else-branch: 224 | True]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@448@00))
(assert ($Perm.isReadVar $k@449@00))
(assert (and
  (< (* $k@448@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@449@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)
  (scap<Int> ub_V0@148@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)
  (scap<Int> ub_V0@148@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<=
    (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4)
    (scap<Int> ub_V0@148@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
; [eval] (ShStructget0of2(fn$$0): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget0of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] (ShStructget0of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref)
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
(push) ; 9
(assert (not (<=
  0
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 0 (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<=
    0
    (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 0 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 0 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget1of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4, (slen(x0): Int))
; [eval] (ShStructget1of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref)
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4, (slen(x0): Int))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (slen(x0): Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 9
(assert (not (<= (slen<Int> ub_V0@148@00) (scap<Int> ub_V0@148@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> ub_V0@148@00) (scap<Int> ub_V0@148@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4) (slen<Int> ub_V0@148@00)))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= (slen<Int> ub_V0@148@00) (scap<Int> ub_V0@148@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4) (slen<Int> ub_V0@148@00))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4) (slen<Int> ub_V0@148@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  $Snap.unit))
; [eval] 12 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 12 (slen<Int> ub_V0@148@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 12, (slen(x0): Int))
; [eval] (slen(x0): Int)
(push) ; 8
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 12 (slen<Int> ub_V0@148@00)))
(pop) ; 8
; Joined path conditions
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 12 (slen<Int> ub_V0@148@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$ < 256
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
  256))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No $k@442@00)
  (not
    (=
      (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
; [eval] !pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@450@00 $Perm)
(assert ($Perm.isReadVar $k@450@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@450@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@450@00 $k@442@00))))
(assert (<= (- $k@442@00 (* $k@450@00 $k@442@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@442@00 (* $k@450@00 $k@442@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@450@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@450@00))
(assert (and
  (< (* $k@450@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@450@00 $k@442@00)))
  (<= (- $k@442@00 (* $k@450@00 $k@442@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@442@00 (* $k@450@00 $k@442@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 225 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))) | live]
; [else-branch: 225 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 225 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))))]
(assert (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@451@00 $Perm)
(assert ($Perm.isReadVar $k@451@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@451@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@451@00 $k@442@00))))
(assert (<= (- $k@442@00 (* $k@451@00 $k@442@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@442@00 (* $k@451@00 $k@442@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@451@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@451@00))
(assert (and
  (< (* $k@451@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@451@00 $k@442@00)))
  (<= (- $k@442@00 (* $k@451@00 $k@442@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@442@00 (* $k@451@00 $k@442@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))))
; [then-branch: 226 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))) | dead]
; [else-branch: 226 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 226 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()) ==> 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(pop) ; 10
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 227 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 227 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | True | live]
; [else-branch: 228 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 228 | True]
(declare-const $k@452@00 $Perm)
(assert ($Perm.isReadVar $k@452@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@452@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@452@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@453@00 $Perm)
(assert ($Perm.isReadVar $k@453@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@453@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@453@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | True | live]
; [else-branch: 229 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 229 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 230 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 230 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 230 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 230 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 231 | False | dead]
; [else-branch: 231 | True | live]
(push) ; 14
; [else-branch: 231 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@452@00))
(assert ($Perm.isReadVar $k@453@00))
(assert (and
  (< (* $k@452@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@453@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | True | live]
; [else-branch: 232 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 232 | True]
(declare-const $k@454@00 $Perm)
(assert ($Perm.isReadVar $k@454@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@454@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@454@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@455@00 $Perm)
(assert ($Perm.isReadVar $k@455@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@455@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@455@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 233 | True | live]
; [else-branch: 233 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 233 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 234 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 234 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 234 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 234 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 235 | False | dead]
; [else-branch: 235 | True | live]
(push) ; 14
; [else-branch: 235 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@454@00))
(assert ($Perm.isReadVar $k@455@00))
(assert (and
  (< (* $k@454@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@455@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@456@00 $Perm)
(assert ($Perm.isReadVar $k@456@00))
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@456@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@456@00 $k@442@00))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@456@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@456@00))
(assert (and
  (< (* $k@456@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@456@00 $k@442@00)))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))))
; [eval] (slen(x0): Int)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 227 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@452@00))
(assert ($Perm.isReadVar $k@453@00))
(assert ($Perm.isReadVar $k@454@00))
(assert ($Perm.isReadVar $k@455@00))
(assert ($Perm.isReadVar $k@456@00))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< (* $k@452@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@453@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (< (* $k@454@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@455@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@456@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@456@00 $k@442@00)))
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))))))
; Joined path conditions
(assert (or
  (not
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (<=
    (+
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))))
    (slen<Int> ub_V0@148@00))))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget14of17<Ref> s_V0@147@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 225 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))]
(assert (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(declare-const $k@457@00 $Perm)
(assert ($Perm.isReadVar $k@457@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@457@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@457@00 $k@442@00))))
(assert (<= (- $k@442@00 (* $k@457@00 $k@442@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@442@00 (* $k@457@00 $k@442@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@457@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@457@00))
(assert (and
  (< (* $k@457@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@457@00 $k@442@00)))
  (<= (- $k@442@00 (* $k@457@00 $k@442@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@442@00 (* $k@457@00 $k@442@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types]))))) | live]
; [else-branch: 236 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 236 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](tuple2[Tuple2[Ref, Types]](box_Poly[Ref](s_V0@147@00), pointer_Types[Types](SCION_840d9458_T_Types[Types])))))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 10
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 10
; Joined path conditions
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == getPathPure_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] getPathPure_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= pathType_V0
; [eval] pathType_V0 < 256
(declare-const $k@458@00 $Perm)
(assert ($Perm.isReadVar $k@458@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@458@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@458@00 $k@442@00))))
(assert (<= (- $k@442@00 (* $k@458@00 $k@442@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@442@00 (* $k@458@00 $k@442@00)))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@458@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@459@00 $Perm)
(assert ($Perm.isReadVar $k@459@00))
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@459@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@459@00 $k@442@00))))
(assert (<= (- $k@442@00 (* $k@459@00 $k@442@00)) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@442@00 (* $k@459@00 $k@442@00)))
  (not
    (=
      (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@459@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const $k@460@00 $Perm)
(assert ($Perm.isReadVar $k@460@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget16of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@460@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@460@00 $k@442@00))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@460@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@458@00))
(assert ($Perm.isReadVar $k@459@00))
(assert ($Perm.isReadVar $k@460@00))
(assert (and
  (< (* $k@458@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@458@00 $k@442@00)))
  (<= (- $k@442@00 (* $k@458@00 $k@442@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@442@00 (* $k@458@00 $k@442@00)))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@459@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@459@00 $k@442@00)))
  (<= (- $k@442@00 (* $k@459@00 $k@442@00)) $Perm.Write)
  (=>
    (< $Perm.No (- $k@442@00 (* $k@459@00 $k@442@00)))
    (not
      (=
        (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@460@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@460@00 $k@442@00)))
  (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
  (getPathPure_840d9458_PMSCION ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()) ==> 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
(pop) ; 10
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 237 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 237 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 237 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | True | live]
; [else-branch: 238 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 238 | True]
(declare-const $k@461@00 $Perm)
(assert ($Perm.isReadVar $k@461@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@461@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@461@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@462@00 $Perm)
(assert ($Perm.isReadVar $k@462@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@462@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@462@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | True | live]
; [else-branch: 239 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 239 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 240 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 240 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 240 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 240 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 241 | False | dead]
; [else-branch: 241 | True | live]
(push) ; 14
; [else-branch: 241 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@461@00))
(assert ($Perm.isReadVar $k@462@00))
(assert (and
  (< (* $k@461@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@462@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | True | live]
; [else-branch: 242 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 242 | True]
(declare-const $k@463@00 $Perm)
(assert ($Perm.isReadVar $k@463@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@463@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@463@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $k@464@00 $Perm)
(assert ($Perm.isReadVar $k@464@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@464@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00)))
(assert (<=
  $Perm.No
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00))))
(assert (<=
  (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@464@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | True | live]
; [else-branch: 243 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 243 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 244 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))) | live]
; [else-branch: 244 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))) | live]
(push) ; 17
; [then-branch: 244 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 244 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 245 | False | dead]
; [else-branch: 245 | True | live]
(push) ; 14
; [else-branch: 245 | True]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@463@00))
(assert ($Perm.isReadVar $k@464@00))
(assert (and
  (< (* $k@463@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (< (* $k@464@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
  (<=
    $Perm.No
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
  (<=
    (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00))
    $Perm.Write)
  (=>
    (<
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@465@00 $Perm)
(assert ($Perm.isReadVar $k@465@00))
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= $k@442@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< (* $k@465@00 $k@442@00) $k@442@00))
(assert (<= $Perm.No (- $k@442@00 (* $k@465@00 $k@442@00))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@465@00 $k@442@00))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
  4))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@465@00))
(assert (and
  (< (* $k@465@00 $k@442@00) $k@442@00)
  (<= $Perm.No (- $k@442@00 (* $k@465@00 $k@442@00)))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    4)))))
; [eval] (slen(x0): Int)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 237 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(s@$))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@461@00))
(assert ($Perm.isReadVar $k@462@00))
(assert ($Perm.isReadVar $k@463@00))
(assert ($Perm.isReadVar $k@464@00))
(assert ($Perm.isReadVar $k@465@00))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< (* $k@461@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@462@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (< (* $k@463@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@464@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@465@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@465@00 $k@442@00)))
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))))))
; Joined path conditions
(assert (or
  (not
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (<=
    (+
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))))
    (slen<Int> ub_V0@148@00))))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17(s_V0): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17(s_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
  (ShStructget14of17<Ref> s_V0@147@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(declare-fun joined_unfolding@466@00 ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(assert (=>
  (and
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
  (=
    (joined_unfolding@466@00 s@$ s_V0@147@00 ub_V0@148@00)
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(assert (=>
  (and
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
  (=
    (joined_unfolding@466@00 s@$ s_V0@147@00 ub_V0@148@00)
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@443@00))
(assert ($Perm.isReadVar $k@444@00))
(assert ($Perm.isReadVar $k@445@00))
(assert ($Perm.isReadVar $k@446@00))
(assert ($Perm.isReadVar $k@447@00))
(assert ($Perm.isReadVar $k@448@00))
(assert ($Perm.isReadVar $k@449@00))
(assert ($Perm.isReadVar $k@450@00))
(assert ($Perm.isReadVar $k@451@00))
(assert ($Perm.isReadVar $k@452@00))
(assert ($Perm.isReadVar $k@453@00))
(assert ($Perm.isReadVar $k@454@00))
(assert ($Perm.isReadVar $k@455@00))
(assert ($Perm.isReadVar $k@456@00))
(assert (and
  (< $k@443@00 $k@441@00)
  (<= $Perm.No (- $k@441@00 $k@443@00))
  (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ub_V0@148@00)))
(assert (=>
  (and
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
  (not
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))))
(assert (=>
  (and
    (and
      (and
        (and
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
      (not
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
  (and
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$)))
    (<= $Perm.No $k@442@00)
    (<= $k@442@00 $Perm.Write)
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second s@$)
      ($Snap.combine
        ($Snap.first ($Snap.second s@$))
        ($Snap.second ($Snap.second s@$))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second s@$))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second s@$)))
        ($Snap.second ($Snap.second ($Snap.second s@$)))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget3of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second s@$)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget4of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget6of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget7of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (<= $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<= (* (/ (to_real 1) (to_real 2)) $k@442@00) $Perm.Write)
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=>
      (< $Perm.No (* (/ (to_real 1) (to_real 2)) $k@442@00))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      $Snap.unit)
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      $Snap.unit)
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      $Snap.unit)
    (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit)
    (< (* $k@444@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@444@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@445@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@445@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (or
      (not
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
    (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
    (<=
      0
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      $Snap.unit)
    (<=
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4)
      (slen<Int> ub_V0@148@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      $Snap.unit)
    (< (* $k@446@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@446@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@447@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@447@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<=
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
    (< (* $k@448@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@448@00 $k@442@00)))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@449@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
    (<=
      $Perm.No
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00)))
    (<=
      (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00))
      $Perm.Write)
    (=>
      (<
        $Perm.No
        (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@449@00 $k@442@00)))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (<=
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4)
      (scap<Int> ub_V0@148@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      $Snap.unit)
    (<=
      0
      (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 0 (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 0 (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      $Snap.unit)
    (<= (slen<Int> ub_V0@148@00) (scap<Int> ub_V0@148@00))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
      4) (slen<Int> ub_V0@148@00))
    (=
      ($SortWrappers.$SnapToSlice<Ref> ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
        4) (slen<Int> ub_V0@148@00)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      $Snap.unit)
    (<= 12 (slen<Int> ub_V0@148@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 12 (slen<Int> ub_V0@148@00))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      $Snap.unit)
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      $Snap.unit)
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
      256)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
    (=>
      (< $Perm.No $k@442@00)
      (not
        (=
          (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
    (< (* $k@450@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@450@00 $k@442@00)))
    (<= (- $k@442@00 (* $k@450@00 $k@442@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@442@00 (* $k@450@00 $k@442@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
  (and
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (< (* $k@451@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@451@00 $k@442@00)))
    (<= (- $k@442@00 (* $k@451@00 $k@442@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@442@00 (* $k@451@00 $k@442@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (not
        (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))))
  (and
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (and
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
        (< (* $k@452@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@452@00 $k@442@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@453@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@453@00 $k@442@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        (< (* $k@454@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@454@00 $k@442@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@455@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@455@00 $k@442@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@456@00 $k@442@00) $k@442@00)
        (<= $Perm.No (- $k@442@00 (* $k@456@00 $k@442@00)))
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
          12
          (AddrHdrLen_840d9458_PMSCION ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
          4)))))
    (or
      (not
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (<=
        (+
          (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
          (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
            4))))
        (slen<Int> ub_V0@148@00))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@457@00))
(assert ($Perm.isReadVar $k@458@00))
(assert ($Perm.isReadVar $k@459@00))
(assert ($Perm.isReadVar $k@460@00))
(assert ($Perm.isReadVar $k@461@00))
(assert ($Perm.isReadVar $k@462@00))
(assert ($Perm.isReadVar $k@463@00))
(assert ($Perm.isReadVar $k@464@00))
(assert ($Perm.isReadVar $k@465@00))
(assert (and
  (< $k@443@00 $k@441@00)
  (<= $Perm.No (- $k@441@00 $k@443@00))
  (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ub_V0@148@00)))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
        (not
          (=
            (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
            (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (and
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
    (< (* $k@457@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@457@00 $k@442@00)))
    (<= (- $k@442@00 (* $k@457@00 $k@442@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@442@00 (* $k@457@00 $k@442@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null))))))
(assert (=>
  (and
    (and
      (and
        (and
          (and
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
          (not
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
        (=
          (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
          (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
  (and
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      $Snap.unit)
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
        (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
    (=
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))))
    (=
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      $Snap.unit)
    (not
      (=
        ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))
        (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))
      $Snap.unit)
    (< (* $k@458@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@458@00 $k@442@00)))
    (<= (- $k@442@00 (* $k@458@00 $k@442@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@442@00 (* $k@458@00 $k@442@00)))
      (not
        (=
          (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@459@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@459@00 $k@442@00)))
    (<= (- $k@442@00 (* $k@459@00 $k@442@00)) $Perm.Write)
    (=>
      (< $Perm.No (- $k@442@00 (* $k@459@00 $k@442@00)))
      (not
        (=
          (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
          $Ref.null)))
    (< (* $k@460@00 $k@442@00) $k@442@00)
    (<= $Perm.No (- $k@442@00 (* $k@460@00 $k@442@00)))
    (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
    (=
      ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))
      (getPathPure_840d9458_PMSCION ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))))))
      $Snap.unit)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (and
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
        (< (* $k@461@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@461@00 $k@442@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@462@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@462@00 $k@442@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        (< (* $k@463@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@463@00 $k@442@00)))
          (not
            (=
              (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@464@00 $k@442@00) (* (/ (to_real 1) (to_real 2)) $k@442@00))
        (<=
          $Perm.No
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
        (<=
          (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00))
          $Perm.Write)
        (=>
          (<
            $Perm.No
            (- (* (/ (to_real 1) (to_real 2)) $k@442@00) (* $k@464@00 $k@442@00)))
          (not
            (=
              (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
              $Ref.null)))
        (< (* $k@465@00 $k@442@00) $k@442@00)
        (<= $Perm.No (- $k@442@00 (* $k@465@00 $k@442@00)))
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
          12
          (AddrHdrLen_840d9458_PMSCION ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
          4)))))
    (or
      (not
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (=>
      (=
        (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
      (<=
        (+
          (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
          (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ub_V0@148@00 (+
            12
            (AddrHdrLen_840d9458_PMSCION ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))
            4))))
        (slen<Int> ub_V0@148@00))))))
(assert (or
  (and
    (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
  (and
    (not
      (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
    (=
      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
      (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
    (not
      (=
        (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
        (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))))
(assert (= result@149@00 (joined_unfolding@466@00 s@$ s_V0@147@00 ub_V0@148@00)))
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@147@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ub_V0@148@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@441@00)
    ($Perm.isReadVar $k@442@00)
    ($Perm.isReadVar $k@443@00)
    ($Perm.isReadVar $k@444@00)
    ($Perm.isReadVar $k@445@00)
    ($Perm.isReadVar $k@446@00)
    ($Perm.isReadVar $k@447@00)
    ($Perm.isReadVar $k@448@00)
    ($Perm.isReadVar $k@449@00)
    ($Perm.isReadVar $k@450@00)
    ($Perm.isReadVar $k@451@00)
    ($Perm.isReadVar $k@452@00)
    ($Perm.isReadVar $k@453@00)
    ($Perm.isReadVar $k@454@00)
    ($Perm.isReadVar $k@455@00)
    ($Perm.isReadVar $k@456@00)
    ($Perm.isReadVar $k@457@00)
    ($Perm.isReadVar $k@458@00)
    ($Perm.isReadVar $k@459@00)
    ($Perm.isReadVar $k@460@00)
    ($Perm.isReadVar $k@461@00)
    ($Perm.isReadVar $k@462@00)
    ($Perm.isReadVar $k@463@00)
    ($Perm.isReadVar $k@464@00)
    ($Perm.isReadVar $k@465@00)
    (=>
      (HasOneHopPath_840d9458_PMSCION%precondition s@$ s_V0@147@00 ub_V0@148@00)
      (=
        (HasOneHopPath_840d9458_PMSCION s@$ s_V0@147@00 ub_V0@148@00)
        (=
          (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))
          (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
  :pattern ((HasOneHopPath_840d9458_PMSCION s@$ s_V0@147@00 ub_V0@148@00))
  :pattern ((HasOneHopPath_840d9458_PMSCION%stateless s_V0@147@00 ub_V0@148@00) (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@147@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ub_V0@148@00))
  :qid |quant-u-371|)))
(assert (forall ((s@$ $Snap) (s_V0@147@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ub_V0@148@00 Slice<Ref>)) (!
  (=>
    (HasOneHopPath_840d9458_PMSCION%precondition s@$ s_V0@147@00 ub_V0@148@00)
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  :pattern ((HasOneHopPath_840d9458_PMSCION s@$ s_V0@147@00 ub_V0@148@00))
  :qid |quant-u-372|)))
; ---------- FUNCTION ssliceFromArray_Ref----------
(declare-fun a@150@00 () ShArray<Ref>)
(declare-fun i@151@00 () Int)
(declare-fun j@152@00 () Int)
(declare-fun result@153@00 () Slice<Ref>)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(assert (= ($Snap.first s@$) $Snap.unit))
; [eval] 0 <= i
(assert (<= 0 i@151@00))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (= ($Snap.first ($Snap.second s@$)) $Snap.unit))
; [eval] i <= j
(assert (<= i@151@00 j@152@00))
(assert (= ($Snap.second ($Snap.second s@$)) $Snap.unit))
; [eval] j <= (ShArraylen(a): Int)
; [eval] (ShArraylen(a): Int)
(assert (<= j@152@00 (ShArraylen<Int> a@150@00)))
(declare-const $t@467@00 $Snap)
(assert (= $t@467@00 ($Snap.combine ($Snap.first $t@467@00) ($Snap.second $t@467@00))))
(assert (= ($Snap.first $t@467@00) $Snap.unit))
; [eval] (soffset(result): Int) == i
; [eval] (soffset(result): Int)
(assert (= (soffset<Int> result@153@00) i@151@00))
(assert (=
  ($Snap.second $t@467@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@467@00))
    ($Snap.second ($Snap.second $t@467@00)))))
(assert (= ($Snap.first ($Snap.second $t@467@00)) $Snap.unit))
; [eval] (slen(result): Int) == j - i
; [eval] (slen(result): Int)
; [eval] j - i
(assert (= (slen<Int> result@153@00) (- j@152@00 i@151@00)))
(assert (=
  ($Snap.second ($Snap.second $t@467@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@467@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@467@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@467@00))) $Snap.unit))
; [eval] (scap(result): Int) == (ShArraylen(a): Int) - i
; [eval] (scap(result): Int)
; [eval] (ShArraylen(a): Int) - i
; [eval] (ShArraylen(a): Int)
(assert (= (scap<Int> result@153@00) (- (ShArraylen<Int> a@150@00) i@151@00)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@467@00))) $Snap.unit))
; [eval] (sarray(result): ShArray[Ref]) == a
; [eval] (sarray(result): ShArray[Ref])
(assert (= (sarray<ShArray<Ref>> result@153@00) a@150@00))
(pop) ; 1
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (=
    (ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00)
    (ssliceFromArray_Ref s@$ a@150@00 i@151@00 j@152@00))
  :pattern ((ssliceFromArray_Ref s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-132|)))
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (ssliceFromArray_Ref%stateless a@150@00 i@151@00 j@152@00)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-133|)))
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (let ((result@153@00 (ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))) (=>
    (ssliceFromArray_Ref%precondition s@$ a@150@00 i@151@00 j@152@00)
    (and
      (= (soffset<Int> result@153@00) i@151@00)
      (= (slen<Int> result@153@00) (- j@152@00 i@151@00))
      (= (scap<Int> result@153@00) (- (ShArraylen<Int> a@150@00) i@151@00))
      (= (sarray<ShArray<Ref>> result@153@00) a@150@00))))
  :pattern ((ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-373|)))
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (let ((result@153@00 (ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-374|)))
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (let ((result@153@00 (ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-375|)))
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (let ((result@153@00 (ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-376|)))
(assert (forall ((s@$ $Snap) (a@150@00 ShArray<Ref>) (i@151@00 Int) (j@152@00 Int)) (!
  (let ((result@153@00 (ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@150@00 i@151@00 j@152@00))
  :qid |quant-u-377|)))
; ---------- FUNCTION AddrHdrLen_840d9458_PMSCION----------
(declare-fun s_V0@154@00 () ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ubuf_V0@155@00 () Slice<Ref>)
(declare-fun insideSlayers_V0@156@00 () Bool)
(declare-fun result@157@00 () Int)
; ----- Well-definedness of specifications -----
(push) ; 1
(assert (= s@$ ($Snap.combine ($Snap.first s@$) ($Snap.second s@$))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not insideSlayers_V0@156@00)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not insideSlayers_V0@156@00))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | insideSlayers_V0@156@00 | live]
; [else-branch: 246 | !(insideSlayers_V0@156@00) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 246 | insideSlayers_V0@156@00]
(assert insideSlayers_V0@156@00)
(assert (=
  ($Snap.first s@$)
  ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.second ($Snap.first s@$)))))
; [eval] (ShStructget8of17(s_V0): Ref)
(declare-const $k@468@00 $Perm)
(assert ($Perm.isReadVar $k@468@00))
(assert (<= $Perm.No $k@468@00))
(assert (<= $k@468@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@468@00)
  (not (= (ShStructget8of17<Ref> s_V0@154@00) $Ref.null))))
; [eval] (ShStructget9of17(s_V0): Ref)
(declare-const $k@469@00 $Perm)
(assert ($Perm.isReadVar $k@469@00))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget8of17<Ref> s_V0@154@00) (ShStructget9of17<Ref> s_V0@154@00))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No $k@469@00))
(assert (<= $k@469@00 $Perm.Write))
(assert (=>
  (< $Perm.No $k@469@00)
  (not (= (ShStructget9of17<Ref> s_V0@154@00) $Ref.null))))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (= ($Snap.first ($Snap.second s@$)) $Snap.unit))
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not insideSlayers_V0@156@00)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | insideSlayers_V0@156@00 | live]
; [else-branch: 247 | !(insideSlayers_V0@156@00) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 247 | insideSlayers_V0@156@00]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@468@00)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(pop) ; 5
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(push) ; 5
; [then-branch: 248 | Has3Bits_840d9458_MAddrType(_, First:(First:(s@$))) | live]
; [else-branch: 248 | !(Has3Bits_840d9458_MAddrType(_, First:(First:(s@$)))) | live]
(push) ; 6
; [then-branch: 248 | Has3Bits_840d9458_MAddrType(_, First:(First:(s@$)))]
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@469@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(pop) ; 7
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(pop) ; 6
(push) ; 6
; [else-branch: 248 | !(Has3Bits_840d9458_MAddrType(_, First:(First:(s@$))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
  (and
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))))
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  insideSlayers_V0@156@00
  (and
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=>
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
      (and
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
        (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))))
    (or
      (not
        (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))))))
(assert (=>
  insideSlayers_V0@156@00
  (and
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))))
; [eval] !insideSlayers_V0
; [then-branch: 249 | !(insideSlayers_V0@156@00) | dead]
; [else-branch: 249 | insideSlayers_V0@156@00 | live]
(push) ; 3
; [else-branch: 249 | insideSlayers_V0@156@00]
(assert (= ($Snap.second ($Snap.second s@$)) $Snap.unit))
(declare-const $t@470@00 $Snap)
(assert (= $t@470@00 ($Snap.combine ($Snap.first $t@470@00) ($Snap.second $t@470@00))))
(assert (= ($Snap.first $t@470@00) $Snap.unit))
; [eval] insideSlayers_V0 ==> result == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not insideSlayers_V0@156@00)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | insideSlayers_V0@156@00 | live]
; [else-branch: 250 | !(insideSlayers_V0@156@00) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 250 | insideSlayers_V0@156@00]
; [eval] result == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 6
(declare-const $k@471@00 $Perm)
(assert ($Perm.isReadVar $k@471@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= $k@468@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $k@471@00 $k@468@00))
(assert (<= $Perm.No (- $k@468@00 $k@471@00)))
(assert (<= (- $k@468@00 $k@471@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@468@00 $k@471@00))
  (not (= (ShStructget8of17<Ref> s_V0@154@00) $Ref.null))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@471@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@472@00 $Perm)
(assert ($Perm.isReadVar $k@472@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= $k@469@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $k@472@00 $k@469@00))
(assert (<= $Perm.No (- $k@469@00 $k@472@00)))
(assert (<= (- $k@469@00 $k@472@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $k@469@00 $k@472@00))
  (not (= (ShStructget9of17<Ref> s_V0@154@00) $Ref.null))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@472@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@468@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(pop) ; 7
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
(push) ; 7
(assert (not (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@469@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(pop) ; 7
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(push) ; 7
(assert (not (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$)))))
(assert (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.first ($Snap.first s@$))
  ($Snap.combine
    ($Snap.second ($Snap.first s@$))
    ($Snap.combine $Snap.unit $Snap.unit))) s_V0@154@00))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@471@00))
(assert ($Perm.isReadVar $k@472@00))
(assert (and
  (< $k@471@00 $k@468@00)
  (<= $Perm.No (- $k@468@00 $k@471@00))
  (<= (- $k@468@00 $k@471@00) $Perm.Write)
  (=>
    (< $Perm.No (- $k@468@00 $k@471@00))
    (not (= (ShStructget8of17<Ref> s_V0@154@00) $Ref.null)))
  (< $k@472@00 $k@469@00)
  (<= $Perm.No (- $k@469@00 $k@472@00))
  (<= (- $k@469@00 $k@472@00) $Perm.Write)
  (=>
    (< $Perm.No (- $k@469@00 $k@472@00))
    (not (= (ShStructget9of17<Ref> s_V0@154@00) $Ref.null)))
  (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
  (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($Snap.first ($Snap.first s@$))
    ($Snap.combine
      ($Snap.second ($Snap.first s@$))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@154@00)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@471@00))
(assert ($Perm.isReadVar $k@472@00))
(assert (=>
  insideSlayers_V0@156@00
  (and
    (< $k@471@00 $k@468@00)
    (<= $Perm.No (- $k@468@00 $k@471@00))
    (<= (- $k@468@00 $k@471@00) $Perm.Write)
    (=>
      (< $Perm.No (- $k@468@00 $k@471@00))
      (not (= (ShStructget8of17<Ref> s_V0@154@00) $Ref.null)))
    (< $k@472@00 $k@469@00)
    (<= $Perm.No (- $k@469@00 $k@472@00))
    (<= (- $k@469@00 $k@472@00) $Perm.Write)
    (=>
      (< $Perm.No (- $k@469@00 $k@472@00))
      (not (= (ShStructget9of17<Ref> s_V0@154@00) $Ref.null)))
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.first ($Snap.first s@$))
      ($Snap.combine
        ($Snap.second ($Snap.first s@$))
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@154@00))))
(assert (=>
  insideSlayers_V0@156@00
  (=
    result@157@00
    (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
      ($Snap.first ($Snap.first s@$))
      ($Snap.combine
        ($Snap.second ($Snap.first s@$))
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@154@00))))
(assert (=
  ($Snap.second $t@470@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@470@00))
    ($Snap.second ($Snap.second $t@470@00)))))
(assert (= ($Snap.first ($Snap.second $t@470@00)) $Snap.unit))
; [eval] !insideSlayers_V0 ==> result == AddrHdrLenNoAbstractionLeak_840d9458_PMSCION(s_V0, ubuf_V0)
; [eval] !insideSlayers_V0
(push) ; 4
; [then-branch: 251 | !(insideSlayers_V0@156@00) | dead]
; [else-branch: 251 | insideSlayers_V0@156@00 | live]
(push) ; 5
; [else-branch: 251 | insideSlayers_V0@156@00]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (= ($Snap.second ($Snap.second $t@470@00)) $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@157@00))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 246 | !(insideSlayers_V0@156@00)]
(assert (not insideSlayers_V0@156@00))
(assert (= ($Snap.first s@$) $Snap.unit))
(assert (=
  ($Snap.second s@$)
  ($Snap.combine
    ($Snap.first ($Snap.second s@$))
    ($Snap.second ($Snap.second s@$)))))
(assert (= ($Snap.first ($Snap.second s@$)) $Snap.unit))
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(push) ; 3
; [then-branch: 252 | insideSlayers_V0@156@00 | dead]
; [else-branch: 252 | !(insideSlayers_V0@156@00) | live]
(push) ; 4
; [else-branch: 252 | !(insideSlayers_V0@156@00)]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; [eval] !insideSlayers_V0
(push) ; 3
(set-option :timeout 10)
(assert (not insideSlayers_V0@156@00))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | !(insideSlayers_V0@156@00) | live]
; [else-branch: 253 | insideSlayers_V0@156@00 | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 253 | !(insideSlayers_V0@156@00)]
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(declare-const $k@473@00 $Perm)
(assert ($Perm.isReadVar $k@473@00))
(assert (<= $Perm.No $k@473@00))
(declare-const $t@474@00 $Snap)
(assert (= $t@474@00 ($Snap.combine ($Snap.first $t@474@00) ($Snap.second $t@474@00))))
(assert (= ($Snap.first $t@474@00) $Snap.unit))
; [eval] insideSlayers_V0 ==> result == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 4
; [then-branch: 254 | insideSlayers_V0@156@00 | dead]
; [else-branch: 254 | !(insideSlayers_V0@156@00) | live]
(push) ; 5
; [else-branch: 254 | !(insideSlayers_V0@156@00)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second $t@474@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@474@00))
    ($Snap.second ($Snap.second $t@474@00)))))
(assert (= ($Snap.first ($Snap.second $t@474@00)) $Snap.unit))
; [eval] !insideSlayers_V0 ==> result == AddrHdrLenNoAbstractionLeak_840d9458_PMSCION(s_V0, ubuf_V0)
; [eval] !insideSlayers_V0
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not insideSlayers_V0@156@00))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | !(insideSlayers_V0@156@00) | live]
; [else-branch: 255 | insideSlayers_V0@156@00 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 255 | !(insideSlayers_V0@156@00)]
; [eval] result == AddrHdrLenNoAbstractionLeak_840d9458_PMSCION(s_V0, ubuf_V0)
; [eval] AddrHdrLenNoAbstractionLeak_840d9458_PMSCION(s_V0, ubuf_V0)
(push) ; 6
(declare-const $k@475@00 $Perm)
(assert ($Perm.isReadVar $k@475@00))
; [eval] (tuple2((box_Poly(s_V0): Ref), pointer_Types(SCION_840d9458_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly(s_V0): Ref)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= $k@473@00 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $k@475@00 $k@473@00))
(assert (<= $Perm.No (- $k@473@00 $k@475@00)))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@475@00)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap.second ($Snap.second s@$)) s_V0@154@00 ubuf_V0@155@00))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@475@00))
(assert (and
  (< $k@475@00 $k@473@00)
  (<= $Perm.No (- $k@473@00 $k@475@00))
  (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap.second ($Snap.second s@$)) s_V0@154@00 ubuf_V0@155@00)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@475@00))
(assert (=>
  (not insideSlayers_V0@156@00)
  (and
    (< $k@475@00 $k@473@00)
    (<= $Perm.No (- $k@473@00 $k@475@00))
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap.second ($Snap.second s@$)) s_V0@154@00 ubuf_V0@155@00))))
(assert (=>
  (not insideSlayers_V0@156@00)
  (=
    result@157@00
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION ($Snap.second ($Snap.second s@$)) s_V0@154@00 ubuf_V0@155@00))))
(assert (= ($Snap.second ($Snap.second $t@474@00)) $Snap.unit))
; [eval] 0 <= result
(assert (<= 0 result@157@00))
(pop) ; 3
(pop) ; 2
(pop) ; 1
(assert (forall ((s@$ $Snap) (s_V0@154@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@155@00 Slice<Ref>) (insideSlayers_V0@156@00 Bool)) (!
  (=
    (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00)
    (AddrHdrLen_840d9458_PMSCION s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :pattern ((AddrHdrLen_840d9458_PMSCION s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :qid |quant-u-134|)))
(assert (forall ((s@$ $Snap) (s_V0@154@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@155@00 Slice<Ref>) (insideSlayers_V0@156@00 Bool)) (!
  (AddrHdrLen_840d9458_PMSCION%stateless s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00)
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :qid |quant-u-135|)))
(assert (forall ((s@$ $Snap) (s_V0@154@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@155@00 Slice<Ref>) (insideSlayers_V0@156@00 Bool)) (!
  (let ((result@157@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))) (and
    ($Perm.isReadVar $k@468@00)
    ($Perm.isReadVar $k@469@00)
    ($Perm.isReadVar $k@471@00)
    ($Perm.isReadVar $k@472@00)
    ($Perm.isReadVar $k@473@00)
    ($Perm.isReadVar $k@475@00)
    (=>
      (AddrHdrLen_840d9458_PMSCION%precondition s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00)
      (and
        (=>
          insideSlayers_V0@156@00
          (=
            result@157@00
            (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
              ($Snap.first ($Snap.first s@$))
              ($Snap.combine
                ($Snap.second ($Snap.first s@$))
                ($Snap.combine $Snap.unit $Snap.unit))) s_V0@154@00)))
        (=>
          (not insideSlayers_V0@156@00)
          (=
            result@157@00
            (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION ($Snap.second ($Snap.second s@$)) s_V0@154@00 ubuf_V0@155@00)))
        (<= 0 result@157@00)))))
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :qid |quant-u-378|)))
(assert (forall ((s@$ $Snap) (s_V0@154@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@155@00 Slice<Ref>) (insideSlayers_V0@156@00 Bool)) (!
  (let ((result@157@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))) (=>
    (and
      (AddrHdrLen_840d9458_PMSCION%precondition s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00)
      insideSlayers_V0@156@00)
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.first ($Snap.first s@$))
      ($Snap.combine
        ($Snap.second ($Snap.first s@$))
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@154@00)))
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :qid |quant-u-379|)))
(assert (forall ((s@$ $Snap) (s_V0@154@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@155@00 Slice<Ref>) (insideSlayers_V0@156@00 Bool)) (!
  (let ((result@157@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))) (=>
    (and
      (AddrHdrLen_840d9458_PMSCION%precondition s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00)
      (not insideSlayers_V0@156@00))
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap.second ($Snap.second s@$)) s_V0@154@00 ubuf_V0@155@00)))
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :qid |quant-u-380|)))
(assert (forall ((s@$ $Snap) (s_V0@154@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@155@00 Slice<Ref>) (insideSlayers_V0@156@00 Bool)) (!
  (let ((result@157@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))) true)
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@154@00 ubuf_V0@155@00 insideSlayers_V0@156@00))
  :qid |quant-u-381|)))
; ---------- dynamic_pred_0 ----------
(declare-const i@476@00 Tuple2<Ref~_Types>)
(declare-const x0@477@00 Slice<Ref>)
(set-option :timeout 0)
(push) ; 1
; [eval] (get1of2(i): Types) == pointer_Types(EndToEndExtn_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(EndToEndExtn_840d9458_T_Types())
; [eval] EndToEndExtn_840d9458_T_Types()
(push) ; 2
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | get1of2[Types](i@476@00) == pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types]) | live]
; [else-branch: 256 | get1of2[Types](i@476@00) != pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 256 | get1of2[Types](i@476@00) == pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
(declare-const $t@478@00 $Snap)
(assert (= $t@478@00 ($Snap.combine ($Snap.first $t@478@00) ($Snap.second $t@478@00))))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second $t@478@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@478@00))
    ($Snap.second ($Snap.second $t@478@00)))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@478@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@478@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@478@00))))))
(declare-const i_V1@479@00 Int)
(push) ; 3
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 257 | 0 <= i_V1@479@00 | live]
; [else-branch: 257 | !(0 <= i_V1@479@00) | live]
(push) ; 5
; [then-branch: 257 | 0 <= i_V1@479@00]
(assert (<= 0 i_V1@479@00))
; [eval] i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 5
(push) ; 5
; [else-branch: 257 | !(0 <= i_V1@479@00)]
(assert (not (<= 0 i_V1@479@00)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@479@00)) (<= 0 i_V1@479@00)))
(assert (and
  (<
    i_V1@479@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
  (<= 0 i_V1@479@00)))
; [eval] (ShArrayloc((sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)): Ref)
; [eval] (sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00))
(pop) ; 3
(declare-fun inv@480@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@479@00 Int)) (!
  (=>
    (and
      (<
        i_V1@479@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@479@00))
    (and
      (or (not (<= 0 i_V1@479@00)) (<= 0 i_V1@479@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00)))
  :qid |PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@479@00 Int)) (!
  (=>
    (and
      (<
        i_V1@479@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@479@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00)))
  :qid |quant-u-383|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@480@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 (inv@480@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (inv@480@00 r)))
  :pattern ((inv@480@00 r))
  :qid |PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@479@00 Int)) (!
  (=>
    (and
      (<
        i_V1@479@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@479@00))
    (=
      (inv@480@00 (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00)))
      i_V1@479@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00)))
  :qid |quant-u-383|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@480@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 (inv@480@00 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (inv@480@00 r)))
      r))
  :pattern ((inv@480@00 r))
  :qid |PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@479@00 Int)) (!
  (=>
    (and
      (<
        i_V1@479@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@479@00))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@479@00)))
  :qid |PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$-permImpliesNonNull|)))
(declare-const i_V1@481@00 Int)
(push) ; 3
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 258 | 0 <= i_V1@481@00 | live]
; [else-branch: 258 | !(0 <= i_V1@481@00) | live]
(push) ; 5
; [then-branch: 258 | 0 <= i_V1@481@00]
(assert (<= 0 i_V1@481@00))
; [eval] i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 5
(push) ; 5
; [else-branch: 258 | !(0 <= i_V1@481@00)]
(assert (not (<= 0 i_V1@481@00)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@481@00)) (<= 0 i_V1@481@00)))
(assert (and
  (<
    i_V1@481@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
  (<= 0 i_V1@481@00)))
; [eval] (ShArrayloc((sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)): Ref)
; [eval] (sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00))
(declare-const sm@482@00 $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@480@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 (inv@480@00 r)))
    (=
      ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@482@00  $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@478@00)))) r)))
  :pattern (($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@482@00  $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@478@00)))) r))
  :qid |qp.fvfValDef0|)))
(declare-const pm@483@00 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@483@00  $FPM) r)
    (ite
      (and
        (<
          (inv@480@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
        (<= 0 (inv@480@00 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@483@00  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(push) ; 4
(assert (not (<
  $Perm.No
  ($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@483@00  $FPM) (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@484@00 (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Int) Int)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@480@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 (inv@480@00 r)))
    (=
      ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@482@00  $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@478@00)))) r)))
  :pattern (($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@482@00  $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@478@00)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@483@00  $FPM) r)
    (ite
      (and
        (<
          (inv@480@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
        (<= 0 (inv@480@00 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@483@00  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@481@00 Int)) (!
  (=>
    (and
      (<
        i_V1@481@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@481@00))
    (and
      (or (not (<= 0 i_V1@481@00)) (<= 0 i_V1@481@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00)))
  :qid |Mem_840d9458_PMEndToEndOption-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@481@00 Int)) (!
  (=>
    (and
      (<
        i_V1@481@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@481@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00)))
  :qid |quant-u-385|)))
(assert (forall ((e_V0 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (_2372_V0 Int)) (!
  (=>
    (and
      (<
        (inv@484@00 e_V0 _2372_V0)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 (inv@484@00 e_V0 _2372_V0)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (inv@484@00 e_V0 _2372_V0)))
  :pattern ((inv@484@00 e_V0 _2372_V0))
  :qid |Mem_840d9458_PMEndToEndOption-fctOfInv|)))
(assert (forall ((i_V1@481@00 Int)) (!
  (=>
    (and
      (<
        i_V1@481@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 i_V1@481@00))
    (=
      (inv@484@00 ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@482@00  $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00))) i_V1@481@00)
      i_V1@481@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) i_V1@481@00)))
  :qid |quant-u-385|)))
(assert (forall ((e_V0 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (_2372_V0 Int)) (!
  (=>
    (and
      (<
        (inv@484@00 e_V0 _2372_V0)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))))
      (<= 0 (inv@484@00 e_V0 _2372_V0)))
    (and
      (=
        ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@482@00  $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@478@00)))) (inv@484@00 e_V0 _2372_V0))))
        e_V0)
      (= (inv@484@00 e_V0 _2372_V0) _2372_V0)))
  :pattern ((inv@484@00 e_V0 _2372_V0))
  :qid |Mem_840d9458_PMEndToEndOption-fctOfInv|)))
; Permissions are non-negative
(pop) ; 2
(push) ; 2
; [else-branch: 256 | get1of2[Types](i@476@00) != pointer_Types[Types](EndToEndExtn_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(EndToEndExtnSkipper_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(EndToEndExtnSkipper_840d9458_T_Types())
; [eval] EndToEndExtnSkipper_840d9458_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | get1of2[Types](i@476@00) == pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types]) | live]
; [else-branch: 259 | get1of2[Types](i@476@00) != pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 259 | get1of2[Types](i@476@00) == pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
; [eval] (ShStructget0of1((unbox_Poly((get0of2(i): Ref)): ShStruct1[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]])): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct1[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]])
; [eval] (get0of2(i): Ref)
(declare-const $t@485@00 $Snap)
(pop) ; 3
(push) ; 3
; [else-branch: 259 | get1of2[Types](i@476@00) != pointer_Types[Types](EndToEndExtnSkipper_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(HopByHopExtn_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(HopByHopExtn_840d9458_T_Types())
; [eval] HopByHopExtn_840d9458_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | get1of2[Types](i@476@00) == pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types]) | live]
; [else-branch: 260 | get1of2[Types](i@476@00) != pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 260 | get1of2[Types](i@476@00) == pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
(declare-const $t@486@00 $Snap)
(assert (= $t@486@00 ($Snap.combine ($Snap.first $t@486@00) ($Snap.second $t@486@00))))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second $t@486@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@486@00))
    ($Snap.second ($Snap.second $t@486@00)))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@486@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@486@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@486@00))))))
(declare-const i_V1@487@00 Int)
(push) ; 5
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 6
; [then-branch: 261 | 0 <= i_V1@487@00 | live]
; [else-branch: 261 | !(0 <= i_V1@487@00) | live]
(push) ; 7
; [then-branch: 261 | 0 <= i_V1@487@00]
(assert (<= 0 i_V1@487@00))
; [eval] i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 7
(push) ; 7
; [else-branch: 261 | !(0 <= i_V1@487@00)]
(assert (not (<= 0 i_V1@487@00)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@487@00)) (<= 0 i_V1@487@00)))
(assert (and
  (<
    i_V1@487@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
  (<= 0 i_V1@487@00)))
; [eval] (ShArrayloc((sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)): Ref)
; [eval] (sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 6
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00))
(pop) ; 6
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00))
(pop) ; 5
(declare-fun inv@488@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@487@00 Int)) (!
  (=>
    (and
      (<
        i_V1@487@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@487@00))
    (and
      (or (not (<= 0 i_V1@487@00)) (<= 0 i_V1@487@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00)))
  :qid |PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@487@00 Int)) (!
  (=>
    (and
      (<
        i_V1@487@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@487@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00)))
  :qid |quant-u-387|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@488@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 (inv@488@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (inv@488@00 r)))
  :pattern ((inv@488@00 r))
  :qid |PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@487@00 Int)) (!
  (=>
    (and
      (<
        i_V1@487@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@487@00))
    (=
      (inv@488@00 (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00)))
      i_V1@487@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00)))
  :qid |quant-u-387|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@488@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 (inv@488@00 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (inv@488@00 r)))
      r))
  :pattern ((inv@488@00 r))
  :qid |PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@487@00 Int)) (!
  (=>
    (and
      (<
        i_V1@487@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@487@00))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@487@00)))
  :qid |PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$-permImpliesNonNull|)))
(declare-const i_V1@489@00 Int)
(push) ; 5
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 6
; [then-branch: 262 | 0 <= i_V1@489@00 | live]
; [else-branch: 262 | !(0 <= i_V1@489@00) | live]
(push) ; 7
; [then-branch: 262 | 0 <= i_V1@489@00]
(assert (<= 0 i_V1@489@00))
; [eval] i_V1 < (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 7
(push) ; 7
; [else-branch: 262 | !(0 <= i_V1@489@00)]
(assert (not (<= 0 i_V1@489@00)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@489@00)) (<= 0 i_V1@489@00)))
(assert (and
  (<
    i_V1@489@00
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
  (<= 0 i_V1@489@00)))
; [eval] (ShArrayloc((sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref]), sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)): Ref)
; [eval] (sarray((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): ShArray[Ref])
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref).SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 6
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00))
(pop) ; 6
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00))
(declare-const sm@490@00 $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@488@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 (inv@488@00 r)))
    (=
      ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@490@00  $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@486@00)))) r)))
  :pattern (($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@490@00  $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@486@00)))) r))
  :qid |qp.fvfValDef2|)))
(declare-const pm@491@00 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@491@00  $FPM) r)
    (ite
      (and
        (<
          (inv@488@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
        (<= 0 (inv@488@00 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@491@00  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
(push) ; 6
(assert (not (<
  $Perm.No
  ($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@491@00  $FPM) (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@492@00 (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Int) Int)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@488@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 (inv@488@00 r)))
    (=
      ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@490@00  $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@486@00)))) r)))
  :pattern (($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@490@00  $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second $t@486@00)))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@491@00  $FPM) r)
    (ite
      (and
        (<
          (inv@488@00 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
        (<= 0 (inv@488@00 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as pm@491@00  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@489@00 Int)) (!
  (=>
    (and
      (<
        i_V1@489@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@489@00))
    (and
      (or (not (<= 0 i_V1@489@00)) (<= 0 i_V1@489@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00)))
  :qid |Mem_840d9458_PMHopByHopOption-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@489@00 Int)) (!
  (=>
    (and
      (<
        i_V1@489@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@489@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00)))
  :qid |quant-u-389|)))
(assert (forall ((o_V0 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (_2325_V0 Int)) (!
  (=>
    (and
      (<
        (inv@492@00 o_V0 _2325_V0)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 (inv@492@00 o_V0 _2325_V0)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (inv@492@00 o_V0 _2325_V0)))
  :pattern ((inv@492@00 o_V0 _2325_V0))
  :qid |Mem_840d9458_PMHopByHopOption-fctOfInv|)))
(assert (forall ((i_V1@489@00 Int)) (!
  (=>
    (and
      (<
        i_V1@489@00
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 i_V1@489@00))
    (=
      (inv@492@00 ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@490@00  $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00))) i_V1@489@00)
      i_V1@489@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) i_V1@489@00)))
  :qid |quant-u-389|)))
(assert (forall ((o_V0 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (_2325_V0 Int)) (!
  (=>
    (and
      (<
        (inv@492@00 o_V0 _2325_V0)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))))
      (<= 0 (inv@492@00 o_V0 _2325_V0)))
    (and
      (=
        ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (as sm@490@00  $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@486@00)))) (inv@492@00 o_V0 _2325_V0))))
        o_V0)
      (= (inv@492@00 o_V0 _2325_V0) _2325_V0)))
  :pattern ((inv@492@00 o_V0 _2325_V0))
  :qid |Mem_840d9458_PMHopByHopOption-fctOfInv|)))
; Permissions are non-negative
(pop) ; 4
(push) ; 4
; [else-branch: 260 | get1of2[Types](i@476@00) != pointer_Types[Types](HopByHopExtn_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(HopByHopExtnSkipper_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(HopByHopExtnSkipper_840d9458_T_Types())
; [eval] HopByHopExtnSkipper_840d9458_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | get1of2[Types](i@476@00) == pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types]) | live]
; [else-branch: 263 | get1of2[Types](i@476@00) != pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 263 | get1of2[Types](i@476@00) == pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
; [eval] (ShStructget0of1((unbox_Poly((get0of2(i): Ref)): ShStruct1[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]])): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct1[ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref]])
; [eval] (get0of2(i): Ref)
(declare-const $t@493@00 $Snap)
(pop) ; 5
(push) ; 5
; [else-branch: 263 | get1of2[Types](i@476@00) != pointer_Types[Types](HopByHopExtnSkipper_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCION_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCION_840d9458_T_Types())
; [eval] SCION_840d9458_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | get1of2[Types](i@476@00) == pointer_Types[Types](SCION_840d9458_T_Types[Types]) | live]
; [else-branch: 264 | get1of2[Types](i@476@00) != pointer_Types[Types](SCION_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 264 | get1of2[Types](i@476@00) == pointer_Types[Types](SCION_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
(declare-const $t@494@00 $Snap)
(assert (= $t@494@00 ($Snap.combine ($Snap.first $t@494@00) ($Snap.second $t@494@00))))
; [eval] (ShStructget1of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second $t@494@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@494@00))
    ($Snap.second ($Snap.second $t@494@00)))))
; [eval] (ShStructget2of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@494@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@494@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
; [eval] (ShStructget3of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget3of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@494@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))
; [eval] (ShStructget4of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget4of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget2of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget5of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))
; [eval] (ShStructget6of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget6of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget7of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
; [eval] (ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 7
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
(pop) ; 7
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
; [eval] (ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 7
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(pop) ; 7
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
  $Snap.unit))
; [eval] 0 <= 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 7
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 7
; Joined path conditions
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | True | live]
; [else-branch: 265 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 265 | True]
(declare-const $k@495@00 $Perm)
(assert ($Perm.isReadVar $k@495@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@495@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@495@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@495@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@495@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@495@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@496@00 $Perm)
(assert ($Perm.isReadVar $k@496@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@496@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@496@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@496@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@496@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@496@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | True | live]
; [else-branch: 266 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 266 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 267 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 267 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 12
; [then-branch: 267 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 267 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(push) ; 9
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 268 | False | dead]
; [else-branch: 268 | True | live]
(push) ; 9
; [else-branch: 268 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@495@00))
(assert ($Perm.isReadVar $k@496@00))
(assert (and
  (< $k@495@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@495@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@495@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@495@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@496@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@496@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@496@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@496@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (or
    (not
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(assert (<=
  0
  (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))
  $Snap.unit))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4 <= (slen(x0): Int)
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (slen(x0): Int)
(assert (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)
  (slen<Int> x0@477@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))
  $Snap.unit))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) <= (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | True | live]
; [else-branch: 269 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 269 | True]
(declare-const $k@497@00 $Perm)
(assert ($Perm.isReadVar $k@497@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@497@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@497@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@497@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@497@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@497@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@498@00 $Perm)
(assert ($Perm.isReadVar $k@498@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@498@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@498@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@498@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@498@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@498@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | True | live]
; [else-branch: 270 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 270 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 271 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 271 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 12
; [then-branch: 271 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 271 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 272 | False | dead]
; [else-branch: 272 | True | live]
(push) ; 9
; [else-branch: 272 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@497@00))
(assert ($Perm.isReadVar $k@498@00))
(assert (and
  (< $k@497@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@497@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@497@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@497@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@498@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@498@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@498@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@498@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<=
  (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | True | live]
; [else-branch: 273 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 273 | True]
(declare-const $k@499@00 $Perm)
(assert ($Perm.isReadVar $k@499@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@499@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@499@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@499@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@499@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@499@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@500@00 $Perm)
(assert ($Perm.isReadVar $k@500@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@500@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@500@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@500@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@500@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@500@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | True | live]
; [else-branch: 274 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 274 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 275 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 275 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 12
; [then-branch: 275 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 275 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 276 | False | dead]
; [else-branch: 276 | True | live]
(push) ; 9
; [else-branch: 276 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@499@00))
(assert ($Perm.isReadVar $k@500@00))
(assert (and
  (< $k@499@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@499@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@499@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@499@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@500@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@500@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@500@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@500@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 8
(assert (not (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)
  (scap<Int> x0@477@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)
  (scap<Int> x0@477@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
  4)))
(pop) ; 7
; Joined path conditions
(assert (and
  (<=
    (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
      4)
    (scap<Int> x0@477@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))
; [eval] (ShStructget0of2(fn$$0): Ref)
(assert (not
  (=
    (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))
    $Ref.null)))
; [eval] (ShStructget1of2(fn$$0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))
  (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget1of2<Ref> (ShStructget0of17<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget0of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] (ShStructget0of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref)
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
(push) ; 8
(assert (not (<=
  0
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 0 (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
  4)))
(pop) ; 7
; Joined path conditions
(assert (and
  (<=
    0
    (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
      4))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 0 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 0 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget1of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4, (slen(x0): Int))
; [eval] (ShStructget1of2((ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])): Ref)
; [eval] (ShStructget0of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4, (slen(x0): Int))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (slen(x0): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 8
(assert (not (<= (slen<Int> x0@477@00) (scap<Int> x0@477@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> x0@477@00) (scap<Int> x0@477@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
  4) (slen<Int> x0@477@00)))
(pop) ; 7
; Joined path conditions
(assert (and
  (<= (slen<Int> x0@477@00) (scap<Int> x0@477@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4) (slen<Int> x0@477@00))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4) (slen<Int> x0@477@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))
  $Snap.unit))
; [eval] 12 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 12 (slen<Int> x0@477@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 12, (slen(x0): Int))
; [eval] (slen(x0): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 12 (slen<Int> x0@477@00)))
(pop) ; 7
; Joined path conditions
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 12 (slen<Int> x0@477@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$ < 256
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
  256))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget14of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))))
; [eval] !pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@501@00 $Perm)
(assert ($Perm.isReadVar $k@501@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(assert (< $k@501@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@501@00)))
(assert (<= (- $Perm.Write $k@501@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $Perm.Write $k@501@00))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@501@00)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@501@00))
(assert (and
  (< $k@501@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@501@00))
  (<= (- $Perm.Write $k@501@00) $Perm.Write)
  (=>
    (< $Perm.No (- $Perm.Write $k@501@00))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00)))) | live]
; [else-branch: 277 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 277 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00))))]
(assert (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(declare-const $k@502@00 $Perm)
(assert ($Perm.isReadVar $k@502@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(assert (< $k@502@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@502@00)))
(assert (<= (- $Perm.Write $k@502@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $Perm.Write $k@502@00))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@502@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@502@00))
(assert (and
  (< $k@502@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@502@00))
  (<= (- $Perm.Write $k@502@00) $Perm.Write)
  (=>
    (< $Perm.No (- $Perm.Write $k@502@00))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))))
; [then-branch: 278 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00))) | dead]
; [else-branch: 278 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00)))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 278 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00))))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()) ==> 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
(pop) ; 9
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 279 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 279 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | True | live]
; [else-branch: 280 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 280 | True]
(declare-const $k@503@00 $Perm)
(assert ($Perm.isReadVar $k@503@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@503@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@503@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@503@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@503@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@503@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@504@00 $Perm)
(assert ($Perm.isReadVar $k@504@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@504@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@504@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@504@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@504@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@504@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 281 | True | live]
; [else-branch: 281 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 281 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 282 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 282 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 16
; [then-branch: 282 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 282 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 283 | False | dead]
; [else-branch: 283 | True | live]
(push) ; 13
; [else-branch: 283 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@503@00))
(assert ($Perm.isReadVar $k@504@00))
(assert (and
  (< $k@503@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@503@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@503@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@503@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@504@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@504@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@504@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@504@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | True | live]
; [else-branch: 284 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 284 | True]
(declare-const $k@505@00 $Perm)
(assert ($Perm.isReadVar $k@505@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@505@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@505@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@505@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@505@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@505@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@506@00 $Perm)
(assert ($Perm.isReadVar $k@506@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@506@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@506@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@506@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@506@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@506@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | True | live]
; [else-branch: 285 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 285 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 286 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 286 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 16
; [then-branch: 286 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 286 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 287 | False | dead]
; [else-branch: 287 | True | live]
(push) ; 13
; [else-branch: 287 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@505@00))
(assert ($Perm.isReadVar $k@506@00))
(assert (and
  (< $k@505@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@505@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@505@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@505@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@506@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@506@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@506@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@506@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 11
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@507@00 $Perm)
(assert ($Perm.isReadVar $k@507@00))
(assert (< $k@507@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@507@00)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@507@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
  4))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@507@00))
(assert (and
  (< $k@507@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@507@00))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)))))
; [eval] (slen(x0): Int)
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 279 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@503@00))
(assert ($Perm.isReadVar $k@504@00))
(assert ($Perm.isReadVar $k@505@00))
(assert ($Perm.isReadVar $k@506@00))
(assert ($Perm.isReadVar $k@507@00))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< $k@503@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@503@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@503@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@503@00))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (< $k@504@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@504@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@504@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@504@00))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
    (< $k@505@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@505@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@505@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@505@00))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (< $k@506@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@506@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@506@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@506@00))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (< $k@507@00 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@507@00))
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
      4))))))
; Joined path conditions
(assert (or
  (not
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (<=
    (+
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
        4))))
    (slen<Int> x0@477@00))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 277 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00)))]
(assert (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))
; [eval] pathPoolInitialized_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(declare-const $k@508@00 $Perm)
(assert ($Perm.isReadVar $k@508@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(assert (< $k@508@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@508@00)))
(assert (<= (- $Perm.Write $k@508@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $Perm.Write $k@508@00))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@508@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@508@00))
(assert (and
  (< $k@508@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@508@00))
  (<= (- $Perm.Write $k@508@00) $Perm.Write)
  (=>
    (< $Perm.No (- $Perm.Write $k@508@00))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 288 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00))) | live]
; [else-branch: 288 | !(pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00)))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 288 | pathPoolInitialized_840d9458_PMSCION(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))))))))))))))))))), unbox_Poly[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]](get0of2[Ref](i@476@00)))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 9
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 9
; Joined path conditions
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !((ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))))))))
; [eval] (ShStructget15of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (ShStructget16of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == getPathPure_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] getPathPure_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedType_a6ceb89d_T$$$$_E_$$$)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (ShStructget7of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
; [eval] 0 <= pathType_V0
; [eval] pathType_V0 < 256
(declare-const $k@509@00 $Perm)
(assert ($Perm.isReadVar $k@509@00))
; [eval] (ShStructget15of17(s_V0): Ref)
(assert (< $k@509@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@509@00)))
(assert (<= (- $Perm.Write $k@509@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $Perm.Write $k@509@00))
  (not
    (=
      (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@509@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@510@00 $Perm)
(assert ($Perm.isReadVar $k@510@00))
; [eval] (ShStructget16of17(s_V0): Ref)
(assert (< $k@510@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@510@00)))
(assert (<= (- $Perm.Write $k@510@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- $Perm.Write $k@510@00))
  (not
    (=
      (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@510@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] (ShStructget15of17(s_V0): Ref).SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] (ShStructget15of17(s_V0): Ref)
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const $k@511@00 $Perm)
(assert ($Perm.isReadVar $k@511@00))
; [eval] (ShStructget15of17(s_V0): Ref)
; [eval] (ShStructget16of17(s_V0): Ref)
(assert (< $k@511@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@511@00)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@511@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@509@00))
(assert ($Perm.isReadVar $k@510@00))
(assert ($Perm.isReadVar $k@511@00))
(assert (and
  (< $k@509@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@509@00))
  (<= (- $Perm.Write $k@509@00) $Perm.Write)
  (=>
    (< $Perm.No (- $Perm.Write $k@509@00))
    (not
      (=
        (ShStructget15of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@510@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@510@00))
  (<= (- $Perm.Write $k@510@00) $Perm.Write)
  (=>
    (< $Perm.No (- $Perm.Write $k@510@00))
    (not
      (=
        (ShStructget16of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@511@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@511@00))
  (getPathPure_840d9458_PMSCION%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
(assert (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))
  (getPathPure_840d9458_PMSCION ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types()) ==> 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 9
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
(pop) ; 9
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 289 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 289 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)) <= (slen(x0): Int)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true) + Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 290 | True | live]
; [else-branch: 290 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 290 | True]
(declare-const $k@512@00 $Perm)
(assert ($Perm.isReadVar $k@512@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@512@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@512@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@512@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@512@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@512@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@513@00 $Perm)
(assert ($Perm.isReadVar $k@513@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@513@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@513@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@513@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@513@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@513@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 291 | True | live]
; [else-branch: 291 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 291 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 292 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 292 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 16
; [then-branch: 292 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 292 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 293 | False | dead]
; [else-branch: 293 | True | live]
(push) ; 13
; [else-branch: 293 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@512@00))
(assert ($Perm.isReadVar $k@513@00))
(assert (and
  (< $k@512@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@512@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@512@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@512@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@513@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@513@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@513@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@513@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] Len_a6ceb89d_SY$558431e4_a6ceb89d_((ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$, ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4))
; [eval] (ShStructget14of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true), (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4)
; [eval] 12 + AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] AddrHdrLen_840d9458_PMSCION((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]), sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | True | live]
; [else-branch: 294 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 294 | True]
(declare-const $k@514@00 $Perm)
(assert ($Perm.isReadVar $k@514@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@514@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@514@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@514@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@514@00))
  (not
    (=
      (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@514@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $k@515@00 $Perm)
(assert ($Perm.isReadVar $k@515@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@515@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@515@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@515@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@515@00))
  (not
    (=
      (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@515@00)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 295 | True | live]
; [else-branch: 295 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 295 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 296 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))) | live]
; [else-branch: 296 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))) | live]
(push) ; 16
; [then-branch: 296 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00)))))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 296 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] !insideSlayers_V0
; [then-branch: 297 | False | dead]
; [else-branch: 297 | True | live]
(push) ; 13
; [else-branch: 297 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@514@00))
(assert ($Perm.isReadVar $k@515@00))
(assert (and
  (< $k@514@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@514@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@514@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@514@00))
    (not
      (=
        (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (< $k@515@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@515@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@515@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@515@00))
    (not
      (=
        (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
        $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref).Intuint8$$$$_E_$$$ * 4
; [eval] (ShStructget5of17((unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 11
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@516@00 $Perm)
(assert ($Perm.isReadVar $k@516@00))
(assert (< $k@516@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@516@00)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@516@00)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
  12
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
  4))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@516@00))
(assert (and
  (< $k@516@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@516@00))
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
    12
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
    4)))))
; [eval] (slen(x0): Int)
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 289 | typeOfInterface_Y$558431e4_a6ceb89d_(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@494@00))))))))))))))))) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@512@00))
(assert ($Perm.isReadVar $k@513@00))
(assert ($Perm.isReadVar $k@514@00))
(assert ($Perm.isReadVar $k@515@00))
(assert ($Perm.isReadVar $k@516@00))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (and
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
    (< $k@512@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@512@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@512@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@512@00))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (< $k@513@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@513@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@513@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@513@00))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))
    (< $k@514@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@514@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@514@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@514@00))
      (not
        (=
          (ShStructget8of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (< $k@515@00 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@515@00))
    (<= (- (/ (to_real 1) (to_real 2)) $k@515@00) $Perm.Write)
    (=>
      (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@515@00))
      (not
        (=
          (ShStructget9of17<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
          $Ref.null)))
    (< $k@516@00 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@516@00))
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
      12
      (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
      4))))))
; Joined path conditions
(assert (or
  (not
    (=
      (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
      (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(assert (=>
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
  (<=
    (+
      (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))))))))))) (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) x0@477@00 (+
        12
        (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)) (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (*
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@00))))))
        4))))
    (slen<Int> x0@477@00))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 264 | get1of2[Types](i@476@00) != pointer_Types[Types](SCION_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMP_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMP_840d9458_T_Types())
; [eval] SCMP_840d9458_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMP_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMP_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMP_840d9458_T_Types[Types]) | live]
; [else-branch: 298 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMP_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 298 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMP_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMP_840d9458_T_Types<Types>  Types))))
(declare-const $t@517@00 $Snap)
(assert (= $t@517@00 ($Snap.combine ($Snap.first $t@517@00) ($Snap.second $t@517@00))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second $t@517@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@517@00))
    ($Snap.second ($Snap.second $t@517@00)))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@517@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@517@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@517@00))))))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@517@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@517@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@517@00)))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] !((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedSCION_840d9458_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$())
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedSCION_840d9458_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
(push) ; 8
(assert (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 8
; Joined path conditions
(assert (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition $Snap.unit))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@517@00)))))
  (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@517@00)))))
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | First:(Second:(Second:(Second:($t@517@00)))) != shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$(_) | live]
; [else-branch: 299 | First:(Second:(Second:(Second:($t@517@00)))) == shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 299 | First:(Second:(Second:(Second:($t@517@00)))) != shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@517@00)))))
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 8
(push) ; 8
; [else-branch: 299 | First:(Second:(Second:(Second:($t@517@00)))) == shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@517@00)))))
  (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@517@00))))
  $Snap.unit))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 298 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMP_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMP_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPDestinationUnreachable_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPDestinationUnreachable_840d9458_T_Types())
; [eval] SCMPDestinationUnreachable_840d9458_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPDestinationUnreachable_840d9458_T_Types[Types]) | live]
; [else-branch: 300 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPDestinationUnreachable_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 300 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPDestinationUnreachable_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))))
; [eval] (ShStructget0of1((unbox_Poly((get0of2(i): Ref)): ShStruct1[ShStruct2[Ref, Ref]])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct1[ShStruct2[Ref, Ref]])
; [eval] (get0of2(i): Ref)
(declare-const $t@518@00 $Snap)
(pop) ; 8
(push) ; 8
; [else-branch: 300 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPDestinationUnreachable_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPEcho_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPEcho_840d9458_T_Types())
; [eval] SCMPEcho_840d9458_T_Types()
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPEcho_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPEcho_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPEcho_840d9458_T_Types[Types]) | live]
; [else-branch: 301 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPEcho_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 301 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPEcho_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPEcho_840d9458_T_Types<Types>  Types))))
(declare-const $t@519@00 $Snap)
(assert (= $t@519@00 ($Snap.combine ($Snap.first $t@519@00) ($Snap.second $t@519@00))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second $t@519@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@519@00))
    ($Snap.second ($Snap.second $t@519@00)))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 301 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPEcho_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPEcho_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPExternalInterfaceDown_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPExternalInterfaceDown_840d9458_T_Types())
; [eval] SCMPExternalInterfaceDown_840d9458_T_Types()
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPExternalInterfaceDown_840d9458_T_Types[Types]) | live]
; [else-branch: 302 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPExternalInterfaceDown_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 302 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPExternalInterfaceDown_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))))
(declare-const $t@520@00 $Snap)
(assert (= $t@520@00 ($Snap.combine ($Snap.first $t@520@00) ($Snap.second $t@520@00))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second $t@520@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@520@00))
    ($Snap.second ($Snap.second $t@520@00)))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct2[Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 10
(push) ; 10
; [else-branch: 302 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPExternalInterfaceDown_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPInternalConnectivityDown_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPInternalConnectivityDown_840d9458_T_Types())
; [eval] SCMPInternalConnectivityDown_840d9458_T_Types()
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPInternalConnectivityDown_840d9458_T_Types[Types]) | live]
; [else-branch: 303 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPInternalConnectivityDown_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 303 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPInternalConnectivityDown_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))))
(declare-const $t@521@00 $Snap)
(assert (= $t@521@00 ($Snap.combine ($Snap.first $t@521@00) ($Snap.second $t@521@00))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second $t@521@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@521@00))
    ($Snap.second ($Snap.second $t@521@00)))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@521@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@521@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@521@00))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 303 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPInternalConnectivityDown_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPPacketTooBig_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPPacketTooBig_840d9458_T_Types())
; [eval] SCMPPacketTooBig_840d9458_T_Types()
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPPacketTooBig_840d9458_T_Types[Types]) | live]
; [else-branch: 304 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPPacketTooBig_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 304 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPPacketTooBig_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))))
(declare-const $t@522@00 $Snap)
(assert (= $t@522@00 ($Snap.combine ($Snap.first $t@522@00) ($Snap.second $t@522@00))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 12
(push) ; 12
; [else-branch: 304 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPPacketTooBig_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPParameterProblem_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPParameterProblem_840d9458_T_Types())
; [eval] SCMPParameterProblem_840d9458_T_Types()
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPParameterProblem_840d9458_T_Types[Types]) | live]
; [else-branch: 305 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPParameterProblem_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 305 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPParameterProblem_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))))
(declare-const $t@523@00 $Snap)
(assert (= $t@523@00 ($Snap.combine ($Snap.first $t@523@00) ($Snap.second $t@523@00))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct2[Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 13
(push) ; 13
; [else-branch: 305 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPParameterProblem_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(SCMPTraceroute_840d9458_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(SCMPTraceroute_840d9458_T_Types())
; [eval] SCMPTraceroute_840d9458_T_Types()
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPTraceroute_840d9458_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPTraceroute_840d9458_T_Types[Types]) | live]
; [else-branch: 306 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPTraceroute_840d9458_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 306 | get1of2[Types](i@476@00) == pointer_Types[Types](SCMPTraceroute_840d9458_T_Types[Types])]
(assert (=
  (get1of2<Types> i@476@00)
  (pointer_Types<Types> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))))
(declare-const $t@524@00 $Snap)
(assert (= $t@524@00 ($Snap.combine ($Snap.first $t@524@00) ($Snap.second $t@524@00))))
; [eval] (ShStructget1of5((unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of5<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second $t@524@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@524@00))
    ($Snap.second ($Snap.second $t@524@00)))))
; [eval] (ShStructget2of5((unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of5<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
  (ShStructget2of5<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget2of5<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@524@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@524@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@524@00))))))
; [eval] (ShStructget3of5((unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget3of5<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@524@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@524@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@00)))))))
; [eval] (ShStructget4of5((unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget4of5<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> i@476@00)))
    $Ref.null)))
; [eval] (ShStructget0of5((unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct5[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 306 | get1of2[Types](i@476@00) != pointer_Types[Types](SCMPTraceroute_840d9458_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@476@00)
    (pointer_Types<Types> (as SCMPTraceroute_840d9458_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == Payload_b41831d7_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Payload_b41831d7_T_Types()
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= (get1of2<Types> i@476@00) (as Payload_b41831d7_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= (get1of2<Types> i@476@00) (as Payload_b41831d7_T_Types<Types>  Types))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | get1of2[Types](i@476@00) == Payload_b41831d7_T_Types[Types] | live]
; [else-branch: 307 | get1of2[Types](i@476@00) != Payload_b41831d7_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 307 | get1of2[Types](i@476@00) == Payload_b41831d7_T_Types[Types]]
(assert (= (get1of2<Types> i@476@00) (as Payload_b41831d7_T_Types<Types>  Types)))
(declare-const $t@525@00 $Snap)
(assert (= $t@525@00 $Snap.unit))
; [eval] x0 == (unbox_Poly((get0of2(i): Ref)): Slice[Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): Slice[Ref])
; [eval] (get0of2(i): Ref)
(assert (= x0@477@00 (unbox_Poly<Slice<Ref>> (get0of2<Ref> i@476@00))))
(pop) ; 15
(push) ; 15
; [else-branch: 307 | get1of2[Types](i@476@00) != Payload_b41831d7_T_Types[Types]]
(assert (not (= (get1of2<Types> i@476@00) (as Payload_b41831d7_T_Types<Types>  Types))))
(declare-const $t@526@00 $Snap)
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Mem_daeaf66a_PMBase ----------
(declare-const b_V0@527@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(push) ; 1
(declare-const $t@528@00 $Snap)
(assert (= $t@528@00 ($Snap.combine ($Snap.first $t@528@00) ($Snap.second $t@528@00))))
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (not (= (ShStructget1of3<Ref> b_V0@527@00) $Ref.null)))
(assert (=
  ($Snap.second $t@528@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@528@00))
    ($Snap.second ($Snap.second $t@528@00)))))
; [eval] (ShStructget2of3(b_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> b_V0@527@00) (ShStructget2of3<Ref> b_V0@527@00))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> b_V0@527@00) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@528@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@528@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))
; [eval] (ShStructget0of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(assert (not
  (=
    (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@528@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@528@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))
; [eval] (ShStructget1of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Ref)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 0): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 2
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))))
(pop) ; 2
; Joined path conditions
(assert (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 0))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 0))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 0)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 1): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 1))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 1))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 1))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 1)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))))
; [eval] (ShArrayloc(unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)), 2): Ref)
; [eval] unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref((ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$))
; [eval] (ShStructget2of3((ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])): Emb_3_Intuint8$$$_S_$$$)
; [eval] (ShStructget0of3(b_V0): ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$])
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 0)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 2))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 2))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 2))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 1)
  (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 2))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> b_V0@527@00))) 2)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ <= 3
; [eval] (ShStructget1of3(b_V0): Ref)
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@528@00)) 3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@528@00)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@00))))))))))
  $Snap.unit))
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$ ==> 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] 0 < (ShStructget1of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(b_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | 0 < First:($t@528@00) | live]
; [else-branch: 308 | !(0 < First:($t@528@00)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 308 | 0 < First:($t@528@00)]
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00))))
; [eval] 0 < (ShStructget2of3(b_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget2of3(b_V0): Ref)
(pop) ; 3
(push) ; 3
; [else-branch: 308 | !(0 < First:($t@528@00))]
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00))))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00)))))
(assert (=>
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first $t@528@00)))
  (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@528@00))))))
(pop) ; 1
; ---------- HeaderMem_840d9458_PMSCION ----------
(declare-const s_V0@529@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const ubuf_V0@530@00 Slice<Ref>)
(push) ; 1
(declare-const $t@531@00 $Snap)
(assert (= $t@531@00 ($Snap.combine ($Snap.first $t@531@00) ($Snap.second $t@531@00))))
; [eval] (ShStructget10of17(s_V0): Ref)
(assert (not (= (ShStructget10of17<Ref> s_V0@529@00) $Ref.null)))
(assert (=
  ($Snap.second $t@531@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@531@00))
    ($Snap.second ($Snap.second $t@531@00)))))
; [eval] (ShStructget11of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget10of17<Ref> s_V0@529@00) (ShStructget11of17<Ref> s_V0@529@00))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget11of17<Ref> s_V0@529@00) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@531@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@531@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@531@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@531@00))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
(pop) ; 2
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget8of17<Ref> s_V0@529@00) (ShStructget9of17<Ref> s_V0@529@00))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
(pop) ; 2
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  $Snap.unit))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0) <= (slen(ubuf_V0): Int)
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 2
(declare-const $k@532@00 $Perm)
(assert ($Perm.isReadVar $k@532@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@532@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@532@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@532@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@532@00))
  (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null))))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@532@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $k@533@00 $Perm)
(assert ($Perm.isReadVar $k@533@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@533@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@533@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@533@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@533@00))
  (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@533@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))
    ($Snap.combine $Snap.unit $Snap.unit))) s_V0@529@00))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@532@00))
(assert ($Perm.isReadVar $k@533@00))
(assert (and
  (< $k@532@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@532@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@532@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@532@00))
    (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null)))
  (< $k@533@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@533@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@533@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@533@00))
    (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null)))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@529@00)))
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@529@00)
  (slen<Int> ubuf_V0@530@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
  $Snap.unit))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 2
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | True | live]
; [else-branch: 309 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 309 | True]
(declare-const $k@534@00 $Perm)
(assert ($Perm.isReadVar $k@534@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@534@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@534@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@534@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@534@00))
  (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null))))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@534@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@535@00 $Perm)
(assert ($Perm.isReadVar $k@535@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@535@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@535@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@535@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@535@00))
  (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@535@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | True | live]
; [else-branch: 310 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 310 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 311 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00)))) | live]
; [else-branch: 311 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00))))) | live]
(push) ; 7
; [then-branch: 311 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 311 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00)))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
(push) ; 4
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
; [eval] !insideSlayers_V0
; [then-branch: 312 | False | dead]
; [else-branch: 312 | True | live]
(push) ; 4
; [else-branch: 312 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@529@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@534@00))
(assert ($Perm.isReadVar $k@535@00))
(assert (and
  (< $k@534@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@534@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@534@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@534@00))
    (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null)))
  (< $k@535@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@535@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@535@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@535@00))
    (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null)))
  (or
    (not
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@529@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 2
(declare-const $k@536@00 $Perm)
(assert ($Perm.isReadVar $k@536@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@536@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@536@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@536@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@536@00))
  (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null))))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@536@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $k@537@00 $Perm)
(assert ($Perm.isReadVar $k@537@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@537@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@537@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@537@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@537@00))
  (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@537@00)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 3
(pop) ; 3
; Joined path conditions
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@536@00))
(assert ($Perm.isReadVar $k@537@00))
(assert (and
  (< $k@536@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@536@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@536@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@536@00))
    (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null)))
  (< $k@537@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@537@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@537@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@537@00))
    (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null)))))
(assert (=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@529@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@529@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))
  $Snap.unit))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) <= (slen(ubuf_V0): Int)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 313 | True | live]
; [else-branch: 313 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 313 | True]
(declare-const $k@538@00 $Perm)
(assert ($Perm.isReadVar $k@538@00))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@538@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@538@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@538@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@538@00))
  (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null))))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@538@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@539@00 $Perm)
(assert ($Perm.isReadVar $k@539@00))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@539@00 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@539@00)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@539@00) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@539@00))
  (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@539@00)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | True | live]
; [else-branch: 314 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 314 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 315 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00)))) | live]
; [else-branch: 315 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00))))) | live]
(push) ; 7
; [then-branch: 315 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 315 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:($t@531@00)))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
; [eval] !insideSlayers_V0
; [then-branch: 316 | False | dead]
; [else-branch: 316 | True | live]
(push) ; 4
; [else-branch: 316 | True]
(pop) ; 4
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@538@00))
(assert ($Perm.isReadVar $k@539@00))
(assert (and
  (< $k@538@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@538@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@538@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@538@00))
    (not (= (ShStructget8of17<Ref> s_V0@529@00) $Ref.null)))
  (< $k@539@00 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@539@00))
  (<= (- (/ (to_real 1) (to_real 2)) $k@539@00) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@539@00))
    (not (= (ShStructget9of17<Ref> s_V0@529@00) $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@531@00)))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@529@00 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (slen<Int> ubuf_V0@530@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
  $Snap.unit))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
(pop) ; 2
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
(assert (<
  0
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
  $Snap.unit))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
(pop) ; 2
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
(assert (<
  0
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))
  $Snap.unit))
; [eval] 0 < 2 * 8
; [eval] 2 * 8
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))
  $Snap.unit))
; [eval] 2 * 8 < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
(assert (<
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
(assert (<
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))
  $Snap.unit))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) <= (slen(ubuf_V0): Int)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] (slen(ubuf_V0): Int)
(assert (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
  (slen<Int> ubuf_V0@530@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))))))
; [eval] (ShStructget12of17(s_V0): Ref)
(assert (not (= (ShStructget12of17<Ref> s_V0@529@00) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget12of17<Ref> s_V0@529@00) (ShStructget13of17<Ref> s_V0@529@00))))
(check-sat)
; unknown
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(assert (not (= (ShStructget13of17<Ref> s_V0@529@00) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
; [eval] 0 <= i
; [eval] i <= j
(push) ; 3
(assert (not (<=
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 3
(assert (not (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (scap<Int> ubuf_V0@530@00))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (scap<Int> ubuf_V0@530@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@530@00 16 (+
  16
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))))
(pop) ; 2
; Joined path conditions
(assert (and
  (<=
    16
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
  (<=
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (scap<Int> ubuf_V0@530@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@530@00 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@530@00 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))))
  $Snap.unit))
; [eval] (ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
; [eval] 0 <= i
(push) ; 3
(assert (not (<=
  0
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))))
; [eval] i <= j
(push) ; 3
(assert (not (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 3
(assert (not (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
  (scap<Int> ubuf_V0@530@00))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
  (scap<Int> ubuf_V0@530@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@530@00 (+
  16
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))) (+
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))
(pop) ; 2
; Joined path conditions
(assert (and
  (<=
    0
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))))
  (<=
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (+
      (+
        16
        (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))
  (<=
    (+
      (+
        16
        (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))
    (scap<Int> ubuf_V0@530@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@530@00 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))) (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00))))))))))))))))))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@530@00 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00)))))) (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@531@00))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@531@00)))))))))))
(pop) ; 1
; ---------- AbsSlice_Bytes_e630ae22_F ----------
(declare-const s_V0@540@00 Slice<Ref>)
(declare-const start_V0@541@00 Int)
(declare-const end_V0@542@00 Int)
(push) ; 1
(declare-const $t@543@00 $Snap)
(assert (= $t@543@00 ($Snap.combine ($Snap.first $t@543@00) ($Snap.second $t@543@00))))
(assert (= ($Snap.first $t@543@00) $Snap.unit))
; [eval] 0 <= start_V0
(assert (<= 0 start_V0@541@00))
(assert (=
  ($Snap.second $t@543@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@543@00))
    ($Snap.second ($Snap.second $t@543@00)))))
(assert (= ($Snap.first ($Snap.second $t@543@00)) $Snap.unit))
; [eval] start_V0 <= end_V0
(assert (<= start_V0@541@00 end_V0@542@00))
(assert (=
  ($Snap.second ($Snap.second $t@543@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@543@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@543@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@543@00))) $Snap.unit))
; [eval] end_V0 <= (scap(s_V0): Int)
; [eval] (scap(s_V0): Int)
(assert (<= end_V0@542@00 (scap<Int> s_V0@540@00)))
(declare-const i_V1@544@00 Int)
(push) ; 2
; [eval] start_V0 <= i_V1 && i_V1 < end_V0
; [eval] start_V0 <= i_V1
(push) ; 3
; [then-branch: 317 | start_V0@541@00 <= i_V1@544@00 | live]
; [else-branch: 317 | !(start_V0@541@00 <= i_V1@544@00) | live]
(push) ; 4
; [then-branch: 317 | start_V0@541@00 <= i_V1@544@00]
(assert (<= start_V0@541@00 i_V1@544@00))
; [eval] i_V1 < end_V0
(pop) ; 4
(push) ; 4
; [else-branch: 317 | !(start_V0@541@00 <= i_V1@544@00)]
(assert (not (<= start_V0@541@00 i_V1@544@00)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (<= start_V0@541@00 i_V1@544@00)) (<= start_V0@541@00 i_V1@544@00)))
(assert (and (< i_V1@544@00 end_V0@542@00) (<= start_V0@541@00 i_V1@544@00)))
; [eval] (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref)
; [eval] (sarray(s_V0): ShArray[Ref])
; [eval] sadd((soffset(s_V0): Int), i_V1)
; [eval] (soffset(s_V0): Int)
(push) ; 3
(assert (sadd%precondition $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00))
(pop) ; 3
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00))
(pop) ; 2
(declare-fun inv@545@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@544@00 Int)) (!
  (=>
    (and (< i_V1@544@00 end_V0@542@00) (<= start_V0@541@00 i_V1@544@00))
    (and
      (or
        (not (<= start_V0@541@00 i_V1@544@00))
        (<= start_V0@541@00 i_V1@544@00))
      (sadd%precondition $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00)))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@544@00 Int)) (!
  (=>
    (and (< i_V1@544@00 end_V0@542@00) (<= start_V0@541@00 i_V1@544@00))
    (sadd%precondition $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00)))
  :qid |quant-u-391|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@545@00 r) end_V0@542@00) (<= start_V0@541@00 (inv@545@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> s_V0@540@00) (inv@545@00 r)))
  :pattern ((inv@545@00 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@544@00 Int)) (!
  (=>
    (and (< i_V1@544@00 end_V0@542@00) (<= start_V0@541@00 i_V1@544@00))
    (=
      (inv@545@00 (ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00)))
      i_V1@544@00))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00)))
  :qid |quant-u-391|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@545@00 r) end_V0@542@00) (<= start_V0@541@00 (inv@545@00 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) (inv@545@00 r)))
      r))
  :pattern ((inv@545@00 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@544@00 Int)) (!
  (=>
    (and (< i_V1@544@00 end_V0@542@00) (<= start_V0@541@00 i_V1@544@00))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> s_V0@540@00) (sadd $Snap.unit (soffset<Int> s_V0@540@00) i_V1@544@00)))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(pop) ; 1
; ---------- PathPoolMemExceptOne_840d9458_F ----------
(declare-const pathPool_V0@546@00 Slice<Ref>)
(declare-const pathPoolRaw_V0@547@00 Tuple2<Ref~_Types>)
(declare-const pathType_V0@548@00 Int)
(push) ; 1
(declare-const $t@549@00 $Snap)
(assert (= $t@549@00 ($Snap.combine ($Snap.first $t@549@00) ($Snap.second $t@549@00))))
(assert (= ($Snap.first $t@549@00) $Snap.unit))
; [eval] !(pathPool_V0 == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$())
; [eval] pathPool_V0 == sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
; [eval] sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$()
(push) ; 2
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(pop) ; 2
; Joined path conditions
(assert (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
(assert (not
  (=
    pathPool_V0@546@00
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))
(assert (=
  ($Snap.second $t@549@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@549@00))
    ($Snap.second ($Snap.second $t@549@00)))))
(assert (= ($Snap.first ($Snap.second $t@549@00)) $Snap.unit))
; [eval] (slen(pathPool_V0): Int) == 4
; [eval] (slen(pathPool_V0): Int)
(assert (= (slen<Int> pathPool_V0@546@00) 4))
(assert (=
  ($Snap.second ($Snap.second $t@549@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@549@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 0)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@549@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@549@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@549@00))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 0)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second $t@549@00))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == Path_4cddb96f_T_Types()
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 0)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 0)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second $t@549@00))))))
(pop) ; 2
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second $t@549@00))))))
; [eval] Path_4cddb96f_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second $t@549@00)))))
  (as Path_4cddb96f_T_Types<Types>  Types)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c385169_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 2
(pop) ; 2
; Joined path conditions
(push) ; 2
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
(pop) ; 2
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
; [eval] !(pathType_V0 == 2)
; [eval] pathType_V0 == 2
(push) ; 2
(set-option :timeout 10)
(assert (not (= pathType_V0@548@00 2)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (not (= pathType_V0@548@00 2))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | pathType_V0@548@00 != 2 | live]
; [else-branch: 318 | pathType_V0@548@00 == 2 | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 318 | pathType_V0@548@00 != 2]
(assert (not (= pathType_V0@548@00 2)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 2)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 2)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 3
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
(pop) ; 3
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
(pop) ; 3
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
; [eval] !(pathType_V0 == 1)
; [eval] pathType_V0 == 1
(push) ; 3
(set-option :timeout 10)
(assert (not (= pathType_V0@548@00 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= pathType_V0@548@00 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | pathType_V0@548@00 != 1 | live]
; [else-branch: 319 | pathType_V0@548@00 == 1 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 319 | pathType_V0@548@00 != 1]
(assert (not (= pathType_V0@548@00 1)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
(pop) ; 4
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))))
; [eval] !(pathType_V0 == 3)
; [eval] pathType_V0 == 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= pathType_V0@548@00 3)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= pathType_V0@548@00 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | pathType_V0@548@00 != 3 | live]
; [else-branch: 320 | pathType_V0@548@00 == 3 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 320 | pathType_V0@548@00 != 3]
(assert (not (= pathType_V0@548@00 3)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    pathPoolRaw_V0@547@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00) | live]
; [else-branch: 321 | !(pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 321 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)]
(assert (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 321 | !(pathType_V0@548@00 < slen[Int](pathPool_V0@546@00))]
(assert (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 320 | pathType_V0@548@00 == 3]
(assert (= pathType_V0@548@00 3))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    pathPoolRaw_V0@547@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00) | live]
; [else-branch: 322 | !(pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 322 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)]
(assert (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 319 | pathType_V0@548@00 == 1]
(assert (= pathType_V0@548@00 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
(pop) ; 4
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))))
; [eval] !(pathType_V0 == 3)
; [eval] pathType_V0 == 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= pathType_V0@548@00 3)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= pathType_V0@548@00 3))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | pathType_V0@548@00 != 3 | live]
; [else-branch: 323 | pathType_V0@548@00 == 3 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 323 | pathType_V0@548@00 != 3]
(assert (not (= pathType_V0@548@00 3)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    pathPoolRaw_V0@547@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00) | live]
; [else-branch: 324 | !(pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 324 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)]
(assert (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [else-branch: 318 | pathType_V0@548@00 == 2]
(assert (= pathType_V0@548@00 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 3
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
(pop) ; 3
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
(pop) ; 3
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
; [eval] !(pathType_V0 == 1)
; [eval] pathType_V0 == 1
(push) ; 3
(set-option :timeout 10)
(assert (not (= pathType_V0@548@00 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= pathType_V0@548@00 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | pathType_V0@548@00 != 1 | live]
; [else-branch: 325 | pathType_V0@548@00 == 1 | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 325 | pathType_V0@548@00 != 1]
(assert (not (= pathType_V0@548@00 1)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 1)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 1)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> pathPool_V0@546@00) (sadd $Snap.unit (soffset<Int> pathPool_V0@546@00) 3))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  $Snap.unit))
; [eval] !((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$ == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  $Snap.unit))
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] typeOfInterface_Y$558431e4_a6ceb89d_((ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref).DefinedPath_a6ceb89d_T$$$$_E_$$$)
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
(pop) ; 4
; Joined path conditions
(assert (typeOfInterface_Y$558431e4_a6ceb89d_%precondition $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(assert (=
  (typeOfInterface_Y$558431e4_a6ceb89d_ $Snap.unit ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))))
; [eval] !(pathType_V0 == 3)
; [eval] pathType_V0 == 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= pathType_V0@548@00 3)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= pathType_V0@548@00 3))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | pathType_V0@548@00 != 3 | live]
; [else-branch: 326 | pathType_V0@548@00 == 3 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 326 | pathType_V0@548@00 != 3]
(assert (not (= pathType_V0@548@00 3)))
; [eval] (ShArrayloc((sarray(pathPool_V0): ShArray[Ref]), sadd((soffset(pathPool_V0): Int), 3)): Ref)
; [eval] (sarray(pathPool_V0): ShArray[Ref])
; [eval] sadd((soffset(pathPool_V0): Int), 3)
; [eval] (soffset(pathPool_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00))))))))))))))))))
  $Snap.unit))
; [eval] !(pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] pathPoolRaw_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    pathPoolRaw_V0@547@00
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
; [eval] pathType_V0 < (slen(pathPool_V0): Int)
; [eval] (slen(pathPool_V0): Int)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00) | live]
; [else-branch: 327 | !(pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 327 | pathType_V0@548@00 < slen[Int](pathPool_V0@546@00)]
(assert (< pathType_V0@548@00 (slen<Int> pathPool_V0@546@00)))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@549@00)))))))))))))))
  pathPoolRaw_V0@547@00)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- dynamic_pred_6 ----------
(declare-const i@550@00 Tuple2<Ref~_Types>)
(declare-const x0@551@00 Slice<Ref>)
(set-option :timeout 0)
(push) ; 1
; [eval] (get1of2(i): Types) == Path_4cddb96f_T_Types()
; [eval] (get1of2(i): Types)
; [eval] Path_4cddb96f_T_Types()
(push) ; 2
(set-option :timeout 10)
(assert (not (not (= (get1of2<Types> i@550@00) (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (get1of2<Types> i@550@00) (as Path_4cddb96f_T_Types<Types>  Types))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | get1of2[Types](i@550@00) == Path_4cddb96f_T_Types[Types] | live]
; [else-branch: 328 | get1of2[Types](i@550@00) != Path_4cddb96f_T_Types[Types] | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 328 | get1of2[Types](i@550@00) == Path_4cddb96f_T_Types[Types]]
(assert (= (get1of2<Types> i@550@00) (as Path_4cddb96f_T_Types<Types>  Types)))
(declare-const $t@552@00 $Snap)
(assert (= $t@552@00 $Snap.unit))
; [eval] (slen(x0): Int) == 0
; [eval] (slen(x0): Int)
(assert (= (slen<Int> x0@551@00) 0))
(pop) ; 2
(push) ; 2
; [else-branch: 328 | get1of2[Types](i@550@00) != Path_4cddb96f_T_Types[Types]]
(assert (not (= (get1of2<Types> i@550@00) (as Path_4cddb96f_T_Types<Types>  Types))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_4cddb96f_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_4cddb96f_T_Types())
; [eval] Path_4cddb96f_T_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | get1of2[Types](i@550@00) == pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
; [else-branch: 329 | get1of2[Types](i@550@00) != pointer_Types[Types](Path_4cddb96f_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 329 | get1of2[Types](i@550@00) == pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types))))
(declare-const $t@553@00 $Snap)
(assert (= $t@553@00 ($Snap.combine ($Snap.first $t@553@00) ($Snap.second $t@553@00))))
(assert (= ($Snap.first $t@553@00) $Snap.unit))
; [eval] (let fn$$0 == ((unbox_Poly((get0of2(i): Ref)): ShStruct0)) in true)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct0)
; [eval] (get0of2(i): Ref)
(declare-const letvar@554@00 ShStruct0)
(assert (= (as letvar@554@00  ShStruct0) (unbox_Poly<ShStruct0> (get0of2<Ref> i@550@00))))
(assert (= ($Snap.second $t@553@00) $Snap.unit))
; [eval] (slen(x0): Int) == 0
; [eval] (slen(x0): Int)
(assert (= (slen<Int> x0@551@00) 0))
(pop) ; 3
(push) ; 3
; [else-branch: 329 | get1of2[Types](i@550@00) != pointer_Types[Types](Path_4cddb96f_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Path_4cddb96f_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(rawPath_a6ceb89d_T_Types())
; [eval] rawPath_a6ceb89d_T_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | get1of2[Types](i@550@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
; [else-branch: 330 | get1of2[Types](i@550@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 330 | get1of2[Types](i@550@00) == pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
(declare-const $t@555@00 $Snap)
(assert (= $t@555@00 ($Snap.combine ($Snap.first $t@555@00) ($Snap.second $t@555@00))))
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first $t@555@00)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@555@00))
    ($Snap.second ($Snap.first $t@555@00)))))
; [eval] (ShStructget0of2(fn$$1): Ref)
(assert (not
  (=
    (ShStructget0of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
; [eval] (ShStructget1of2(fn$$1): Ref)
(assert (not
  (=
    (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (= ($Snap.second $t@555@00) $Snap.unit))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == x0
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@555@00)))
  x0@551@00))
(pop) ; 4
(push) ; 4
; [else-branch: 330 | get1of2[Types](i@550@00) != pointer_Types[Types](rawPath_a6ceb89d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c385169_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c385169_T_Types())
; [eval] Path_c385169_T_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | get1of2[Types](i@550@00) == pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
; [else-branch: 331 | get1of2[Types](i@550@00) != pointer_Types[Types](Path_c385169_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 331 | get1of2[Types](i@550@00) == pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
(declare-const $t@556@00 $Snap)
(assert (= $t@556@00 ($Snap.combine ($Snap.first $t@556@00) ($Snap.second $t@556@00))))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first $t@556@00)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@556@00))
    ($Snap.second ($Snap.first $t@556@00)))))
; [eval] (ShStructget0of4(fn$$2): Ref)
(declare-const sm@557@00 $FVF<Bool$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Bool$$$$_E_$$$ (as sm@557@00  $FVF<Bool$$$$_E_$$$>) (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.first $t@556@00)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
    (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  (not
    (=
      (ShStructget0of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.first $t@556@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@556@00)))
    ($Snap.second ($Snap.second ($Snap.first $t@556@00))))))
; [eval] (ShStructget1of4(fn$$2): Ref)
(declare-const sm@558@00 $FVF<Bool$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Bool$$$$_E_$$$ (as sm@558@00  $FVF<Bool$$$$_E_$$$>) (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.first $t@556@00))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
    (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  (not
    (=
      (ShStructget1of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@556@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@556@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@556@00)))))))
; [eval] (ShStructget2of4(fn$$2): Ref)
(declare-const sm@559@00 $FVF<Intuint16$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint16$$$$_E_$$$ (as sm@559@00  $FVF<Intuint16$$$$_E_$$$>) (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@556@00)))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
    (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  (not
    (=
      (ShStructget2of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      $Ref.null))))
; [eval] (ShStructget3of4(fn$$2): Ref)
(declare-const sm@560@00 $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (as sm@560@00  $FVF<Intuint32$$$$_E_$$$>) (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@556@00)))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
    (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  (not
    (=
      (ShStructget3of4<Ref> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@556@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@556@00))
    ($Snap.second ($Snap.second $t@556@00)))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (get0of2(i): Ref)
(declare-const sm@561@00 $PSF<Mem_a6ceb89d_PMHopField>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_Mem_a6ceb89d_PMHopField (as sm@561@00  $PSF<Mem_a6ceb89d_PMHopField>) ($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  ($Snap.first ($Snap.second $t@556@00))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))
      (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
    $Perm.Write
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second $t@556@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@556@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@556@00))))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct4[Ref, Ref, Ref, Ref], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (get0of2(i): Ref)
(declare-const sm@562@00 $PSF<Mem_a6ceb89d_PMHopField>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_Mem_a6ceb89d_PMHopField (as sm@562@00  $PSF<Mem_a6ceb89d_PMHopField>) ($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))))
  ($Snap.first ($Snap.second ($Snap.second $t@556@00)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00)))
      (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> i@550@00))))
    $Perm.Write
    $Perm.No)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@556@00))) $Snap.unit))
; [eval] 32 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 32 (slen<Int> x0@551@00)))
(pop) ; 5
(push) ; 5
; [else-branch: 331 | get1of2[Types](i@550@00) != pointer_Types[Types](Path_c385169_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Path_c6e60a1d_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Path_c6e60a1d_T_Types())
; [eval] Path_c6e60a1d_T_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | get1of2[Types](i@550@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
; [else-branch: 332 | get1of2[Types](i@550@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 332 | get1of2[Types](i@550@00) == pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
(declare-const $t@563@00 $Snap)
(assert (= $t@563@00 ($Snap.combine ($Snap.first $t@563@00) ($Snap.second $t@563@00))))
; [eval] (ShStructget0of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): ShStruct2[Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.first $t@563@00)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@563@00))
    ($Snap.second ($Snap.first $t@563@00)))))
; [eval] (ShStructget0of2(fn$$3): Ref)
(declare-const sm@564@00 $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (as sm@564@00  $FVF<Intuint32$$$$_E_$$$>) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@563@00)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
    (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
  (not
    (=
      (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
      $Ref.null))))
; [eval] (ShStructget1of2(fn$$3): Ref)
(declare-const sm@565@00 $FVF<Intuint32$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intuint32$$$$_E_$$$ (as sm@565@00  $FVF<Intuint32$$$$_E_$$$>) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first $t@563@00)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
    (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
  (not
    (=
      (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@563@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@563@00))
    ($Snap.second ($Snap.second $t@563@00)))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@563@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@563@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (slen((ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@563@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@563@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))
  (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget2of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))))
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] (slen((ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@563@00)))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@563@00))))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))))
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget3of4<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))
  $Snap.unit))
; [eval] !((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 7
; Joined path conditions
(assert (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@563@00))))))))
  $Snap.unit))
; [eval] 16 <= (slen(x0): Int)
; [eval] (slen(x0): Int)
(assert (<= 16 (slen<Int> x0@551@00)))
; [eval] (tuple2((box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref), pointer_Types(Raw_daeaf66a_T_Types())): Tuple2[Ref, Types])
; [eval] (box_Poly((ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref).PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget3of4((unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct4[ShStruct2[Ref, Ref], Ref, Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
; [eval] ssliceFromSlice_Ref(x0, 16, (slen(x0): Int))
; [eval] (slen(x0): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 8
(assert (not (<= (slen<Int> x0@551@00) (scap<Int> x0@551@00))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= (slen<Int> x0@551@00) (scap<Int> x0@551@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@551@00 16 (slen<Int> x0@551@00)))
(pop) ; 7
; Joined path conditions
(assert (and
  (<= (slen<Int> x0@551@00) (scap<Int> x0@551@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@551@00 16 (slen<Int> x0@551@00))))
(pop) ; 6
(push) ; 6
; [else-branch: 332 | get1of2[Types](i@550@00) != pointer_Types[Types](Path_c6e60a1d_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Decoded_daeaf66a_T_Types())
; [eval] Decoded_daeaf66a_T_Types()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | get1of2[Types](i@550@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
; [else-branch: 333 | get1of2[Types](i@550@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 333 | get1of2[Types](i@550@00) == pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
(declare-const $t@566@00 $Snap)
(assert (= $t@566@00 ($Snap.combine ($Snap.first $t@566@00) ($Snap.second $t@566@00))))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second $t@566@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@566@00))
    ($Snap.second ($Snap.second $t@566@00)))))
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@566@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@566@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@566@00))) $Snap.unit))
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])) <= 3
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(declare-const $k@567@00 $Perm)
(assert ($Perm.isReadVar $k@567@00))
(assert (< $k@567@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@567@00)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@567@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (getNumINF_daeaf66a_PMBase%precondition ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@567@00))
(assert (and
  (< $k@567@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@567@00))
  (getNumINF_daeaf66a_PMBase%precondition ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00))))))
(assert (<=
  (getNumINF_daeaf66a_PMBase ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@566@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@566@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@566@00))))
  $Snap.unit))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] getNumINF_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@568@00 $Perm)
(assert ($Perm.isReadVar $k@568@00))
(assert (< $k@568@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@568@00)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@568@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@568@00))
(assert (and (< $k@568@00 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@568@00))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))
  (getNumINF_daeaf66a_PMBase ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))
(declare-const i_V1@569@00 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 9
; [then-branch: 334 | 0 <= i_V1@569@00 | live]
; [else-branch: 334 | !(0 <= i_V1@569@00) | live]
(push) ; 10
; [then-branch: 334 | 0 <= i_V1@569@00]
(assert (<= 0 i_V1@569@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 11
; [then-branch: 335 | i_V1@569@00 < slen[Int](First:(Second:($t@566@00))) | live]
; [else-branch: 335 | !(i_V1@569@00 < slen[Int](First:(Second:($t@566@00)))) | live]
(push) ; 12
; [then-branch: 335 | i_V1@569@00 < slen[Int](First:(Second:($t@566@00)))]
(assert (<
  i_V1@569@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 13
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))
(pop) ; 13
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))
(declare-fun letvar@570@00 (Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@570@00 i_V1@569@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))))
(pop) ; 12
(push) ; 12
; [else-branch: 335 | !(i_V1@569@00 < slen[Int](First:(Second:($t@566@00))))]
(assert (not
  (<
    i_V1@569@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (<
    i_V1@569@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (and
    (<
      i_V1@569@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)
    (=
      (letvar@570@00 i_V1@569@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@569@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
  (<
    i_V1@569@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 334 | !(0 <= i_V1@569@00)]
(assert (not (<= 0 i_V1@569@00)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<= 0 i_V1@569@00)
  (and
    (<= 0 i_V1@569@00)
    (=>
      (<
        i_V1@569@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (and
        (<
          i_V1@569@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)
        (=
          (letvar@570@00 i_V1@569@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))))
    (or
      (not
        (<
          i_V1@569@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
      (<
        i_V1@569@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@569@00)) (<= 0 i_V1@569@00)))
(assert (and
  (<
    i_V1@569@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (<= 0 i_V1@569@00)))
; [eval] (ShStructget0of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))
(pop) ; 8
(declare-fun inv@571@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@569@00 Int)) (!
  (=>
    (and
      (<
        i_V1@569@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@569@00))
    (and
      (=>
        (<= 0 i_V1@569@00)
        (and
          (<= 0 i_V1@569@00)
          (=>
            (<
              i_V1@569@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
            (and
              (<
                i_V1@569@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)
              (=
                (letvar@570@00 i_V1@569@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))))
          (or
            (not
              (<
                i_V1@569@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
            (<
              i_V1@569@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))))
      (or (not (<= 0 i_V1@569@00)) (<= 0 i_V1@569@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@569@00 Int)) (!
  (=>
    (and
      (<
        i_V1@569@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@569@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))
  :qid |quant-u-393|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@571@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@571@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@571@00 r)))
  :pattern ((inv@571@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@569@00 Int)) (!
  (=>
    (and
      (<
        i_V1@569@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@569@00))
    (=
      (inv@571@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00))))
      i_V1@569@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))
  :qid |quant-u-393|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@571@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@571@00 r)))
    (=
      (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@571@00 r))))
      r))
  :pattern ((inv@571@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@569@00 Int)) (!
  (=>
    (and
      (<
        i_V1@569@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@569@00))
    (not
      (=
        (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@569@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))))
(declare-const i_V1@572@00 Int)
(push) ; 8
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 9
; [then-branch: 336 | 0 <= i_V1@572@00 | live]
; [else-branch: 336 | !(0 <= i_V1@572@00) | live]
(push) ; 10
; [then-branch: 336 | 0 <= i_V1@572@00]
(assert (<= 0 i_V1@572@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 11
; [then-branch: 337 | i_V1@572@00 < slen[Int](First:(Second:($t@566@00))) | live]
; [else-branch: 337 | !(i_V1@572@00 < slen[Int](First:(Second:($t@566@00)))) | live]
(push) ; 12
; [then-branch: 337 | i_V1@572@00 < slen[Int](First:(Second:($t@566@00)))]
(assert (<
  i_V1@572@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 13
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))
(pop) ; 13
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))
(declare-fun letvar@573@00 (Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@573@00 i_V1@572@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))))
(pop) ; 12
(push) ; 12
; [else-branch: 337 | !(i_V1@572@00 < slen[Int](First:(Second:($t@566@00))))]
(assert (not
  (<
    i_V1@572@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (<
    i_V1@572@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (and
    (<
      i_V1@572@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)
    (=
      (letvar@573@00 i_V1@572@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@572@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
  (<
    i_V1@572@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 336 | !(0 <= i_V1@572@00)]
(assert (not (<= 0 i_V1@572@00)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<= 0 i_V1@572@00)
  (and
    (<= 0 i_V1@572@00)
    (=>
      (<
        i_V1@572@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (and
        (<
          i_V1@572@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)
        (=
          (letvar@573@00 i_V1@572@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))))
    (or
      (not
        (<
          i_V1@572@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
      (<
        i_V1@572@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@572@00)) (<= 0 i_V1@572@00)))
(assert (and
  (<
    i_V1@572@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (<= 0 i_V1@572@00)))
; [eval] (ShStructget1of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))
(pop) ; 8
(declare-fun inv@574@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@572@00 Int)) (!
  (=>
    (and
      (<
        i_V1@572@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@572@00))
    (and
      (=>
        (<= 0 i_V1@572@00)
        (and
          (<= 0 i_V1@572@00)
          (=>
            (<
              i_V1@572@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
            (and
              (<
                i_V1@572@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)
              (=
                (letvar@573@00 i_V1@572@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))))
          (or
            (not
              (<
                i_V1@572@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
            (<
              i_V1@572@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))))
      (or (not (<= 0 i_V1@572@00)) (<= 0 i_V1@572@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))
  :qid |Bool$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@572@00 Int)) (!
  (=>
    (and
      (<
        i_V1@572@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@572@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))
  :qid |quant-u-395|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@574@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@574@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@574@00 r)))
  :pattern ((inv@574@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@572@00 Int)) (!
  (=>
    (and
      (<
        i_V1@572@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@572@00))
    (=
      (inv@574@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00))))
      i_V1@572@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))
  :qid |quant-u-395|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@574@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@574@00 r)))
    (=
      (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@574@00 r))))
      r))
  :pattern ((inv@574@00 r))
  :qid |Bool$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@572@00 Int)) (!
  (=>
    (and
      (<
        i_V1@572@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@572@00))
    (not
      (=
        (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@572@00)))
  :qid |Bool$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))
(declare-const i_V1@575@00 Int)
(push) ; 8
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 9
; [then-branch: 338 | 0 <= i_V1@575@00 | live]
; [else-branch: 338 | !(0 <= i_V1@575@00) | live]
(push) ; 10
; [then-branch: 338 | 0 <= i_V1@575@00]
(assert (<= 0 i_V1@575@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 11
; [then-branch: 339 | i_V1@575@00 < slen[Int](First:(Second:($t@566@00))) | live]
; [else-branch: 339 | !(i_V1@575@00 < slen[Int](First:(Second:($t@566@00)))) | live]
(push) ; 12
; [then-branch: 339 | i_V1@575@00 < slen[Int](First:(Second:($t@566@00)))]
(assert (<
  i_V1@575@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 13
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))
(pop) ; 13
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))
(declare-fun letvar@576@00 (Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@576@00 i_V1@575@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))))
(pop) ; 12
(push) ; 12
; [else-branch: 339 | !(i_V1@575@00 < slen[Int](First:(Second:($t@566@00))))]
(assert (not
  (<
    i_V1@575@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (<
    i_V1@575@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (and
    (<
      i_V1@575@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)
    (=
      (letvar@576@00 i_V1@575@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@575@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
  (<
    i_V1@575@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 338 | !(0 <= i_V1@575@00)]
(assert (not (<= 0 i_V1@575@00)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<= 0 i_V1@575@00)
  (and
    (<= 0 i_V1@575@00)
    (=>
      (<
        i_V1@575@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (and
        (<
          i_V1@575@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)
        (=
          (letvar@576@00 i_V1@575@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))))
    (or
      (not
        (<
          i_V1@575@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
      (<
        i_V1@575@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@575@00)) (<= 0 i_V1@575@00)))
(assert (and
  (<
    i_V1@575@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (<= 0 i_V1@575@00)))
; [eval] (ShStructget2of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))
(pop) ; 8
(declare-fun inv@577@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@575@00 Int)) (!
  (=>
    (and
      (<
        i_V1@575@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@575@00))
    (and
      (=>
        (<= 0 i_V1@575@00)
        (and
          (<= 0 i_V1@575@00)
          (=>
            (<
              i_V1@575@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
            (and
              (<
                i_V1@575@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)
              (=
                (letvar@576@00 i_V1@575@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))))
          (or
            (not
              (<
                i_V1@575@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
            (<
              i_V1@575@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))))
      (or (not (<= 0 i_V1@575@00)) (<= 0 i_V1@575@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))
  :qid |Intuint16$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@575@00 Int)) (!
  (=>
    (and
      (<
        i_V1@575@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@575@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))
  :qid |quant-u-397|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@577@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@577@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@577@00 r)))
  :pattern ((inv@577@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@575@00 Int)) (!
  (=>
    (and
      (<
        i_V1@575@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@575@00))
    (=
      (inv@577@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00))))
      i_V1@575@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))
  :qid |quant-u-397|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@577@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@577@00 r)))
    (=
      (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@577@00 r))))
      r))
  :pattern ((inv@577@00 r))
  :qid |Intuint16$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@575@00 Int)) (!
  (=>
    (and
      (<
        i_V1@575@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@575@00))
    (not
      (=
        (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@575@00)))
  :qid |Intuint16$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))))))
(declare-const i_V1@578@00 Int)
(push) ; 8
; [eval] 0 <= i_V1 && (i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) && (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true))
; [eval] 0 <= i_V1
(push) ; 9
; [then-branch: 340 | 0 <= i_V1@578@00 | live]
; [else-branch: 340 | !(0 <= i_V1@578@00) | live]
(push) ; 10
; [then-branch: 340 | 0 <= i_V1@578@00]
(assert (<= 0 i_V1@578@00))
; [eval] i_V1 < (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 11
; [then-branch: 341 | i_V1@578@00 < slen[Int](First:(Second:($t@566@00))) | live]
; [else-branch: 341 | !(i_V1@578@00 < slen[Int](First:(Second:($t@566@00)))) | live]
(push) ; 12
; [then-branch: 341 | i_V1@578@00 < slen[Int](First:(Second:($t@566@00)))]
(assert (<
  i_V1@578@00
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
; [eval] (let fn$$4 == ((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])) in true)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 13
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))
(pop) ; 13
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))
(declare-fun letvar@579@00 (Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (=
  (letvar@579@00 i_V1@578@00)
  (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))))
(pop) ; 12
(push) ; 12
; [else-branch: 341 | !(i_V1@578@00 < slen[Int](First:(Second:($t@566@00))))]
(assert (not
  (<
    i_V1@578@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (<
    i_V1@578@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (and
    (<
      i_V1@578@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)
    (=
      (letvar@579@00 i_V1@578@00)
      (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@578@00
      (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
  (<
    i_V1@578@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 340 | !(0 <= i_V1@578@00)]
(assert (not (<= 0 i_V1@578@00)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<= 0 i_V1@578@00)
  (and
    (<= 0 i_V1@578@00)
    (=>
      (<
        i_V1@578@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (and
        (<
          i_V1@578@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
        (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)
        (=
          (letvar@579@00 i_V1@578@00)
          (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))))
    (or
      (not
        (<
          i_V1@578@00
          (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
      (<
        i_V1@578@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@578@00)) (<= 0 i_V1@578@00)))
(assert (and
  (<
    i_V1@578@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
  (<= 0 i_V1@578@00)))
; [eval] (ShStructget3of4((ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])): Ref)
; [eval] (ShArrayloc((sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]]), sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)): ShStruct4[Ref, Ref, Ref, Ref])
; [eval] (sarray((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct4[Ref, Ref, Ref, Ref]])
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V1)
; [eval] (soffset((ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedInfoField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))
(pop) ; 8
(declare-fun inv@580@00 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@578@00 Int)) (!
  (=>
    (and
      (<
        i_V1@578@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@578@00))
    (and
      (=>
        (<= 0 i_V1@578@00)
        (and
          (<= 0 i_V1@578@00)
          (=>
            (<
              i_V1@578@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
            (and
              (<
                i_V1@578@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
              (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)
              (=
                (letvar@579@00 i_V1@578@00)
                (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))))
          (or
            (not
              (<
                i_V1@578@00
                (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))
            (<
              i_V1@578@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00))))))))
      (or (not (<= 0 i_V1@578@00)) (<= 0 i_V1@578@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))
  :qid |Intuint32$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@578@00 Int)) (!
  (=>
    (and
      (<
        i_V1@578@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@578@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))
  :qid |quant-u-399|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@580@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@580@00 r)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@580@00 r)))
  :pattern ((inv@580@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@578@00 Int)) (!
  (=>
    (and
      (<
        i_V1@578@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@578@00))
    (=
      (inv@580@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00))))
      i_V1@578@00))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))
  :qid |quant-u-399|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@580@00 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 (inv@580@00 r)))
    (=
      (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (inv@580@00 r))))
      r))
  :pattern ((inv@580@00 r))
  :qid |Intuint32$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@578@00 Int)) (!
  (=>
    (and
      (<
        i_V1@578@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))))
      (<= 0 i_V1@578@00))
    (not
      (=
        (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))
        $Ref.null)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second $t@566@00)))) i_V1@578@00)))
  :qid |Intuint32$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget2of3<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))
  $Snap.unit))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int) == getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] getNumHops_daeaf66a_PMBase((ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 8
(declare-const $k@581@00 $Perm)
(assert ($Perm.isReadVar $k@581@00))
(assert (< $k@581@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@581@00)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@581@00)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (getNumHops_daeaf66a_PMBase%precondition ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00)))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@581@00))
(assert (and
  (< $k@581@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@581@00))
  (getNumHops_daeaf66a_PMBase%precondition ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00)))))))))))
  (getNumHops_daeaf66a_PMBase ($Snap.first $t@566@00) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> i@550@00))))))
(declare-const i_V2@582@00 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i_V2 && i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V2
(push) ; 9
; [then-branch: 342 | 0 <= i_V2@582@00 | live]
; [else-branch: 342 | !(0 <= i_V2@582@00) | live]
(push) ; 10
; [then-branch: 342 | 0 <= i_V2@582@00]
(assert (<= 0 i_V2@582@00))
; [eval] i_V2 < (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(pop) ; 10
(push) ; 10
; [else-branch: 342 | !(0 <= i_V2@582@00)]
(assert (not (<= 0 i_V2@582@00)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V2@582@00)) (<= 0 i_V2@582@00)))
(assert (and
  (<
    i_V2@582@00
    (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
  (<= 0 i_V2@582@00)))
; [eval] (ShArrayloc((sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]), sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
; [eval] (sarray((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): ShArray[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]])
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
; [eval] sadd((soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int), i_V2)
; [eval] (soffset((ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref).SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget2of3((unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct3[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref, Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00))
(pop) ; 9
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00))
(pop) ; 8
(declare-fun inv@583@00 (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@582@00 Int)) (!
  (=>
    (and
      (<
        i_V2@582@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
      (<= 0 i_V2@582@00))
    (and
      (or (not (<= 0 i_V2@582@00)) (<= 0 i_V2@582@00))
      (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00)))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00)))
  :qid |Mem_a6ceb89d_PMHopField-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V2@582@00 Int)) (!
  (=>
    (and
      (<
        i_V2@582@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
      (<= 0 i_V2@582@00))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00)))
  :qid |quant-u-401|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (<
        (inv@583@00 h_V0)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
      (<= 0 (inv@583@00 h_V0)))
    (sadd%precondition $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (inv@583@00 h_V0)))
  :pattern ((inv@583@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
(assert (forall ((i_V2@582@00 Int)) (!
  (=>
    (and
      (<
        i_V2@582@00
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
      (<= 0 i_V2@582@00))
    (=
      (inv@583@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00)))
      i_V2@582@00))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) i_V2@582@00)))
  :qid |quant-u-401|)))
(assert (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=>
    (and
      (<
        (inv@583@00 h_V0)
        (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))))
      (<= 0 (inv@583@00 h_V0)))
    (=
      (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@566@00))))))))))) (inv@583@00 h_V0)))
      h_V0))
  :pattern ((inv@583@00 h_V0))
  :qid |Mem_a6ceb89d_PMHopField-fctOfInv|)))
; Permissions are non-negative
(pop) ; 7
(push) ; 7
; [else-branch: 333 | get1of2[Types](i@550@00) != pointer_Types[Types](Decoded_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))))
; [eval] (get1of2(i): Types) == pointer_Types(Raw_daeaf66a_T_Types())
; [eval] (get1of2(i): Types)
; [eval] pointer_Types(Raw_daeaf66a_T_Types())
; [eval] Raw_daeaf66a_T_Types()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | get1of2[Types](i@550@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
; [else-branch: 343 | get1of2[Types](i@550@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 343 | get1of2[Types](i@550@00) == pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (=
  (get1of2<Types> i@550@00)
  (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
(declare-const $t@584@00 $Snap)
(assert (= $t@584@00 ($Snap.combine ($Snap.first $t@584@00) ($Snap.second $t@584@00))))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (=
  ($Snap.second $t@584@00)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@584@00))
    ($Snap.second ($Snap.second $t@584@00)))))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(assert (not
  (=
    (ShStructget1of2<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> i@550@00)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@584@00))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@584@00)))
    ($Snap.second ($Snap.second ($Snap.second $t@584@00))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@584@00))) $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) <= (slen(x0): Int)
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] (slen(x0): Int)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))
  (slen<Int> x0@551@00)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@584@00)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@584@00))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@584@00)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@584@00))))
  $Snap.unit))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] ssliceFromSlice_Ref(x0, 0, (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
; [eval] 0 <= i
; [eval] i <= j
(push) ; 10
(assert (not (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 10
(assert (not (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))
  (scap<Int> x0@551@00))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))
  (scap<Int> x0@551@00)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) x0@551@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))))
(pop) ; 9
; Joined path conditions
(assert (and
  (<=
    0
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00)))))
  (<=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))
    (scap<Int> x0@551@00))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@551@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00)))))))
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00)))
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) x0@551@00 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@584@00))))
  $Snap.unit))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (slen((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): Ref)
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
; [eval] Len_daeaf66a_PMBase((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref]))
; [eval] (ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])): ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref])
; [eval] (unbox_Poly((get0of2(i): Ref)): ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref])
; [eval] (get0of2(i): Ref)
(push) ; 9
(declare-const $k@585@00 $Perm)
(assert ($Perm.isReadVar $k@585@00))
(assert (< $k@585@00 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@585@00)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@585@00)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Len_daeaf66a_PMBase%precondition ($Snap.first $t@584@00) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> i@550@00)))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@585@00))
(assert (and
  (< $k@585@00 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@585@00))
  (Len_daeaf66a_PMBase%precondition ($Snap.first $t@584@00) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> i@550@00))))))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@584@00))))
  (Len_daeaf66a_PMBase ($Snap.first $t@584@00) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> i@550@00))))))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 343 | get1of2[Types](i@550@00) != pointer_Types[Types](Raw_daeaf66a_T_Types[Types])]
(assert (not
  (=
    (get1of2<Types> i@550@00)
    (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))))
(declare-const $t@586@00 $Snap)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- dynamic_pred_0_unknown ----------
(declare-const i@587@00 Tuple2<Ref~_Types>)
(declare-const x0@588@00 Slice<Ref>)
; ---------- ChecksumMem_840d9458_PMSCION ----------
(declare-const s_V0@589@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
; ---------- Mem_840d9458_PMHopByHopOption ----------
(declare-const o_V0@590@00 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-const _2325_V0@591@00 Int)
; ---------- Mem_a6ceb89d_PMHopField ----------
(declare-const h_V0@592@00 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
; ---------- Mem_840d9458_PMEndToEndOption ----------
(declare-const e_V0@593@00 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-const _2372_V0@594@00 Int)
; ---------- PathPoolMem_840d9458_F ----------
(declare-const pathPool_V0@595@00 Slice<Ref>)
(declare-const pathPoolRaw_V0@596@00 Tuple2<Ref~_Types>)
; ---------- ErrorMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ----------
(declare-const thisItf@597@00 Tuple2<Ref~_Types>)
; ---------- dynamic_pred_6_unknown ----------
(declare-const i@598@00 Tuple2<Ref~_Types>)
(declare-const x0@599@00 Slice<Ref>)
; ---------- dynamic_pred_2 ----------
(declare-const i@600@00 Tuple2<Ref~_Types>)
; ---------- Mem_b41831d7_SY$3e1378f2_b41831d7_ ----------
(declare-const thisItf@601@00 Tuple2<Ref~_Types>)
; ---------- Mem_840d9458_PMextnBase ----------
(declare-const e_V0@602@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-const ubuf_V0@603@00 Slice<Ref>)
; ---------- Mem_840d9458_PMBaseLayer ----------
(declare-const b_V0@604@00 ShStruct2<Ref~_Ref>)
(declare-const ub_V0@605@00 Slice<Ref>)
(declare-const breakPoint_V0@606@00 Int)
; ---------- MemWithoutUBuf_b41831d7_SY$3e1378f2_b41831d7_ ----------
(declare-const thisItf@607@00 Tuple2<Ref~_Types>)
(declare-const ub_V0@608@00 Slice<Ref>)
